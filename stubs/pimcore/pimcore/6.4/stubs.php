<?php
/**
  * Generated by Exakat 2.1.8 (Build 1139)
  * On 2020-09-09T14:41:39+00:00
  * See https://www.exakat.io/
  */

namespace  {
    define('PIMCORE_COMPOSER_PATH', '');
    define('PIMCORE_COMPOSER_FILE_PATH', '');
    define('PIMCORE_PATH', '');
    define('PIMCORE_APP_ROOT', '');
    define('PIMCORE_WEB_ROOT', '');
    define('PIMCORE_PRIVATE_VAR', '');
    define('PIMCORE_PUBLIC_VAR', '');
    define('PIMCORE_CLASS_DIRECTORY', '');
    define('PIMCORE_ASSET_DIRECTORY', '');
    define('PIMCORE_CUSTOM_CONFIGURATION_DIRECTORY', '');
    define('PIMCORE_CONFIGURATION_DIRECTORY', '');
    define('PIMCORE_VERSION_DIRECTORY', '');
    define('PIMCORE_LOG_DIRECTORY', '');
    define('PIMCORE_LOG_FILEOBJECT_DIRECTORY', '');
    define('PIMCORE_TEMPORARY_DIRECTORY', '');
    define('PIMCORE_CACHE_DIRECTORY', '');
    define('PIMCORE_CUSTOMLAYOUT_DIRECTORY', '');
    define('PIMCORE_RECYCLEBIN_DIRECTORY', '');
    define('PIMCORE_SYSTEM_TEMP_DIRECTORY', '');
    define('PIMCORE_LOG_MAIL_PERMANENT', '');
    define('PIMCORE_USERIMAGE_DIRECTORY', '');
    define('PIMCORE_PROJECT_ROOT', '');
    define('PIMCORE_SYMFONY_CACHE_DIRECTORY', '');
    define('PIMCORE_PHP_ERROR_LOG', '');
    define('PIMCORE_PHP_ERROR_REPORTING', '');
    define('PIMCORE_KERNEL_CLASS', '');
    /**
     * All of the Defines for the classes below.
     *
     * @author S.C. Chen <me578022@gmail.com>
     */
    define('HDOM_TYPE_ELEMENT', 1);
    define('HDOM_TYPE_COMMENT', 2);
    define('HDOM_TYPE_TEXT', 3);
    define('HDOM_TYPE_ENDTAG', 4);
    define('HDOM_TYPE_ROOT', 5);
    define('HDOM_TYPE_UNKNOWN', 6);
    define('HDOM_QUOTE_DOUBLE', 0);
    define('HDOM_QUOTE_SINGLE', 1);
    define('HDOM_QUOTE_NO', 3);
    define('HDOM_INFO_BEGIN', 0);
    define('HDOM_INFO_END', 1);
    define('HDOM_INFO_QUOTE', 2);
    define('HDOM_INFO_SPACE', 3);
    define('HDOM_INFO_TEXT', 4);
    define('HDOM_INFO_INNER', 5);
    define('HDOM_INFO_OUTER', 6);
    define('HDOM_INFO_ENDSPACE', 7);
    define('DEFAULT_TARGET_CHARSET', 'UTF-8');
    define('DEFAULT_BR_TEXT', "\r\n");

    function xmlToArray($file) {}
    function gzcompressfile($source, $level = null, $target = null) {}
    function is_json($string) {}
    function foldersize($path) {}
    function replace_pcre_backreferences($string, $values) {}
    function array_htmlspecialchars($array) {}
    function in_arrayi(string $needle, array $haystack) {}
    function object2array($node) {}
    function array_urlencode($args) {}
    function array_toquerystring($args) {}
    function array_to_html_attribute_string($array) {}
    function urlencode_ignore_slash($var) {}
    function return_bytes($val) {}
    function formatBytes($bytes, $precision = 2) {}
    function filesize2bytes($str) {}
    function rscandir($base = '', $data = [ ]) {}
    function explode_and_trim($delimiter, $string = '', $limit = '', $useArrayFilter = true) {}
    function recursiveDelete($directory, $empty = true) {}
    function recursiveCopy($source, $destination) {}
    function p_r() {}
    function wrapArrayElements($array, $prefix = "'", $suffix = "'") {}
    function isAssocArray(array $arr) {}
    function resolvePath($filename) {}
    function closureHash(Closure $closure) {}
    function is_dir_empty($dir) {}
    function var_export_pretty($var, $indent = '') {}
    function to_php_data_file_format($contents, $comments = null) {}
    /**
     * @return string
     */
    function generateRandomSymfonySecret() {}
    function implode_recursive($array, $glue) {}
    function file_get_html($url, $use_include_path = false, $context = null, $offset = -1, $maxLen = -1, $lowercase = true, $forceTagsClosed = true, $target_charset = DEFAULT_TARGET_CHARSET, $stripRN = true, $defaultBRText = DEFAULT_BR_TEXT) {}
    function str_get_html($str, $lowercase = true, $forceTagsClosed = false, $target_charset = DEFAULT_TARGET_CHARSET, $stripRN = false, $defaultBRText = DEFAULT_BR_TEXT) {}
    function dump_html_tree($node, $show_attr = true, $deep = 0) {}
    /**
     * @return AdminerPimcore
     */
    function adminer_object() {}

    /**
     * simple html dom node
     * PaperG - added ability for "find" routine to lowercase the value of the selector.
     * PaperG - added $tag_start to track the start position of the tag in the total byte index
     *
     * @package PlaceLocalInclude
     */
    class simple_html_dom_node {
        public $nodetype;
        public $tag;
        public $attr;
        public $children;
        public $nodes;
        public $parent;
        public $_;
        public $tag_start;
        private $dom;

        public function __construct($dom) {}
        public function __destruct() {}
        public function __toString() {}
        public function clear() {}
        public function dump($show_attr = true, $deep = 0) {}
        public function dump_node() {}
        public function parent() {}
        public function children($idx = -1) {}
        public function first_child() {}
        public function last_child() {}
        public function next_sibling() {}
        public function prev_sibling() {}
        public function find_ancestor_tag($tag) {}
        public function innertext() {}
        public function outertext() {}
        public function text() {}
        public function xmltext() {}
        public function makeup() {}
        public function find($selector, $idx = null, $lowercase = false) {}
        protected function seek($selector, $ret, $lowercase = false) {}
        protected function match($exp, $pattern, $value) {}
        protected function parse_selector($selector_string) {}
        public function __get($name) {}
        public function __set($name, $value) {}
        public function __isset($name) {}
        public function __unset($name) {}
        public function convert_text($text) {}
        public function is_utf8($string) {}
        public function getAllAttributes() {}
        public function getAttribute($name) {}
        public function setAttribute($name, $value) {}
        public function hasAttribute($name) {}
        public function removeAttribute($name) {}
        public function getElementById($id) {}
        public function getElementsById($id, $idx = null) {}
        public function getElementByTagName($name) {}
        public function getElementsByTagName($name, $idx = null) {}
        public function parentNode() {}
        public function childNodes($idx = -1) {}
        public function firstChild() {}
        public function lastChild() {}
        public function nextSibling() {}
        public function previousSibling() {}
    }

    /**
     * simple html dom parser
     * Paperg - in the find routine: allow us to specify that we want case insensitive testing of the value of the selector.
     * Paperg - change $size from protected to public so we can easily access it
     * Paperg - added ForceTagsClosed in the constructor which tells us whether we trust the html or not.  Default is to NOT trust it.
     *
     * @package PlaceLocalInclude
     */
    class simple_html_dom {
        public $root;
        public $nodes;
        public $callback;
        public $lowercase;
        public $size;
        protected $pos;
        protected $doc;
        protected $char;
        protected $cursor;
        protected $parent;
        protected $noise;
        protected $token_blank;
        protected $token_equal;
        protected $token_slash;
        protected $token_attr;
        protected $_charset;
        protected $_target_charset;
        protected $default_br_text;
        protected $self_closing_tags;
        protected $block_tags;
        protected $optional_closing_tags;

        public function __construct($str = null, $lowercase = true, $forceTagsClosed = true, $target_charset = DEFAULT_TARGET_CHARSET, $stripRN = true, $defaultBRText = DEFAULT_BR_TEXT) {}
        public function __destruct() {}
        public function load($str, $lowercase = true, $stripRN = true, $defaultBRText = DEFAULT_BR_TEXT) {}
        public function load_file() {}
        public function set_callback($function_name) {}
        public function remove_callback() {}
        public function save($filepath = '') {}
        public function find($selector, $idx = null, $lowercase = false) {}
        public function clear() {}
        public function dump($show_attr = true) {}
        protected function prepare($str, $lowercase = true, $stripRN = true, $defaultBRText = DEFAULT_BR_TEXT) {}
        protected function parse() {}
        protected function parse_charset() {}
        protected function read_tag() {}
        protected function parse_attr($node, $name, $space) {}
        protected function link_nodes($node, $is_child) {}
        protected function as_text_node($tag) {}
        protected function skip($chars) {}
        protected function copy_skip($chars) {}
        protected function copy_until($chars) {}
        protected function copy_until_char($char) {}
        protected function copy_until_char_escape($char) {}
        protected function remove_noise($pattern, $remove_tag = false) {}
        public function restore_noise($text) {}
        public function __toString() {}
        public function __get($name) {}
        public function childNodes($idx = -1) {}
        public function firstChild() {}
        public function lastChild() {}
        public function getElementById($id) {}
        public function getElementsById($id, $idx = null) {}
        public function getElementByTagName($name) {}
        public function getElementsByTagName($name, $idx = -1) {}
        public function loadFile() {}
    }

    /**
     * Pimcore
     *
     * This source file is available under two different licenses:
     * - GNU General Public License version 3 (GPLv3)
     * - Pimcore Enterprise License (PEL)
     * Full copyright and license information is available in
     * LICENSE.md which is distributed with this source code.
     *
     * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)
     * @license    http://www.pimcore.org/license     GPLv3 and PEL
     */
    class Pimcore {
        /**
         * @var bool
         */
        static public $adminMode;
        /**
         * @var bool|null
         */
        static protected $debugMode;
        /**
         * @var bool|null
         */
        static protected $devMode;
        /**
         * @var bool
         */
        static private $inShutdown;
        /**
         * @var KernelInterface
         */
        static private $kernel;
        /**
         * @var \Composer\Autoload\ClassLoader
         */
        static private $autoloader;

        /**
         * @return bool
         */
        public static function inDebugMode() : bool {}
        /**
         * @internal
         *
         * @return bool|null
         */
        public static function getDebugMode() : ?bool {}
        public static function setDebugMode(bool $debugMode) : void {}
        /**
         * @return bool
         */
        public static function inDevMode() : bool {}
        /**
         * @internal
         *
         * @return bool|null
         */
        public static function getDevMode() : ?bool {}
        public static function setDevMode(bool $devMode) : void {}
        /**
         * switches pimcore into the admin mode - there you can access also unpublished elements, ....
         *
         * @static
         */
        public static function setAdminMode() {}
        /**
         * switches back to the non admin mode, where unpublished elements are invisible
         *
         * @static
         */
        public static function unsetAdminMode() {}
        /**
         * check if the process is currently in admin mode or not
         *
         * @static
         *
         * @return bool
         */
        public static function inAdmin() {}
        /**
         * @return bool
         */
        public static function isInstalled() {}
        /**
         * @return \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher
         */
        public static function getEventDispatcher() {}
        /**
         * @return KernelInterface
         */
        public static function getKernel() {}
        /**
         * @return bool
         */
        public static function hasKernel() {}
        public static function setKernel(KernelInterface $kernel) {}
        /**
         * Accessing the container this way is discouraged as dependencies should be wired through the container instead of
         * needing to access the container directly. This exists mainly for compatibility with legacy code.
         *
         * @internal
         *
         * @return ContainerInterface
         */
        public static function getContainer() {}
        /**
         * @return bool
         */
        public static function hasContainer() {}
        /**
         * @return \Composer\Autoload\ClassLoader
         */
        public static function getAutoloader() : \Composer\Autoload\ClassLoader {}
        public static function setAutoloader(\Composer\Autoload\ClassLoader $autoloader) {}
        public static function collectGarbage($keepItems = [ ]) {}
        /**
         * this method is called with register_shutdown_function() and writes all data queued into the cache
         *
         * @static
         */
        public static function shutdown() {}
        public static function disableMinifyJs() : bool {}
        public static function initLogger() {}
    }

    /**
     * RealObjects PDFreactor PHP Wrapper version 4
     * http://www.pdfreactor.com
     *
     * Released under the following license:
     *
     * The MIT License (MIT)
     *
     * Copyright (c) 2015-2017 RealObjects GmbH
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     */
    class PDFreactor {
        const VERSION = 0;

        public $url;
        public $headers;
        public $cookies;

        public function __construct($url = 'http://localhost:9423/service/rest') {}
        public function convert($config, $connectionSettings = null) {}
        public function convertAsBinary($config, $wh = null, $connectionSettings = null) {}
        public function convertAsync($config, $connectionSettings = null) {}
        public function getProgress($documentId, $connectionSettings = null) {}
        public function getDocument($documentId, $connectionSettings = null) {}
        public function getDocumentAsBinary($documentId, $wh = null, $connectionSettings = null) {}
        public function deleteDocument($documentId, $connectionSettings = null) {}
        public function getVersion($connectionSettings = null) {}
        public function getStatus($connectionSettings = null) {}
        public function getDocumentUrl($documentId) {}
        public function getProgressUrl($documentId) {}
        public function __get($name) {}
        public function getDocumentMetadata($documentId, $connectionSettings = null) {}
    }

    abstract class Cleanup {
        const NONE = 'NONE';
        const TAGSOUP = 'TAGSOUP';
        const CYBERNEKO = 'CYBERNEKO';
        const JTIDY = 'JTIDY';

    }

    abstract class ColorSpace {
        const CMYK = 'CMYK';
        const RGB = 'RGB';

    }

    abstract class Conformance {
        const PDF = 'PDF';
        const PDFA2A = 'PDFA2A';
        const PDFA2B = 'PDFA2B';
        const PDFA1A = 'PDFA1A';
        const PDFA1B = 'PDFA1B';
        const PDFA3B = 'PDFA3B';
        const PDFA3U = 'PDFA3U';
        const PDFA2U = 'PDFA2U';
        const PDFA3A = 'PDFA3A';
        const PDFX3_2003 = 'PDFX3_2003';
        const PDFX3_2002 = 'PDFX3_2002';
        const PDFX1A_2003 = 'PDFX1A_2003';
        const PDFX1A_2001 = 'PDFX1A_2001';
        const PDFX4 = 'PDFX4';
        const PDFUA1 = 'PDFUA1';
        const PDFA3A_PDFUA1 = 'PDFA3A_PDFUA1';
        const PDFA2A_PDFUA1 = 'PDFA2A_PDFUA1';
        const PDFA1A_PDFUA1 = 'PDFA1A_PDFUA1';
        const PDFX4P = 'PDFX4P';

    }

    abstract class Doctype {
        const XHTML = 'XHTML';
        const HTML5 = 'HTML5';
        const AUTODETECT = 'AUTODETECT';
        const XML = 'XML';

    }

    abstract class Encryption {
        const TYPE_128 = 'TYPE_128';
        const NONE = 'NONE';
        const TYPE_40 = 'TYPE_40';

    }

    abstract class ExceedingContentAgainst {
        const PARENT = 'PARENT';
        const PAGE_CONTENT = 'PAGE_CONTENT';
        const PAGE_BORDERS = 'PAGE_BORDERS';
        const NONE = 'NONE';

    }

    abstract class ExceedingContentAnalyze {
        const NONE = 'NONE';
        const CONTENT_AND_STATIC_BOXES = 'CONTENT_AND_STATIC_BOXES';
        const CONTENT_AND_BOXES = 'CONTENT_AND_BOXES';
        const CONTENT = 'CONTENT';

    }

    abstract class HttpsMode {
        const STRICT = 'STRICT';
        const LENIENT = 'LENIENT';

    }

    abstract class JavaScriptMode {
        const ENABLED_TIME_LAPSE = 'ENABLED_TIME_LAPSE';
        const ENABLED_REAL_TIME = 'ENABLED_REAL_TIME';
        const ENABLED_NO_LAYOUT = 'ENABLED_NO_LAYOUT';
        const ENABLED = 'ENABLED';
        const DISABLED = 'DISABLED';

    }

    abstract class KeystoreType {
        const PKCS12 = 'PKCS12';
        const JKS = 'JKS';

    }

    abstract class LogLevel {
        const WARN = 'WARN';
        const NONE = 'NONE';
        const PERFORMANCE = 'PERFORMANCE';
        const FATAL = 'FATAL';
        const INFO = 'INFO';
        const DEBUG = 'DEBUG';

    }

    abstract class MediaFeature {
        const HEIGHT = 'HEIGHT';
        const MONOCHROME = 'MONOCHROME';
        const DEVICE_WIDTH = 'DEVICE_WIDTH';
        const GRID = 'GRID';
        const DEVICE_ASPECT_RATIO = 'DEVICE_ASPECT_RATIO';
        const DEVICE_HEIGHT = 'DEVICE_HEIGHT';
        const COLOR = 'COLOR';
        const COLOR_INDEX = 'COLOR_INDEX';
        const ASPECT_RATIO = 'ASPECT_RATIO';
        const RESOLUTION = 'RESOLUTION';
        const ORIENTATION = 'ORIENTATION';
        const WIDTH = 'WIDTH';

    }

    abstract class MergeMode {
        const PREPEND = 'PREPEND';
        const ARRANGE = 'ARRANGE';
        const APPEND = 'APPEND';
        const OVERLAY_BELOW = 'OVERLAY_BELOW';
        const OVERLAY = 'OVERLAY';

    }

    abstract class OutputType {
        const TIFF_LZW = 'TIFF_LZW';
        const TIFF_PACKBITS = 'TIFF_PACKBITS';
        const TIFF_UNCOMPRESSED = 'TIFF_UNCOMPRESSED';
        const PNG_TRANSPARENT_AI = 'PNG_TRANSPARENT_AI';
        const TIFF_CCITT_1D = 'TIFF_CCITT_1D';
        const TIFF_CCITT_GROUP_3 = 'TIFF_CCITT_GROUP_3';
        const TIFF_CCITT_GROUP_4 = 'TIFF_CCITT_GROUP_4';
        const PNG = 'PNG';
        const PDF = 'PDF';
        const PNG_TRANSPARENT = 'PNG_TRANSPARENT';
        const PNG_AI = 'PNG_AI';
        const BMP = 'BMP';
        const JPEG = 'JPEG';
        const GIF = 'GIF';

    }

    abstract class OverlayRepeat {
        const ALL_PAGES = 'ALL_PAGES';
        const LAST_PAGE = 'LAST_PAGE';
        const NONE = 'NONE';
        const TRIM = 'TRIM';

    }

    abstract class PagesPerSheetDirection {
        const UP_RIGHT = 'UP_RIGHT';
        const UP_LEFT = 'UP_LEFT';
        const RIGHT_UP = 'RIGHT_UP';
        const RIGHT_DOWN = 'RIGHT_DOWN';
        const DOWN_LEFT = 'DOWN_LEFT';
        const DOWN_RIGHT = 'DOWN_RIGHT';
        const LEFT_DOWN = 'LEFT_DOWN';
        const LEFT_UP = 'LEFT_UP';

    }

    abstract class PdfScriptTriggerEvent {
        const OPEN = 'OPEN';
        const CLOSE = 'CLOSE';
        const BEFORE_SAVE = 'BEFORE_SAVE';
        const BEFORE_PRINT = 'BEFORE_PRINT';
        const AFTER_SAVE = 'AFTER_SAVE';
        const AFTER_PRINT = 'AFTER_PRINT';

    }

    abstract class ProcessingPreferences {
        const SAVE_MEMORY_IMAGES = 'SAVE_MEMORY_IMAGES';

    }

    abstract class SigningMode {
        const WINCER_SIGNED = 'WINCER_SIGNED';
        const VERISIGN_SIGNED = 'VERISIGN_SIGNED';
        const SELF_SIGNED = 'SELF_SIGNED';

    }

    abstract class ViewerPreferences {
        const HIDE_WINDOW_UI = 'HIDE_WINDOW_UI';
        const NON_FULLSCREEN_PAGE_MODE_USE_NONE = 'NON_FULLSCREEN_PAGE_MODE_USE_NONE';
        const HIDE_MENUBAR = 'HIDE_MENUBAR';
        const HIDE_TOOLBAR = 'HIDE_TOOLBAR';
        const NON_FULLSCREEN_PAGE_MODE_USE_THUMBS = 'NON_FULLSCREEN_PAGE_MODE_USE_THUMBS';
        const PAGE_LAYOUT_ONE_COLUMN = 'PAGE_LAYOUT_ONE_COLUMN';
        const NON_FULLSCREEN_PAGE_MODE_USE_OC = 'NON_FULLSCREEN_PAGE_MODE_USE_OC';
        const NON_FULLSCREEN_PAGE_MODE_USE_OUTLINES = 'NON_FULLSCREEN_PAGE_MODE_USE_OUTLINES';
        const DIRECTION_R2L = 'DIRECTION_R2L';
        const DISPLAY_DOC_TITLE = 'DISPLAY_DOC_TITLE';
        const CENTER_WINDOW = 'CENTER_WINDOW';
        const DIRECTION_L2R = 'DIRECTION_L2R';
        const DUPLEX_SIMPLEX = 'DUPLEX_SIMPLEX';
        const FIT_WINDOW = 'FIT_WINDOW';
        const DUPLEX_FLIP_LONG_EDGE = 'DUPLEX_FLIP_LONG_EDGE';
        const DUPLEX_FLIP_SHORT_EDGE = 'DUPLEX_FLIP_SHORT_EDGE';
        const PAGE_MODE_USE_OUTLINES = 'PAGE_MODE_USE_OUTLINES';
        const PAGE_MODE_USE_OC = 'PAGE_MODE_USE_OC';
        const PICKTRAYBYPDFSIZE_FALSE = 'PICKTRAYBYPDFSIZE_FALSE';
        const PAGE_MODE_USE_THUMBS = 'PAGE_MODE_USE_THUMBS';
        const PRINTSCALING_APPDEFAULT = 'PRINTSCALING_APPDEFAULT';
        const PICKTRAYBYPDFSIZE_TRUE = 'PICKTRAYBYPDFSIZE_TRUE';
        const PRINTSCALING_NONE = 'PRINTSCALING_NONE';
        const PAGE_LAYOUT_TWO_COLUMN_LEFT = 'PAGE_LAYOUT_TWO_COLUMN_LEFT';
        const PAGE_LAYOUT_SINGLE_PAGE = 'PAGE_LAYOUT_SINGLE_PAGE';
        const PAGE_LAYOUT_TWO_PAGE_LEFT = 'PAGE_LAYOUT_TWO_PAGE_LEFT';
        const PAGE_LAYOUT_TWO_COLUMN_RIGHT = 'PAGE_LAYOUT_TWO_COLUMN_RIGHT';
        const PAGE_MODE_FULLSCREEN = 'PAGE_MODE_FULLSCREEN';
        const PAGE_LAYOUT_TWO_PAGE_RIGHT = 'PAGE_LAYOUT_TWO_PAGE_RIGHT';
        const PAGE_MODE_USE_NONE = 'PAGE_MODE_USE_NONE';
        const PAGE_MODE_USE_ATTACHMENTS = 'PAGE_MODE_USE_ATTACHMENTS';

    }

    abstract class OutputIntentDefaultProfile {
        const GRACOL = 'Coated GRACoL 2006';
        const IFRA = 'ISO News print 26% (IFRA)';
        const JAPAN = 'Japan Color 2001 Coated';
        const JAPAN_NEWSPAPER = 'Japan Color 2001 Newspaper';
        const JAPAN_UNCOATED = 'Japan Color 2001 Uncoated';
        const JAPAN_WEB = 'Japan Web Coated (Ad)';
        const SWOP = 'US Web Coated (SWOP) v2';
        const SWOP_3 = 'Web Coated SWOP 2006 Grade 3 Paper';
        const FOGRA39 = 'Coated FOGRA39';

    }

    abstract class PageOrder {
        const REVERSE = 'REVERSE';
        const EVEN = 'EVEN';
        const ODD = 'ODD';
        const BOOKLET = 'BOOKLET';
        const BOOKLET_RTL = 'BOOKLET_RTL';

    }

    abstract class XmpPriority {
        const LOW = 'LOW';
        const NONE = 'NONE';
        const HIGH = 'HIGH';

    }

    abstract class CallbackType {
        const PROGRESS = 'PROGRESS';
        const FINISH = 'FINISH';
        const START = 'START';

    }

    abstract class ContentType {
        const XML = 'XML';
        const TIFF = 'TIFF';
        const TEXT = 'TEXT';
        const PNG = 'PNG';
        const BMP = 'BMP';
        const BINARY = 'BINARY';
        const HTML = 'HTML';
        const GIF = 'GIF';
        const JSON = 'JSON';
        const JPEG = 'JPEG';
        const PDF = 'PDF';
        const NONE = 'NONE';

    }

    abstract class CssPropertySupport {
        const HTML_THIRD_PARTY_LENIENT = 'HTML_THIRD_PARTY_LENIENT';
        const HTML_THIRD_PARTY = 'HTML_THIRD_PARTY';
        const HTML = 'HTML';
        const ALL = 'ALL';

    }

    abstract class ErrorPolicy {
        const MISSING_RESOURCE = 'MISSING_RESOURCE';
        const LICENSE = 'LICENSE';

    }

    abstract class JavaScriptDebugMode {
        const LINES = 'LINES';
        const FUNCTIONS = 'FUNCTIONS';
        const POSITIONS = 'POSITIONS';
        const NONE = 'NONE';
        const EXCEPTIONS = 'EXCEPTIONS';

    }

    abstract class QuirksMode {
        const DETECT = 'DETECT';
        const QUIRKS = 'QUIRKS';
        const STANDARDS = 'STANDARDS';

    }

    abstract class ResourceType {
        const RUNNING_DOCUMENT = 'RUNNING_DOCUMENT';
        const SCRIPT = 'SCRIPT';
        const STYLESHEET = 'STYLESHEET';
        const UNKNOWN = 'UNKNOWN';
        const FONT = 'FONT';
        const ICC_PROFILE = 'ICC_PROFILE';
        const IFRAME = 'IFRAME';
        const IMAGE = 'IMAGE';
        const OBJECT = 'OBJECT';

    }

    class AdminerPimcore extends \adminerplugin {
        /**
         * @return string
         */
        public function name() {}
        public function loginForm() {}
        public function permanentLogin($create = false) {}
        public function login($login, $password) {}
        /**
         * @return array
         */
        public function credentials() {}
        /**
         * @return mixed
         */
        public function database() {}
        public function databases($flush = true) {}
    }

}

namespace Pimcore\Model {
    /**
     * @method \Pimcore\Model\Document\Dao getDao()
     * @method bool __isBasedOnLatestData()
     */
    class Document extends \pimcore\model\element\abstractelement {
        /**
         * possible types of a document
         *
         * @var array
         */
        static public $types;
        /**
         * @var bool
         */
        static private $hideUnpublished;
        /**
         * @var string
         */
        protected $fullPathCache;
        /**
         * ID of the document
         *
         * @var int
         */
        protected $id;
        /**
         * ID of the parent document, on root document this is null
         *
         * @var int
         */
        protected $parentId;
        /**
         * The parent document.
         *
         * @var Document
         */
        protected $parent;
        /**
         * Type of the document as string (enum)
         * Possible values: page,snippet,link,folder
         *
         * @var string
         */
        protected $type;
        /**
         * Filename/Key of the document
         *
         * @var string
         */
        protected $key;
        /**
         * Path to the document, not conaining the key (the full path of the parent document)
         *
         * @var string
         */
        protected $path;
        /**
         * Sorter index in the tree, can also be used for generating a navigation and so on
         *
         * @var int
         */
        protected $index;
        /**
         * published or not
         *
         * @var bool
         */
        protected $published;
        /**
         * timestamp of creationdate
         *
         * @var int
         */
        protected $creationDate;
        /**
         * timestamp of modificationdate
         *
         * @var int
         */
        protected $modificationDate;
        /**
         * User-ID of the owner
         *
         * @var int
         */
        protected $userOwner;
        /**
         * User-ID of the user last modified the document
         *
         * @var int
         */
        protected $userModification;
        /**
         * Permissions for the user which requested this document in editmode*
         *
         * @var array
         */
        protected $userPermissions;
        /**
         * Dependencies for this document
         *
         * @var Dependency
         */
        protected $dependencies;
        /**
         * List of Property, concerning the folder
         *
         * @var array
         */
        protected $properties;
        /**
         * Contains a list of child-documents
         *
         * @var array
         */
        protected $children;
        /**
         * Indicator of document has children or not.
         *
         * @var bool[]
         */
        protected $hasChildren;
        /**
         * Contains a list of sibling documents
         *
         * @var array
         */
        protected $siblings;
        /**
         * Indicator if document has siblings or not
         *
         * @var bool[]
         */
        protected $hasSiblings;
        /**
         * Check if the document is locked.
         *
         * @var string
         */
        protected $locked;
        /** @var int */
        protected $versionCount;

        /**
         * get possible types
         *
         * @return array
         */
        public static function getTypes() {}
        public static function getByPath($path, $force = false) {}
        protected static function typeMatch(Document $document) {}
        public static function getById($id, $force = false) {}
        public static function create($parentId, $data = [ ], $save = true) {}
        public static function getList($config = [ ]) {}
        public static function getTotalCount($config = [ ]) {}
        /**
         * @return Document
         *
         * @throws \Exception
         */
        public function save() {}
        /**
         * Validate the document path.
         *
         * @throws \Exception
         */
        public function correctPath() {}
        protected function update($params = [ ]) {}
        public function saveIndex($index) {}
        public function clearDependentCache($additionalTags = [ ]) {}
        /**
         * Returns the dependencies of the document
         *
         * @return Dependency
         */
        public function getDependencies() {}
        public function setChildren($children) {}
        public function getChildren($includingUnpublished = false) {}
        public function hasChildren($includingUnpublished = null) {}
        public function getSiblings($includingUnpublished = false) {}
        public function hasSiblings($includingUnpublished = null) {}
        /**
         * Returns true if the element is locked
         *
         * @return string
         */
        public function getLocked() {}
        public function setLocked($locked) {}
        public function delete(bool $isNested = false) {}
/** @var Site $site */
        public function getFullPath(/** @var Site $site */
bool $force = false) {}
        protected function prepareFrontendPath($path) {}
        /**
         * Returns the document creation date.
         *
         * @return int
         */
        public function getCreationDate() {}
        /**
         * Returns the document id.
         *
         * @return int
         */
        public function getId() {}
        /**
         * Returns the document key.
         *
         * @return string
         */
        public function getKey() {}
        /**
         * Return the document modification date.
         *
         * @return int
         */
        public function getModificationDate() {}
        /**
         * Returns the id of the parent document.
         *
         * @return int
         */
        public function getParentId() {}
        /**
         * Returns the document path.
         *
         * @return string
         */
        public function getPath() {}
        /**
         * Returns the real document path.
         *
         * @return string
         */
        public function getRealPath() {}
        /**
         * Returns the full real path of the document.
         *
         * @return string
         */
        public function getRealFullPath() {}
        public function setCreationDate($creationDate) {}
        public function setId($id) {}
        public function setKey($key) {}
        public function setModificationDate($modificationDate) {}
        public function setParentId($parentId) {}
        public function setPath($path) {}
        /**
         * Returns the document index.
         *
         * @return int
         */
        public function getIndex() {}
        public function setIndex($index) {}
        /**
         * Returns the document type.
         *
         * @return string
         */
        public function getType() {}
        public function setType($type) {}
        /**
         * Returns id of the user last modified the document.
         *
         * @return int
         */
        public function getUserModification() {}
        /**
         * Returns the id of the owner user.
         *
         * @return int
         */
        public function getUserOwner() {}
        public function setUserModification($userModification) {}
        public function setUserOwner($userOwner) {}
        /**
         * Checks if the document is published.
         *
         * @return bool
         */
        public function isPublished() {}
        /**
         * Checks if the document is published.
         *
         * @return bool
         */
        public function getPublished() {}
        public function setPublished($published) {}
        /**
         * Get a list of properties (including the inherited)
         *
         * @return Property[]
         */
        public function getProperties() {}
        public function setProperties($properties) {}
        public function setProperty($name, $type, $data, $inherited = false, $inheritable = true) {}
        /**
         * Returns the parent document instance.
         *
         * @return Document
         */
        public function getParent() {}
        public function setParent($parent) {}
        public function __sleep() {}
        public function __wakeup() {}
        /**
         *  Removes all inherited properties.
         */
        public function removeInheritedProperties() {}
        /**
         * Renews all inherited properties.
         */
        public function renewInheritedProperties() {}
        public static function addDocumentType($type) {}
        public static function setHideUnpublished($hideUnpublished) {}
        /**
         * Checks if unpublished documents should be hidden.
         *
         * @return bool
         */
        public static function doHideUnpublished() {}
        public function setUserPermissions($userPermissions) : void {}
        /**
         * @return int
         */
        public function getVersionCount() : int {}
        public function setVersionCount(?int $versionCount) : ElementInterface {}
        protected function getListingCacheKey(array $args = [ ]) {}
    }

    /**
     * @method Dependency\Dao getDao()
     */
    class Dependency extends \pimcore\model\abstractmodel {
        /**
         * The ID of the object to get dependencies for
         *
         * @var int
         */
        public $sourceId;
        /**
         * The type of the object to get dependencies for
         *
         * @var string
         */
        public $sourceType;
        /**
         * Contains the ID/type of objects which are required for the given source object (sourceId/sourceType)
         *
         * @var array
         */
        public $requires;

        public static function getBySourceId($id, $type) {}
        public function addRequirement($id, $type) {}
        public function cleanAllForElement($element) {}
        /**
         * Cleanup the dependencies for current source id
         */
        public function clean() {}
        /**
         * @return int
         */
        public function getSourceId() {}
        public function getRequires($offset = null, $limit = null) {}
        public function getRequiredBy($offset = null, $limit = null) {}
        public function setSourceId($sourceId) {}
        public function setRequires($requires) {}
        /**
         * @return string
         */
        public function getSourceType() {}
        public function setSourceType($sourceType) {}
        /**
         * @return int
         */
        public function getRequiresTotalCount() {}
        /**
         * @return int
         */
        public function getRequiredByTotalCount() {}
        /**
         * Check if the source object is required by an other object (an other object depends on this object)
         *
         * @return bool
         */
        public function isRequired() {}
    }

    /**
     * @method \Pimcore\Model\GridConfigShare\Dao getDao()
     */
    class GridConfigShare extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $gridConfigId;
        /**
         * @var int
         */
        public $sharedWithUserId;

        public static function getByGridConfigAndSharedWithId($gridConfigId, $sharedWithUserId) {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Delete this share
         */
        public function delete() {}
        /**
         * @return int
         */
        public function getGridConfigId() : int {}
        public function setGridConfigId(int $gridConfigId) {}
        /**
         * @return int
         */
        public function getSharedWithUserId() : int {}
        public function setSharedWithUserId(int $sharedWithUserId) {}
    }

    /**
     * @method \Pimcore\Model\User\Dao getDao()
     */
    class User extends \pimcore\model\user\userrole {
        /**
         * @var string
         */
        public $type;
        /**
         * @var string
         */
        public $password;
        /**
         * @var string
         */
        public $firstname;
        /**
         * @var string
         */
        public $lastname;
        /**
         * @var string
         */
        public $email;
        /**
         * @var string
         */
        public $language;
        /**
         * @var bool
         */
        public $admin;
        /**
         * @var bool
         */
        public $active;
        /**
         * @var array
         */
        public $roles;
        /**
         * @var bool
         */
        public $welcomescreen;
        /**
         * @var bool
         */
        public $closeWarning;
        /**
         * @var bool
         */
        public $memorizeTabs;
        /**
         * @var bool
         */
        public $allowDirtyClose;
        /**
         * @deprecated
         *
         * @var string|null
         */
        public $apiKey;
        /**
         * @var string|null
         */
        public $contentLanguages;
        /**
         * @var string|null
         */
        public $activePerspective;
        /**
         * @var null|array
         */
        protected $mergedPerspectives;
        /**
         * @var null|array
         */
        protected $mergedWebsiteTranslationLanguagesEdit;
        /**
         * @var null|array
         */
        protected $mergedWebsiteTranslationLanguagesView;
        /**
         * @var int
         */
        public $lastLogin;
        /**
         * @var string
         */
        public $keyBindings;
        /**
         * @var string
         */
        public $twoFactorAuthentication;

        /**
         * @return string
         */
        public function getPassword() {}
        public function setPassword($password) {}
        /**
         * Alias for getName()
         *
         * @deprecated
         *
         * @return string
         */
        public function getUsername() {}
        public function setUsername($username) {}
        /**
         *
         * @return string
         */
        public function getFirstname() {}
        public function setFirstname($firstname) {}
        /**
         *
         * @return string
         */
        public function getLastname() {}
        public function setLastname($lastname) {}
        /**
         *
         * @return string
         */
        public function getEmail() {}
        public function setEmail($email) {}
        /**
         * @return string
         */
        public function getLanguage() {}
        public function setLanguage($language) {}
        /**
         * @see getAdmin()
         *
         * @return bool
         */
        public function isAdmin() {}
        /**
         * @return bool
         */
        public function getAdmin() {}
        public function setAdmin($admin) {}
        /**
         * @return bool
         */
        public function getActive() {}
        public function setActive($active) {}
        /**
         * @return bool
         */
        public function isActive() {}
        public function isAllowed($key, $type = 'permission') {}
        public function getPermission($permissionName) {}
        public function setRoles($roles) {}
        /**
         * @return array
         */
        public function getRoles() {}
        public function setWelcomescreen($welcomescreen) {}
        /**
         * @return bool
         */
        public function getWelcomescreen() {}
        public function setCloseWarning($closeWarning) {}
        /**
         * @return bool
         */
        public function getCloseWarning() {}
        public function setMemorizeTabs($memorizeTabs) {}
        /**
         * @return bool
         */
        public function getMemorizeTabs() {}
        public function setAllowDirtyClose($allowDirtyClose) {}
        /**
         * @return bool
         */
        public function getAllowDirtyClose() {}
        public function setApiKey($apiKey) {}
        /**
         * @deprecated
         *
         * @return null|string
         */
        public function getApiKey() {}
        public function setImage($path) {}
        public function getImage($width = null, $height = null) {}
        /**
         * @return array
         */
        public function getContentLanguages() {}
        public function setContentLanguages($contentLanguages) {}
        /**
         * @return null|string
         */
        public function getActivePerspective() {}
        public function setActivePerspective($activePerspective) {}
        /** @var User\UserRole $userRole */
        public function getMergedPerspectives() {}
        /**
         * Returns the first perspective name
         *
         * @return string
         */
        public function getFirstAllowedPerspective() {}
        /**
         * Returns array of website translation languages for editing related to user and all related roles
         *
         * @return array|null
         */
        public function getMergedWebsiteTranslationLanguagesEdit() {}
        /**
         * Returns array of languages allowed for editing. If edit and view languages are empty all languages are allowed.
         * If only edit languages are empty (but view languages not) empty array is returned.
         *
         * @return array|null
         */
        public function getAllowedLanguagesForEditingWebsiteTranslations() {}
        /**
         * Returns array of website translation languages for viewing related to user and all related roles
         *
         * @return array|null
         */
        public function getMergedWebsiteTranslationLanguagesView() {}
        /**
         * Returns array of languages allowed for viewing. If view languages are empty all languages are allowed.
         *
         * @return array|null
         */
        public function getAllowedLanguagesForViewingWebsiteTranslations() {}
        /**
         * @return int
         */
        public function getLastLogin() {}
        public function setLastLogin($lastLogin) {}
        /**
         * @return string
         */
        public static function getDefaultKeyBindings() {}
        /**
         * @return string
         */
        public function getKeyBindings() {}
        public function setKeyBindings($keyBindings) {}
        public function getTwoFactorAuthentication($key = null) {}
        public function setTwoFactorAuthentication($key, $value = null) {}
    }

    class DataObject extends \pimcore\model\dataobject\abstractobject {}

    /**
     * @method \Pimcore\Model\GridConfig\Dao getDao()
     */
    class GridConfig extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * @var int
         */
        public $ownerId;
        /**
         * @var string
         */
        public $classId;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $searchType;
        /**
         * @var string
         */
        public $config;
        /**
         * @var string
         */
        public $description;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var bool
         */
        public $shareGlobally;
        /**
         * @var string
         */
        public $type;

        public static function getById($id) {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Delete this GridConfig
         */
        public function delete() {}
        /**
         * @return int
         */
        public function getId() {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getOwnerId() {}
        public function setOwnerId($ownerId) {}
        /**
         * @return string
         */
        public function getClassId() {}
        public function setClassId($classId) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getSearchType() {}
        public function setSearchType($searchType) {}
        /**
         * @return string
         */
        public function getConfig() {}
        public function setConfig($config) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setDescription($description) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return bool
         */
        public function isShareGlobally() {}
        public function setShareGlobally($shareGlobally) {}
        /**
         * @return string
         */
        public function getType() {}
        public function setType(string $type) {}
    }

    /**
     * @method \Pimcore\Model\WebsiteSetting\Dao getDao()
     * @method void save()
     * @method void delete()
     */
    class WebsiteSetting extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        protected $id;
        /**
         * @var string
         */
        protected $name;
        /**
         * @var string
         */
        protected $language;
        /**
         * @var string
         */
        protected $type;
        /**
         * @var mixed
         */
        protected $data;
        /**
         * @var int
         */
        protected $siteId;
        /**
         * @var int
         */
        protected $creationDate;
        /**
         * @var int
         */
        protected $modificationDate;
        /**
         * this is a small per request cache to know which website setting is which is, this info is used in self::getByName()
         *
         * @var array
         */
        static protected $nameIdMappingCache;

        public static function getById($id) {}
        public static function getByName($name, $siteId = null, $language = null, $fallbackLanguage = null) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setId($id) {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        public function setData($data) {}
        /**
         * @return mixed
         */
        public function getData() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setSiteId($siteId) {}
        /**
         * @return int
         */
        public function getSiteId() {}
        public function setType($type) {}
        /**
         * @return string
         */
        public function getType() {}
        /**
         * @return string
         */
        public function getLanguage() {}
        public function setLanguage($language) {}
        public function clearDependentCache() {}
    }

    /**
     * @method \Pimcore\Model\Property\Dao getDao()
     */
    class Property extends \pimcore\model\abstractmodel {
        /**
         * @var string
         */
        protected $name;
        /**
         * @var mixed
         */
        protected $data;
        /**
         * @var string
         */
        protected $type;
        /**
         * @var string
         */
        protected $ctype;
        /**
         * @var string
         */
        protected $cpath;
        /**
         * @var int
         */
        protected $cid;
        /**
         * @var bool
         */
        protected $inheritable;
        /**
         * @var bool
         */
        protected $inherited;

        public function setDataFromEditmode($data) {}
        public function setDataFromResource($data) {}
        /**
         * @return int
         */
        public function getCid() {}
        /**
         * @return string
         */
        public function getCtype() {}
        /**
         * @return mixed
         */
        public function getData() {}
        /**
         * @return string
         */
        public function getName() {}
        /**
         * @return string
         */
        public function getType() {}
        public function setCid($cid) {}
        public function setCtype($ctype) {}
        public function setData($data) {}
        public function setName($name) {}
        public function setType($type) {}
        /**
         * @return string
         */
        public function getCpath() {}
        /**
         * @return bool
         */
        public function getInherited() {}
        /**
         * Alias for getInherited()
         *
         * @return bool
         */
        public function isInherited() {}
        public function setCpath($cpath) {}
        public function setInherited($inherited) {}
        /**
         * @return bool
         */
        public function getInheritable() {}
        public function setInheritable($inheritable) {}
        /**
         * @return array
         */
        public function resolveDependencies() {}
        public function rewriteIds($idMapping) {}
    }

    /**
     * @method \Pimcore\Model\Version\Dao getDao()
     */
    class Version extends \pimcore\model\abstractmodel {
        /** @var bool for now&testing, make it possible to disable it */
        static protected $condenseVersion;
        /**
         * @var int
         */
        public $id;
        /**
         * @var int
         */
        public $cid;
        /**
         * @var string
         */
        public $ctype;
        /**
         * @var int
         */
        public $userId;
        /**
         * @var User
         */
        public $user;
        /**
         * @var string
         */
        public $note;
        /**
         * @var int
         */
        public $date;
        /**
         * @var mixed
         */
        public $data;
        /**
         * @var bool
         */
        public $public;
        /**
         * @var bool
         */
        public $serialized;
        /**
         * @var string
         */
        public $stackTrace;
        /**
         * @var int
         */
        public $versionCount;
        /**
         * @var string|null
         */
        public $binaryFileHash;
        /**
         * @var int|null
         */
        public $binaryFileId;
        /**
         * @var bool
         */
        static public $disabled;

/**
 * @var self $version
 */
        public static function getById(/**
 * @var self $version
 */
$id) {}
        /**
         * disables the versioning for the current process, this is useful for importers, ...
         * There are no new versions created, the read continues to operate normally
         *
         * @static
         */
        public static function disable() {}
        /**
         * see @ self::disable()
         * just enabled the creation of versioning in the current process
         *
         * @static
         */
        public static function enable() {}
        /**
         * @throws \Exception
         */
        public function save() {}
        public function marshalData($data) {}
        public function unmarshalData($data) {}
        /**
         * Delete this Version
         */
        public function delete() {}
        public function loadData($renewReferences = true) {}
        public function getFilePath(?int $id = null) {}
        /**
         * @return string
         */
        public function getBinaryFilePath() {}
        /**
         * @return string
         */
        public function getLegacyFilePath() {}
        /**
         * @return int
         */
        public function getCid() {}
        /**
         * @return int
         */
        public function getDate() {}
        /**
         * @return int
         */
        public function getId() {}
        /**
         * @return string
         */
        public function getNote() {}
        /**
         * @return int
         */
        public function getUserId() {}
        public function setCid($cid) {}
        public function setDate($date) {}
        public function setId($id) {}
        public function setNote($note) {}
        public function setUserId($userId) {}
        /**
         * @return mixed
         */
        public function getData() {}
        public function setData($data) {}
        /**
         * @return bool
         */
        public function getSerialized() {}
        public function setSerialized($serialized) {}
        /**
         * @return string
         */
        public function getCtype() {}
        public function setCtype($ctype) {}
        /**
         * @return User
         */
        public function getUser() {}
        public function setUser($user) {}
        /**
         * @return bool
         */
        public function getPublic() {}
        /**
         * @return bool
         */
        public function isPublic() {}
        public function setPublic($public) {}
        /**
         * @return int
         */
        public function getVersionCount() : int {}
        public function setVersionCount($versionCount) : void {}
        /**
         * @return string|null
         */
        public function getBinaryFileHash() : ?string {}
        public function setBinaryFileHash(?string $binaryFileHash) : void {}
        /**
         * @return int|null
         */
        public function getBinaryFileId() : ?int {}
        public function setBinaryFileId(?int $binaryFileId) : void {}
        /**
         * @return bool
         */
        public static function isCondenseVersionEnabled() {}
        public static function setCondenseVersion($condenseVersion) {}
    }

    /**
     * @method \Pimcore\Model\ImportConfig\Dao getDao()
     */
    class ImportConfig extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * @var int
         */
        public $ownerId;
        /**
         * @var string
         */
        public $classId;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $config;
        /**
         * @var string
         */
        public $description;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var bool
         */
        public $shareGlobally;

        public static function getById($id) {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Delete this ImportConfig
         */
        public function delete() {}
        /**
         * @return int
         */
        public function getId() {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getOwnerId() {}
        public function setOwnerId($ownerId) {}
        /**
         * @return string
         */
        public function getClassId() {}
        public function setClassId($classId) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getConfig() {}
        public function setConfig($config) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setDescription($description) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return bool
         */
        public function isShareGlobally() {}
        public function setShareGlobally($shareGlobally) {}
    }

    /**
     * @method Staticroute\Dao getDao()
     * @method void save()
     * @method void delete()
     */
    class Staticroute extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $pattern;
        /**
         * @var string
         */
        public $reverse;
        /**
         * @var string
         */
        public $module;
        /**
         * @var string
         */
        public $controller;
        /**
         * @var string
         */
        public $action;
        /**
         * @var string
         */
        public $variables;
        /**
         * @var string
         */
        public $defaults;
        /**
         * @var array
         */
        public $siteId;
        /**
         * @var int
         */
        public $priority;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * Associative array filled on match() that holds matched path values
         * for given variable names.
         *
         * @var array
         */
        public $_values;
        /**
         * this is a small per request cache to know which route is which is, this info is used in self::getByName()
         *
         * @var array
         */
        static protected $nameIdMappingCache;
        /**
         * contains the static route which the current request matches (it he does), this is used in the view to get the current route
         *
         * @var Staticroute
         */
        static protected $_currentRoute;

        public static function setCurrentRoute($route) {}
        /**
         * @static
         *
         * @return Staticroute
         */
        public static function getCurrentRoute() {}
        public static function getById($id) {}
        public static function getByName($name, $siteId = null) {}
        /**
         * @return Staticroute
         */
        public static function create() {}
        /**
         * Get the defaults defined in a string as array
         *
         * @return array
         */
        public function getDefaultsArray() {}
        /**
         * @return int
         */
        public function getId() {}
        /**
         * @return string
         */
        public function getPattern() {}
        /**
         * @return string
         */
        public function getModule() {}
        /**
         * @return string
         */
        public function getController() {}
        /**
         * @return string
         */
        public function getAction() {}
        /**
         * @return string
         */
        public function getVariables() {}
        /**
         * @return string
         */
        public function getDefaults() {}
        public function setId($id) {}
        public function setPattern($pattern) {}
        public function setModule($module) {}
        public function setController($controller) {}
        public function setAction($action) {}
        public function setVariables($variables) {}
        public function setDefaults($defaults) {}
        public function setPriority($priority) {}
        /**
         * @return int
         */
        public function getPriority() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setReverse($reverse) {}
        /**
         * @return string
         */
        public function getReverse() {}
        public function setSiteId($siteId) {}
        /**
         * @return array
         */
        public function getSiteId() {}
        public function assemble(array $urlOptions = [ ], $reset = false, $encode = true) {}
        public function match($path, $params = [ ]) {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
    }

    /**
     * @method \Pimcore\Model\GridConfigFavourite\Dao getDao()
     */
    class GridConfigFavourite extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $ownerId;
        /**
         * @var string
         */
        public $classId;
        /**
         * @var int
         */
        public $objectId;
        /**
         * @var int
         */
        public $gridConfigId;
        /**
         * @var string
         */
        public $searchType;
        /**
         * @var string
         */
        public $type;

        public static function getByOwnerAndClassAndObjectId($ownerId, $classId, $objectId = null, $searchType = '') {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Delete this favourite
         */
        public function delete() {}
        /**
         * @return int
         */
        public function getOwnerId() {}
        public function setOwnerId($ownerId) {}
        /**
         * @return string
         */
        public function getClassId() {}
        public function setClassId($classId) {}
        /**
         * @return int
         */
        public function getGridConfigId() {}
        public function setGridConfigId($gridConfigId) {}
        /**
         * @return string
         */
        public function getSearchType() : string {}
        public function setSearchType($searchType) {}
        /**
         * @return int
         */
        public function getObjectId() {}
        public function setObjectId(int $objectId) {}
        /**
         * @return string
         */
        public function getType() {}
        public function setType(string $type) {}
    }

    /**
     * @method \Pimcore\Model\Redirect\Dao getDao()
     */
    class Redirect extends \pimcore\model\abstractmodel {
        const TYPE_ENTIRE_URI = 'entire_uri';
        const TYPE_PATH_QUERY = 'path_query';
        const TYPE_PATH = 'path';
        const TYPES = [self::TYPE_ENTIRE_URI, self::TYPE_PATH_QUERY, self::TYPE_PATH];

        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $type;
        /**
         * @var string
         */
        public $source;
        /**
         * @var int
         */
        public $sourceSite;
        /**
         * @var bool
         */
        public $passThroughParameters;
        /**
         * @var string
         */
        public $target;
        /**
         * @var int
         */
        public $targetSite;
        /**
         * @var string
         */
        public $statusCode;
        /**
         * @var string
         */
        public $priority;
        /**
         * @var bool
         */
        public $regex;
        /**
         * @var bool
         */
        public $active;
        /**
         * @var int
         */
        public $expiry;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * ID of the owner user
         *
         * @var int
         */
        protected $userOwner;
        /**
         * ID of the user who make the latest changes
         *
         * @var int
         */
        protected $userModification;
        /**
         * StatusCodes
         */
        static public $statusCodes;

        public static function getById($id) {}
        /**
         * @return Redirect
         */
        public static function create() {}
        /**
         * @return int
         */
        public function getId() {}
        /**
         * @return string
         */
        public function getSource() {}
        /**
         * @return string
         */
        public function getTarget() {}
        public function setId($id) {}
        /**
         * @return string
         */
        public function getType() {}
        public function setType($type) {}
        public function setSource($source) {}
        public function setTarget($target) {}
        public function setPriority($priority) {}
        /**
         * @return int
         */
        public function getPriority() {}
        public function setStatusCode($statusCode) {}
        /**
         * @return int
         */
        public function getStatusCode() {}
        /**
         * @return string
         */
        public function getHttpStatus() {}
        public function clearDependentCache() {}
        public function setExpiry($expiry) {}
        /**
         * @return int
         */
        public function getExpiry() {}
        /**
         * @return bool
         */
        public function getRegex() {}
        public function isRegex() : bool {}
        public function setRegex($regex) {}
        /**
         * @return bool
         */
        public function getActive() {}
        public function setActive($active) {}
        public function setSourceSite($sourceSite) {}
        /**
         * @return int
         */
        public function getSourceSite() {}
        public function setTargetSite($targetSite) {}
        /**
         * @return int
         */
        public function getTargetSite() {}
        public function setPassThroughParameters($passThroughParameters) {}
        /**
         * @return bool
         */
        public function getPassThroughParameters() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        /**
         * @return int
         */
        public function getUserOwner() {}
        public function setUserOwner($userOwner) {}
        /**
         * @return int
         */
        public function getUserModification() {}
        public function setUserModification($userModification) {}
        public function save() {}
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\Glossary\Dao getDao()
     */
    class Glossary extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $text;
        /**
         * @var string
         */
        public $link;
        /**
         * @var string
         */
        public $abbr;
        /**
         * @var string
         */
        public $acronym;
        /**
         * @var string
         */
        public $language;
        /**
         * @var bool
         */
        public $casesensitive;
        /**
         * @var bool
         */
        public $exactmatch;
        /**
         * @var int
         */
        public $site;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;

        public static function getById($id) {}
        /**
         * @return Glossary
         */
        public static function create() {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setText($text) {}
        /**
         * @return string
         */
        public function getText() {}
        public function setLink($link) {}
        /**
         * @return string
         */
        public function getLink() {}
        public function setAbbr($abbr) {}
        /**
         * @return string
         */
        public function getAbbr() {}
        public function setAcronym($acronym) {}
        /**
         * @return string
         */
        public function getAcronym() {}
        public function setLanguage($language) {}
        /**
         * @return string
         */
        public function getLanguage() {}
        public function setCasesensitive($casesensitive) {}
        /**
         * @return bool
         */
        public function getCasesensitive() {}
        public function setExactmatch($exactmatch) {}
        /**
         * @return bool
         */
        public function getExactmatch() {}
        public function setSite($site) {}
        /**
         * @return int
         */
        public function getSite() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
    }

    /**
     * @method \Pimcore\Model\ImportConfigShare\Dao getDao()
     */
    class ImportConfigShare extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $importConfigId;
        /**
         * @var int
         */
        public $sharedWithUserId;

        public static function getByImportConfigAndSharedWithId($importConfigId, $sharedWithUserId) {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Delete this share
         */
        public function delete() {}
        /**
         * @return int
         */
        public function getImportConfigId() : int {}
        public function setImportConfigId(int $importConfigId) {}
        /**
         * @return int
         */
        public function getSharedWithUserId() : int {}
        public function setSharedWithUserId(int $sharedWithUserId) {}
    }

    /**
     * @method Notification\Dao getDao()
     */
    class Notification extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        protected $id;
        /**
         * @var string
         */
        protected $creationDate;
        /**
         * @var string
         */
        protected $modificationDate;
        /**
         * @var User
         */
        protected $sender;
        /**
         * @var User
         */
        protected $recipient;
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $type;
        /**
         * @var string
         */
        protected $message;
        /**
         * @var Element\AbstractElement
         */
        protected $linkedElement;
        /**
         * @var string
         */
        protected $linkedElementType;
        /**
         * @var bool
         */
        protected $read;

        public static function getById(int $id) : ?Notification {}
        /**
         * @return int|null
         */
        public function getId() : ?int {}
        public function setId(int $id) : self {}
        /**
         * @return string|null
         */
        public function getCreationDate() : ?string {}
        public function setCreationDate(string $creationDate) : self {}
        /**
         * @return string|null
         */
        public function getModificationDate() : ?string {}
        public function setModificationDate(string $modificationDate) : self {}
        /**
         * @return null|User
         */
        public function getSender() : ?User {}
        public function setSender(?User $sender) : self {}
        /**
         * @return null|User
         */
        public function getRecipient() : ?User {}
        public function setRecipient(?User $recipient) : self {}
        /**
         * @return null|string
         */
        public function getTitle() : ?string {}
        public function setTitle(?string $title) : self {}
        /**
         * @return null|string
         */
        public function getType() : ?string {}
        public function setType(?string $type) : self {}
        /**
         * @return null|string
         */
        public function getMessage() : ?string {}
        public function setMessage(?string $message) : self {}
        /**
         * @return null|Element\AbstractElement
         */
        public function getLinkedElement() : ?Element\AbstractElement {}
        public function setLinkedElement(?Element\ElementInterface $linkedElement) : self {}
        /**
         * @return null|string
         */
        public function getLinkedElementType() : ?string {}
        /**
         * @return bool
         */
        public function isRead() : bool {}
        public function setRead(bool $read) : self {}
        /**
         * Save notification
         */
        public function save() : void {}
        /**
         * Delete notification
         */
        public function delete() : void {}
    }

    /**
     * Class Workflow
     *
     * @method Workflow\Dao getDao()
     *
     * @package Pimcore\Model
     */
    class Workflow extends \pimcore\model\abstractmodel {
        /**
         * @var int $id
         */
        public $id;
        /**
         * The name of the workflow
         *
         * @var string
         */
        public $name;
        /**
         * Cache of valid states in this workflow
         *
         * @var array
         */
        public $states;
        /**
         * Cache of valid statuses in this workflow
         *
         * @var array
         */
        public $statuses;
        /**
         * Cache of valid actions in this workflow
         *
         * @var array
         */
        public $actions;
        /**
         * The actual workflow
         *
         * @var array
         */
        public $transitionDefinitions;
        /**
         * The default state of the element
         *
         * @var string
         */
        public $defaultState;
        /**
         * The default status of the element
         *
         * @var string
         */
        public $defaultStatus;
        /**
         * Determines whether or not to allow unpublished elements to
         * have actions
         *
         * @var bool
         */
        public $allowUnpublished;
        /**
         * @var array
         */
        public $workflowSubject;
        /**
         * @var bool
         */
        public $enabled;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;

        public static function getById($id) {}
        /**
         * @return Workflow
         */
        public static function create() {}
        /**
         * @return int
         */
        public function getId() {}
        public function setId($id) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setName($name) {}
        /**
         * @return bool
         */
        public function getAllowUnpublished() {}
        public function setAllowUnpublished($allowUnpublished) {}
        /**
         * @return array
         */
        public function getActions() {}
        public function setActions($actions) {}
        /**
         * Return an array of valid workflow action names
         *
         * @return array
         */
        public function getValidActions() {}
        /**
         * @return array
         */
        public function getStates() {}
        public function setStates($states) {}
        /**
         * Returns an array of valid workflow state names
         *
         * @return array
         */
        public function getValidStates() {}
        public function isValidState($stateName) {}
        /**
         * @return array
         */
        public function getStatuses() {}
        public function setStatuses($statuses) {}
        /**
         * Returns an array of valid workflow status names
         *
         * @return array
         */
        public function getValidStatuses() {}
        public function isValidStatus($statusName) {}
        /**
         * Returns an array of valid workflow global actions names
         *
         * @return array
         */
        public function getValidGlobalActions() {}
        public function isValidAction($actionName) {}
        public function isGlobalAction($actionName) {}
        public function getStateConfig($stateName) {}
        public function getStatusConfig($statusName) {}
        /**
         * @return array
         */
        public function getTransitionDefinitions() {}
        public function setTransitionDefinitions($transitionDefinitions) {}
        public function getValidActionsForStatus($statusName) {}
        /**
         * Returns the statuses where an element should be published
         *
         * @return array
         */
        public function getPublishedStatuses() {}
        /**
         * @return string
         */
        public function getDefaultState() {}
        public function setDefaultState($defaultState) {}
        /**
         * @return string
         */
        public function getDefaultStatus() {}
        public function setDefaultStatus($defaultStatus) {}
        public function getActionConfig($actionName, $statusName = null) {}
        public function getValidUsersForAction($actionName, $statusName = null) {}
        public function getAdditionalFieldsForAction($actionName, $statusName = null) {}
        /**
         * @return array
         */
        public function getWorkflowSubject() {}
        public function setWorkflowSubject($workflowSubject) {}
        /**
         * @return bool
         */
        public function getEnabled() {}
        public function setEnabled($enabled) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setModificationDate($modificationDate) {}
    }

    /**
     * @method \Pimcore\Model\Site\Dao getDao()
     * @method delete()
     */
    class Site extends \pimcore\model\abstractmodel {
        /**
         * @var Site
         */
        static protected $currentSite;
        /**
         * @var int
         */
        public $id;
        /**
         * @var array
         */
        public $domains;
        /**
         * Contains the ID to the Root-Document
         *
         * @var int
         */
        public $rootId;
        /**
         * @var Document\Page
         */
        public $rootDocument;
        /**
         * @var string
         */
        public $rootPath;
        /**
         * @var string
         */
        public $mainDomain;
        /**
         * @var string
         */
        public $errorDocument;
        /**
         * @var bool
         */
        public $redirectToMainDomain;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;

        public static function getById($id) {}
        public static function getByRootId($id) {}
        public static function getByDomain($domain) {}
        public static function getBy($mixed) {}
        public static function create($data) {}
        /**
         * returns true if the current process/request is inside a site
         *
         * @static
         *
         * @return bool
         */
        public static function isSiteRequest() {}
        /**
         * @return Site
         *
         * @throws \Exception
         */
        public static function getCurrentSite() {}
        public static function setCurrentSite(Site $site) {}
        /**
         * @return int
         */
        public function getId() {}
        /**
         * @return array
         */
        public function getDomains() {}
        /**
         * @return int
         */
        public function getRootId() {}
        /**
         * @return Document\Page
         */
        public function getRootDocument() {}
        public function setId($id) {}
        public function setDomains($domains) {}
        public function setRootId($rootId) {}
        public function setRootDocument($rootDocument) {}
        public function setRootPath($path) {}
        /**
         * @return string
         */
        public function getRootPath() {}
        public function setErrorDocument($errorDocument) {}
        /**
         * @return string
         */
        public function getErrorDocument() {}
        public function setMainDomain($mainDomain) {}
        /**
         * @return string
         */
        public function getMainDomain() {}
        public function setRedirectToMainDomain($redirectToMainDomain) {}
        /**
         * @return bool
         */
        public function getRedirectToMainDomain() {}
        public function clearDependentCache() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
    }

    /**
     * @method \Pimcore\Model\Asset\Dao getDao()
     * @method bool __isBasedOnLatestData()
     */
    class Asset extends \pimcore\model\element\abstractelement {
        /**
         * possible types of an asset
         *
         * @var array
         */
        static public $types;
        /**
         * Unique ID
         *
         * @var int
         */
        protected $id;
        /**
         * ID of the parent asset
         *
         * @var int
         */
        protected $parentId;
        /**
         * @var Asset
         */
        protected $parent;
        /**
         * Type
         *
         * @var string
         */
        protected $type;
        /**
         * Name of the file
         *
         * @var string
         */
        protected $filename;
        /**
         * Path of the file, without the filename, only the full path of the parent asset
         *
         * @var string
         */
        protected $path;
        /**
         * Mime-Type of the file
         *
         * @var string
         */
        protected $mimetype;
        /**
         * Timestamp of creation
         *
         * @var int
         */
        protected $creationDate;
        /**
         * Timestamp of modification
         *
         * @var int
         */
        protected $modificationDate;
        /**
         * @var resource
         */
        protected $stream;
        /**
         * ID of the owner user
         *
         * @var int
         */
        protected $userOwner;
        /**
         * ID of the user who make the latest changes
         *
         * @var int
         */
        protected $userModification;
        /**
         * List of properties
         *
         * @var array
         */
        protected $properties;
        /**
         * List of versions
         *
         * @var array
         */
        protected $versions;
        /**
         * @var array
         */
        protected $metadata;
        /**
         * enum('self','propagate') nullable
         *
         * @var string
         */
        protected $locked;
        /**
         * List of some custom settings  [key] => value
         * Here there can be stored some data, eg. the video thumbnail files, ...  of the asset, ...
         *
         * @var array
         */
        protected $customSettings;
        /**
         * @var bool
         */
        protected $hasMetaData;
        /**
         * Dependencies of this asset
         *
         * @var Dependency
         */
        protected $dependencies;
        /**
         * Contains a list of sibling documents
         *
         * @var array
         */
        protected $siblings;
        /**
         * Indicator if document has siblings or not
         *
         * @var bool
         */
        protected $hasSiblings;
        /**
         * Contains all scheduled tasks
         *
         * @var array
         */
        protected $scheduledTasks;
        /**
         * Indicator if data has changed
         *
         * @var bool
         */
        protected $_dataChanged;
        /**
         * @var int
         */
        protected $versionCount;
        /**
         * @var string[]
         */
        protected $_temporaryFiles;

        /**
         *
         * @return array
         */
        public static function getTypes() {}
        public static function getByPath($path, $force = false) {}
        protected static function typeMatch(Asset $asset) {}
        public static function getById($id, $force = false) {}
        public static function create($parentId, $data = [ ], $save = true) {}
        public static function getList($config = [ ]) {}
        public static function getTotalCount($config = [ ]) {}
        public static function getTypeFromMimeMapping($mimeType, $filename) {}
        /**
         * Get full path to the asset on the filesystem
         *
         * @return string
         */
        public function getFileSystemPath() {}
        /**
         * @return $this
         *
         * @throws \Exception
         */
        public function save() {}
        /**
         * @throws \Exception
         */
        public function correctPath() {}
        protected function update($params = [ ]) {}
        protected function postPersistData() {}
        public function saveVersion($setModificationDate = true, $saveOnlyVersion = true, $versionNote = null) {}
        /**
         * Returns the full path of the asset including the filename
         *
         * @return string
         */
        public function getFullPath() {}
        /**
         * @return string
         */
        public function getRealPath() {}
        /**
         * @return string
         */
        public function getRealFullPath() {}
        /**
         * Get a list of the sibling assets
         *
         * @return array
         */
        public function getSiblings() {}
        /**
         * Returns true if the asset has at least one sibling
         *
         * @return bool
         */
        public function hasSiblings() {}
        /**
         * @return bool
         */
        public function hasChildren() {}
        /**
         * @return Asset[]
         */
        public function getChildren() {}
        /**
         * Returns true if the element is locked
         *
         * @return string
         */
        public function getLocked() {}
        public function setLocked($locked) {}
        /**
         * Deletes file from filesystem
         */
        protected function deletePhysicalFile() {}
        public function delete(bool $isNested = false) {}
        public function clearDependentCache($additionalTags = [ ]) {}
        /**
         * @return Dependency
         */
        public function getDependencies() {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        /**
         * @return int
         */
        public function getId() {}
        /**
         * @return string
         */
        public function getFilename() {}
        /**
         * Alias for getFilename()
         *
         * @return string
         */
        public function getKey() {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        /**
         * @return int
         */
        public function getParentId() {}
        /**
         * @return string
         */
        public function getPath() {}
        /**
         * @return string
         */
        public function getType() {}
        public function setCreationDate($creationDate) {}
        public function setId($id) {}
        public function setFilename($filename) {}
        public function setModificationDate($modificationDate) {}
        public function setParentId($parentId) {}
        public function setPath($path) {}
        public function setType($type) {}
        /**
         * @return mixed
         */
        public function getData() {}
        public function setData($data) {}
        /**
         * @return resource
         */
        public function getStream() {}
        public function setStream($stream) {}
        protected function closeStream() {}
        public function getChecksum($type = 'md5') {}
        /**
         * @return bool
         */
        public function getDataChanged() {}
        public function setDataChanged($changed = true) {}
        /**
         * @return Property[]
         */
        public function getProperties() {}
        public function setProperties($properties) {}
        public function setProperty($name, $type, $data, $inherited = false, $inheritable = false) {}
        /**
         * @return int
         */
        public function getUserOwner() {}
        /**
         * @return int
         */
        public function getUserModification() {}
        public function setUserOwner($userOwner) {}
        public function setUserModification($userModification) {}
        /**
         * @return Version[]
         */
        public function getVersions() {}
        public function setVersions($versions) {}
        /**
         * returns the path to a temp file
         *
         * @return string
         */
        public function getTemporaryFile() {}
        public function setCustomSetting($key, $value) {}
        public function getCustomSetting($key) {}
        public function removeCustomSetting($key) {}
        /**
         * @return array
         */
        public function getCustomSettings() {}
        public function setCustomSettings($customSettings) {}
        /**
         * @return string
         */
        public function getMimetype() {}
        public function setMimetype($mimetype) {}
        public function setMetadata($metadata) {}
        /**
         * @return bool
         */
        public function getHasMetaData() {}
        public function setHasMetaData($hasMetaData) {}
        public function addMetadata($name, $type, $data = null, $language = null) {}
        public function getMetadata($name = null, $language = null, $strictMatch = false) {}
        /**
         * @return array
         */
        public function getScheduledTasks() {}
        public function setScheduledTasks($scheduledTasks) {}
        public function saveScheduledTasks() {}
        public function getFileSize($formatted = false, $precision = 2) {}
        /**
         * @return Asset
         */
        public function getParent() {}
        public function setParent($parent) {}
        /**
         * @return string
         */
        public function getImageThumbnailSavePath() {}
        /**
         * @return string
         */
        public function getVideoThumbnailSavePath() {}
        public function __sleep() {}
        public function __wakeup() {}
        public function removeInheritedProperties() {}
        public function renewInheritedProperties() {}
        public function __destruct() {}
        /**
         * @return int
         */
        public function getVersionCount() : int {}
        public function setVersionCount(?int $versionCount) : ElementInterface {}
        /**
         * @inheritdoc
         */
        public function resolveDependencies() {}
    }

    class Factory extends \pimcore\loader\implementationloader\implementationloader implements \pimcore\model\factoryinterface {
        /**
         * @inheritdoc
         */
        public function getClassMap() : array {}
        public function build(string $name, array $params = [ ]) : AbstractModel {}
    }

    /**
     * @method void beginTransaction()
     * @method void commit()
     * @method void rollBack()
     * @method void configure()
     * @method array getValidTableColumns(string $table, bool $cache)
     * @method void resetValidTableColumnsCache(string $table)
     */
    abstract class AbstractModel {
    use \pimcore\model\dataobject\traits\objectvartrait;

        /**
         * @var \Pimcore\Model\Dao\AbstractDao
         */
        protected $dao;
        /**
         * @var array
         */
        static private $daoClassCache;
        /**
         * @var array|null
         */
        static private $daoClassMap;

        /**
         * @return \Pimcore\Model\Dao\AbstractDao
         */
        public function getDao() {}
        public function setDao($dao) {}
        public function initDao($key = null, $forceDetection = false) {}
        public static function locateDaoClass($modelClass) {}
        public function setValues($data = [ ]) {}
        public function setValue($key, $value) {}
        /**
         * @return array
         */
        public function __sleep() {}
        public function __call($method, $args) {}
        public function __clone() {}
        /**
         * @return array
         */
        public function __debugInfo() {}
        /**
         * @return Factory
         */
        protected static function getModelFactory() {}
    }


    interface FactoryInterface extends \pimcore\loader\implementationloader\loaderinterface {
        /**
         * Get class map from all classmap loaders
         *
         * @return array
         */
        function getClassMap() : array ;
    }

}

namespace Pimcore\Model\Schedule {
    /**
     * @method \Pimcore\Model\Schedule\Task\Dao getDao()
     */
    class Task extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * @var int
         */
        public $cid;
        /**
         * @var string
         */
        public $ctype;
        /**
         * @var int
         */
        public $date;
        /**
         * @var string
         */
        public $action;
        /**
         * @var int
         */
        public $version;
        /**
         * @var bool
         */
        public $active;

        public static function getById($id) {}
        public static function create($data) {}
        public function __construct($data = [ ]) {}
        /**
         * @return int
         */
        public function getId() {}
        /**
         * @return int
         */
        public function getCid() {}
        /**
         * @return string
         */
        public function getCtype() {}
        /**
         * @return int
         */
        public function getDate() {}
        /**
         * @return string
         */
        public function getAction() {}
        /**
         * @return int
         */
        public function getVersion() {}
        public function setId($id) {}
        public function setCid($cid) {}
        public function setCtype($ctype) {}
        public function setDate($date) {}
        public function setAction($action) {}
        public function setVersion($version) {}
        /**
         * @return bool
         */
        public function getActive() {}
        public function setActive($active) {}
    }

}

namespace Pimcore\Model\Schedule\Task {
    /**
     * @property \Pimcore\Model\Schedule\Task $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getById($id) {}
        public function save() {}
        /**
         * Create a new record for the object in database
         */
        public function create() {}
        /**
         * Save changes to database, it's an good idea to use save() instead
         */
        public function update() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\Schedule\Task\Listing\Dao getDao()
     * @method Model\Schedule\Task[] load()
     * @method Model\Schedule\Task current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\Schedule\Task[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $tasks;

        public function __construct() {}
        /**
         * @return Model\Schedule\Task[]
         */
        public function getTasks() {}
        public function setTasks($tasks) {}
    }

}

namespace Pimcore\Model\Schedule\Task\Listing {
    /**
     * @property \Pimcore\Model\Schedule\Task\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of thumanils for the specicifies parameters, returns an array of Schedule\Task elements
         *
         * @return array
         */
        public function load() {}
    }

}

namespace Pimcore\Model\GridConfigFavourite {
    /**
     * @property \Pimcore\Model\GridConfigFavourite $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getByOwnerAndClassAndObjectId($ownerId, $classId, $objectId = null, $searchType = null) {}
        /**
         * Save object to database
         *
         * @return Model\GridConfigFavourite
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\GridConfigFavourite\Listing\Dao getDao()
     * @method Model\GridConfigFavourite[] load()
     * @method Model\GridConfigFavourite current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var array|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $gridconfigFavourites;

        public function __construct() {}
        /**
         * @return Model\GridConfigFavourite[]
         */
        public function getGridconfigFavourites() {}
        public function setGridconfigFavourites($gridconfigFavourites) {}
    }

}

namespace Pimcore\Model\GridConfigFavourite\Listing {
    /**
     * @property \Pimcore\Model\GridConfigFavourite\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of gridconfigs for the specicified parameters, returns an array of GridConfigFavourite elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Asset {
    /**
     * @method \Pimcore\Model\Asset\Dao getDao()
     */
    class Document extends \pimcore\model\asset {
        /**
         * @var string
         */
        protected $type;

        protected function update($params = [ ]) {}
        public function delete(bool $isNested = false) {}
        public function processPageCount($path = null) {}
        /**
         * returns null when page count wasn't processed yet (done asynchronously)
         *
         * @return int|null
         */
        public function getPageCount() {}
        public function getImageThumbnail($thumbnailName, $page = 1, $deferred = false) {}
        public function getText($page = null) {}
        public function clearThumbnails($force = false) {}
    }

    /**
     * @property \Pimcore\Model\Asset $model
     */
    class Dao extends \pimcore\model\element\dao {
        public function getById($id) {}
        public function getByPath($path) {}
        public function create() {}
        public function update() {}
        public function delete() {}
        public function updateWorkspaces() {}
        public function updateChildPaths($oldPath) {}
        public function getProperties($onlyInherited = false) {}
        /**
         * deletes all properties for the object from database
         */
        public function deleteAllProperties() {}
        /**
         * deletes all metadata for the object from database
         */
        public function deleteAllMetadata() {}
        /**
         * get versions from database, and assign it to object
         *
         * @return Model\Version[]
         */
        public function getVersions() {}
        public function deleteAllPermissions() {}
        public function deleteAllTasks() {}
        /**
         * @return string retrieves the current full set path from DB
         */
        public function getCurrentFullPath() {}
        /**
         * @return int
         */
        public function getVersionCountForUpdate() : int {}
        /**
         * quick test if there are children
         *
         * @return bool
         */
        public function hasChildren() {}
        /**
         * Quick test if there are siblings
         *
         * @return bool
         */
        public function hasSiblings() {}
        public function getChildAmount($user = null) {}
        /**
         * @return bool
         */
        public function isLocked() {}
        /**
         * @return array
         */
        public function unlockPropagate() {}
        public function getLatestVersion($force = false) {}
        public function isAllowed($type, $user) {}
        public function updateCustomSettings() {}
        /**
         * @return bool
         */
        public function __isBasedOnLatestData() {}
    }

    /**
     * @method \Pimcore\Model\Asset\Dao getDao()
     */
    class Archive extends \pimcore\model\asset {
        /**
         * @var string
         */
        protected $type;

    }

    /**
     * @method \Pimcore\Model\Asset\Dao getDao()
     */
    class Service extends \pimcore\model\element\service {
        /**
         * @var array
         */
        static public $gridSystemColumns;
        /**
         * @var Model\User|null
         */
        protected $_user;
        /**
         * @var array
         */
        protected $_copyRecursiveIds;

        public function __construct($user = null) {}
        public function copyRecursive($target, $source) {}
/** @var Asset $new */
        public function copyAsChild(/** @var Asset $new */
$target, /** @var Asset $new */
$source) {}
        public function copyContents($target, $source) {}
/** @var Asset $asset */
        public static function gridAssetData(/** @var Asset $asset */
$asset, /** @var Asset $asset */
$fields = null, /** @var Asset $asset */
$requestedLanguage = null, /** @var Asset $asset */
$params = [ ]) {}
        public static function getPreviewThumbnail($asset, $params = [ ], $onlyMethod = false) {}
        public static function pathExists($path, $type = null) {}
        public static function loadAllFields(Element\ElementInterface $element) {}
        public static function rewriteIds($asset, $rewriteConfig) {}
        public static function minimizeMetadata($metadata) {}
        public static function expandMetadataForEditmode($metadata) {}
        public static function getUniqueKey($item, $nr = 0) {}
    }

    /**
     * @method \Pimcore\Model\Asset\Dao getDao()
     */
    class Unknown extends \pimcore\model\asset {
        /**
         * @var string
         */
        protected $type;

    }

    /**
     * @method Model\Asset[] load()
     * @method Model\Asset current()
     * @method int getTotalCount()
     * @method int getCount()
     * @method int[] loadIdList()
     * @method \Pimcore\Model\Asset\Listing\Dao getDao()
     * @method onCreateQuery(callable $callback)
     */
    class Listing extends \pimcore\model\listing\abstractlisting implements \zend\paginator\adapteraggregateinterface, \zend\paginator\adapter\adapterinterface {
        /**
         * @var array|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $assets;

        public function __construct() {}
        /**
         * @return Model\Asset[]
         */
        public function getAssets() {}
        public function setAssets($assets) {}
        /**
         * @return int
         */
        public function count() {}
        public function getItems($offset, $itemCountPerPage) {}
        /**
         * @return $this
         */
        public function getPaginatorAdapter() {}
    }

    /**
     * @method \Pimcore\Model\Asset\Dao getDao()
     */
    class Folder extends \pimcore\model\asset {
        /**
         * @var string
         */
        protected $type;
        /**
         * Contains the child elements
         *
         * @var Asset[]
         */
        protected $children;
        /**
         * Indicator if there are children
         *
         * @var bool
         */
        protected $hasChildren;

        public function setChildren($children) {}
        /**
         * @return Asset[]|self[]
         */
        public function getChildren() {}
        /**
         * @return bool
         */
        public function hasChildren() {}
    }

    /**
     * @method \Pimcore\Model\Asset\Dao getDao()
     */
    class Video extends \pimcore\model\asset {
    use \pimcore\model\asset\metadata\embeddedmetadatatrait;

        /**
         * @var string
         */
        protected $type;

        protected function update($params = [ ]) {}
        public function delete(bool $isNested = false) {}
        public function clearThumbnails($force = false) {}
        public function getThumbnailConfig($config) {}
        public function getThumbnail($thumbnailName, $onlyFormats = [ ]) {}
        public function getImageThumbnail($thumbnailName, $timeOffset = null, $imageAsset = null) {}
        protected function getDurationFromBackend(?string $filePath = null) {}
        /**
         * @return array
         *
         * @throws \Exception
         */
        protected function getDimensionsFromBackend() {}
        /**
         * @return int
         */
        public function getDuration() {}
        /**
         * @return array
         */
        public function getDimensions() {}
        /**
         * @return int|null
         */
        public function getWidth() {}
        /**
         * @return int|null
         */
        public function getHeight() {}
        public function getSphericalMetaData() {}
    }

    /**
     * @method \Pimcore\Model\Asset\Dao getDao()
     */
    class Audio extends \pimcore\model\asset {
        /**
         * @var string
         */
        protected $type;

    }

    /**
     * @method \Pimcore\Model\Asset\Dao getDao()
     */
    class Text extends \pimcore\model\asset {
        /**
         * @var string
         */
        protected $type;

    }

    /**
     * @method \Pimcore\Model\Asset\Dao getDao()
     */
    class Image extends \pimcore\model\asset {
    use \pimcore\model\asset\metadata\embeddedmetadatatrait;

        /**
         * @var string
         */
        protected $type;

        protected function update($params = [ ]) {}
        protected function postPersistData() {}
        public function detectFocalPoint() {}
        public function generateLowQualityPreview($generator = null) {}
        /**
         * @return string
         */
        public function getLowQualityPreviewPath() {}
        /**
         * @return string
         */
        public function getLowQualityPreviewFileSystemPath() {}
        /**
         * @return string|null
         */
        public function getLowQualityPreviewDataUri() : ?string {}
        public function delete(bool $isNested = false) {}
        public function clearThumbnails($force = false) {}
        public function clearThumbnail($name) {}
        public function getThumbnailConfig($config) {}
        public function getThumbnail($config = null, $deferred = true) {}
        /**
         * @static
         *
         * @throws \Exception
         *
         * @return null|\Pimcore\Image\Adapter
         */
        public static function getImageTransformInstance() {}
        /**
         * @return string
         */
        public function getFormat() {}
        /**
         * @return string
         */
        public function getRelativeFileSystemPath() {}
        public function getDimensions($path = null, $force = false) {}
        /**
         * @return int
         */
        public function getWidth() {}
        /**
         * @return int
         */
        public function getHeight() {}
        public function setCustomSetting($key, $value) {}
        /**
         * @return bool
         */
        public function isVectorGraphic() {}
        /**
         * Checks if this file represents an animated image (png or gif)
         *
         * @return bool
         */
        public function isAnimated() {}
        /**
         * Checks if this object represents an animated gif file
         *
         * @return bool
         */
        private function isAnimatedGif() {}
        /**
         * Checks if this object represents an animated png file
         *
         * @return bool
         */
        private function isAnimatedPng() {}
    }

}

namespace Pimcore\Model\Asset\Thumbnail {
    trait ImageThumbnailTrait {
        /**
         * @var Asset
         */
        protected $asset;
        /**
         * @var Image\Thumbnail\Config
         */
        protected $config;
        /**
         * @var string
         */
        protected $filesystemPath;
        /**
         * @var int
         */
        protected $width;
        /**
         * @var int
         */
        protected $height;
        /**
         * @var int
         */
        protected $realWidth;
        /**
         * @var int
         */
        protected $realHeight;
        /**
         * @var string
         */
        protected $mimetype;
        /**
         * @var bool
         */
        protected $deferred;
        public function getFileSystemPath($deferredAllowed = false) {}
        public function reset() {}
        /**
         * @return int
         */
        public function getWidth() {}
        /**
         * @return int
         */
        public function getHeight() {}
        /**
         * @return int
         */
        public function getRealWidth() {}
        /**
         * @return int
         */
        public function getRealHeight() {}
        /**
         * @return array
         */
        public function getDimensions() {}
        /**
         * @return Asset
         */
        public function getAsset() {}
        /**
         * @return Image\Thumbnail\Config
         */
        public function getConfig() {}
        public function getChecksum($type = 'md5') {}
        /**
         * @return string
         */
        public function getMimeType() {}
        /**
         * @return string
         */
        public function getFileExtension() {}
        protected function convertToWebPath(string $filesystemPath) : string {}
    }

    trait ClearTempFilesTrait {
        public function doClearTempFiles($rootDir, $name) {}
        protected function recursiveDelete($dir, $thumbnail, $matches = [ ]) {}
    }

}

namespace Pimcore\Model\Asset\Video {
    class ImageThumbnail {
    use \pimcore\model\asset\thumbnail\imagethumbnailtrait;

        /**
         * @var int
         */
        protected $timeOffset;
        /**
         * @var Image
         */
        protected $imageAsset;

        public function __construct($asset, $config = null, $timeOffset = null, $imageAsset = null, $deferred = true) {}
        public function getPath($deferredAllowed = true) {}
        public function generate($deferredAllowed = true) {}
        /**
         * Get the public path to the thumbnail image.
         * This method is here for backwards compatility.
         * Up to Pimcore 1.4.8 a thumbnail was returned as a path to an image.
         *
         * @return string Public path to thumbnail image.
         */
        public function __toString() {}
        protected function createConfig($selector) {}
    }

}

namespace Pimcore\Model\Asset\Video\Thumbnail {
    /**
     * @method \Pimcore\Model\Asset\Video\Thumbnail\Config\Dao getDao()
     * @method void save()
     * @method void delete()
     */
    class Config extends \pimcore\model\abstractmodel {
    use \pimcore\model\asset\thumbnail\cleartempfilestrait;

        /**
         * format of array:
         * array(
     array(
     "method" => "myName",
     "arguments" =>
     array(
     "width" => 345,
     "height" => 200
     )
     )
         * )
         *
         * @var array
         */
        public $items;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $description;
        /**
         * @var string
         */
        public $group;
        /**
         * @var int
         */
        public $videoBitrate;
        /**
         * @var int
         */
        public $audioBitrate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $creationDate;

        public static function getByName($name) {}
        /**
         * @return Config
         */
        public static function getPreviewConfig() {}
        public function addItem($name, $parameters) {}
        public function addItemAt($position, $name, $parameters) {}
        public function resetItems() {}
        public function setDescription($description) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setItems($items) {}
        /**
         * @return array
         */
        public function getItems() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setAudioBitrate($audioBitrate) {}
        /**
         * @return int
         */
        public function getAudioBitrate() {}
        public function setVideoBitrate($videoBitrate) {}
        /**
         * @return int
         */
        public function getVideoBitrate() {}
        /**
         * @return array
         */
        public function getEstimatedDimensions() {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return string
         */
        public function getGroup() : string {}
        public function setGroup(string $group) : void {}
        public function clearTempFiles() {}
    }

    class Processor {
        /**
         * @var array
         */
        static protected $argumentMapping;
        /**
         * @var array
         */
        public $queue;
        /**
         * @var string
         */
        public $processId;
        /**
         * @var int
         */
        public $assetId;
        /**
         * @var Config
         */
        public $config;
        /**
         * @var int
         */
        public $status;

        public static function process(Model\Asset\Video $asset, $config, $onlyFormats = [ ]) {}
        public static function execute($processId) {}
        public function convert() {}
        /**
         * @return bool
         */
        public function save() {}
        protected function getJobStoreId($processId = null) {}
        public function setProcessId($processId) {}
        /**
         * @return string
         */
        public function getProcessId() {}
        public function setAssetId($assetId) {}
        /**
         * @return int
         */
        public function getAssetId() {}
        public function setConfig($config) {}
        /**
         * @return Config
         */
        public function getConfig() {}
        public function setQueue($queue) {}
        /**
         * @return array
         */
        public function getQueue() {}
    }

}

namespace Pimcore\Model\Asset\Video\Thumbnail\Config {
    /**
     * @property \Pimcore\Model\Asset\Video\Thumbnail\Config $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        public function getByName($id = null) {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
        protected function autoClearTempFiles() {}
    }

    /**
     * @method \Pimcore\Model\Asset\Video\Thumbnail\Config load()
     * @method \Pimcore\Model\Asset\Video\Thumbnail\Config\Listing\Dao getDao()
     */
    class Listing extends \pimcore\model\listing\jsonlisting {
        /**
         * @var \Pimcore\Model\Asset\Video\Thumbnail\Config[]|null
         */
        protected $thumbnails;

        /**
         * @return \Pimcore\Model\Asset\Video\Thumbnail\Config[]
         */
        public function getThumbnails() {}
        public function setThumbnails($thumbnails) {}
    }

}

namespace Pimcore\Model\Asset\Video\Thumbnail\Config\Listing {
    /**
     * @property \Pimcore\Model\Asset\Video\Thumbnail\Config\Listing $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        /**
         * Loads a list of predefined properties for the specicifies parameters, returns an array of Property\Predefined elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Asset\Document {
    class ImageThumbnail {
    use \pimcore\model\asset\thumbnail\imagethumbnailtrait;

        /**
         * @var int
         */
        protected $page;

        public function __construct($asset, $config = null, $page = 1, $deferred = true) {}
        public function getPath($deferredAllowed = true) {}
        public function generate($deferredAllowed = true) {}
        /**
         * Get the public path to the thumbnail image.
         * This method is here for backwards compatility.
         * Up to Pimcore 1.4.8 a thumbnail was returned as a path to an image.
         *
         * @return string Public path to thumbnail image.
         */
        public function __toString() {}
        protected function createConfig($selector) {}
    }

}

namespace Pimcore\Model\Asset\Image {
    class Thumbnail {
    use \pimcore\model\asset\thumbnail\imagethumbnailtrait;

        /**
         * @var string[]
         */
        static protected $hasListenersCache;

        public function __construct($asset, $config = null, $deferred = true) {}
        public function getPath($deferredAllowed = true) {}
        protected function hasListeners(string $eventName) : bool {}
        protected function useOriginalFile($filename) {}
        public function generate($deferredAllowed = true) {}
        /**
         * Get the public path to the thumbnail image.
         * This method is here for backwards compatility.
         * Up to Pimcore 1.4.8 a thumbnail was returned as a path to an image.
         *
         * @return string Public path to thumbnail image.
         */
        public function __toString() {}
        protected function addCacheBuster(string $path, array $options, Image $asset) : string {}
/** @var Image $image */
        public function getHtml(/** @var Image $image */
$options = [ ], /** @var Image $image */
$removeAttributes = [ ]) {}
        public function getMedia($name, $highRes = 1) {}
        protected function createConfig($selector) {}
    }

}

namespace Pimcore\Model\Asset\Image\Thumbnail {
    /**
     * @method \Pimcore\Model\Asset\Image\Thumbnail\Config\Dao getDao()
     * @method void save()
     * @method void delete()
     */
    class Config extends \pimcore\model\abstractmodel {
    use \pimcore\model\asset\thumbnail\cleartempfilestrait;

        protected const PREVIEW_THUMBNAIL_NAME = 'pimcore-system-treepreview';

        /**
         * format of array:
         * array(
     array(
     "method" => "myName",
     "arguments" =>
     array(
     "width" => 345,
     "height" => 200
     )
     )
         * )
         *
         * @var array
         */
        public $items;
        /**
         * @var array
         */
        public $medias;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $description;
        /**
         * @var string
         */
        public $group;
        /**
         * @var string
         */
        public $format;
        /**
         * @var int
         */
        public $quality;
        /**
         * @var float
         */
        public $highResolution;
        /**
         * @var bool
         */
        public $preserveColor;
        /**
         * @var bool
         */
        public $preserveMetaData;
        /**
         * @var bool
         */
        public $rasterizeSVG;
        /**
         * @var bool
         */
        public $downloadable;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var string
         */
        public $filenameSuffix;
        /**
         * @var bool
         */
        public $forcePictureTag;

        public static function getByAutoDetect($config) {}
        public static function getByName($name) {}
        protected static function getCacheKey(string $name) : string {}
        public static function exists(string $name) : bool {}
        public static function getPreviewConfig($hdpi = false) {}
        /**
         * Returns thumbnail config for webservice export.
         *
         * @deprecated
         */
        public function getForWebserviceExport() {}
        protected function createMediaIfNotExists($name) {}
        public function addItem($name, $parameters, $media = null) {}
        public function addItemAt($position, $name, $parameters, $media = null) {}
        public function resetItems() {}
        public function selectMedia($name) {}
        public function setDescription($description) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setItems($items) {}
        /**
         * @return array
         */
        public function getItems() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setFormat($format) {}
        /**
         * @return string
         */
        public function getFormat() {}
        public function setQuality($quality) {}
        /**
         * @return int
         */
        public function getQuality() {}
        public function setHighResolution($highResolution) {}
        /**
         * @return float
         */
        public function getHighResolution() {}
        public function setMedias($medias) {}
        /**
         * @return array
         */
        public function getMedias() {}
        /**
         * @return bool
         */
        public function hasMedias() {}
        public function setFilenameSuffix($filenameSuffix) {}
        /**
         * @return string
         */
        public function getFilenameSuffix() {}
        public static function getByArrayConfig($config) {}
        public static function getByLegacyConfig($config) {}
        public function getEstimatedDimensions($asset) {}
        public function setColorspace($colorspace) {}
        /**
         * @deprecated
         */
        public function getColorspace() {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return bool
         */
        public function isPreserveColor() {}
        public function setPreserveColor($preserveColor) {}
        /**
         * @return bool
         */
        public function isPreserveMetaData() {}
        public function setPreserveMetaData($preserveMetaData) {}
        /**
         * @return bool
         */
        public function isRasterizeSVG() : bool {}
        public function setRasterizeSVG(bool $rasterizeSVG) : void {}
        /**
         * @return bool
         */
        public function isSvgTargetFormatPossible() {}
        /**
         * @return string
         */
        public function getGroup() : string {}
        public function setGroup(string $group) : void {}
        /**
         * @return bool
         */
        public function getForcePictureTag() : bool {}
        public function setForcePictureTag(bool $forcePictureTag) : void {}
        /**
         * @return bool
         */
        public function isDownloadable() : bool {}
        public function setDownloadable(bool $downloadable) : void {}
        public function clearTempFiles() {}
    }

    class Processor {
        /**
         * @var array
         */
        static protected $argumentMapping;
        /**
         * @var null|bool
         */
        static protected $hasWebpSupport;

        public static function getAllowedFormat($format, $allowed = [ ], $fallback = 'png') {}
        public static function process(Asset $asset, Config $config, $fileSystemPath = null, $deferred = false, $returnAbsolutePath = false, $generated = false) {}
        protected static function returnPath($path, $absolute) {}
        public static function setHasWebpSupport(?bool $webpSupport) : ?bool {}
        /**
         * @return bool
         */
        protected static function hasWebpSupport() : bool {}
    }

}

namespace Pimcore\Model\Asset\Image\Thumbnail\Config {
    /**
     * @property \Pimcore\Model\Asset\Image\Thumbnail\Config $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        public function getByName($id = null) {}
        public function exists(string $name) : bool {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
        protected function autoClearTempFiles() {}
    }

    /**
     * @method Model\Asset\Image\Thumbnail\Config[] load()
     * @method \Pimcore\Model\Asset\Image\Thumbnail\Config\Listing\Dao getDao()
     */
    class Listing extends \pimcore\model\listing\jsonlisting {
        /**
         * @var Model\Asset\Image\Thumbnail\Config[]|null
         */
        protected $thumbnails;

        /**
         * @return Model\Asset\Image\Thumbnail\Config[]
         */
        public function getThumbnails() {}
        public function setThumbnails($thumbnails) {}
    }

}

namespace Pimcore\Model\Asset\Image\Thumbnail\Config\Listing {
    /**
     * @property \Pimcore\Model\Asset\Image\Thumbnail\Config\Listing $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        /**
         * Loads a list of predefined properties for the specicifies parameters, returns an array of Property\Predefined elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Asset\WebDAV {
    class Service {
        /**
         * @return string
         */
        public static function getDeleteLogFile() {}
        /**
         * @return array|mixed
         */
        public static function getDeleteLog() {}
        public static function saveDeleteLog($log) {}
    }

    class File extends \sabre\dav\file {
        /**
         * @var Asset
         */
        private $asset;

        public function __construct($asset) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setName($name) {}
        /**
         * @throws DAV\Exception\Forbidden
         * @throws \Exception
         */
        public function delete() {}
        /**
         * @return int
         */
        public function getLastModified() {}
        public function put($data) {}
        /**
         * @return mixed|void
         *
         * @throws DAV\Exception\Forbidden
         */
        public function get() {}
        /**
         * Get a hash of the file for an unique identifier
         *
         * @return string
         */
        public function getETag() {}
        /**
         * Returns the mimetype of the asset
         *
         * @return string
         */
        public function getContentType() {}
        /**
         * Get size of file in bytes
         *
         * @return int
         */
        public function getSize() {}
    }

    class Folder extends \sabre\dav\collection {
        /**
         * @var Asset
         */
        private $asset;

        public function __construct($asset) {}
        /**
         * Returns the children of the asset if the asset is a folder
         *
         * @return array
         */
        public function getChildren() {}
        public function getChild($name) {}
        /**
         * @return string
         */
        public function getName() {}
        public function createFile($name, $data = null) {}
        public function createDirectory($name) {}
        /**
         * @throws DAV\Exception\Forbidden
         * @throws \Exception
         */
        public function delete() {}
        public function setName($name) {}
        /**
         * @return int
         */
        public function getLastModified() {}
    }

    class Tree extends \sabre\dav\tree {
        public function move($sourcePath, $destinationPath) {}
    }

}

namespace Pimcore\Model\Asset\Listing {
    /**
     * @property \Pimcore\Model\Asset\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * @var \Closure
         */
        protected $onCreateQueryCallback;

        /**
         * Get the assets from database
         *
         * @return array
         */
        public function load() {}
        public function getQuery($columns) {}
        /**
         * Loads a list of document IDs for the specified parameters, returns an array of ids
         *
         * @return int[]
         */
        public function loadIdList() {}
        /**
         * @return int
         */
        public function getCount() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
        public function onCreateQuery(callable $callback) {}
    }

}

namespace Pimcore\Model\Asset\MetaData {
    trait EmbeddedMetaDataTrait {
        public function getEmbeddedMetaData(bool $force, bool $useExifTool = true) {}
        protected function handleEmbeddedMetaData(bool $useExifTool = true, ?string $filePath = null) {}
        protected function readEmbeddedMetaData(bool $useExifTool = true, ?string $filePath = null) : array {}
        private function flattenArray(array $tempArray) {}
        public function getEXIFData(?string $filePath = null) {}
        public function getXMPData(?string $filePath = null) {}
        public function getIPTCData(?string $filePath = null) {}
    }

}

namespace Pimcore\Model\WebsiteSetting {
    /**
     * @property \Pimcore\Model\WebsiteSetting $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        public function getById($id = null) {}
        public function getByName($name = null, $siteId = null, $language = null) {}
        /**
         * Save object to database
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\WebsiteSetting\Listing\Dao getDao()
     * @method \Pimcore\Model\WebsiteSetting[] load()
     */
    class Listing extends \pimcore\model\listing\jsonlisting {
        /**
         * @var array|null
         */
        protected $settings;

        public function setSettings($settings) {}
        /**
         * @return \Pimcore\Model\WebsiteSetting[]
         */
        public function getSettings() {}
    }

}

namespace Pimcore\Model\WebsiteSetting\Listing {
    /**
     * @property \Pimcore\Model\WebsiteSetting\Listing $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        /**
         * Loads a list of static routes for the specified parameters, returns an array of Staticroute elements
         *
         * @return \Pimcore\Model\WebsiteSetting[]
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Translation {
    /**
     * @method \Pimcore\Model\Translation\Website\Dao getDao()
     */
    class Website extends \pimcore\model\translation\abstracttranslation {
        /**
         * @return array
         */
        public static function getLanguages() : array {}
    }

    /**
     * @method \Pimcore\Model\Translation\AbstractTranslation\Dao getDao()
     */
    abstract class AbstractTranslation extends \pimcore\model\abstractmodel implements \pimcore\model\translation\translationinterface {
        /**
         * @var string
         */
        public $key;
        /**
         * @var string[]
         */
        public $translations;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;

        public static function isValidLanguage($locale) : bool {}
        /**
         * @return string
         */
        public function getKey() {}
        public function setKey($key) {}
        /**
         * @return string[]
         */
        public function getTranslations() {}
        public function setTranslations($translations) {}
        public function setDate($date) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        public function setCreationDate($date) {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setModificationDate($date) {}
        public function addTranslation($language, $text) {}
        public function getTranslation($language) {}
        public function hasTranslation($language) {}
        public static function clearDependentCache() {}
        public static function getByKey($id, $create = false, $returnIdIfEmpty = false) {}
        public static function getByKeyLocalized($id, $create = false, $returnIdIfEmpty = false, $language = null) {}
        public function save() {}
        public function delete() {}
        public static function importTranslationsFromFile($file, $replaceExistingTranslations = true, $languages = null, $dialect = null) {}
        public function getFromWebserviceImport($data) {}
        /**
         * @deprecated
         *
         * @return array
         */
        public function getForWebserviceExport() {}
    }

    /**
     * @method \Pimcore\Model\Translation\Admin\Dao getDao()
     */
    class Admin extends \pimcore\model\translation\abstracttranslation {
        /**
         * @return array
         */
        public static function getLanguages() : array {}
        public static function getByKeyLocalized($id, $create = false, $returnIdIfEmpty = false, $language = null) {}
    }


    interface TranslationInterface {
        /**
         * Returns a list of valid languages
         *
         * @return array
         */
        static function getLanguages() : array ;
        static function isValidLanguage($locale) : bool ;
        static function getByKey($id) ;
    }

}

namespace Pimcore\Model\Translation\AbstractTranslation {
    /**
     * @property \Pimcore\Model\Translation\AbstractTranslation $model
     */
    abstract class Dao extends \pimcore\model\dao\abstractdao implements \pimcore\model\translation\abstracttranslation\dao\daointerface {
        public function getByKey($key) {}
        /**
         * Save object to database
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
        /**
         * Returns a array containing all available languages
         *
         * @return array
         */
        public function getAvailableLanguages() {}
    }

    /**
     * @method \Pimcore\Model\Translation\AbstractTranslation\Listing\Dao getDao()
     * @method Model\Translation\AbstractTranslation[] load()
     * @method Model\Translation\AbstractTranslation current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /** @var int maximum number of cacheable items */
        static protected $cacheLimit;
        /**
         * @var array|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $translations;

        public function __construct() {}
        /**
         * @return \Pimcore\Model\Translation\AbstractTranslation[]
         */
        public function getTranslations() {}
        public function setTranslations($translations) {}
        /**
         * @return int
         */
        public static function getCacheLimit() {}
        public static function setCacheLimit($cacheLimit) {}
    }

}

namespace Pimcore\Model\Translation\AbstractTranslation\Dao {
    interface DaoInterface {
        static function getTableName() ;
    }

}

namespace Pimcore\Model\Translation\AbstractTranslation\Listing {
    /**
     * @property \Pimcore\Model\Translation\AbstractTranslation\Listing $model
     */
    abstract class Dao extends \pimcore\model\listing\dao\abstractdao implements \pimcore\model\translation\abstracttranslation\listing\dao\daointerface {
        /**
         * @var \Closure
         */
        protected $onCreateQueryCallback;

        /**
         * @return int
         */
        public function getTotalCount() {}
        /**
         * @return int
         */
        public function getCount() {}
        /**
         * @return array|mixed
         */
        public function getAllTranslations() {}
        /**
         * @return array
         */
        public function loadRaw() {}
        /**
         * @return array
         */
        public function load() {}
        /**
         * @return bool
         */
        public function isCacheable() {}
        public function cleanup() {}
        public function onCreateQuery(callable $callback) {}
    }

}

namespace Pimcore\Model\Translation\AbstractTranslation\Listing\Dao {
    interface DaoInterface {
        static function getTableName() ;
        static function getItemClass() ;
    }

}

namespace Pimcore\Model\Translation\Website {
    /**
     * @property \Pimcore\Model\Translation\Website $model
     */
    class Dao extends \pimcore\model\translation\abstracttranslation\dao {
        /**
         * @var string
         */
        static public $_tableName;

        /**
         * @return mixed
         */
        public static function getTableName() {}
    }

    /**
     * @method \Pimcore\Model\Translation\Website\Listing\Dao getDao()
     */
    class Listing extends \pimcore\model\translation\abstracttranslation\listing {}

}

namespace Pimcore\Model\Translation\Website\Listing {
    /**
     * @property \Pimcore\Model\Translation\Website\Listing $model
     */
    class Dao extends \pimcore\model\translation\abstracttranslation\listing\dao {
        /**
         * Loads a list of translations for the specified parameters, returns an array of Translation elements
         *
         * @return array
         */
        public static function getTableName() {}
        /**
         * @return string
         */
        public static function getItemClass() {}
    }

}

namespace Pimcore\Model\Translation\Admin {
    /**
     * @property \Pimcore\Model\Translation\Admin $model
     */
    class Dao extends \pimcore\model\translation\abstracttranslation\dao {
        /**
         * @var string
         */
        static public $_tableName;

        /**
         * @return string
         */
        public static function getTableName() {}
    }

    /**
     * @method \Pimcore\Model\Translation\Admin\Listing\Dao getDao()
     */
    class Listing extends \pimcore\model\translation\abstracttranslation\listing {}

}

namespace Pimcore\Model\Translation\Admin\Listing {
    /**
     * @property \Pimcore\Model\Translation\Admin\Listing $model
     */
    class Dao extends \pimcore\model\translation\abstracttranslation\listing\dao {
        /**
         * Loads a list of translations for the specified parameters, returns an array of Translation elements
         *
         * @return array
         */
        public static function getTableName() {}
        /**
         * @return string
         */
        public static function getItemClass() {}
    }

}

namespace Pimcore\Model\Property {
    /**
     * @property \Pimcore\Model\Property $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        /**
         * @return mixed
         */
        public function getRawData() {}
        /**
         * Save object to database
         */
        public function save() {}
    }

    /**
     * @method Predefined\Dao getDao()
     * @method void save()
     * @method void delete()
     */
    class Predefined extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $description;
        /**
         * @var string
         */
        public $key;
        /**
         * @var string
         */
        public $type;
        /**
         * @var string
         */
        public $data;
        /**
         * @var string
         */
        public $config;
        /**
         * @var string
         */
        public $ctype;
        /**
         * @var bool
         */
        public $inheritable;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;

        public static function getById($id) {}
        public static function getByKey($key) {}
        /**
         * @return self
         */
        public static function create() {}
        /**
         * @return string
         */
        public function getKey() {}
        /**
         * @return string
         */
        public function getName() {}
        /**
         * @return string
         */
        public function getType() {}
        /**
         * @return string
         */
        public function getData() {}
        public function setKey($key) {}
        public function setName($name) {}
        public function setType($type) {}
        public function setData($data) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setId($id) {}
        /**
         * @return string
         */
        public function getConfig() {}
        public function setConfig($config) {}
        /**
         * @return string
         */
        public function getCtype() {}
        public function setCtype($ctype) {}
        /**
         * @return string
         */
        public function getInheritable() {}
        public function setInheritable($inheritable) {}
        public function setDescription($description) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return int
         */
        public function getModificationDate() {}
    }

}

namespace Pimcore\Model\Property\Predefined {
    /**
     * @property \Pimcore\Model\Property\Predefined $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        public function getById($id = null) {}
        public function getByKey($key = null) {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\Property\Predefined\Listing\Dao getDao()
     */
    class Listing extends \pimcore\model\listing\jsonlisting {
        /**
         * @var array|null
         */
        protected $properties;

        /**
         * @return \Pimcore\Model\Property\Predefined[]
         */
        public function getProperties() {}
        public function setProperties($properties) {}
    }

}

namespace Pimcore\Model\Property\Predefined\Listing {
    /**
     * @property \Pimcore\Model\Property\Predefined\Listing $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        /**
         * Loads a list of predefined properties for the specicifies parameters, returns an array of Property\Predefined elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Notification {
    /**
     * @package Pimcore\Model\Notification
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        const DB_TABLE_NAME = 'notifications';

        public function getById(int $id) : void {}
        /**
         * Save notification
         */
        public function save() {}
        /**
         * Delete notification
         */
        public function delete() : void {}
        protected function assignVariablesToModel($data) {}
        protected function getData(Notification $model) : array {}
        /**
         * @return Notification
         */
        protected function getModel() : Notification {}
    }

    /**
     * @method Listing\Dao getDao()
     * @method Model\Notification[] load()
     * @method Model\Notification current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var array|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $notifications;

        public function __construct() {}
        public function isValidOrderKey($key) {}
        public function getItems(int $offset, int $limit) : array {}
        /**
         * @return Model\Notification[]
         */
        public function getNotifications() : array {}
        public function setNotifications(array $notifications) : self {}
    }

}

namespace Pimcore\Model\Notification\Listing {
    /**
     * @package Pimcore\Model\Notification\Listing
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        const DB_TABLE_NAME = 'notifications';

        /**
         * @return int
         */
        public function count() : int {}
        /**
         * @return array
         *
         * @throws \Doctrine\DBAL\DBALException
         */
        public function load() : array {}
        /**
         * @return Notification\Listing
         */
        protected function getModel() : Notification\Listing {}
    }

}

namespace Pimcore\Model\Notification\Service {
    class NotificationService {
        /** @var UserService */
        private $userService;

        public function __construct(UserService $userService) {}
        public function sendToUser(int $userId, int $fromUser, string $title, string $message, ?ElementInterface $element = null) {}
        public function sendToGroup(int $groupId, int $fromUser, string $title, string $message, ?ElementInterface $element = null) {}
        public function find(int $id) : Notification {}
        public function findAndMarkAsRead(int $id, ?int $recipientId = null) : Notification {}
        public function findAll(array $filter = [ ], array $options = [ ]) : array {}
        public function findLastUnread(int $user, int $lastUpdate) : array {}
        public function format(Notification $notification) : array {}
        public function countAllUnread(int $user) : int {}
        public function delete(int $id, ?int $recipientId = null) : void {}
        public function deleteAll(int $user) : void {}
        private function beginTransaction() : void {}
        private function commit() : void {}
    }

    /**
     * Class ExtJSFilterParser
     */
    class NotificationServiceFilterParser {
        const OPERATOR_LT = 'lt';
        const OPERATOR_EQ = 'eq';
        const OPERATOR_GT = 'gt';
        const KEY_PROPERTY = 'property';
        const KEY_OPERATOR = 'operator';
        const KEY_FILTER = 'filter';
        const KEY_TYPE = 'type';
        const TYPE_DATE = 'date';
        const OPERATOR_LIKE = 'like';
        const KEY_VALUE = 'value';
        const TYPE_STRING = 'string';

        /**
         * @var Request
         */
        private $request;
        /**
         * @var array
         */
        private $properties;

        public function __construct(Request $request) {}
        /**
         * @return array
         */
        public function parse() : array {}
        private function parseString(array $item) : array {}
        private function parseDate(array $item) : array {}
        private function getDbProperty(array $item) : string {}
    }

    class UserService {
        public function findAll(User $loggedIn) : array {}
/** @var User $user */
        public function filterUsersWithPermission(/** @var User $user */
array $users) : array {}
    }

}

namespace Pimcore\Model\Element {
    class PermissionChecker {
/** @var User $user */
        public static function check(/** @var User $user */
ElementInterface $element, /** @var User $user */
$users) {}
        protected static function collectParentIds($element) {}
        protected static function createDetail($user, $a = null, $b = null, $c = null, $d = null, $e = null, $f = null) {}
        protected static function getUserPermissions($user, $details) {}
        protected static function getLanguagePermissions($user, $element, $details) {}
    }

    /**
     * @property \Pimcore\Model\Element\AbstractElement $model
     */
    abstract class Dao extends \pimcore\model\dao\abstractdao {
        /**
         * @return int[]
         *
         * @throws \Exception
         */
        public function getParentIds() {}
        protected function extractKeyAndPath($fullpath) {}
        /**
         * @return int
         */
        abstract public function getVersionCountForUpdate() : int ;
    }

    /**
     * @method \Pimcore\Model\Element\Editlock\Dao getDao()
     */
    class Editlock extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * @var int
         */
        public $cid;
        /**
         * @var string
         */
        public $ctype;
        /**
         * @var int
         */
        public $userId;
        /**
         * @var string
         */
        public $sessionId;
        /**
         * @var int
         */
        public $date;
        /**
         * @var string
         */
        public $cpath;

        public static function isLocked($cid, $ctype) {}
        public static function getByElement($cid, $ctype) {}
        public static function clearSession($sessionId) {}
        public static function lock($cid, $ctype) {}
        public static function unlock($cid, $ctype) {}
        /**
         * @return int
         */
        public function getCid() {}
        /**
         * @return int
         */
        public function getId() {}
        /**
         * @return int
         */
        public function getUserId() {}
        public function setCid($cid) {}
        public function setId($id) {}
        public function setUserId($userId) {}
        /**
         * @return string
         */
        public function getCtype() {}
        public function setCtype($ctype) {}
        /**
         * @return string
         */
        public function getSessionId() {}
        public function setSessionId($sessionId) {}
        /**
         * @return Model\User|null
         */
        public function getUser() {}
        /**
         * @return int
         */
        public function getDate() {}
        public function setDate($date) {}
        public function setCpath($cpath) {}
        /**
         * @return string
         */
        public function getCpath() {}
    }

    /**
     * @method \Pimcore\Model\Element\Note\Dao getDao()
     */
    class Note extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $type;
        /**
         * @var int
         */
        public $cid;
        /**
         * @var string
         */
        public $ctype;
        /**
         * @var int
         */
        public $date;
        /**
         * @var int
         */
        public $user;
        /**
         * @var string
         */
        public $title;
        /**
         * @var string
         */
        public $description;
        /**
         * @var array
         */
        public $data;

        public static function getById($id) {}
        public function addData($name, $type, $data) {}
        public function setElement(ElementInterface $element) {}
        public function save() {}
        public function setCid($cid) {}
        /**
         * @return int
         */
        public function getCid() {}
        public function setCtype($ctype) {}
        /**
         * @return string
         */
        public function getCtype() {}
        public function setData($data) {}
        /**
         * @return array
         */
        public function getData() {}
        public function setDate($date) {}
        /**
         * @return int
         */
        public function getDate() {}
        public function setDescription($description) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setTitle($title) {}
        /**
         * @return string
         */
        public function getTitle() {}
        public function setType($type) {}
        /**
         * @return string
         */
        public function getType() {}
        public function setUser($user) {}
        /**
         * @return int
         */
        public function getUser() {}
    }

    /**
     * @method \Pimcore\Model\Element\Dao getDao()
     */
    class Service extends \pimcore\model\abstractmodel {
        public static function getIdPath($element) {}
        public static function getTypePath($element) {}
        public static function getIdList($list, $idGetter = 'getId') {}
        public static function getRequiredByDependenciesForFrontend(Dependency $d, $offset, $limit) {}
        public static function getRequiresDependenciesForFrontend(Dependency $d, $offset, $limit) {}
        public static function getDependencyForFrontend($element) {}
        public static function getDependedElement($config) {}
        public static function isPublished($element = null) {}
        public static function filterUnpublishedAdvancedElements($data) {}
        public static function getElementByPath($type, $path) {}
        public static function getBaseClassNameForElement($element) {}
        public static function getSaveCopyName($type, $sourceKey, $target) {}
        public static function pathExists($path, $type = null) {}
        public static function getElementById($type, $id, $force = false) {}
        public static function getElementType($element) {}
        public static function getElementHash(ElementInterface $element) : string {}
        public static function getType($element) {}
        public static function minimizePropertiesForEditmode($props) {}
/**
 * @var ElementInterface $child
 */
        protected function updateChildren(/**
 * @var ElementInterface $child
 */
$target, /**
 * @var ElementInterface $child
 */
$new) {}
        public static function gridElementData(ElementInterface $element) {}
        public static function getFilename(ElementInterface $element) {}
        public static function findForbiddenPaths($type, $user) {}
        public static function renewReferences($data, $initial = true, $key = null) {}
        public static function correctPath($path) {}
        public static function loadAllFields(ElementInterface $element) {}
        /**
         * clean up broken views which were generated by localized fields, ....
         * when removing a language the view isn't valid anymore
         */
        public function cleanupBrokenViews() {}
        private static function filterNullValues($var) {}
        public static function createFolderByPath($path, $options = [ ]) {}
        public static function addTreeFilterJoins($cv, $childsList) {}
        public static function getCustomViewById($id) {}
        public static function getValidKey($key, $type) {}
        public static function isValidKey($key, $type) {}
        public static function isValidPath($path, $type) {}
        public static function getUniqueKey($element) {}
        public static function fixAllowedTypes($data, $type) {}
        public static function getSafeVersionInfo($versions) {}
        public static function cloneMe(ElementInterface $element) {}
        public static function getNoteData(Note $note) {}
        public static function getSessionKey($type, $elementId, $postfix = '') {}
        public static function getElementFromSession($type, $elementId, $postfix = '') {}
        public static function saveElementToSession($element, $postfix = '', $clone = true) {}
        public static function removeElementFromSession($type, $elementId, $postfix = '') {}
        public static function getElementAdminStyle(ElementInterface $element, $context) {}
    }

    /**
     * @method \Pimcore\Model\Element\Tag\Dao getDao()
     */
    class Tag extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $name;
        /**
         * @var int
         */
        public $parentId;
        /**
         * @var string
         */
        public $idPath;
        /**
         * @var Tag[]
         */
        public $children;
        /**
         * @var Tag
         */
        public $parent;

        public static function getById($id) {}
        public static function getTagsForElement($cType, $cId) {}
        public static function addTagToElement($cType, $cId, Tag $tag) {}
        public static function removeTagFromElement($cType, $cId, Tag $tag) {}
        public static function setTagsForElement($cType, $cId, array $tags) {}
        public static function batchAssignTagsToElement($cType, array $cIds, array $tagIds, $replace = false) {}
        public static function getElementsForTag(Tag $tag, $type, array $subtypes = [ ], $classNames = [ ], $considerChildTags = false) {}
        public function save() {}
        /**
         * @return int
         */
        public function getId() {}
        public function setId($id) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setName($name) {}
        /**
         * @return int
         */
        public function getParentId() {}
        public function setParentId($parentId) {}
        /**
         * @return Tag
         */
        public function getParent() {}
        /**
         * @return string
         */
        public function getIdPath() {}
        /**
         * @return string
         */
        public function getFullIdPath() {}
        public function getNamePath($includeOwnName = true) {}
        /**
         * @return Tag[]
         */
        public function getChildren() {}
        /**
         * @return bool
         */
        public function hasChildren() {}
        public function correctPath() {}
    }

    /**
     * @method \Pimcore\Model\Element\Dao getDao()
     */
    abstract class AbstractElement extends \pimcore\model\abstractmodel implements \pimcore\model\element\elementdumpstateinterface, \pimcore\model\element\elementinterface {
    use \pimcore\model\element\elementdumpstatetrait;

        /**
         * @var int
         */
        protected $__dataVersionTimestamp;

        protected function updateModificationInfos() {}
        public function getProperty($name, $asContainer = false) {}
        public function hasProperty($name) {}
        abstract public function setProperties($properties) ;
        public function removeProperty($name) {}
        /**
         * get the cache tag for the element
         *
         * @return string
         */
        public function getCacheTag() {}
        public function getCacheTags($tags = [ ]) {}
        /**
         * Resolves the dependencies of the element and returns an array of them - Used by update()
         *
         * @return array
         */
        public function resolveDependencies() {}
        /**
         * Returns true if the element is locked
         *
         * @return bool
         */
        public function isLocked() {}
        /**
         * @return string
         */
        abstract public function getLocked() ;
        /**
         * @return array
         */
        public function getUserPermissions() {}
        public function isAllowed($type) {}
        public function unlockPropagate() {}
        protected function validatePathLength() {}
        /**
         * @return string
         */
        public function __toString() {}
        /**
         * @return int
         */
        public function __getDataVersionTimestamp() {}
        public function __setDataVersionTimestamp($_dataVersionTimestamp) {}
        /**
         * @return bool
         */
        public function __isBasedOnLatestData() {}
/**
 * @var Model\Version $version
 */
        protected function doSaveVersion(/**
 * @var Model\Version $version
 */
$versionNote = null, /**
 * @var Model\Version $version
 */
$saveOnlyVersion = true) {}
    }

    class ValidationException extends \exception {
        /**
         * @var array
         */
        protected $contextStack;
        /** @var array */
        protected $subItems;

        /**
         * @return array
         */
        public function getSubItems() {}
        public function setSubItems($subItems) {}
        public function addContext($context) {}
        /**
         * @return array
         */
        public function getContextStack() {}
        /**
         * @return string
         */
        public function __toString() {}
    }

    /**
     * @method \Pimcore\Model\Element\Recyclebin\Dao getDao()
     */
    class Recyclebin extends \pimcore\model\abstractmodel {
        public function flush() {}
    }

    /**
     * @method \Pimcore\Model\Element\WorkflowState\Dao getDao()
     */
    class WorkflowState extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $cid;
        /**
         * @var string
         */
        public $ctype;
        /**
         * @var string
         */
        public $workflow;
        /**
         * @var string
         */
        public $place;

        public static function getByPrimary(int $cid, string $ctype, string $workflow) {}
        /**
         * @return int
         */
        public function getCid() {}
        public function setCid($cid) {}
        /**
         * @return string
         */
        public function getCtype() {}
        public function setCtype($ctype) {}
        /**
         * @return string
         */
        public function getPlace() : string {}
        public function setPlace(string $place) {}
        /**
         * @return string
         */
        public function getWorkflow() {}
        public function setWorkflow(string $workflow) {}
    }

    /**
     * @method \Pimcore\Model\Element\Sanitycheck\Dao getDao()
     */
    class Sanitycheck extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $type;

        /**
         * @return int
         */
        public function getId() {}
        public function setId($id) {}
        /**
         * @return string
         */
        public function getType() {}
        public function setType($type) {}
        /**
         * saves sanity check to db
         */
        public function save() {}
        /**
         * deletes sanity check from db
         */
        public function delete() {}
        /**
         * @static
         *
         * @return Sanitycheck
         */
        public static function getNext() {}
    }

    class AdminStyle {
        /**
         * @var string
         */
        protected $elementCssClass;
        /**
         * @var string
         */
        protected $elementIcon;
        /**
         * @var string
         */
        protected $elementIconClass;
        /**
         * @var array
         */
        protected $elementQtipConfig;

        public function __construct($element) {}
        public function setElementCssClass($elementCssClass) {}
        /**
         * @return string
         */
        public function getElementCssClass() {}
        public function setElementIcon($elementIcon) {}
        /**
         * @return string|bool|null Return false if you don't want to overwrite the default.
         */
        public function getElementIcon() {}
        public function setElementIconClass($elementIconClass) {}
        /**
         * @return string|bool|null Return false if you don't want to overwrite the default.
         */
        public function getElementIconClass() {}
        /**
         * @return array|null
         */
        public function getElementQtipConfig() {}
        public function setElementQtipConfig($elementQtipConfig) {}
    }


    interface ElementDumpStateInterface {
    public const DUMP_STATE_PROPERTY_NAME = '_fulldump';
        function setInDumpState(bool $dumpState) ;
        /**
         * @return bool
         */
        function isInDumpState() : bool ;
    }

    interface ElementInterface {
        /**
         * @return int $id
         */
        function getId() ;
        /**
         * @return string
         */
        function getKey() ;
        /**
         * @return string
         */
        function getPath() ;
        /**
         * @return string
         */
        function getRealPath() ;
        /**
         * @return string
         */
        function getFullPath() ;
        /**
         * @return string
         */
        function getRealFullPath() ;
        /**
         * @return string
         */
        function getType() ;
        /**
         * @return int
         */
        function getCreationDate() ;
        function setCreationDate($creationDate) ;
        /**
         * @return int
         */
        function getModificationDate() ;
        function setModificationDate($modificationDate) ;
        /**
         * @return int
         */
        function getUserOwner() ;
        function setUserOwner($userOwner) ;
        /**
         * @return int
         */
        function getUserModification() ;
        function setUserModification($userModification) ;
        static function getById($id) ;
        /**
         * get possible types
         *
         * @return array
         */
        static function getTypes() ;
        /**
         * @return Property[]
         */
        function getProperties() ;
        /**
         * returns true if the element is locked
         *
         * @return $this
         */
        function isLocked() ;
        function setLocked($locked) ;
        /**
         * @return int
         */
        function getParentId() ;
        /**
         * @return string
         */
        function getCacheTag() ;
        function getCacheTags($tags = [ ]) ;
        /**
         * @return bool
         */
        function __isBasedOnLatestData() ;
        function setVersionCount(?int $versionCount) : self ;
        /**
         * @return int
         */
        function getVersionCount() : int ;
        /**
         * @return $this
         */
        function save() ;
        function delete() ;
    }


    trait ChildsCompatibilityTrait {
        /**
         * @deprecated
         *
         * @return mixed
         */
        public function getChilds() {}
        /**
         * @deprecated
         *
         * @return mixed
         */
        public function setChilds() {}
        /**
         * @deprecated
         *
         * @return mixed
         */
        public function hasChilds() {}
    }

    trait AdminStyleTrait {
        protected function addAdminStyle(ElementInterface $element, $context = null, $data = [ ]) {}
    }

    trait ElementDumpStateTrait {
        /**
         * This needs to be equal to the value of ElementDumpStateInterface::DUMP_STATE_PROPERTY_NAME
         *
         * @var bool
         */
        protected $_fulldump;
        public function setInDumpState(bool $dumpState) {}
        /**
         * @return bool
         */
        public function isInDumpState() : bool {}
    }

}

namespace Pimcore\Model\Element\Note {
    /**
     * @property \Pimcore\Model\Element\Note $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getById($id) {}
        /** Saves note to database.
         * @return bool
         *
         * @throws \Exception
         */
        public function save() {}
        /** Deletes note from database.
         * @throws \Exception
         */
        public function delete() {}
        /** Deletes note data from database.
         * @throws \Exception
         */
        protected function deleteData() {}
    }

    /**
     * @method Model\Element\Note\Listing\Dao getDao()
     * @method Model\Element\Note[] load()
     * @method Model\Element\Note current()
     * @method int[] loadIdList()
     * @method int getTotalCount()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\Element\Note[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $notes;

        public function __construct() {}
        public function setNotes($notes) {}
        /**
         * @return Model\Element\Note[]
         */
        public function getNotes() {}
    }

}

namespace Pimcore\Model\Element\Note\Listing {
    /**
     * @property \Pimcore\Model\Element\Note\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of static routes for the specicifies parameters, returns an array of Element\Note elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int[]
         */
        public function loadIdList() {}
        /**
         * @return int
         *
         * @todo: $amount could not be defined, so this could cause an issue
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Element\WorkflowState {
    /**
     * @property \Pimcore\Model\Element\WorkflowState $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getByPrimary(int $cid, string $ctype, string $workflow) {}
        /**
         * Save object to database
         *
         * @return bool
         *
         * @todo: not all save methods return a boolean, why this one?
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\Element\WorkflowState\Listing\Dao getDao()
     * @method Model\Element\WorkflowState[] load()
     * @method Model\Element\WorkflowState current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\Element\WorkflowState[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $workflowStates;

        public function __construct() {}
        public function setWorkflowStates($workflowStates) {}
        /**
         * @return Model\Element\WorkflowState[]
         */
        public function getWorkflowStates() {}
    }

}

namespace Pimcore\Model\Element\WorkflowState\Listing {
    /**
     * @property \Pimcore\Model\Element\WorkflowState\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of workflow states for the specified parameters, returns an array of Element\WorkflowState elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Element\Sanitycheck {
    /**
     * @property \Pimcore\Model\Element\Sanitycheck $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        /**
         * Save to database
         *
         * @return bool
         *
         * @todo: not all save methods return a boolean, why this one?
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
        public function getNext() {}
    }

}

namespace Pimcore\Model\Element\Recyclebin {
    /**
     * @property \Pimcore\Model\Element\Recyclebin $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function flush() {}
    }

    /**
     * @method \Pimcore\Model\Element\Recyclebin\Item\Dao getDao()
     */
    class Item extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $path;
        /**
         * @var string
         */
        public $type;
        /**
         * @var string
         */
        public $subtype;
        /**
         * @var int
         */
        public $amount;
        /**
         * @var Element\ElementInterface
         */
        public $element;
        /**
         * @var int
         */
        public $date;
        /**
         * @var string
         */
        public $deletedby;

        public static function create(Element\ElementInterface $element, Model\User $user) {}
        public static function getById($id) {}
        public function restore($user = null) {}
        public function save($user = null) {}
        public function delete() {}
        public function loadChildren(Element\ElementInterface $element) {}
        protected function doRecursiveRestore(Element\ElementInterface $element) {}
        public function marshalData($data) {}
        public function unmarshalData($data) {}
        /**
         * @return string
         */
        public function getStoreageFile() {}
        public function getStorageFileBinary($element) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setId($id) {}
        /**
         * @return string
         */
        public function getPath() {}
        public function setPath($path) {}
        /**
         * @return string
         */
        public function getType() {}
        public function setType($type) {}
        /**
         * @return string
         */
        public function getSubtype() {}
        public function setSubtype($subtype) {}
        /**
         * @return int
         */
        public function getAmount() {}
        public function setAmount($amount) {}
        /**
         * @return int
         */
        public function getDate() {}
        public function setDate($date) {}
        /**
         * @return Element\ElementInterface
         */
        public function getElement() {}
        public function setElement($element) {}
        public function setDeletedby($username) {}
        /**
         * @return string
         */
        public function getDeletedby() {}
    }

}

namespace Pimcore\Model\Element\Recyclebin\Item {
    /**
     * @property \Pimcore\Model\Element\Recyclebin\Item $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getById($id) {}
        /**
         * Save object to database
         *
         * @return bool
         *
         * @todo: not all save methods return a boolean, why this one?
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\Element\Recyclebin\Item\Listing\Dao getDao()
     * @method Model\Element\Recyclebin\Item[] load()
     * @method Model\Element\Recyclebin\Item current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var array|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $items;

        public function __construct() {}
        /**
         * @return Model\Element\Recyclebin\Item[]
         */
        public function getItems() {}
        public function setItems($items) {}
    }

}

namespace Pimcore\Model\Element\Recyclebin\Item\Listing {
    /**
     * @property \Pimcore\Model\Element\Recyclebin\Item\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of static routes for the specicifies parameters, returns an array of Staticroute elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         *
         * @todo: $amount could not be defined, so this could cause an issue
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Element\Export {
    /**
     * @deprecated
     */
    class Service {
        /**
         * @var Webservice\Service
         */
        protected $webService;

        public function __construct() {}
        public function getApiElement($element) {}
        public function extractRelations($element, $apiElementKeys, $recursive, $includeRelations) {}
    }

}

namespace Pimcore\Model\Element\Import {
    /**
     * @deprecated
     */
    class Service {
        /**
         * @var Webservice\Service
         */
        protected $webService;
        /**
         * @var array
         */
        protected $importInfo;
        /**
         * @var Model\User
         */
        protected $user;

        public function __construct($user) {}
        /**
         * @return Webservice\Service
         */
        public function getWebservice() {}
        /**
         * @return array
         */
        public function getImportInfo() {}
        public function create($rootElement, $apiKey, $path, $apiElement, $overwrite, $elementCounter) {}
        public function correctElementIdRelations($apiElement, $type, $idMapping) {}
        public function correctDocumentRelations($apiElement, $idMapping) {}
        public function correctObjectRelations($apiElement, $idMapping) {}
        public function setModificationParams($element, $creation = false) {}
    }

}

namespace Pimcore\Model\Element\Data {
    class MarkerHotspotItem implements \arrayaccess {
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $type;
        /**
         * @var mixed
         */
        public $value;

        public function __construct($data) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getType() {}
        public function setType($type) {}
        /**
         * @return int
         */
        public function getValue() {}
        public function setValue($value) {}
        public function offsetExists($offset) {}
        public function offsetGet($offset) {}
        public function offsetSet($offset, $value) {}
        public function offsetUnset($offset) {}
    }

}

namespace Pimcore\Model\Element\Tag {
    /**
     * @property \Pimcore\Model\Element\Tag $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getById($id) {}
        /**
         * Save object to database
         *
         * @return bool
         *
         * @throws \Exception
         *
         * @todo: not all save methods return a boolean, why this one?
         */
        public function save() {}
        /**
         * Deletes object from database
         *
         * @throws \Exception
         */
        public function delete() {}
        public function getTagsForElement($cType, $cId) {}
        public function addTagToElement($cType, $cId) {}
        protected function doAddTagToElement($tagId, $cType, $cId) {}
        public function removeTagFromElement($cType, $cId) {}
        public function setTagsForElement($cType, $cId, array $tags) {}
        public function batchAssignTagsToElement($cType, array $cIds, array $tagIds, $replace) {}
        public function getElementsForTag(Tag $tag, $type, array $subtypes = [ ], array $classNames = [ ], $considerChildTags = false) {}
    }

    /**
     * @method Model\Element\Tag\Listing\Dao getDao()
     * @method Model\Element\Tag[] load()
     * @method Model\Element\Tag current()
     * @method int[] loadIdList()
     * @method int getTotalCount()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\Element\Tag[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $tags;

        public function __construct() {}
        public function setTags($tags) {}
        /**
         * @return Model\Element\Tag[]
         */
        public function getTags() {}
    }

}

namespace Pimcore\Model\Element\Tag\Listing {
    /**
     * @property \Pimcore\Model\Element\Tag\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of tags for the specified parameters, returns an array of Element\Tag elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int[]
         */
        public function loadIdList() {}
        /**
         * @return int
         *
         * @todo: $amount could not be defined, so this could cause an issue
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Element\Reference {
    class Placeholder {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $type;

        public function __construct($id, $type) {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setType($type) {}
        /**
         * @return string
         */
        public function getType() {}
    }

}

namespace Pimcore\Model\Element\Editlock {
    /**
     * @property \Pimcore\Model\Element\Editlock $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getByElement($cid, $ctype) {}
        /**
         * Save object to database
         *
         * @return bool
         *
         * @todo: not all save methods return a boolean, why this one?
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
        public function clearSession($sessionId) {}
    }

}

namespace Pimcore\Model\Dependency {
    /**
     * @property \Pimcore\Model\Dependency $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getBySourceId($id = null, $type = null) {}
        public function cleanAllForElement($element) {}
        /**
         * Clear all relations in the database for current source id
         */
        public function clear() {}
        /**
         * Save to database
         */
        public function save() {}
        public function getRequiredBy($offset = null, $limit = null) {}
        /**
         * get total count of required by records
         *
         * @return int
         */
        public function getRequiredByTotalCount() {}
    }

}

namespace Pimcore\Model\User {
    /**
     * @property \Pimcore\Model\User $model
     */
    class Dao extends \pimcore\model\user\userrole\dao {
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    class Service {
        public static function getClassNameForType($type) {}
    }

    /**
     * @method \Pimcore\Model\User\Role\Dao getDao()
     */
    class Role extends \pimcore\model\user\userrole {
        /**
         * @var string
         */
        public $type;

    }

    /**
     * @method \Pimcore\Model\User\Listing\Dao getDao()
     * @method User[] load()
     */
    class Listing extends \pimcore\model\user\listing\abstractlisting {
        /**
         * @var string
         */
        public $type;

        /**
         * Alias for $this->getItems()
         *
         * @return \Pimcore\Model\User[]
         */
        public function getUsers() {}
    }

    /**
     * @method \Pimcore\Model\User\Dao getDao()
     */
    class Folder extends \pimcore\model\user\userrole\folder {
        /**
         * @var string
         */
        public $type;

    }

    /**
     * @method \Pimcore\Model\User\AbstractUser\Dao getDao()
     */
    class AbstractUser extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * @var int
         */
        public $parentId;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $type;

        public static function getById($id) {}
        public static function create($values = [ ]) {}
        public static function getByName($name) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getParentId() {}
        public function setParentId($parentId) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getType() {}
        /**
         * @return $this
         *
         * @throws \Exception
         */
        public function save() {}
        public function delete() {}
        public function setType($type) {}
        public function update() {}
    }

    /**
     * @method \Pimcore\Model\User\UserRole\Dao getDao()
     */
    class UserRole extends \pimcore\model\user\abstractuser {
        /**
         * @var array
         */
        public $permissions;
        /**
         * @var Asset[]
         */
        public $workspacesAsset;
        /**
         * @var DataObject[]
         */
        public $workspacesObject;
        /**
         * @var Document[]
         */
        public $workspacesDocument;
        /**
         * @var array
         */
        public $classes;
        /**
         * @var array
         */
        public $docTypes;
        /**
         * @var array
         */
        public $perspectives;
        /**
         * @var array
         */
        public $websiteTranslationLanguagesView;
        /**
         * @var array
         */
        public $websiteTranslationLanguagesEdit;

        public function update() {}
        public function setAllAclToFalse() {}
        public function setPermission($permissionName, $value = null) {}
        /**
         * @return array
         */
        public function getPermissions() {}
        public function getPermission($permissionName) {}
        /**
         * Generates the permission list required for frontend display
         *
         * @return array
         *
         * @todo: $permissionInfo should be array, but is declared as null
         */
        public function generatePermissionList() {}
        public function setPermissions($permissions) {}
        public function setWorkspacesAsset($workspacesAsset) {}
        /**
         * @return Asset[]
         */
        public function getWorkspacesAsset() {}
        public function setWorkspacesDocument($workspacesDocument) {}
        /**
         * @return Document[]
         */
        public function getWorkspacesDocument() {}
        public function setWorkspacesObject($workspacesObject) {}
        /**
         * @return DataObject[]
         */
        public function getWorkspacesObject() {}
        public function setClasses($classes) {}
        /**
         * @return array
         */
        public function getClasses() {}
        public function setDocTypes($docTypes) {}
        /**
         * @return array
         */
        public function getDocTypes() {}
        /**
         * @return mixed
         */
        public function getPerspectives() {}
        public function setPerspectives($perspectives) {}
        /**
         * @return array
         */
        public function getWebsiteTranslationLanguagesView() {}
        public function setWebsiteTranslationLanguagesView($websiteTranslationLanguagesView) {}
        /**
         * @return array
         */
        public function getWebsiteTranslationLanguagesEdit() {}
        public function setWebsiteTranslationLanguagesEdit($websiteTranslationLanguagesEdit) {}
        protected function prepareArray($array) {}
    }

}

namespace Pimcore\Model\User\AbstractUser {
    /**
     * @property \Pimcore\Model\User\AbstractUser $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
    use \pimcore\model\element\childscompatibilitytrait;

        public function getById($id) {}
        public function getByName($name) {}
        public function create() {}
        /**
         * Quick test if there are children
         *
         * @return bool
         */
        public function hasChildren() {}
        /**
         * @throws \Exception
         */
        public function update() {}
        /**
         * @throws \Exception
         */
        public function delete() {}
        /**
         * @throws \Exception
         */
        public function setLastLoginDate() {}
    }

}

namespace Pimcore\Model\User\UserRole {
    /**
     * @property \Pimcore\Model\User\UserRole\Folder $model
     */
    class Dao extends \pimcore\model\user\abstractuser\dao {
        public function getById($id) {}
        public function getByName($name) {}
        public function loadWorkspaces() {}
        public function emptyWorkspaces() {}
    }

    /**
     * @method \Pimcore\Model\User\UserRole\Dao getDao()
     */
    class Folder extends \pimcore\model\user\abstractuser {
    use \pimcore\model\element\childscompatibilitytrait;

        /**
         * @var bool
         */
        public $hasChilds;

        public function setHasChilds($state) {}
        /**
         * Returns true if the document has at least one child
         *
         * @return bool
         */
        public function hasChildren() {}
    }

}

namespace Pimcore\Model\User\Role {
    /**
     * @property \Pimcore\Model\User\Role $model
     */
    class Dao extends \pimcore\model\user\userrole\dao {}

    /**
     * @method \Pimcore\Model\User\Role\Listing\Dao getDao()
     */
    class Listing extends \pimcore\model\user\listing\abstractlisting {
        /**
         * @var string
         */
        public $type;

        /**
         * Alias for $this->getItems()
         *
         * @return \Pimcore\Model\User\Role[]
         */
        public function getRoles() {}
    }

    /**
     * @method \Pimcore\Model\User\Role\Folder\Dao getDao()
     */
    class Folder extends \pimcore\model\user\userrole\folder {
        /**
         * @var string
         */
        public $type;

    }

}

namespace Pimcore\Model\User\Role\Folder {
    /**
     * @property \Pimcore\Model\User\Role\Folder $model
     */
    class Dao extends \pimcore\model\user\abstractuser\dao {}

}

namespace Pimcore\Model\User\Role\Listing {
    /**
     * @property \Pimcore\Model\User\Role\Listing $model
     */
    class Dao extends \pimcore\model\user\listing\abstractlisting\dao {}

}

namespace Pimcore\Model\User\Workspace {
    /**
     * @method \Pimcore\Model\User\Workspace\Dao getDao()
     */
    class Document extends \pimcore\model\user\workspace\abstractworkspace {
        /**
         * @var bool
         */
        public $save;
        /**
         * @var bool
         */
        public $unpublish;

        public function setSave($save) {}
        /**
         * @return bool
         */
        public function getSave() {}
        public function setUnpublish($unpublish) {}
        /**
         * @return bool
         */
        public function getUnpublish() {}
    }

    /**
     * @property \Pimcore\Model\User\Workspace\DataObject $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function save() {}
    }

    /**
     * @method \Pimcore\Model\User\Workspace\Dao getDao()
     */
    class DataObject extends \pimcore\model\user\workspace\abstractworkspace {
        /**
         * @var bool
         */
        public $save;
        /**
         * @var bool
         */
        public $unpublish;
        /**
         * @var string
         */
        public $lEdit;
        /**
         * @var string
         */
        public $lView;
        /**
         * @var string
         */
        public $layouts;

        public function setSave($save) {}
        /**
         * @return bool
         */
        public function getSave() {}
        public function setUnpublish($unpublish) {}
        /**
         * @return bool
         */
        public function getUnpublish() {}
        public function setLEdit($lEdit) {}
        /**
         * @return string
         */
        public function getLEdit() {}
        public function setLView($lView) {}
        /**
         * @return string
         */
        public function getLView() {}
        public function setLayouts($layouts) {}
        /**
         * @return string
         */
        public function getLayouts() {}
    }

    /**
     * @method \Pimcore\Model\User\Workspace\Dao getDao()
     */
    class AbstractWorkspace extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $userId;
        /**
         * @var int
         */
        public $cid;
        /**
         * @var string
         */
        public $cpath;
        /**
         * @var bool
         */
        public $list;
        /**
         * @var bool
         */
        public $view;
        /**
         * @var bool
         */
        public $publish;
        /**
         * @var bool
         */
        public $delete;
        /**
         * @var bool
         */
        public $rename;
        /**
         * @var bool
         */
        public $create;
        /**
         * @var bool
         */
        public $settings;
        /**
         * @var bool
         */
        public $versions;
        /**
         * @var bool
         */
        public $properties;

        public function setCreate($create) {}
        /**
         * @return bool
         */
        public function getCreate() {}
        public function setDelete($delete) {}
        /**
         * @return bool
         */
        public function getDelete() {}
        public function setList($list) {}
        /**
         * @return bool
         */
        public function getList() {}
        public function setProperties($properties) {}
        /**
         * @return bool
         */
        public function getProperties() {}
        public function setPublish($publish) {}
        /**
         * @return bool
         */
        public function getPublish() {}
        public function setRename($rename) {}
        /**
         * @return bool
         */
        public function getRename() {}
        public function setSettings($settings) {}
        /**
         * @return bool
         */
        public function getSettings() {}
        public function setVersions($versions) {}
        /**
         * @return bool
         */
        public function getVersions() {}
        public function setView($view) {}
        /**
         * @return bool
         */
        public function getView() {}
        public function setCid($cid) {}
        /**
         * @return int
         */
        public function getCid() {}
        public function setUserId($userId) {}
        /**
         * @return int
         */
        public function getUserId() {}
        public function setCpath($cpath) {}
        /**
         * @return string
         */
        public function getCpath() {}
    }

    /**
     * @method \Pimcore\Model\User\Workspace\Dao getDao()
     */
    class Asset extends \pimcore\model\user\workspace\abstractworkspace {}

}

namespace Pimcore\Model\User\Listing {
    /**
     * @method \Pimcore\Model\User\Listing\AbstractListing\Dao getDao()
     * @method Model\User[] load()
     * @method Model\User current()
     */
    class AbstractListing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var string
         */
        public $type;
        /**
         * Contains the results of the list. They are all an instance of User
         *
         * @var array
         *
         * @deprecated use getter/setter methods or $this->data
         */
        public $items;

        public function __construct() {}
        /**
         * @return array
         */
        public function getItems() {}
        public function setItems($items) {}
        /**
         * @return string
         */
        public function getType() {}
    }

    /**
     * @property \Pimcore\Model\User\Listing $model
     */
    class Dao extends \pimcore\model\user\listing\abstractlisting\dao {}

}

namespace Pimcore\Model\User\Listing\AbstractListing {
    /**
     * @property \Pimcore\Model\User\Listing\AbstractListing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of users for the specified parameters, returns an array of User elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return string
         */
        protected function getCondition() {}
    }

}

namespace Pimcore\Model\User\Permission {
    /**
     * @method \Pimcore\Model\User\Permission\Definition\Dao getDao()
     */
    class Definition extends \pimcore\model\abstractmodel {
        /**
         * @var string
         */
        public $key;
        /**
         * @var string
         */
        public $category;

        public function __construct($data = [ ]) {}
        /**
         * @return string
         */
        public function getKey() {}
        public function setKey($key) {}
        /**
         * @return string
         */
        public function getCategory() : ?string {}
        public function setCategory(string $category) : Definition {}
        public static function getByKey($permission) {}
        public static function create($permission) {}
    }

}

namespace Pimcore\Model\User\Permission\Definition {
    /**
     * @property \Pimcore\Model\User\Permission\Definition $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function save() {}
    }

    /**
     * @method \Pimcore\Model\User\Permission\Definition\Listing\Dao getDao()
     * @method Model\User\Permission\Definition[] load()
     * @method Model\User\Permission\Definition current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\User\Permission\Definition[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $definitions;

        public function __construct() {}
        public function setDefinitions($definitions) {}
        /**
         * @return Model\User\Permission\Definition[]
         */
        public function getDefinitions() {}
    }

}

namespace Pimcore\Model\User\Permission\Definition\Listing {
    /**
     * @property \Pimcore\Model\User\Permission\Definition\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of definitions for the specicified parameters, returns an array of User\Permission\Definition elements
         *
         * @return array
         */
        public function load() {}
    }

}

namespace Pimcore\Model\Document {
    /**
     * @method \Pimcore\Model\Document\Email\Dao getDao()
     */
    class Email extends \pimcore\model\document\pagesnippet {
        /**
         * Static type of the document
         *
         * @var string
         */
        protected $type;
        /**
         * Contains the email subject
         *
         * @var string
         */
        protected $subject;
        /**
         * Contains the from email address
         *
         * @var string
         */
        protected $from;
        /**
         * Contains the reply to email addresses
         *
         * @var string
         */
        protected $replyTo;
        /**
         * Contains the email addresses of the recipients
         *
         * @var string
         */
        protected $to;
        /**
         * Contains the carbon copy recipients
         *
         * @var string
         */
        protected $cc;
        /**
         * Contains the blind carbon copy recipients
         *
         * @var string
         */
        protected $bcc;

        public function setSubject($subject) {}
        /**
         * Returns the email subject
         *
         * @return string
         */
        public function getSubject() {}
        public function setTo($to) {}
        /**
         * Returns the "to" receivers
         *
         * @return string
         */
        public function getTo() {}
        public static function validateEmailAddress($emailAddress) {}
        public function setFrom($from) {}
        /**
         * Returns the "from" email address
         *
         * @return string
         */
        public function getFrom() {}
        public function setReplyTo($replyTo) {}
        /**
         * Returns the "replyTo" email address
         *
         * @return string
         */
        public function getReplyTo() {}
        public function setCc($cc) {}
        /**
         * Returns the carbon copy receivers
         *
         * @return string
         */
        public function getCc() {}
        public function setBcc($bcc) {}
        /**
         * Returns the blind carbon copy receivers
         *
         * @return string
         */
        public function getBcc() {}
    }

    /**
     * @method \Pimcore\Model\Document\Targeting\TargetingDocumentDaoInterface getDao()
     */
    abstract class TargetingDocument extends \pimcore\model\document\pagesnippet implements \pimcore\model\document\targeting\targetingdocumentinterface {
        /**
         * @var int
         */
        private $useTargetGroup;

        public function setUseTargetGroup(int $useTargetGroup = null) {}
        /**
         * @inheritdoc
         */
        public function getUseTargetGroup() {}
        public function getTargetGroupElementPrefix(int $targetGroupId = null) : string {}
        public function getTargetGroupElementName(string $name) : string {}
        /**
         * @inheritDoc
         */
        public function hasTargetGroupSpecificElements() : bool {}
        /**
         * @inheritDoc
         */
        public function getTargetGroupSpecificElementNames() : array {}
        public function setElement($name, $data) {}
        public function getElement($name) {}
        public function __sleep() {}
    }

    /**
     * @property \Pimcore\Model\Document $model
     */
    class Dao extends \pimcore\model\element\dao {
        public function getById($id) {}
        public function getByPath($path) {}
        public function create() {}
        /**
         * @throws \Exception
         */
        public function update() {}
        /**
         * Delete the row from the database. (based on the model id)
         *
         * @throws \Exception
         */
        public function delete() {}
        /**
         * Update document workspaces..
         *
         * @throws \Exception
         */
        public function updateWorkspaces() {}
        public function updateChildPaths($oldPath) {}
        /**
         * Returns the current full document path from the database.
         *
         * @return string
         */
        public function getCurrentFullPath() {}
        /**
         * @return int
         */
        public function getVersionCountForUpdate() : int {}
        public function getProperties($onlyInherited = false, $onlyDirect = false) {}
        /**
         * Deletes all object properties from the database.
         */
        public function deleteAllProperties() {}
        /**
         * Deletes all user permissions based on the document id.
         */
        public function deleteAllPermissions() {}
        /**
         * Deletes all scheduled tasks assigned to the document.
         */
        public function deleteAllTasks() {}
        public function hasChildren($includingUnpublished = null) {}
        public function getChildAmount($user = null) {}
        public function hasSiblings($includingUnpublished = null) {}
        /**
         * Checks if the document is locked.
         *
         * @return bool
         *
         * @throws \Exception
         */
        public function isLocked() {}
        /**
         * Update the lock value for the document.
         *
         * @throws \Exception
         */
        public function updateLocks() {}
        /**
         * Deletes locks from the document and its children.
         *
         * @return array
         */
        public function unlockPropagate() {}
        public function isAllowed($type, $user) {}
        public function saveIndex($index) {}
        /**
         * Fetches the maximum index value from siblings.
         *
         * @return string
         */
        public function getNextIndex() {}
        /**
         * @return bool
         */
        public function __isBasedOnLatestData() {}
    }

    /**
     * @method \Pimcore\Model\Document\Newsletter\Dao getDao()
     */
    class Newsletter extends \pimcore\model\document\pagesnippet {
        /**
         * Static type of the document
         *
         * @var string
         */
        protected $type;
        /**
         * Contains the email subject
         *
         * @var string
         */
        protected $subject;
        /**
         * Contains the plain text part of the email
         *
         * @var string
         */
        protected $plaintext;
        /**
         * Contains the from email address
         *
         * @var string
         */
        protected $from;
        /**
         * enables adding tracking parameters to all links
         *
         * @var bool
         */
        protected $enableTrackingParameters;
        /**
         * @var string
         */
        protected $trackingParameterSource;
        /**
         * @var string
         */
        protected $trackingParameterMedium;
        /**
         * @var string
         */
        protected $trackingParameterName;
        /**
         * @var string
         */
        protected $sendingMode;

        public function setSubject($subject) {}
        /**
         * Returns the email subject
         *
         * @return string
         */
        public function getSubject() {}
        public function setFrom($from) {}
        public function setPlaintext($plaintext) {}
        /**
         * Returns the email plain text part
         *
         * @return string
         */
        public function getPlaintext() {}
        /**
         * Returns the "from" email address
         *
         * @return string
         */
        public function getFrom() {}
        /**
         * @return bool
         */
        public function getEnableTrackingParameters() {}
        public function setEnableTrackingParameters($enableTrackingParameters) {}
        /**
         * @return string
         */
        public function getTrackingParameterSource() {}
        public function setTrackingParameterSource($trackingParameterSource) {}
        /**
         * @return string
         */
        public function getTrackingParameterMedium() {}
        public function setTrackingParameterMedium($trackingParameterMedium) {}
        /**
         * returns key by default
         *
         * @return string
         */
        public function getTrackingParameterName() {}
        public function setTrackingParameterName($trackingParameterName) {}
        /**
         * @return string
         */
        public function getSendingMode() {}
        public function setSendingMode($sendingMode) {}
        /**
         * @return string
         */
        public function getTmpStoreId() {}
    }

    /**
     * @method \Pimcore\Model\Document\Link\Dao getDao()
     */
    class Link extends \pimcore\model\document {
    use \pimcore\model\document\traits\scheduledtaskstrait;

        /**
         * Contains the ID of the internal ID
         *
         * @var int
         */
        protected $internal;
        /**
         * Contains the type of the internal ID
         *
         * @var string
         */
        protected $internalType;
        /**
         * Contains object of linked Document|Asset
         *
         * @var Document | Asset
         */
        protected $object;
        /**
         * Contains the direct link as plain text
         *
         * @var string
         */
        protected $direct;
        /**
         * Type of the link (internal/direct)
         *
         * @var string
         */
        protected $linktype;
        /**
         * static type of this object
         *
         * @var string
         */
        protected $type;
        /**
         * path of the link
         *
         * @var string
         */
        protected $href;

        /**
         * @see Document::resolveDependencies
         *
         * @return array
         */
        public function resolveDependencies() {}
        public function getCacheTags($tags = [ ]) {}
        /**
         * Returns the plain text path of the link
         *
         * @return string
         */
        public function getHref() {}
        /**
         * Returns the plain text path of the link needed for the editmode
         *
         * @return string
         */
        public function getRawHref() {}
        /**
         * Returns the path of the link including the anchor and parameters
         *
         * @return string
         */
        public function getLink() {}
        /**
         * Returns the id of the internal document|asset which is linked
         *
         * @return int
         */
        public function getInternal() {}
        /**
         * Returns the direct link (eg. http://www.pimcore.org/test)
         *
         * @return string
         */
        public function getDirect() {}
        /**
         * Returns the type of the link (internal/direct)
         *
         * @return string
         */
        public function getLinktype() {}
        public function setInternal($internal) {}
        public function setDirect($direct) {}
        public function setLinktype($linktype) {}
        /**
         * @return string
         */
        public function getInternalType() {}
        public function setInternalType($type) {}
        /**
         * @return Document|Asset|Model\DataObject\Concrete|null
         */
        public function getObject() {}
        public function setObject($object) {}
        /**
         * @return Asset|Document|Model\DataObject\Concrete
         */
        public function setObjectFromId() {}
        /**
         * returns the ready-use html for this link
         *
         * @return string
         */
        public function getHtml() {}
        protected function update($params = [ ]) {}
        public function __sleep() {}
    }

    /**
     * @method \Pimcore\Model\Document\Service\Dao getDao()
     * @method array getTranslations(Document $document)
     * @method addTranslation(Document $document, Document $translation, $language = null)
     * @method removeTranslation(Document $document)
     * @method int getTranslationSourceId(Document $document)
     */
    class Service extends \pimcore\model\element\service {
        /**
         * @var Model\User|null
         */
        protected $_user;
        /**
         * @var array
         */
        protected $_copyRecursiveIds;
        /**
         * @var Document[]
         */
        protected $nearestPathCache;

        public function __construct($user = null) {}
/** @var DocumentRendererInterface $renderer */
        public static function render(/** @var DocumentRendererInterface $renderer */
Document\PageSnippet $document, /** @var DocumentRendererInterface $renderer */
array $attributes = [ ], /** @var DocumentRendererInterface $renderer */
$useLayout = false, /** @var DocumentRendererInterface $renderer */
array $query = [ ], /** @var DocumentRendererInterface $renderer */
array $options = [ ]) : string {}
        public static function saveRecursive($document, $collectGarbageAfterIteration = 25, $saved = 0) {}
        public function copyRecursive($target, $source) {}
/**
 * @var Document $new
 */
        public function copyAsChild(/**
 * @var Document $new
 */
$target, /**
 * @var Document $new
 */
$source, /**
 * @var Document $new
 */
$enableInheritance = false, /**
 * @var Document $new
 */
$resetIndex = false, /**
 * @var Document $new
 */
$language = false) {}
        public function copyContents($target, $source) {}
        public static function gridDocumentData($document) {}
        public static function loadAllDocumentFields($doc) {}
        public static function pathExists($path, $type = null) {}
        public static function isValidType($type) {}
        public static function rewriteIds($document, $rewriteConfig, $params = [ ]) {}
        public static function getByUrl($url) {}
        public static function getUniqueKey($item, $nr = 0) {}
        public function getNearestDocumentByPath($path, $ignoreHardlinks = false, $types = [ ]) {}
        public static function generatePagePreview($id, $request = null, $hostUrl = null) {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    abstract class Tag extends \pimcore\model\abstractmodel implements \pimcore\model\document\tag\taginterface {
        /**
         * Options of the current tag, can contain some configurations for the editmode, or the thumbnail name, ...
         *
         * @var array
         */
        protected $options;
        /**
         * @var string
         */
        protected $name;
        /**
         * Contains the real name of the editable without the prefixes and suffixes
         * which are generated automatically by blocks and areablocks
         *
         * @var string
         */
        protected $realName;
        /**
         * Contains parent hierarchy names (used when building elements inside a block/areablock hierarchy)
         *
         * @var array
         */
        private $parentBlockNames;
        /**
         * Element belongs to the ID of the document
         *
         * @var int
         */
        protected $documentId;
        /**
         * Element belongs to the document
         *
         * @var Document\PageSnippet
         */
        protected $document;
        /**
         * @deprecated Unused - will be removed in 7.0
         *
         * @var string|null
         */
        protected $controller;
        /**
         * @var ViewModelInterface
         */
        protected $view;
        /**
         * In Editmode or not
         *
         * @var bool
         */
        protected $editmode;
        /**
         * @var bool
         */
        protected $inherited;

/** @var Tag $tag */
        public static function factory(/** @var Tag $tag */
$type, /** @var Tag $tag */
$name, /** @var Tag $tag */
$documentId, /** @var Tag $tag */
$config = null, /** @var Tag $tag */
$controller = null, /** @var Tag $tag */
$view = null, /** @var Tag $tag */
$editmode = null) {}
        /**
         * @return string
         */
        public function admin() {}
        /**
         * Builds options passed to editmode frontend as JSON config
         *
         * @return array
         */
        protected function getEditmodeOptions() : array {}
        /**
         * Builds data used for editmode
         *
         * @return mixed
         */
        protected function getEditmodeData() {}
        protected function getEditmodeElementAttributes(array $options) : array {}
        protected function getEditmodeBlockStateAttributes() : array {}
        /**
         * Builds classes used on the editmode HTML element
         *
         * @return array
         */
        protected function getEditmodeElementClasses() : array {}
        protected function outputEditmode($value) {}
        protected function outputEditmodeOptions(array $options, $return = false) {}
        /**
         * @return mixed
         */
        public function getValue() {}
        /**
         * @return string
         */
        public function getName() {}
        public function setName($name) {}
        public function setDocumentId($id) {}
        /**
         * @return int
         */
        public function getDocumentId() {}
        public function setDocument(Document\PageSnippet $document) {}
        /**
         * @return Document\PageSnippet
         */
        public function getDocument() {}
        /**
         * @return array
         */
        public function getOptions() {}
        public function setOptions($options) {}
        public function setController($controller) {}
        /**
         * @deprecated
         *
         * @return string|null
         */
        public function getController() {}
        public function setView($view) {}
        /**
         * @return ViewModelInterface
         */
        public function getView() {}
        /**
         * @return string
         */
        public function getRealName() {}
        public function setRealName($realName) {}
        public function setParentBlockNames($parentNames) {}
        public function getParentBlockNames() : array {}
        /**
         * Returns only the properties which should be serialized
         *
         * @return array
         */
        public function __sleep() {}
        /**
         * direct output to the frontend
         *
         * @return string
         */
        public function render() {}
        /**
         * direct output to the frontend
         *
         * @return string
         */
        public function __toString() {}
        /**
         * @return bool
         */
        public function getEditmode() {}
        public function setEditmode($editmode) {}
        /**
         * @return mixed
         */
        public function getDataForResource() {}
        public function getCacheTags($ownerDocument, $tags = [ ]) {}
        /**
         * This is a dummy and is mostly implemented by relation types
         */
        public function resolveDependencies() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
        public function getForWebserviceExport($document = null, $params = [ ]) {}
        /**
         * @return bool
         */
        public function checkValidity() {}
        public function setInherited($inherited) {}
        /**
         * @return bool
         */
        public function getInherited() {}
        /**
         * TODO inject block state via DI
         *
         * @return BlockState
         */
        protected function getBlockState() : BlockState {}
        public static function buildTagName(string $type, string $name, Document $document = null) {}
        public static function buildTagRealName(string $name, Document $document) : string {}
        public function sanitizeWebserviceData($data) {}
    }

    /**
     * @method Document[] load()
     * @method Document current()
     * @method int getTotalCount()
     * @method int getCount()
     * @method int[] loadIdList()
     * @method \Pimcore\Model\Document\Listing\Dao getDao()
     * @method onCreateQuery(callable $callback)
     */
    class Listing extends \pimcore\model\listing\abstractlisting implements \zend\paginator\adapter\adapterinterface, \zend\paginator\adapteraggregateinterface {
        /**
         * Return all documents as Type Document. eg. for trees an so on there isn't the whole data required
         *
         * @var bool
         */
        public $objectTypeDocument;
        /**
         * @var array|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $documents;
        /**
         * @var bool
         */
        public $unpublished;

        public function __construct() {}
        /**
         * @return Document[]
         */
        public function getDocuments() {}
        public function setDocuments($documents) {}
        /**
         * Checks if the document is unpublished.
         *
         * @return bool
         */
        public function getUnpublished() {}
        public function setUnpublished($unpublished) {}
        /**
         * Returns the SQL condition value.
         *
         * @return string
         */
        public function getCondition() {}
        /**
         * Returns the total items count.
         *
         * @return int
         */
        public function count() {}
        public function getItems($offset, $itemCountPerPage) {}
        /**
         * @return Listing
         */
        public function getPaginatorAdapter() {}
    }

    /**
     * @method \Pimcore\Model\Document\Folder\Dao getDao()
     */
    class Folder extends \pimcore\model\document {
        /**
         * static type of this object
         *
         * @var string
         */
        protected $type;

    }

    /**
     * @method \Pimcore\Model\Document\Printcontainer\Dao getDao()
     */
    class Printcontainer extends \pimcore\model\document\printabstract {
        /**
         * Static type of the document
         *
         * @var string
         */
        protected $type;
        /**
         * @var string
         */
        protected $action;
        /**
         * @var array
         */
        private $allChildren;

        /**
         * @return array
         */
        public function getTreeNodeConfig() {}
        /**
         * @return array
         */
        public function getAllChildren() {}
        private function doGetChildren(Document $document) {}
        /**
         * @return bool
         */
        public function pdfIsDirty() {}
    }

    /**
     * @method \Pimcore\Model\Document\PageSnippet\Dao getDao()
     * @method \Pimcore\Model\Version getLatestVersion()
     */
    abstract class PageSnippet extends \pimcore\model\document {
    use \pimcore\model\document\traits\scheduledtaskstrait;

        /**
         * @var string
         */
        protected $module;
        /**
         * @var string
         */
        protected $controller;
        /**
         * @var string
         */
        protected $action;
        /**
         * @var string
         */
        protected $template;
        /**
         * Contains all content-elements of the document
         *
         * @var array
         */
        protected $elements;
        /**
         * Contains all versions of the document
         *
         * @var array
         */
        protected $versions;
        /**
         * @var null|int
         */
        protected $contentMasterDocumentId;
        /**
         * @var array
         */
        protected $inheritedElements;

        protected function update($params = [ ]) {}
        public function saveVersion($setModificationDate = true, $saveOnlyVersion = true, $versionNote = null) {}
        public function delete(bool $isNested = false) {}
        public function getCacheTags($tags = [ ]) {}
        /**
         * @see Document::resolveDependencies
         *
         * @return array
         */
        public function resolveDependencies() {}
        /**
         * @return string
         */
        public function getAction() {}
        /**
         * @return string
         */
        public function getController() {}
        /**
         * @return string
         */
        public function getTemplate() {}
        public function setAction($action) {}
        public function setController($controller) {}
        public function setTemplate($template) {}
        public function setModule($module) {}
        /**
         * @return string
         */
        public function getModule() {}
        public function setRawElement($name, $type, $data) {}
        public function setElement($name, $data) {}
        public function removeElement($name) {}
        public function getElement($name) {}
        public function setContentMasterDocumentId($contentMasterDocumentId) {}
        /**
         * @return int|null
         */
        public function getContentMasterDocumentId() {}
        /**
         * @return Document
         *
         * @throws \Exception
         */
        public function getContentMasterDocument() {}
        public function setContentMasterDocument($document) {}
        public function hasElement($name) {}
        /**
         * @return Tag[]
         */
        public function getElements() {}
        public function setElements($elements) {}
        /**
         * @return Model\Version[]
         */
        public function getVersions() {}
        public function setVersions($versions) {}
        /**
         * @see Document::getFullPath
         *
         * @return string
         */
        public function getHref() {}
        public function __sleep() {}
        public function getUrl($hostname = null, $scheme = null) {}
    }

    /**
     * @method \Pimcore\Model\Document\PrintAbstract\Dao getDao()
     */
    abstract class PrintAbstract extends \pimcore\model\document\pagesnippet {
        /**
         * @var int
         */
        protected $lastGenerated;
        /**
         * @var string
         */
        protected $lastGenerateMessage;
        /**
         * @var string
         */
        protected $controller;

        public function setLastGeneratedDate(\DateTime $lastGenerated) {}
        /**
         * @return null|\DateTime
         */
        public function getLastGeneratedDate() {}
        /**
         * @return null|TmpStore
         */
        public function getInProgress() {}
        public function setLastGenerated($lastGenerated) {}
        /**
         * @return int
         */
        public function getLastGenerated() {}
        public function setLastGenerateMessage($lastGenerateMessage) {}
        /**
         * @return string
         */
        public function getLastGenerateMessage() {}
        public function generatePdf($config) {}
        public function renderDocument($params) {}
        /**
         * @return string
         */
        public function getPdfFileName() {}
        /**
         * @return bool
         */
        public function pdfIsDirty() {}
        /**
         * @return string
         */
        public function getLockKey() {}
    }

    /**
     * @method \Pimcore\Model\Document\Printpage\Dao getDao()
     */
    class Printpage extends \pimcore\model\document\printabstract {
        /**
         * Static type of the document
         *
         * @var string
         */
        protected $type;

    }

    /**
     * @method \Pimcore\Model\Document\Page\Dao getDao()
     */
    class Page extends \pimcore\model\document\targetingdocument {
    use \pimcore\model\document\traits\redirecthelpertrait;

        /**
         * Contains the title of the page (meta-title)
         *
         * @var string
         */
        protected $title;
        /**
         * Contains the description of the page (meta-description)
         *
         * @var string
         */
        protected $description;
        /**
         * @var array
         */
        protected $metaData;
        /**
         * Static type of the document
         *
         * @var string
         */
        protected $type;
        /**
         * @var string
         */
        protected $prettyUrl;
        /**
         * Comma separated IDs of target groups
         *
         * @var string
         */
        protected $targetGroupIds;

        public function delete(bool $isNested = false) {}
        protected function update($params = [ ]) {}
        /**
         * @return string
         */
        public function getDescription() {}
        /**
         * @return string
         */
        public function getTitle() {}
        public function setDescription($description) {}
        public function setTitle($title) {}
        public function setMetaData($metaData) {}
        /**
         * @return array
         */
        public function getMetaData() {}
        public function getFullPath(bool $force = false) {}
        public function setPrettyUrl($prettyUrl) {}
        /**
         * @return string
         */
        public function getPrettyUrl() {}
        public function setTargetGroupIds($targetGroupIds) {}
        /**
         * Get serialized list of Target Group IDs
         *
         * @return string
         */
        public function getTargetGroupIds() : string {}
        public function setTargetGroups(array $targetGroups) {}
        /**
         * Return list of assigned target groups (via properties panel)
         *
         * @return TargetGroup[]
         */
        public function getTargetGroups() : array {}
        public function getPreviewImageFilesystemPath($hdpi = false) {}
    }

    /**
     * @method \Pimcore\Model\Document\Snippet\Dao getDao()
     */
    class Snippet extends \pimcore\model\document\targetingdocument {
        /**
         * Static type of the document
         *
         * @var string
         */
        protected $type;

    }

    /**
     * @method \Pimcore\Model\Document\Hardlink\Dao getDao()
     */
    class Hardlink extends \pimcore\model\document {
    use \pimcore\model\document\traits\redirecthelpertrait, \pimcore\model\document\traits\scheduledtaskstrait;

        /**
         * static type of this object
         *
         * @var string
         */
        protected $type;
        /**
         * @var int
         */
        protected $sourceId;
        /**
         * @var bool
         */
        protected $propertiesFromSource;
        /**
         * @var bool
         */
        protected $childrenFromSource;

        /**
         * @return Document\PageSnippet
         */
        public function getSourceDocument() {}
        /**
         * @see Document::resolveDependencies
         *
         * @return array
         */
        public function resolveDependencies() {}
        public function getCacheTags($tags = [ ]) {}
        public function setChildrenFromSource($childrenFromSource) {}
        /**
         * @return bool
         */
        public function getChildrenFromSource() {}
        public function setSourceId($sourceId) {}
        /**
         * @return int
         */
        public function getSourceId() {}
        public function setPropertiesFromSource($propertiesFromSource) {}
        /**
         * @return bool
         */
        public function getPropertiesFromSource() {}
        /**
         * @var Model\Property $prop
         */
        public function getProperties() {}
        public function getChildren($unpublished = false) {}
        public function hasChildren($unpublished = false) {}
        public function delete(bool $isNested = false) {}
        protected function update($params = [ ]) {}
    }

    /**
     * @method DocType\Dao getDao()
     * @method void save()
     * @method void delete()
     */
    class DocType extends \pimcore\model\abstractmodel {
        /**
         * ID of the document-type
         *
         * @var int
         */
        protected $id;
        /**
         * Name of the document-type
         *
         * @var string
         */
        protected $name;
        /**
         * Group of document-types
         *
         * @var string
         */
        protected $group;
        /**
         * @var string
         */
        protected $module;
        /**
         * The specified controller
         *
         * @var string
         */
        protected $controller;
        /**
         * The specified action
         *
         * @var string
         */
        protected $action;
        /**
         * The specified template
         *
         * @var string
         */
        protected $template;
        /**
         * Type, must be one of the following: page,snippet,email
         *
         * @var string
         */
        protected $type;
        /**
         * @var int
         */
        protected $priority;
        /**
         * @var int
         */
        protected $creationDate;
        /**
         * @var int
         */
        protected $modificationDate;

        public static function getById($id) {}
        /**
         * Shortcut to quickly create a new instance
         *
         * @return DocType
         */
        public static function create() {}
        /**
         * @return string
         */
        public function getAction() {}
        /**
         * @return string
         */
        public function getController() {}
        /**
         * @return int
         */
        public function getId() {}
        /**
         * @return string
         */
        public function getName() {}
        /**
         * @return string
         */
        public function getGroup() {}
        /**
         * @return string
         */
        public function getTemplate() {}
        public function setAction($action) {}
        public function setController($controller) {}
        public function setId($id) {}
        public function setName($name) {}
        public function setGroup($group) {}
        public function setTemplate($template) {}
        /**
         * @return string
         */
        public function getType() {}
        public function setType($type) {}
        public function setPriority($priority) {}
        /**
         * @return int
         */
        public function getPriority() {}
        public function setModule($module) {}
        /**
         * @return string
         */
        public function getModule() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
    }

}

namespace Pimcore\Model\Document\Hardlink {
    /**
     * @property \Pimcore\Model\Document\Hardlink\Wrapper\Folder $model
     */
    class Dao extends \pimcore\model\document\dao {
        public function getById($id = null) {}
        public function create() {}
        /**
         * @throws \Exception
         */
        public function delete() {}
    }

    class Service {
        public static function wrap(Document $doc) {}
        public static function upperCastDocument(Document $doc) {}
        public static function getChildByPath(Document\Hardlink $hardlink, $path) {}
        public static function getNearestChildByPath(Document\Hardlink $hardlink, $path) {}
    }


    /**
     * @method Document\Dao getDao()
     */
    trait Wrapper {
        /**
         * @var Document\Hardlink
         */
        protected $hardLinkSource;
        /**
         * @var Document
         */
        protected $sourceDocument;
        public function save() {}
        protected function update($params = [ ]) {}
        public function delete(bool $isNested = false) {}
        /**
         * @return mixed
         */
        public function getProperties() {}
        public function getProperty($name, $asContainer = false) {}
        public function getChildren($unpublished = false) {}
        public function hasChildren($unpublished = false) {}
        /**
         * @throws \Exception
         */
        protected function raiseHardlinkError() {}
        public function setHardLinkSource($hardLinkSource) {}
        /**
         * @return Document\Hardlink
         */
        public function getHardLinkSource() {}
        /**
         * @return Document
         */
        public function getSourceDocument() {}
        public function setSourceDocument($sourceDocument) {}
    }

}

namespace Pimcore\Model\Document\Hardlink\Wrapper {
    /**
     * @method \Pimcore\Model\Document\Hardlink\Dao getDao()
     */
    class Email extends \pimcore\model\document\hardlink implements \pimcore\model\document\hardlink\wrapper\wrapperinterface {
    use \pimcore\model\document\hardlink\wrapper;
}

    /**
     * @method \Pimcore\Model\Document\Hardlink\Dao getDao()
     */
    class Link extends \pimcore\model\document\link implements \pimcore\model\document\hardlink\wrapper\wrapperinterface {
    use \pimcore\model\document\hardlink\wrapper;

        public function getHref() {}
    }

    /**
     * @method \Pimcore\Model\Document\Hardlink\Dao getDao()
     */
    class Folder extends \pimcore\model\document\folder implements \pimcore\model\document\hardlink\wrapper\wrapperinterface {
    use \pimcore\model\document\hardlink\wrapper;
}

    /**
     * @method \Pimcore\Model\Document\Hardlink\Dao getDao()
     */
    class Printcontainer extends \pimcore\model\document\printcontainer implements \pimcore\model\document\hardlink\wrapper\wrapperinterface {
    use \pimcore\model\document\hardlink\wrapper;
}

    /**
     * @method \Pimcore\Model\Document\Hardlink\Dao getDao()
     */
    class Printpage extends \pimcore\model\document\printpage implements \pimcore\model\document\hardlink\wrapper\wrapperinterface {
    use \pimcore\model\document\hardlink\wrapper;
}

    /**
     * @method \Pimcore\Model\Document\Hardlink\Dao getDao()
     */
    class Page extends \pimcore\model\document\page implements \pimcore\model\document\hardlink\wrapper\wrapperinterface {
    use \pimcore\model\document\hardlink\wrapper;
}

    /**
     * @method \Pimcore\Model\Document\Hardlink\Dao getDao()
     */
    class Snippet extends \pimcore\model\document\snippet implements \pimcore\model\document\hardlink\wrapper\wrapperinterface {
    use \pimcore\model\document\hardlink\wrapper;
}

    /**
     * @method \Pimcore\Model\Document\Hardlink\Dao getDao()
     */
    class Hardlink extends \pimcore\model\document\hardlink implements \pimcore\model\document\hardlink\wrapper\wrapperinterface {
    use \pimcore\model\document\hardlink\wrapper;
}


    interface WrapperInterface {
        function setHardLinkSource($hardLinkSource) ;
        /**
         * @return Document
         */
        function getHardLinkSource() ;
        function setSourceDocument($sourceDocument) ;
        /**
         * @return Document
         */
        function getSourceDocument() ;
    }

}

namespace Pimcore\Model\Document\Page {
    /**
     * @property \Pimcore\Model\Document\Page $model
     */
    class Dao extends \pimcore\model\document\pagesnippet\dao implements \pimcore\model\document\targeting\targetingdocumentdaointerface {
    use \pimcore\model\document\targeting\targetingdocumentdaotrait;

        public function getById($id = null) {}
        public function create() {}
        /**
         * @throws \Exception
         */
        public function delete() {}
    }

}

namespace Pimcore\Model\Document\Printcontainer {
    /**
     * @property \Pimcore\Model\Document\Printcontainer $model
     */
    class Dao extends \pimcore\model\document\printabstract\dao {
        /**
         * @return string
         */
        public function getLastedChildModificationDate() {}
    }

}

namespace Pimcore\Model\Document\Traits {
    trait ScheduledTasksTrait {
        /**
         * Contains all scheduled tasks
         *
         * @var Task[]
         */
        public $scheduledTasks;
        /**
         * @return Task[] the $scheduledTasks
         */
        public function getScheduledTasks() {}
        public function setScheduledTasks($scheduledTasks) {}
        public function saveScheduledTasks() {}
    }

    trait RedirectHelperTrait {
        protected function createRedirectForFormerPath(string $oldPath, ?Document $oldDocument) {}
    }

}

namespace Pimcore\Model\Document\Targeting {
    interface TargetingDocumentInterface {
    const TARGET_GROUP_ELEMENT_PREFIX = 'persona_-';
    const TARGET_GROUP_ELEMENT_SUFFIX = '-_';
        function getTargetGroupElementPrefix(int $targetGroupId = null) : string ;
        function getTargetGroupElementName(string $name) : string ;
        function setUseTargetGroup(int $useTargetGroup = null) ;
        /**
         * Returns the target group to use
         *
         * @return int|null
         */
        function getUseTargetGroup() ;
        /**
         * Checks if the document has targeting specific elements
         *
         * @return bool
         */
        function hasTargetGroupSpecificElements() : bool ;
        /**
         * Returns targeting specific element names
         *
         * @return array
         */
        function getTargetGroupSpecificElementNames() : array ;
    }

    interface TargetingDocumentDaoInterface {
        /**
         * Checks if the document has targeting specific elements
         *
         * @return bool
         */
        function hasTargetGroupSpecificElements() : bool ;
        /**
         * Returns targeting specific element names
         *
         * @return array
         */
        function getTargetGroupSpecificElementNames() : array ;
    }


    /**
     * @implements TargetingDocumentDaoInterface
     */
    trait TargetingDocumentDaoTrait {
        /** @var PageSnippet\Dao $this */
        public function hasTargetGroupSpecificElements() : bool {}
        /** @var PageSnippet\Dao $this */
        public function getTargetGroupSpecificElementNames() : array {}
    }

}

namespace Pimcore\Model\Document\PageSnippet {
    /**
     * @property \Pimcore\Model\Document\PageSnippet $model
     */
    abstract class Dao extends \pimcore\model\document\dao {
        /**
         * Delete all elements containing the content (tags) from the database
         */
        public function deleteAllElements() {}
        /** @var Document\Tag $element */
        public function getElements() {}
        /**
         * Get available versions fot the object and return an array of them
         *
         * @return Version[]
         */
        public function getVersions() {}
        public function getLatestVersion($force = false) {}
        /**
         * Delete the object from database
         *
         * @throws \Exception
         */
        public function delete() {}
    }

}

namespace Pimcore\Model\Document\Folder {
    /**
     * @property \Pimcore\Model\Document\Folder $model
     */
    class Dao extends \pimcore\model\document\dao {
        /**
         * Deletes the folder
         */
        public function delete() {}
    }

}

namespace Pimcore\Model\Document\Snippet {
    /**
     * @property \Pimcore\Model\Document\Snippet $model
     */
    class Dao extends \pimcore\model\document\pagesnippet\dao implements \pimcore\model\document\targeting\targetingdocumentdaointerface {
    use \pimcore\model\document\targeting\targetingdocumentdaotrait;

        public function getById($id = null) {}
        public function create() {}
        /**
         * @throws \Exception
         */
        public function delete() {}
    }

}

namespace Pimcore\Model\Document\PrintAbstract {
    /**
     * @property \Pimcore\Model\Document\PrintAbstract $model
     */
    class Dao extends \pimcore\model\document\pagesnippet\dao {
        /**
         * Contains the valid database columns
         *
         * @var array
         */
        protected $validColumnsPage;

        /**
         * Get the valid columns from the database
         */
        public function init() {}
        public function getById($id = null) {}
        public function create() {}
        /**
         * @throws \Exception
         */
        public function update() {}
        /**
         * @throws \Exception
         */
        public function delete() {}
    }

}

namespace Pimcore\Model\Document\Link {
    /**
     * @property \Pimcore\Model\Document\Link $model
     */
    class Dao extends \pimcore\model\document\dao {
        public function getById($id = null) {}
        public function create() {}
        /**
         * @throws \Exception
         */
        public function delete() {}
    }

}

namespace Pimcore\Model\Document\Printpage {
    /**
     * @property \Pimcore\Model\Document\Printpage $model
     */
    class Dao extends \pimcore\model\document\printabstract\dao {}

}

namespace Pimcore\Model\Document\Newsletter {
    /**
     * @property \Pimcore\Model\Document\Newsletter $model
     */
    class Dao extends \pimcore\model\document\pagesnippet\dao {
        public function getById($id = null) {}
        public function create() {}
        /**
         * Deletes the object (and data) from database
         *
         * @throws \Exception
         */
        public function delete() {}
    }

}

namespace Pimcore\Model\Document\Listing {
    /**
     * @property \Pimcore\Model\Document\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * @var \Closure
         */
        protected $onCreateQueryCallback;

        /**
         * Loads a list of objects (all are an instance of Document) for the given parameters an return them
         *
         * @return array
         */
        public function load() {}
        public function getQuery($columns) {}
        /**
         * Loads a list of document ids for the specicifies parameters, returns an array of ids
         *
         * @return int[]
         */
        public function loadIdList() {}
        /**
         * @return array
         */
        public function loadIdPathList() {}
        /**
         * @return int
         */
        public function getCount() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
        public function onCreateQuery(callable $callback) {}
    }

}

namespace Pimcore\Model\Document\Service {
    /**
     * @property \Pimcore\Model\Document\Service $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getDocumentIdByPrettyUrlInSite(Site $site, $path) {}
        public function getTranslationSourceId(Document $document) {}
        public function getTranslations(Document $document, $task = 'open') {}
        public function addTranslation(Document $document, Document $translation, $language = null) {}
        public function removeTranslation(Document $document) {}
        public function removeTranslationLink(Document $document, Document $targetDocument) {}
    }

}

namespace Pimcore\Model\Document\Tag {
    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Area extends \pimcore\model\document\tag {
        /**
         * @see Model\Document\Tag\TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see Model\Document\Tag\TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * @see Model\Document\Tag\TagInterface::admin
         */
        public function admin() {}
        /**
         * @see Model\Document\Tag\TagInterface::frontend
         */
        public function frontend() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function getElement(string $name) {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Relation extends \pimcore\model\document\tag {
        /**
         * ID of the source object
         *
         * @var int|null
         */
        public $id;
        /**
         * Type of the source object (document, asset, object)
         *
         * @var string|null
         */
        public $type;
        /**
         * Subtype of the source object (eg. page, link, video, news, ...)
         *
         * @var string|null
         */
        public $subtype;
        /**
         * Contains the source object
         *
         * @var mixed
         */
        public $element;

        /**
         * @see Document\Tag\TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see Document\Tag\TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * Converts the data so it's suitable for the editmode
         *
         * @return mixed
         */
        public function getDataEditmode() {}
        /**
         * @see Document\Tag\TagInterface::frontend
         *
         * @return string
         */
        public function frontend() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * Sets the element by the data stored for the object
         *
         * @return $this
         */
        protected function setElement() {}
        /**
         * Returns one of them: Document, Object, Asset
         *
         * @return mixed
         */
        public function getElement() {}
        /**
         * Returns teh path of the linked element
         *
         * @return mixed
         */
        public function getFullPath() {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        /**
         * @return array
         */
        public function resolveDependencies() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
        /**
         * @return bool
         */
        public function checkValidity() {}
        /**
         * @return array
         */
        public function __sleep() {}
        /**
         * this method is called by Document\Service::loadAllDocumentFields() to load all lazy loading fields
         */
        public function load() {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setSubtype($subtype) {}
        /**
         * @return string
         */
        public function getSubtype() {}
        public function rewriteIds($idMapping) {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Wysiwyg extends \pimcore\model\document\tag {
        /**
         * Contains the text
         *
         * @var string
         */
        public $text;

        /**
         * @see TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * Converts the data so it's suitable for the editmode
         *
         * @return mixed
         */
        public function getDataEditmode() {}
        /**
         * @see TagInterface::frontend
         *
         * @return string
         */
        public function frontend() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
        /**
         * @return array
         */
        public function resolveDependencies() {}
        public function getCacheTags($ownerDocument, $blockedTags = [ ]) {}
        public function rewriteIds($idMapping) {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Relations extends \pimcore\model\document\tag implements \iterator {
        /**
         * @var array
         */
        public $elements;
        /**
         * @var array
         */
        public $elementIds;

        /**
         * @see Document\Tag\TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @return $this
         */
        public function setElements() {}
        /**
         * @see Document\Tag\TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * @return array
         */
        public function getDataForResource() {}
        /**
         * Converts the data so it's suitable for the editmode
         *
         * @return mixed
         */
        public function getDataEditmode() {}
        /**
         * @see Document\Tag\TagInterface::frontend
         *
         * @return string
         */
        public function frontend() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * @return Element\ElementInterface[]
         */
        public function getElements() {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        /**
         * @return array
         */
        public function resolveDependencies() {}
        public function rewriteIds($idMapping) {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
        /**
         * @return array
         */
        public function __sleep() {}
        public function load() {}
        /**
         * Methods for Iterator
         */
        public function rewind() {}
        /**
         * @return mixed
         */
        public function current() {}
        /**
         * @return mixed
         */
        public function key() {}
        /**
         * @return mixed
         */
        public function next() {}
        /**
         * @return bool
         */
        public function valid() {}
        public function getForWebserviceExport($document = null, $params = [ ]) {}
    }

    /**
     * @property \Pimcore\Model\Document\Tag\Areablock $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function save() {}
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Link extends \pimcore\model\document\tag {
        /**
         * Contains the data for the link
         *
         * @var array
         */
        public $data;

        /**
         * @see Document\Tag\TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see Document\Tag\TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * @see Document\Tag\TagInterface::getDataEditmode
         *
         * @return mixed
         */
        public function getDataEditmode() {}
        protected function getEditmodeElementClasses($options = [ ]) : array {}
        /**
         * @see Document\Tag\TagInterface::frontend
         *
         * @return string
         */
        public function frontend() {}
        /**
         * @return bool
         */
        public function checkValidity() {}
        /**
         * @return string
         */
        public function getHref() {}
        protected function updatePathFromInternal($realPath = false, $editmode = false) {}
        /**
         * @return string
         */
        public function getText() {}
        public function setText($text) {}
        /**
         * @return string
         */
        public function getTarget() {}
        /**
         * @return string
         */
        public function getParameters() {}
        /**
         * @return string
         */
        public function getAnchor() {}
        /**
         * @return string
         */
        public function getTitle() {}
        /**
         * @return string
         */
        public function getRel() {}
        /**
         * @return string
         */
        public function getTabindex() {}
        /**
         * @return string
         */
        public function getAccesskey() {}
        /**
         * @return mixed
         */
        public function getClass() {}
        /**
         * @return mixed
         */
        public function getAttributes() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        /**
         * @return array
         */
        public function resolveDependencies() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
        public function getForWebserviceExport($document = null, $params = [ ]) {}
        public function rewriteIds($idMapping) {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Renderlet extends \pimcore\model\document\tag {
        /**
         * Contains the ID of the linked object
         *
         * @var int
         */
        public $id;
        /**
         * Contains the object
         *
         * @var Document | Asset | DataObject\AbstractObject
         */
        public $o;
        /**
         * Contains the type
         *
         * @var string
         */
        public $type;
        /**
         * Contains the subtype
         *
         * @var string
         */
        public $subtype;

        /**
         * @see Document\Tag\TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see Document\Tag\TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * Converts the data so it's suitable for the editmode
         *
         * @return mixed
         */
        public function getDataEditmode() {}
        /**
         * @see Document\Tag\TagInterface::frontend
         *
         * @return string
         */
        public function frontend() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * Sets the element by the data stored for the object
         *
         * @return $this
         */
        public function setElement() {}
        /**
         * @return array
         */
        public function resolveDependencies() {}
        public function getObjectType($object = null) {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
        /**
         * @return bool
         */
        public function checkValidity() {}
        /**
         * @return array
         */
        public function __sleep() {}
        /**
         * this method is called by Document\Service::loadAllDocumentFields() to load all lazy loading fields
         */
        public function load() {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setO($o) {}
        /**
         * @return Asset|Document|Object
         */
        public function getO() {}
        public function setSubtype($subtype) {}
        /**
         * @return string
         */
        public function getSubtype() {}
        public function rewriteIds($idMapping) {}
    }

    /**
     * @deprecated use \Pimcore\Model\Document\Tag\Relations instead
     */
    class Multihref extends \pimcore\model\document\tag\relations {}

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Areablock extends \pimcore\model\document\tag implements \pimcore\model\document\tag\blockinterface {
        /**
         * Contains an array of indices, which represent the order of the elements in the block
         *
         * @var array
         */
        public $indices;
        /**
         * Current step of the block while iteration
         *
         * @var int
         */
        public $current;
        /**
         * @var array
         */
        public $currentIndex;
        /**
         * @var bool
         */
        protected $blockStarted;

        /**
         * @see Document\Tag\TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see Document\Tag\TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * @see Document\Tag\TagInterface::admin
         */
        public function admin() {}
        /**
         * @see Document\Tag\TagInterface::frontend
         */
        public function frontend() {}
        public function renderIndex($index) {}
        public function loop() {}
        public function content() {}
        /**
         * @return TagHandlerInterface
         */
        private function getTagHandler() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * Called before the block is rendered
         */
        public function blockConstruct() {}
        /**
         * Called when the block was rendered
         */
        public function blockDestruct() {}
        /**
         * @return array
         */
        protected function getToolBarDefaultConfig() {}
        /**
         * @inheritDoc
         */
        protected function getEditmodeOptions() : array {}
        protected function getEditmodeElementAttributes(array $options) : array {}
        /**
         * Is executed at the beginning of the loop and setup some general settings
         *
         * @return $this
         */
        public function start() {}
        /**
         * Is executed at the end of the loop and removes the settings set in start()
         */
        public function end() {}
        /**
         * Is called evertime a new iteration starts (new entry of the block while looping)
         */
        public function blockStart() {}
        /**
         * Is called evertime a new iteration ends (new entry of the block while looping)
         */
        public function blockEnd() {}
        public function setOptions($options) {}
        protected function sortAvailableAreas(array $areas, array $options) {}
        /**
         * Return the amount of block elements
         *
         * @return int
         */
        public function getCount() {}
        /**
         * Return current iteration step
         *
         * @return int
         */
        public function getCurrent() {}
        /**
         * Return current index
         *
         * @return int
         */
        public function getCurrentIndex() {}
        /**
         * If object was serialized, set the counter back to 0
         */
        public function __wakeup() {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
        public function getElement(string $name) {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Scheduledblock extends \pimcore\model\document\tag\block implements \pimcore\model\document\tag\blockinterface {
        /**
         * @var array
         */
        protected $cachedCurrentElement;

        /**
         * @see TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        public function setDataFromEditmode($data) {}
        /**
         * @return $this
         */
        public function setDefault() {}
        protected function filterElements() {}
        protected function updateOutputCacheLifetime($outputTimestamp, $nextElement) {}
        /**
         * Loops through the block
         *
         * @return bool
         */
        public function loop() {}
        /**
         * Is executed at the beginning of the loop and setup some general settings
         *
         * @return $this
         */
        public function start() {}
        /**
         * Called before the block is rendered
         */
        public function blockConstruct() {}
        public function blockStart($showControls = true) {}
        /**
         * Return current index
         *
         * @return int
         */
        public function getCurrentIndex() {}
        /**
         * @return Block\Item[]
         */
        public function getElements() {}
        /**
         * If object was serialized, set cached elements to null
         */
        public function __wakeup() {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Block extends \pimcore\model\document\tag implements \pimcore\model\document\tag\blockinterface {
        /**
         * Contains an array of indices, which represent the order of the elements in the block
         *
         * @var array
         */
        public $indices;
        /**
         * Current step of the block while iteration
         *
         * @var int
         */
        public $current;
        /**
         * @var string[]
         */
        public $suffixes;

        /**
         * @see TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * @see TagInterface::admin
         */
        public function admin() {}
        /**
         * @see TagInterface::frontend
         */
        public function frontend() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * @return $this
         */
        public function setDefault() {}
        /**
         * Loops through the block
         *
         * @return bool
         */
        public function loop() {}
        protected function getEditmodeElementAttributes(array $options) : array {}
        /**
         * Is executed at the beginning of the loop and setup some general settings
         *
         * @return $this
         */
        public function start() {}
        /**
         * Is executed at the end of the loop and removes the settings set in start()
         */
        public function end() {}
        /**
         * Called before the block is rendered
         */
        public function blockConstruct() {}
        /**
         * Called when the block was rendered
         */
        public function blockDestruct() {}
        public function blockStart($showControls = true) {}
        /**
         * Custom position of button controls between blockStart -> blockEnd
         */
        public function blockControls() {}
        /**
         * Is called evertime a new iteration ends (new entry of the block while looping)
         */
        public function blockEnd() {}
        public function setOptions($options) {}
        /**
         * Return the amount of block elements
         *
         * @return int
         */
        public function getCount() {}
        /**
         * Return current iteration step
         *
         * @return int
         */
        public function getCurrent() {}
        /**
         * Return current index
         *
         * @return int
         */
        public function getCurrentIndex() {}
        /**
         * If object was serialized, set the counter back to 0
         */
        public function __wakeup() {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
        /**
         * @return Block\Item[]
         */
        public function getElements() {}
        /**
         * @return string
         */
        private function getBlockAttributes() : string {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Embed extends \pimcore\model\document\tag {
        /**
         * @var string
         */
        public $url;

        /**
         * @see TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * @return array
         */
        public function getDataForResource() {}
        /**
         * @see TagInterface::frontend
         *
         * @return string
         */
        public function frontend() {}
        /**
         * @return string
         */
        public function admin() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Date extends \pimcore\model\document\tag {
        /**
         * Contains the date
         *
         * @var \Carbon\Carbon
         */
        public $date;

        /**
         * @see TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * Converts the data so it's suitable for the editmode
         *
         * @return string
         */
        public function getDataEditmode() {}
        /**
         * @see TagInterface::frontend
         */
        public function frontend() {}
        /**
         * @see Tag::getDataForResource
         *
         * @return int|null
         */
        public function getDataForResource() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
        public function getForWebserviceExport($document = null, $params = [ ]) {}
        protected function setDateFromTimestamp($timestamp) {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Video extends \pimcore\model\document\tag {
        /**
         * contains depending on the type of the video the unique identifier eg. "http://www.youtube.com", "789", ...
         *
         * @var int|string
         */
        public $id;
        /**
         * one of asset, youtube, vimeo, dailymotion
         *
         * @var string
         */
        public $type;
        /**
         * asset ID of poster image
         *
         * @var int
         */
        public $poster;
        /**
         * @var string
         */
        public $title;
        /**
         * @var string
         */
        public $description;

        public function setTitle($title) {}
        /**
         * @return string
         */
        public function getTitle() {}
        public function setDescription($description) {}
        /**
         * @return string
         */
        public function getDescription() {}
        /**
         * @see TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * @return array
         */
        public function getDataForResource() {}
        /**
         * @see TagInterface::frontend
         *
         * @return string
         */
        public function frontend() {}
        /**
         * @return array
         */
        public function resolveDependencies() {}
        /**
         * @return bool
         */
        public function checkValidity() {}
        /**
         * @see TagInterface::admin
         *
         * @return string
         */
        public function admin() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * @return string
         */
        public function getWidth() {}
        /**
         * @return int
         */
        public function getHeight() {}
        public function getAssetCode($inAdmin = false) {}
        /**
         * @return string
         */
        public function getUrlCode() {}
        public function getErrorCode($message = '') {}
        /**
         * @return mixed|string
         */
        private function parseYoutubeId() {}
        /**
         * @return string
         */
        public function getYoutubeUrlEmbedded() {}
        /**
         * @return string
         */
        public function getYoutubeCode() {}
        /**
         * @return string
         */
        public function getVimeoCode() {}
        /**
         * @return string
         */
        public function getDailymotionCode() {}
        public function getHtml5Code($urls = [ ], $thumbnail = null) {}
        public function getProgressCode($thumbnail = null) {}
        /**
         * @return string
         */
        public function getEmptyCode() {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
        /**
         * @return string
         */
        public function getVideoType() {}
        /**
         * @return Asset|null
         */
        public function getVideoAsset() {}
        /**
         * @return Asset
         */
        public function getPosterAsset() {}
        public function getImageThumbnail($config) {}
        public function getThumbnail($config) {}
        public function setId($id) {}
        /**
         * @return int|string
         */
        public function getId() {}
        public function rewriteIds($idMapping) {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Numeric extends \pimcore\model\document\tag {
        /**
         * Contains the current number, or an empty string if not set
         *
         * @var string
         */
        public $number;

        /**
         * @see TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * @see TagInterface::frontend
         *
         * @return string
         */
        public function frontend() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Pdf extends \pimcore\model\document\tag {
        /**
         * @var int
         */
        public $id;

        /**
         * @see Document\Tag\TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see Document\Tag\TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * @return array
         */
        public function getDataForResource() {}
        /**
         * @return array
         */
        public function getDataEditmode() {}
        public function getCacheTags($ownerDocument, $tags = [ ]) {}
        /**
         * @return array
         */
        public function resolveDependencies() {}
        /**
         * @return bool
         */
        public function checkValidity() {}
        public function setDataFromResource($data) {}
        /**
         * @return bool
         */
        public function getEditmode() {}
        public function setDataFromEditmode($data) {}
        /**
         * @return string
         */
        public function frontend() {}
        public function getErrorCode($message = '') {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
        /**
         * @return Asset
         */
        public function getElement() {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getId() {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Input extends \pimcore\model\document\tag {
        /**
         * Contains the text for this element
         *
         * @var int
         */
        public $text;

        /**
         * @see TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * @see TagInterface::frontend
         *
         * @return string
         */
        public function frontend() {}
        public function getDataEditmode() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Textarea extends \pimcore\model\document\tag {
        /**
         * Contains the text
         *
         * @var string
         */
        public $text;

        /**
         * @see TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * @see TagInterface::frontend
         *
         * @return string
         */
        public function frontend() {}
        public function getDataEditmode() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Select extends \pimcore\model\document\tag {
        /**
         * Contains the current selected value
         *
         * @var string
         */
        public $text;

        /**
         * @see TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * @see TagInterface::frontend
         *
         * @return string
         */
        public function frontend() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Multiselect extends \pimcore\model\document\tag {
        /**
         * Contains the current selected values
         *
         * @var array
         */
        public $values;

        /**
         * @see TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * @see TagInterface::frontend
         *
         * @return string
         */
        public function frontend() {}
        /**
         * @return string
         */
        public function getDataEditmode() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Checkbox extends \pimcore\model\document\tag {
        /**
         * Contains the checkbox value
         *
         * @var bool
         */
        public $value;

        /**
         * @see TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * @see TagInterface::frontend
         *
         * @return string
         */
        public function frontend() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        /**
         * @return bool
         */
        public function isChecked() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
    }

    /**
     * @deprecated use \Pimcore\Model\Document\Tag\Relation instead
     */
    class Href extends \pimcore\model\document\tag\relation {}

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Table extends \pimcore\model\document\tag {
        /**
         * Contains the text for this element
         *
         * @var array
         */
        public $data;

        /**
         * @see TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        /**
         * @see TagInterface::frontend
         *
         * @return string
         */
        public function frontend() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Snippet extends \pimcore\model\document\tag {
        /**
         * Contains the ID of the linked snippet
         *
         * @var int
         */
        public $id;
        /**
         * Contains the object for the snippet
         *
         * @var Document\Snippet
         */
        public $snippet;

        /**
         * @see Document\Tag\TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see Document\Tag\TagInterface::getData
         *
         * @return mixed
         */
        public function getData() {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getId() {}
        /**
         * Converts the data so it's suitable for the editmode
         *
         * @return mixed
         */
        public function getDataEditmode() {}
        /**
         * @see Document\Tag\TagInterface::frontend
         *
         * @return string
         */
        public function frontend() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        /**
         * @return array
         */
        public function resolveDependencies() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
        /**
         * @return array
         */
        public function __sleep() {}
        /**
         * this method is called by Document\Service::loadAllDocumentFields() to load all lazy loading fields
         */
        public function load() {}
        public function rewriteIds($idMapping) {}
        public function setSnippet($snippet) {}
        /**
         * @return Document\Snippet
         */
        public function getSnippet() {}
    }

    /**
     * @method \Pimcore\Model\Document\Tag\Dao getDao()
     */
    class Image extends \pimcore\model\document\tag {
        /**
         * ID of the referenced image
         *
         * @var int
         */
        public $id;
        /**
         * The ALT text of the image
         *
         * @var string
         */
        public $alt;
        /**
         * Contains the imageobject itself
         *
         * @var Asset\Image
         */
        public $image;
        /**
         * @var bool
         */
        public $cropPercent;
        /**
         * @var float
         */
        public $cropWidth;
        /**
         * @var float
         */
        public $cropHeight;
        /**
         * @var float
         */
        public $cropTop;
        /**
         * @var float
         */
        public $cropLeft;
        /**
         * @var array
         */
        public $hotspots;
        /**
         * @var array
         */
        public $marker;

        /**
         * @see TagInterface::getType
         *
         * @return string
         */
        public function getType() {}
        /**
         * @see TagInterface::getData
         *
         * @return array
         */
        public function getData() {}
        /**
         * @return array
         */
        public function getDataForResource() {}
        /**
         * Converts the data so it's suitable for the editmode
         *
         * @return array
         */
        public function getDataEditmode() {}
        /**
         * @return array
         */
        public function getOptions() {}
        /**
         * @see TagInterface::frontend
         *
         * @return string
         */
        public function frontend() {}
        public function setDataFromResource($data) {}
        public function setDataFromEditmode($data) {}
        /**
         * @return string
         */
        public function getText() {}
        public function setText($text) {}
        /**
         * @return string
         */
        public function getAlt() {}
        /**
         * @return string
         */
        public function getSrc() {}
        /**
         * @return Asset\Image
         */
        public function getImage() {}
        public function setImage($image) {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getId() {}
        public function getThumbnail($conf, $deferred = true) {}
        protected function applyCustomCropping($thumbConfig) {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function getCacheTags($ownerDocument, $tags = [ ]) {}
        /**
         * @return array
         */
        public function resolveDependencies() {}
        public function getFromWebserviceImport($wsElement, $document = null, $params = [ ], $idMapper = null) {}
        public function setCropHeight($cropHeight) {}
        /**
         * @return float
         */
        public function getCropHeight() {}
        public function setCropLeft($cropLeft) {}
        /**
         * @return float
         */
        public function getCropLeft() {}
        public function setCropPercent($cropPercent) {}
        /**
         * @return bool
         */
        public function getCropPercent() {}
        public function setCropTop($cropTop) {}
        /**
         * @return float
         */
        public function getCropTop() {}
        public function setCropWidth($cropWidth) {}
        /**
         * @return float
         */
        public function getCropWidth() {}
        public function setHotspots($hotspots) {}
        /**
         * @return array
         */
        public function getHotspots() {}
        public function setMarker($marker) {}
        /**
         * @return array
         */
        public function getMarker() {}
        public function rewriteIds($idMapping) {}
        public function __sleep() {}
    }


    interface TagInterface {
        /**
         * Return the data for direct output to the frontend, can also contain HTML code!
         *
         * @return string
         */
        function frontend() ;
        /**
         * Return the data for the admin, can also contain HTML code!
         *
         * @return string
         */
        function admin() ;
        /**
         * Get the current data stored for the element
         * this is used as general fallback for the methods getDataForResource(), admin(), getValue()
         *
         * @return mixed
         */
        function getData() ;
        /**
         * Return the type of the element
         *
         * @return string
         */
        function getType() ;
        function setDataFromEditmode($data) ;
        function setDataFromResource($data) ;
        function getForWebserviceExport($document = null, $params = [ ]) ;
        /**
         * @return bool
         */
        function isEmpty() ;
    }

    interface BlockInterface {
        /**
         * Loops through the block
         *
         * @return bool
         */
        function loop() ;
        /**
         * Is executed at the beginning of the loop and setup some general settings
         *
         * @return $this
         */
        function start() ;
        /**
         * Is executed at the end of the loop and removes the settings set in start()
         */
        function end() ;
        /**
         * Called before the block is rendered
         */
        function blockConstruct() ;
        /**
         * Called when the block was rendered
         */
        function blockDestruct() ;
        /**
         * Is called evertime a new iteration starts (new entry of the block while looping)
         */
        function blockStart() ;
        /**
         * Is called evertime a new iteration ends (new entry of the block while looping)
         */
        function blockEnd() ;
        /**
         * Return the amount of block elements
         *
         * @return int
         */
        function getCount() ;
        /**
         * Return current iteration step
         *
         * @return int
         */
        function getCurrent() ;
        /**
         * Return current index
         *
         * @return int
         */
        function getCurrentIndex() ;
        /**
         * @return bool
         */
        function isEmpty() ;
    }

}

namespace Pimcore\Model\Document\Tag\Area {
    class Info {
        /**
         * @var string
         */
        public $id;
        /**
         * @var Tag|Tag\Area|Tag\Areablock
         */
        public $tag;
        /**
         * @var array
         */
        public $params;
        /**
         * @var Request
         */
        public $request;
        /**
         * @var ViewModelInterface
         */
        public $view;
        /**
         * @var string
         */
        public $type;
        /**
         * @var int
         */
        public $index;

        /**
         * @return string
         */
        public function getId() {}
        public function setId($id) {}
        /**
         * @return Tag|Tag\Area|Tag\Areablock
         */
        public function getTag() {}
        public function setTag(Tag $tag) {}
        /**
         * @return mixed
         */
        public function getType() {}
        public function setType($type) {}
        /**
         * @return array
         */
        public function getParams() {}
        public function getParam(string $name) {}
        public function setParams(array $params) {}
        /**
         * @return Request
         */
        public function getRequest() {}
        public function setRequest(Request $request) {}
        /**
         * @return ViewModelInterface
         */
        public function getView() {}
        public function setView(ViewModelInterface $view) {}
        public function setIndex($index) {}
        /**
         * @return int
         */
        public function getIndex() {}
        /**
         * @return Document|Document\PageSnippet
         */
        public function getDocument() {}
    }

    abstract class AbstractArea {
        /**
         * @var ViewModelInterface
         */
        protected $view;
        /**
         * @var \Pimcore\Config\Config
         */
        protected $config;
        /**
         * @var Info
         */
        protected $brick;
        /**
         * @var array
         */
        protected $params;

        public function setView($view) {}
        /**
         * @return ViewModelInterface
         */
        public function getView() {}
        public function setConfig($config) {}
        /**
         * @return \Pimcore\Config\Config
         */
        public function getConfig() {}
        public function getParam($key) {}
        /**
         * @return array
         */
        public function getAllParams() {}
        public function addParam($key, $value) {}
        public function setParams($params) {}
        public function setBrick($brick) {}
        /**
         * @return Info
         */
        public function getBrick() {}
    }

}

namespace Pimcore\Model\Document\Tag\Areablock {
    class Item extends \pimcore\model\document\tag\block\abstractblockitem {
        protected function getItemType() : string {}
        public function __call($func, $args) {}
    }

}

namespace Pimcore\Model\Document\Tag\Block {
    abstract class AbstractBlockItem {
        /**
         * @var Document\PageSnippet
         */
        protected $document;
        /**
         * @var array
         */
        protected $parentBlockNames;
        /**
         * @var int
         */
        protected $index;

        public function __construct(Document\PageSnippet $document, array $parentBlockNames, int $index) {}
        abstract protected function getItemType() : string ;
        public function getElement(string $name) {}
        public function __call($func, $args) {}
    }

    class Item extends \pimcore\model\document\tag\block\abstractblockitem {
        protected function getItemType() : string {}
        public function __call($func, $args) {}
    }

}

namespace Pimcore\Model\Document\Email {
    /**
     * @property \Pimcore\Model\Document\Email $model
     */
    class Dao extends \pimcore\model\document\pagesnippet\dao {
        public function getById($id = null) {}
        public function create() {}
        /**
         * @throws \Exception
         */
        public function delete() {}
    }

}

namespace Pimcore\Model\Document\DocType {
    /**
     * @property \Pimcore\Model\Document\DocType $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        public function getById($id = null) {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\Document\DocType\Listing\Dao getDao()
     */
    class Listing extends \pimcore\model\listing\jsonlisting {
        /**
         * @var array|null
         */
        protected $docTypes;

        /**
         * @return \Pimcore\Model\Document\DocType[]
         */
        public function getDocTypes() {}
        public function setDocTypes($docTypes) {}
    }

}

namespace Pimcore\Model\Document\DocType\Listing {
    /**
     * @property \Pimcore\Model\Document\DocType\Listing $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        /**
         * Loads a list of document-types for the specicifies parameters, returns an array of Document\DocType elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Search\Backend {
    class Data extends \pimcore\model\abstractmodel {
        /**
         * @var Data\Id
         */
        public $id;
        /**
         * @var string
         */
        public $fullPath;
        /**
         * document | object | asset
         *
         * @var string
         */
        public $maintype;
        /**
         * webresource type (e.g. page, snippet ...)
         *
         * @var string
         */
        public $type;
        /**
         * currently only relevant for objects where it portrays the class name
         *
         * @var string
         */
        public $subtype;
        /**
         * published or not
         *
         * @var bool
         */
        public $published;
        /**
         * timestamp of creation date
         *
         * @var int
         */
        public $creationDate;
        /**
         * timestamp of modification date
         *
         * @var int
         */
        public $modificationDate;
        /**
         * User-ID of the owner
         *
         * @var int
         */
        public $userOwner;
        /**
         * User-ID of the user last modified the element
         *
         * @var int
         */
        public $userModification;
        /**
         * @var string
         */
        public $data;
        /**
         * @var string
         */
        public $properties;

        public function __construct($element = null) {}
        /**
         * @return \Pimcore\Model\Dao\AbstractDao
         *
         * @throws \Exception
         */
        public function getDao() {}
        /**
         * @return Data\Id
         */
        public function getId() {}
        public function setId($id) {}
        /**
         * @return string
         */
        public function getFullPath() {}
        public function setFullPath($fullpath) {}
        /**
         * @return string
         */
        public function getType() {}
        public function setType($type) {}
        /**
         * @return string
         */
        public function getSubtype() {}
        public function setSubtype($subtype) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return int
         */
        public function getUserModification() {}
        public function setUserModification($userModification) {}
        /**
         * @return int
         */
        public function getUserOwner() {}
        public function setUserOwner($userOwner) {}
        /**
         * @return bool
         */
        public function isPublished() {}
        /**
         * @return bool
         */
        public function getPublished() {}
        public function setPublished($published) {}
        /**
         * @return string
         */
        public function getData() {}
        public function setData($data) {}
        /**
         * @return string
         */
        public function getProperties() {}
        public function setProperties($properties) {}
        public function setDataFromElement($element) {}
        protected function cleanupData($data) {}
        public static function getForElement($element) {}
        public function delete() {}
        /**
         * @throws \Exception
         */
        public function save() {}
    }

}

namespace Pimcore\Model\Search\Backend\Data {
    /**
     * @property \Pimcore\Model\Search\Backend\Data $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getForElement($element) {}
        public function save() {}
        /**
         * Deletes from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\Search\Backend\Data\Listing\Dao getDao()
     * @method Data[] load()
     * @method Data current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Data[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $entries;

        /**
         * @return Data[]
         */
        public function getEntries() {}
        public function setEntries($entries) {}
        /**
         * @throws \Exception
         */
        public function __construct() {}
    }

    class Id {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $type;

        public function __construct($webResource) {}
        /**
         * @return int
         */
        public function getId() {}
        /**
         * @return string
         */
        public function getType() {}
    }

}

namespace Pimcore\Model\Search\Backend\Data\Listing {
    /**
     * @property \Pimcore\Model\Search\Backend\Data\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of entries for the specicifies parameters, returns an array of Search\Backend\Data
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
        /**
         * @return int|string
         */
        public function getCount() {}
        /**
         * @return string
         */
        protected function getCondition() {}
    }

}

namespace Pimcore\Model\Webservice {
    /**
     * @deprecated
     */
    class Tool {
        /**
         * @static
         *
         * @return array
         */
        public static function createClassMappings() {}
        public static function keyValueReverseMapping($data) {}
    }

    /**
     * @deprecated
     */
    class Service {
        /**
         * @return User
         *
         * @throws \Exception
         */
        public function getUser() {}
        public function getDocumentFolderById($id) {}
        public function getDocumentLinkById($id) {}
        public function getDocumentHardLinkById($id) {}
        public function getDocumentEmailById($id) {}
        public function getDocumentPageById($id) {}
        public function getDocumentSnippetById($id) {}
/** @var Document $doc */
        public function getDocumentList(/** @var Document $doc */
$condition = null, /** @var Document $doc */
$order = null, /** @var Document $doc */
$orderKey = null, /** @var Document $doc */
$offset = null, /** @var Document $doc */
$limit = null, /** @var Document $doc */
$groupBy = null) {}
        public function unpublishDocument($id) {}
        public function deleteDocument($id) {}
        public function updateDocumentPage($wsDocument) {}
        public function updateDocumentFolder($wsDocument) {}
        public function updateDocumentSnippet($wsDocument) {}
        public function updateDocumentLink($wsDocument) {}
        public function updateDocumentHardlink($wsDocument) {}
        public function updateDocumentEmail($wsDocument) {}
        public function updateObjectFolder($wsDocument) {}
        public function updateObjectConcrete($wsDocument) {}
        public function updateAssetFolder($wsDocument) {}
        public function updateAssetFile($wsDocument) {}
        public function createDocumentPage($wsDocument) {}
        public function createDocumentSnippet($wsDocument) {}
        public function createDocumentEmail($wsDocument) {}
        public function createDocumentFolder($wsDocument) {}
        public function createDocumentLink($wsDocument) {}
        public function createDocumentHardlink($wsDocument) {}
        public function createAssetFolder($wsDocument) {}
        public function createAssetFile($wsDocument) {}
        public function createObjectFolder($wsDocument) {}
        public function createObjectConcrete($wsDocument) {}
        public function getAssetFolderById($id) {}
        public function getAssetFileById($id, $options = null) {}
        public function getAssetList($condition = null, $order = null, $orderKey = null, $offset = null, $limit = null, $groupBy = null) {}
        public function deleteAsset($id) {}
        public function getObjectFolderById($id) {}
        public function getObjectConcreteById($id) {}
        public function getObjectList($condition = null, $order = null, $orderKey = null, $offset = null, $limit = null, $groupBy = null, $objectClass = null) {}
        public function unpublishObject($id) {}
        public function deleteObject($id) {}
        protected function create($wsDocument, $element) {}
        protected function getSaveCopyName($element, $key, $path) {}
        protected function updateDocument($wsDocument) {}
        protected function updateObject($wsDocument) {}
        protected function updateAsset($wsDocument) {}
        protected function setModificationParams($element, $creation = false) {}
        public function getClassById($id) {}
        public function getObjectMetadataById($id) {}
/** @var \Pimcore\Model\Translation\Website\Listing $list */
        public function getTranslations(/** @var \Pimcore\Model\Translation\Website\Listing $list */
$type, /** @var \Pimcore\Model\Translation\Website\Listing $list */
$params) {}
    }

    /**
     * @deprecated
     */
    abstract class Data {
        public function map($object, $options = null) {}
        private function mapProperties($value) {}
        public function reverseMap($object, $disableMappingExceptions = false, $idMapper = null) {}
    }

    /**
     * @deprecated
     */
    class JsonEncoder {
        public function encode($data, $returnData = false) {}
        public function decode($data) {}
    }


    /**
     * @deprecated
     */
    interface IdMapperInterface {
        function getMappedId(string $type, int $id) : int ;
        function recordMappingFailure(string $sourceType, int $sourceId, string $destinationType, int $destinationId) : void ;
        /**
         * @deprecated
         *
         * @return bool
         */
        function ignoreMappingFailures() : bool ;
    }

}

namespace Pimcore\Model\Webservice\Data {
    /**
     * @deprecated
     */
    abstract class Document extends \pimcore\model\webservice\data {
        /**
         * @var int
         */
        public $id;
        /**
         * @var int
         */
        public $parentId;
        /**
         * @var string
         */
        public $type;
        /**
         * @var string
         */
        public $key;
        /**
         * @var int
         */
        public $index;
        /**
         * @var bool
         */
        public $published;
        /**
         * @var int
         */
        public $userOwner;
        /**
         * @var Webservice\Data\Property[]
         */
        public $properties;
        /**
         * @var Model\Element\Note[]
         */
        public $notes;
        /**
         * @var array
         */
        public $childs;

        public function map($object, $options = null) {}
    }

    /**
     * @deprecated
     */
    class ClassDefinition extends \pimcore\model\webservice\data {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $description;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $userOwner;
        /**
         * @var int
         */
        public $userModification;
        /**
         * Name of the parent class if set
         *
         * @var string
         */
        public $parentClass;
        /**
         * Name of the parent listing class if set
         *
         * @var string
         */
        public $listingParentClass;
        /**
         * Name of the traits to use if set
         *
         * @var string
         */
        public $useTraits;
        /**
         * Name of the listing traits to use if set
         *
         * @var string
         */
        public $listingUseTraits;
        /**
         * @var bool
         */
        public $allowInherit;
        /**
         * @var bool
         */
        public $allowVariants;
        /**
         * @var bool
         */
        public $showVariants;
        /**
         * @var bool
         */
        public $cacheRawRelationData;
        /**
         * @var array
         */
        public $fieldDefinitions;
        /**
         * @var Model\DataObject\ClassDefinition\Layout
         */
        public $layoutDefinitions;
        /**
         * @var string
         */
        public $icon;
        /**
         * @var string
         */
        public $previewUrl;
        /**
         * @var string
         */
        public $group;
        /**
         * @var string
         */
        public $linkGeneratorReference;

    }

    /**
     * @deprecated
     */
    class DataObject extends \pimcore\model\webservice\data {
        /**
         * If set to true then null values will not be exported.
         *
         * @var bool
         */
        static protected $dropNullValues;
        /**
         * @var int
         */
        public $id;
        /**
         * @var int
         */
        public $parentId;
        /**
         * @var string
         */
        public $key;
        /**
         * @var bool
         */
        public $published;
        /**
         * @var string
         */
        public $type;
        /**
         * @var int
         */
        public $userOwner;
        /**
         * @var Property[]
         */
        public $properties;
        /**
         * @var Model\Element\Note[]
         */
        public $notes;
        /**
         * @var int
         */
        public $index;
        /**
         * @var array
         */
        public $childs;

        public function map($object, $options = null) {}
        public static function setDropNullValues($dropNullValues) {}
        /**
         * @return bool
         */
        public static function getDropNullValues() {}
    }

    /**
     * @deprecated
     */
    class Property extends \pimcore\model\webservice\data {
        /**
         * @var string
         */
        public $name;
        /**
         * @var mixed
         */
        public $data;
        /**
         * @var string
         */
        public $type;
        /**
         * @var bool
         */
        public $inheritable;
        /**
         * @var bool
         */
        public $inherited;

    }

    /**
     * @deprecated
     */
    abstract class Mapper {
        public static function findWebserviceClass($object, $type) {}
        public static function map($object, $apiclass, $type, $options = null) {}
        public static function toObject($el) {}
    }

    /**
     * @deprecated
     */
    class Asset extends \pimcore\model\webservice\data {
        /**
         * @var int
         */
        public $id;
        /**
         * @var int
         */
        public $parentId;
        /**
         * @var string
         */
        public $type;
        /**
         * @var string
         */
        public $filename;
        /**
         * @var string
         */
        public $path;
        /**
         * @var string
         */
        public $mimetype;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $userOwner;
        /**
         * @var int
         */
        public $userModification;
        /**
         * @var Webservice\Data\Property[]
         */
        public $properties;
        /**
         * @var object[]
         */
        public $customSettings;
        /**
         * @var array
         */
        public $metadata;
        /**
         * @var Model\Element\Note[]
         */
        public $notes;
        /**
         * @var array
         */
        public $childs;

        public function map($object, $options = null) {}
        public function reverseMap($object, $disableMappingExceptions = false, $idMapper = null) {}
    }

}

namespace Pimcore\Model\Webservice\Data\Asset {
    /**
     * @deprecated
     */
    class File extends \pimcore\model\webservice\data\asset {
        /**
         * @var string
         */
        public $data;

        public function map($object, $options = null) {}
        public function reverseMap($object, $disableMappingExceptions = false, $idMapper = null) {}
    }

    /**
     * @deprecated
     */
    class Folder extends \pimcore\model\webservice\data\asset {}

}

namespace Pimcore\Model\Webservice\Data\Asset\File {
    /**
     * @deprecated
     */
    class Incoming extends \pimcore\model\webservice\data\asset\file {}

    /**
     * @deprecated
     */
    class In extends \pimcore\model\webservice\data\asset\file {}

    /**
     * @deprecated
     */
    class Out extends \pimcore\model\webservice\data\asset\file {}

    /**
     * @deprecated
     */
    class Outgoing extends \pimcore\model\webservice\data\asset\file {}

}

namespace Pimcore\Model\Webservice\Data\Asset\Folder {
    /**
     * @deprecated
     */
    class Incoming extends \pimcore\model\webservice\data\asset\folder {}

    /**
     * @deprecated
     */
    class In extends \pimcore\model\webservice\data\asset\folder {}

    /**
     * @deprecated
     */
    class Out extends \pimcore\model\webservice\data\asset\folder {
        /**
         * @var string
         */
        public $path;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $userOwner;
        /**
         * @var int
         */
        public $userModification;

    }

}

namespace Pimcore\Model\Webservice\Data\Asset\Listing {
    /**
     * @deprecated
     */
    class Item extends \pimcore\model\webservice\data\element\listing\item {}

}

namespace Pimcore\Model\Webservice\Data\Element\Listing {
    /**
     * @deprecated
     */
    class Item extends \pimcore\model\webservice\data {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $type;

    }

}

namespace Pimcore\Model\Webservice\Data\Document {
    /**
     * @deprecated
     */
    class Email extends \pimcore\model\webservice\data\document\snippet {
        /**
         * Static type of the document
         *
         * @var string
         */
        public $type;
        /**
         * Contains the email subject
         *
         * @var string
         */
        public $subject;
        /**
         * Contains the from email address
         *
         * @var string
         */
        public $from;
        /**
         * Contains the email addresses of the recipients
         *
         * @var string
         */
        public $to;
        /**
         * Contains the carbon copy recipients
         *
         * @var string
         */
        public $cc;
        /**
         * Contains the blind carbon copy recipients
         *
         * @var string
         */
        public $bcc;

    }

    /**
     * @deprecated
     */
    class Element extends \pimcore\model\webservice\data {
        /**
         * @var string
         */
        public $type;
        /**
         * @var object
         */
        public $value;
        /**
         * @var string
         */
        public $name;

    }

    /**
     * @deprecated
     */
    class Newsletter extends \pimcore\model\webservice\data\document\snippet {
        /**
         * Static type of the document
         *
         * @var string
         */
        public $type;
        /**
         * Contains the email subject
         *
         * @var string
         */
        public $subject;
        /**
         * Contains the from email address
         *
         * @var string
         */
        public $from;
        /**
         * enables adding tracking parameters to all links
         *
         * @var bool
         */
        public $enableTrackingParameters;
        /**
         * @var string
         */
        public $trackingParameterSource;
        /**
         * @var string
         */
        public $trackingParameterMedium;
        /**
         * @var string
         */
        public $trackingParameterName;
        /**
         * @var string
         */
        public $sendingMode;

    }

    /**
     * @deprecated
     */
    class Link extends \pimcore\model\webservice\data\document {
        /**
         * @var int
         */
        public $internal;
        /**
         * @var string
         */
        public $internalType;
        /**
         * @var string
         */
        public $direct;
        /**
         * @var string
         */
        public $linktype;
        /**
         * @var string
         */
        public $target;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $type;
        /**
         * @var string
         */
        public $href;
        /**
         * @var string
         */
        public $parameters;
        /**
         * @var string
         */
        public $anchor;
        /**
         * @var string
         */
        public $title;
        /**
         * @var string
         */
        public $accesskey;
        /**
         * @var string
         */
        public $rel;
        /**
         * @var string
         */
        public $tabindex;

    }

    /**
     * @deprecated
     */
    class Folder extends \pimcore\model\webservice\data\document {}

    /**
     * @deprecated
     */
    class Printcontainer extends \pimcore\model\webservice\data\document\pagesnippet {
        /**
         * @var int
         */
        public $lastGenerated;
        /**
         * @var bool
         */
        public $inProgress;
        /**
         * @var string
         */
        public $css;
        /**
         * @var string
         */
        public $lastGenerateMessage;

    }

    /**
     * @deprecated
     */
    class PageSnippet extends \pimcore\model\webservice\data\document {
        /**
         * @var string
         */
        public $controller;
        /**
         * @var string
         */
        public $action;
        /**
         * @var string
         */
        public $template;
        /**
         * @var Webservice\Data\Document\Element[]
         */
        public $elements;

        public function map($object, $options = null) {}
        public function reverseMap($object, $disableMappingExceptions = false, $idMapper = null) {}
    }

    /**
     * @deprecated
     */
    class Printpage extends \pimcore\model\webservice\data\document\pagesnippet {
        /**
         * @var int
         */
        public $lastGenerated;
        /**
         * @var bool
         */
        public $inProgress;
        /**
         * @var string
         */
        public $css;
        /**
         * @var string
         */
        public $lastGenerateMessage;

    }

    /**
     * @deprecated
     */
    class Page extends \pimcore\model\webservice\data\document\pagesnippet {
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $title;
        /**
         * @var string
         */
        public $description;

    }

    /**
     * @deprecated
     */
    class Snippet extends \pimcore\model\webservice\data\document\pagesnippet {}

    /**
     * @deprecated
     */
    class Hardlink extends \pimcore\model\webservice\data\document {
        /**
         * static type of this object
         *
         * @var string
         */
        public $type;
        /**
         * @var int
         */
        public $sourceId;
        /**
         * @var bool
         */
        public $propertiesFromSource;
        /**
         * @var bool
         */
        public $childrenFromSource;

    }

}

namespace Pimcore\Model\Webservice\Data\Document\Hardlink {
    /**
     * @deprecated
     */
    class In extends \pimcore\model\webservice\data\document\link {
        public $sourceId;

        public function reverseMap($object, $disableMappingExceptions = false, $idMapper = null) {}
    }

    /**
     * @deprecated
     */
    class Out extends \pimcore\model\webservice\data\document\link {
        /**
         * @var string
         */
        public $path;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $userModification;

    }

}

namespace Pimcore\Model\Webservice\Data\Document\Page {
    /**
     * @deprecated
     */
    class In extends \pimcore\model\webservice\data\document\page {}

    /**
     * @deprecated
     */
    class Out extends \pimcore\model\webservice\data\document\page {
        /**
         * @var string
         */
        public $path;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $userModification;
        /**
         * @var Model\Webservice\Data\Document\Listing\Item[]
         */
        public $childs;

    }

}

namespace Pimcore\Model\Webservice\Data\Document\Printcontainer {
    /**
     * @deprecated
     */
    class In extends \pimcore\model\webservice\data\document\printcontainer {}

    /**
     * @deprecated
     */
    class Out extends \pimcore\model\webservice\data\document\printcontainer {
        /**
         * @var string
         */
        public $path;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $userModification;

    }

}

namespace Pimcore\Model\Webservice\Data\Document\Folder {
    /**
     * @deprecated
     */
    class In extends \pimcore\model\webservice\data\document\folder {}

    /**
     * @deprecated
     */
    class Out extends \pimcore\model\webservice\data\document\folder {
        /**
         * @var string
         */
        public $path;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $userModification;

    }

}

namespace Pimcore\Model\Webservice\Data\Document\Snippet {
    /**
     * @deprecated
     */
    class In extends \pimcore\model\webservice\data\document\snippet {}

    /**
     * @deprecated
     */
    class Out extends \pimcore\model\webservice\data\document\snippet {
        /**
         * @var string
         */
        public $path;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $userModification;
        /**
         * @var Model\Webservice\Data\Document\Listing\Item[]
         */
        public $childs;

    }

}

namespace Pimcore\Model\Webservice\Data\Document\Link {
    /**
     * @deprecated
     */
    class In extends \pimcore\model\webservice\data\document\link {}

    /**
     * @deprecated
     */
    class Out extends \pimcore\model\webservice\data\document\link {
        /**
         * @var string
         */
        public $path;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $userModification;

    }

}

namespace Pimcore\Model\Webservice\Data\Document\Printpage {
    /**
     * @deprecated
     */
    class In extends \pimcore\model\webservice\data\document\printpage {}

    /**
     * @deprecated
     */
    class Out extends \pimcore\model\webservice\data\document\printpage {
        /**
         * @var string
         */
        public $path;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $userModification;

    }

}

namespace Pimcore\Model\Webservice\Data\Document\Newsletter {
    /**
     * @deprecated
     */
    class In extends \pimcore\model\webservice\data\document\snippet\out {}

    /**
     * @deprecated
     */
    class Out extends \pimcore\model\webservice\data\document\snippet\out {
        /**
         * @var string
         */
        public $path;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $userModification;
        /**
         * Contains the email subject
         *
         * @var string
         */
        public $subject;
        /**
         * Contains the from email address
         *
         * @var string
         */
        public $from;
        /**
         * enables adding tracking parameters to all links
         *
         * @var bool
         */
        public $enableTrackingParameters;
        /**
         * @var string
         */
        public $trackingParameterSource;
        /**
         * @var string
         */
        public $trackingParameterMedium;
        /**
         * @var string
         */
        public $trackingParameterName;
        /**
         * @var string
         */
        public $sendingMode;

    }

}

namespace Pimcore\Model\Webservice\Data\Document\Listing {
    /**
     * @deprecated
     */
    class Item extends \pimcore\model\webservice\data\element\listing\item {}

}

namespace Pimcore\Model\Webservice\Data\Document\Email {
    /**
     * @deprecated
     */
    class In extends \pimcore\model\webservice\data\document\snippet\out {}

    /**
     * @deprecated
     */
    class Out extends \pimcore\model\webservice\data\document\snippet\out {
        /**
         * @var string
         */
        public $path;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $userModification;
        /**
         * Contains the email subject
         *
         * @var string
         */
        public $subject;
        /**
         * Contains the from email address
         *
         * @var string
         */
        public $from;
        /**
         * Contains the email addresses of the recipients
         *
         * @var string
         */
        public $to;
        /**
         * Contains the carbon copy recipients
         *
         * @var string
         */
        public $cc;
        /**
         * Contains the blind carbon copy recipients
         *
         * @var string
         */
        public $bcc;

    }

}

namespace Pimcore\Model\Webservice\Data\ClassDefinition {
    /**
     * @deprecated
     */
    class In extends \pimcore\model\webservice\data\classdefinition {}

    /**
     * @deprecated
     */
    class Out extends \pimcore\model\webservice\data\classdefinition {}

}

namespace Pimcore\Model\Webservice\Data\DataObject {
    /**
     * @deprecated
     */
    class Element extends \pimcore\model\webservice\data {
        /**
         * @var string
         */
        public $type;
        /**
         * @var object[]
         */
        public $value;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $language;

    }

    /**
     * @deprecated
     */
    class Concrete extends \pimcore\model\webservice\data\dataobject {
        /**
         * @var Webservice\Data\DataObject\Element[]
         */
        public $elements;
        /**
         * @var string
         */
        public $className;

        public function map($object, $options = null) {}
        public function reverseMap($object, $disableMappingExceptions = false, $idMapper = null) {}
    }

    /**
     * @deprecated
     */
    class Folder extends \pimcore\model\webservice\data\dataobject {}

}

namespace Pimcore\Model\Webservice\Data\DataObject\Concrete {
    /**
     * @deprecated
     */
    class In extends \pimcore\model\webservice\data\dataobject\concrete {}

    /**
     * @deprecated
     */
    class Out extends \pimcore\model\webservice\data\dataobject\concrete {
        /**
         * @var string
         */
        public $path;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $userModification;
        /**
         * @var Model\Webservice\Data\DataObject\Listing\Item[]
         */
        public $childs;

    }

}

namespace Pimcore\Model\Webservice\Data\DataObject\Folder {
    /**
     * @deprecated
     */
    class In extends \pimcore\model\webservice\data\dataobject\folder {}

    /**
     * @deprecated
     */
    class Out extends \pimcore\model\webservice\data\dataobject\folder {
        /**
         * @var string
         */
        public $path;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $userModification;

    }

}

namespace Pimcore\Model\Webservice\Data\DataObject\Listing {
    /**
     * @deprecated
     */
    class Item extends \pimcore\model\webservice\data\element\listing\item {}

}

namespace Pimcore\Model\Version {
    /**
     * @property \Pimcore\Model\Version $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getById($id) {}
        /**
         * Save object to database
         *
         * @return int
         *
         * @todo: $data could be undefined
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
        public function isVersionUsedInScheduler($version) {}
        public function getBinaryFileIdForHash(string $hash) : ?string {}
        public function isBinaryHashInUse(?string $hash) : bool {}
        public function maintenanceGetOutdatedVersions($elementTypes, $ignoreIds = [ ]) {}
    }

    class UnmarshalMatcher extends \deepcopy\typematcher\typematcher {
        /**
         * UnmarshalMatcher constructor.
         */
        public function __construct() {}
        public function matches($element) {}
    }

    final class SetDumpStateFilter implements \deepcopy\filter\filter {
        protected $state;

        public function __construct(bool $state) {}
        public function apply($object, $property, $objectCopier) {}
    }

    /**
     * @method \Pimcore\Model\Version\Listing\Dao getDao()
     * @method Model\Version[] load()
     * @method Model\Version current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\Version[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $versions;

        public function __construct() {}
        /**
         * @return Model\Version[]
         */
        public function getVersions() {}
        public function setVersions($versions) {}
    }

    class ElementDescriptor {
        /** @var string */
        protected $type;
        /** @var int */
        protected $id;

        public function __construct($type, $id) {}
        /**
         * @return string
         */
        public function getType() {}
        public function setType($type) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setId(int $id) {}
    }

    class MarshalMatcher extends \deepcopy\typematcher\typematcher {
        /** @var string */
        private $sourceType;
        /** @var int */
        private $sourceId;

        public function __construct($sourceType, $sourceId) {}
        public function matches($element) {}
    }

    class PimcoreClassDefinitionReplaceFilter implements \deepcopy\filter\filter {
        /**
         * @var callable
         */
        protected $callback;

        public function __construct(callable $callable) {}
        public function apply($object, $property, $objectCopier) {}
    }

    class PimcoreClassDefinitionMatcher implements \deepcopy\matcher\matcher {
        /** @var string $matchType */
        private $matchType;

        public function __construct($matchType) {}
        public function matches($object, $property) {}
    }

}

namespace Pimcore\Model\Version\Listing {
    /**
     * @property \Pimcore\Model\Version\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of versions for the specicified parameters, returns an array of Version elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\ImportConfig {
    /**
     * @property \Pimcore\Model\ImportConfig $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getById($id) {}
        /**
         * Save object to database
         *
         * @return int
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\ImportConfig\Listing\Dao getDao()
     * @method Model\ImportConfig[] load()
     * @method Model\ImportConfig current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var array|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $importconfigs;

        public function __construct() {}
        /**
         * @return Model\ImportConfig[]
         */
        public function getImportconfigs() : array {}
        public function setImportconfigs(array $importconfigs) {}
    }

}

namespace Pimcore\Model\ImportConfig\Listing {
    /**
     * @property \Pimcore\Model\ImportConfig\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of importconfigs for the specicified parameters, returns an array of ImportConfig elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Workflow {
    /**
     * @property \Pimcore\Model\Workflow $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        public function getById($id = null) {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method Workflow\Listing\Dao getDao()
     */
    class Listing extends \pimcore\model\listing\jsonlisting {
        /**
         * @var array|null
         */
        protected $workflows;

        /**
         * @return Workflow[]
         */
        public function getWorkflows() {}
        public function setWorkflows($workflows) {}
    }

}

namespace Pimcore\Model\Workflow\Listing {
    /**
     * @property \Pimcore\Model\Workflow\Listing $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        /**
         * Loads a list of static routes for the specicifies parameters, returns an array of Workflow elements
         *
         * @return Workflow[]
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\ImportConfigShare {
    /**
     * @property \Pimcore\Model\ImportConfigShare $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getByImportConfigAndSharedWithId($importConfigId, $sharedWithUserId) {}
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\ImportConfigShare\Listing\Dao getDao()
     * @method Model\ImportConfigShare[] load()
     * @method Model\ImportConfigShare current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var array|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $importConfigShares;

        public function __construct() {}
        /**
         * @return Model\ImportConfigShare[]
         */
        public function getImportConfigShares() : array {}
        public function setImportConfigShares(array $importConfigShares) {}
    }

}

namespace Pimcore\Model\ImportConfigShare\Listing {
    /**
     * @property \Pimcore\Model\ImportConfigShare\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of import config shares for the specified parameters, returns an array of ImportConfigShare elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Redirect {
    /**
     * @property \Pimcore\Model\Redirect $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getById($id = null) {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
        protected function updateModificationInfos() {}
    }

    /**
     * @method \Pimcore\Model\Redirect\Listing\Dao getDao()
     * @method Model\Redirect[] load()
     * @method Model\Redirect current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var array|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $redirects;

        public function __construct() {}
        /**
         * @return Model\Redirect[]
         */
        public function getRedirects() {}
        public function setRedirects($redirects) {}
    }

}

namespace Pimcore\Model\Redirect\Listing {
    /**
     * @property \Pimcore\Model\Redirect\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of static routes for the specicifies parameters, returns an array of Redirect elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Site {
    /**
     * @property \Pimcore\Model\Site $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getById($id) {}
        public function getByRootId($id) {}
        public function getByDomain($domain) {}
        /**
         * Save object to database
         */
        public function save() {}
        /**
         * Create a new record for the object in database
         *
         * @return bool
         */
        public function create() {}
        /**
         * Save changes to database, it's an good idea to use save() instead
         */
        public function update() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\Site\Listing\Dao getDao()
     * @method Model\Site[] load()
     * @method Model\Site current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\Site[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $sites;

        public function __construct() {}
        /**
         * @return Model\Site[]
         */
        public function getSites() {}
        public function setSites($sites) {}
    }

}

namespace Pimcore\Model\Site\Listing {
    /**
     * @property \Pimcore\Model\Site\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of thumanils for the specicifies parameters, returns an array of Thumbnail elements
         *
         * @return array
         */
        public function load() {}
    }

}

namespace Pimcore\Model\Glossary {
    /**
     * @property \Pimcore\Model\Glossary $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getById($id = null) {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
        /**
         * @throws \Exception
         */
        public function update() {}
        /**
         * Create a new record for the object in database
         */
        public function create() {}
    }

    /**
     * @method \Pimcore\Model\Glossary\Listing\Dao getDao()
     * @method Model\Glossary[] load()
     * @method Model\Glossary current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\Glossary[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $glossary;

        public function __construct() {}
        /**
         * @return Model\Glossary[]
         */
        public function getGlossary() {}
        public function setGlossary($glossary) {}
    }

}

namespace Pimcore\Model\Glossary\Listing {
    /**
     * @property \Pimcore\Model\Glossary\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of static routes for the specicifies parameters, returns an array of Staticroute elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return array
         */
        public function getDataArray() {}
        /**
         * @return int
         *
         * @todo: $amount could not be defined, so this could cause an issue
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\DataObject {
    /**
     * @method \Pimcore\Model\DataObject\Fieldcollection\Dao getDao()
     */
    class Fieldcollection extends \pimcore\model\abstractmodel implements \iterator, \pimcore\model\dataobject\dirtyindicatorinterface {
    use \pimcore\model\dataobject\traits\dirtyindicatortrait;

        /**
         * @var Model\DataObject\Fieldcollection\Data\AbstractData[]
         */
        protected $items;
        /**
         * @var string
         */
        protected $fieldname;

        public function __construct($items = [ ], $fieldname = null) {}
        /**
         * @return Model\DataObject\Fieldcollection\Data\AbstractData[]
         */
        public function getItems() {}
        public function setItems($items) {}
        /**
         * @return string
         */
        public function getFieldname() {}
        public function setFieldname($fieldname) {}
        /**
         * @return array
         */
        public function getItemDefinitions() {}
        public function save($object, $params = [ ]) {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function add($item) {}
        public function remove($index) {}
        public function get($index) {}
        public function getByOriginalIndex($index) {}
        /**
         * @return int
         */
        public function getCount() {}
        /**
         * Methods for Iterator
         */
        public function rewind() {}
        /**
         * @return mixed
         */
        public function current() {}
        /**
         * @return mixed
         */
        public function key() {}
        /**
         * @return mixed
         */
        public function next() {}
        /**
         * @return bool
         */
        public function valid() {}
/** @var Model\DataObject\ClassDefinition\Data\CustomResourcePersistingInterface $fieldDef */
        public function loadLazyField(/** @var Model\DataObject\ClassDefinition\Data\CustomResourcePersistingInterface $fieldDef */
Concrete $object, /** @var Model\DataObject\ClassDefinition\Data\CustomResourcePersistingInterface $fieldDef */
$type, /** @var Model\DataObject\ClassDefinition\Data\CustomResourcePersistingInterface $fieldDef */
$fcField, /** @var Model\DataObject\ClassDefinition\Data\CustomResourcePersistingInterface $fieldDef */
$index, /** @var Model\DataObject\ClassDefinition\Data\CustomResourcePersistingInterface $fieldDef */
$field) {}
        /**
         * @return Concrete|null
         */
        protected function getObject() : ?Concrete {}
        /**
         * @internal
         */
        public function loadLazyData() {}
    }

    class DefinitionModifier {
        public function appendFields(Layout $layoutDefinition, string $nameToFind, $fieldsToAdd) : bool {}
        public function prependFields(Layout $layoutDefinition, string $nameToFind, $fieldsToAdd) : bool {}
        public function insertFieldsFront(Layout $layoutDefinition, string $nameToFind, $fieldsToInsert) : bool {}
        public function insertFieldsBack(Layout $layoutDefinition, string $nameToFind, $fieldsToInsert) : bool {}
        public function replaceField(Layout $layoutDefinition, string $nameToFind, $fieldReplacements) : bool {}
        public function removeField(Layout $layoutDefinition, string $nameToFind) : bool {}
/**
 * try to find field
 *
 * @var Layout $child
 */
        public function findField(/**
 * try to find field
 *
 * @var Layout $child
 */
$layoutDefinition, /**
 * try to find field
 *
 * @var Layout $child
 */
string $nameToFind, /**
 * try to find field
 *
 * @var Layout $child
 */
callable $callback) : bool {}
        private function add($fieldsToAdd, bool $append, array $args) : bool {}
        private function insert($fieldsToInsert, bool $append, array $args) : bool {}
        private function replace($fieldReplacements, array $args) : bool {}
        private function remove(array $args) : bool {}
    }

    /**
     * @method \Pimcore\Model\DataObject\ClassDefinition\Dao getDao()
     */
    class ClassDefinition extends \pimcore\model\abstractmodel {
    use \pimcore\model\dataobject\classdefinition\helper\varexport;

        /**
         * @var string
         */
        public $id;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $description;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $userOwner;
        /**
         * @var int
         */
        public $userModification;
        /**
         * Name of the parent class if set
         *
         * @var string
         */
        public $parentClass;
        /**
         * Name of the listing parent class if set
         *
         * @var string
         */
        public $listingParentClass;
        /**
         * @var string
         */
        public $useTraits;
        /**
         * @var string
         */
        public $listingUseTraits;
        /**
         * @var bool
         */
        protected $encryption;
        /**
         * @var array
         */
        protected $encryptedTables;
        /**
         * @var bool
         */
        public $allowInherit;
        /**
         * @var bool
         */
        public $allowVariants;
        /**
         * @var bool
         */
        public $showVariants;
        /**
         * @var bool
         */
        public $cacheRawRelationData;
        /**
         * @var array
         */
        public $fieldDefinitions;
        /**
         * @var array
         */
        public $layoutDefinitions;
        /**
         * @var string
         */
        public $icon;
        /**
         * @var string
         */
        public $previewUrl;
        /**
         * @var string
         */
        public $group;
        /**
         * @var bool
         */
        public $showAppLoggerTab;
        /**
         * @var string
         */
        public $linkGeneratorReference;
        /**
         * @var array
         */
        public $propertyVisibility;

        public static function getById($id) {}
        public static function getByName($name) {}
        public static function create($values = [ ]) {}
        public function rename($name) {}
        public static function cleanupForExport($data) {}
        /**
         * @return bool
         */
        public function exists() {}
        public function save($saveDefinitionFile = true) {}
        /**
         * @return string
         */
        protected function getInfoDocBlock() {}
        protected function getInfoDocBlockForFields($definition, $text, $level) {}
        /** @var DataObject\Objectbrick\Definition $brickDefinition */
        public function delete() {}
        /**
         * Deletes PHP files from Filesystem
         */
        protected function deletePhpClasses() {}
        public function getDefinitionFile($name = null) {}
        /**
         * @return string
         */
        public function getId() {}
        /**
         * @return string
         */
        public function getName() {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        /**
         * @return int
         */
        public function getUserOwner() {}
        /**
         * @return int
         */
        public function getUserModification() {}
        public function setId($id) {}
        public function setName($name) {}
        public function setCreationDate($creationDate) {}
        public function setModificationDate($modificationDate) {}
        public function setUserOwner($userOwner) {}
        public function setUserModification($userModification) {}
        public function getFieldDefinitions($context = [ ]) {}
        protected function doEnrichFieldDefinition($fieldDefinition, $context = [ ]) {}
        /**
         * @return array
         */
        public function getLayoutDefinitions() {}
        public function setFieldDefinitions($fieldDefinitions) {}
        public function addFieldDefinition($key, $data) {}
        public function getFieldDefinition($key, $context = [ ]) {}
        public function setLayoutDefinitions($layoutDefinitions) {}
        public function extractDataDefinitions($def) {}
        /**
         * @return string
         */
        public function getParentClass() {}
        /**
         * @return string
         */
        public function getListingParentClass() {}
        /**
         * @return string
         */
        public function getUseTraits() {}
        public function setUseTraits($useTraits) {}
        /**
         * @return string
         */
        public function getListingUseTraits() {}
        public function setListingUseTraits($listingUseTraits) {}
        /**
         * @return bool
         */
        public function getAllowInherit() {}
        /**
         * @return bool
         */
        public function getAllowVariants() {}
        public function setParentClass($parentClass) {}
        public function setListingParentClass($listingParentClass) {}
        /**
         * @return bool
         */
        public function getEncryption() : bool {}
        public function setEncryption(bool $encryption) {}
        public function addEncryptedTables(array $tables) {}
        public function removeEncryptedTables(array $tables) {}
        public function isEncryptedTable(string $table) : bool {}
        /**
         * @return bool
         */
        public function hasEncryptedTables() : bool {}
        public function setEncryptedTables(array $encryptedTables) {}
        public function setAllowInherit($allowInherit) {}
        public function setAllowVariants($allowVariants) {}
        /**
         * @return string
         */
        public function getIcon() {}
        public function setIcon($icon) {}
        /**
         * @return array
         */
        public function getPropertyVisibility() {}
        public function setPropertyVisibility($propertyVisibility) {}
        public function setPreviewUrl($previewUrl) {}
        /**
         * @return string
         */
        public function getPreviewUrl() {}
        /**
         * @return string
         */
        public function getGroup() {}
        public function setGroup($group) {}
        public function setDescription($description) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setShowVariants($showVariants) {}
        /**
         * @return bool
         */
        public function getShowVariants() {}
        /**
         * @return bool
         */
        public function getShowAppLoggerTab() {}
        public function setShowAppLoggerTab($showAppLoggerTab) {}
        /**
         * @return string
         */
        public function getLinkGeneratorReference() {}
        public function setLinkGeneratorReference($linkGeneratorReference) {}
        /**
         * @return DataObject\ClassDefinition\LinkGeneratorInterface
         */
        public function getLinkGenerator() {}
        /**
         * @return bool
         */
        public function getCacheRawRelationData() : bool {}
        public function setCacheRawRelationData($cacheRawRelationData) {}
    }

    /**
     * @method \Pimcore\Model\Element\Dao getDao()
     */
    class Service extends \pimcore\model\element\service {
        /**
         * @var array
         */
        protected $_copyRecursiveIds;
        /**
         * @var Model\User|null
         */
        protected $_user;
        /**
         * System fields used by filter conditions
         *
         * @var array
         */
        static protected $systemFields;

        public function __construct($user = null) {}
        public static function getObjectsReferencingUser($userId) {}
/** @var Concrete $new */
        public function copyRecursive(/** @var Concrete $new */
$target, /** @var Concrete $new */
$source) {}
/** @var Concrete $new */
        public function copyAsChild(/** @var Concrete $new */
$target, /** @var Concrete $new */
$source) {}
/**
 * @var AbstractObject $new
 */
        public function copyContents(/**
 * @var AbstractObject $new
 */
$target, /**
 * @var AbstractObject $new
 */
$source) {}
        public static function isHelperGridColumnConfig($field) {}
/** @var Model\DataObject\ClassDefinition\Data\Localizedfields|null $locFields */
        public static function gridObjectData(/** @var Model\DataObject\ClassDefinition\Data\Localizedfields|null $locFields */
$object, /** @var Model\DataObject\ClassDefinition\Data\Localizedfields|null $locFields */
$fields = null, /** @var Model\DataObject\ClassDefinition\Data\Localizedfields|null $locFields */
$requestedLanguage = null, /** @var Model\DataObject\ClassDefinition\Data\Localizedfields|null $locFields */
$params = [ ]) {}
        public static function expandGridColumnForExport($helperDefinitions, $key) {}
        public static function getConfigForHelperDefinition($helperDefinitions, $key, $context = [ ]) {}
/** @var Model\DataObject\ClassDefinition\Data $rendererImpl */
        public static function calculateCellValue(/** @var Model\DataObject\ClassDefinition\Data $rendererImpl */
$object, /** @var Model\DataObject\ClassDefinition\Data $rendererImpl */
$helperDefinitions, /** @var Model\DataObject\ClassDefinition\Data $rendererImpl */
$key, /** @var Model\DataObject\ClassDefinition\Data $rendererImpl */
$context = [ ]) {}
        /**
         * @return mixed
         */
        public static function getHelperDefinitions() {}
        public static function getLanguagePermissions($object, $user, $type) {}
        public static function getLayoutPermissions($classId, $permissionSet) {}
        public static function getFieldForBrickType(ClassDefinition $class, $bricktype) {}
/** @var Model\DataObject\ClassDefinition\Data\Localizedfields $fieldDefinitionLocalizedFields */
        private static function getValueForObject(/** @var Model\DataObject\ClassDefinition\Data\Localizedfields $fieldDefinitionLocalizedFields */
$object, /** @var Model\DataObject\ClassDefinition\Data\Localizedfields $fieldDefinitionLocalizedFields */
$key, /** @var Model\DataObject\ClassDefinition\Data\Localizedfields $fieldDefinitionLocalizedFields */
$brickType = null, /** @var Model\DataObject\ClassDefinition\Data\Localizedfields $fieldDefinitionLocalizedFields */
$brickKey = null, /** @var Model\DataObject\ClassDefinition\Data\Localizedfields $fieldDefinitionLocalizedFields */
$fieldDefinition = null, /** @var Model\DataObject\ClassDefinition\Data\Localizedfields $fieldDefinitionLocalizedFields */
$context = [ ], /** @var Model\DataObject\ClassDefinition\Data\Localizedfields $fieldDefinitionLocalizedFields */
$brickDescriptor = null) {}
        public static function hasInheritableParentObject(Concrete $object) {}
        public static function loadAllObjectFields($object) {}
/**
 * @var ClassDefinition\Data\Select $definition
 */
        public static function getOptionsForSelectField(/**
 * @var ClassDefinition\Data\Select $definition
 */
$object, /**
 * @var ClassDefinition\Data\Select $definition
 */
$definition) {}
        public static function getOptionsForMultiSelectField($object, $fieldname) {}
        public static function pathExists($path, $type = null) {}
        public static function rewriteIds($object, $rewriteConfig) {}
        public static function getValidLayouts(Concrete $object) {}
        public static function extractFieldDefinitions($layout, $targetClass, $targetList, $insideDataType) {}
        public static function getSuperLayoutDefinition(Concrete $object) {}
        public static function createSuperLayout($layout) {}
        private static function synchronizeCustomLayoutFieldWithMaster($masterDefinition, $layout) {}
        public static function synchronizeCustomLayout(ClassDefinition\CustomLayout $customLayout) {}
        public static function getCustomGridFieldDefinitions($classId, $objectId) {}
        public static function cloneDefinition($definition) {}
        private static function mergeFieldDefinition($mergedFieldDefinition, $customFieldDefinitions, $key) {}
        private static function doFilterCustomGridFieldDefinitions($layout, $fieldDefinitions) {}
        public static function getCustomLayoutDefinitionForGridColumnConfig(ClassDefinition $class, $objectId) {}
        public static function getUniqueKey($item, $nr = 0) {}
        public static function enrichLayoutDefinition($layout, $object = null, $context = [ ]) {}
        public static function enrichLayoutPermissions($layout, $allowedView, $allowedEdit) {}
        public static function getCalculatedFieldValueForEditMode($object, $params = [ ], $data) {}
        public static function getCalculatedFieldValue($object, $data) {}
        /**
         * @return array
         */
        public static function getSystemFields() {}
/** @var Model\DataObject\ClassDefinition\Data $fieldDefinition */
        public static function doResetDirtyMap(/** @var Model\DataObject\ClassDefinition\Data $fieldDefinition */
$container, /** @var Model\DataObject\ClassDefinition\Data $fieldDefinition */
$fd) {}
        public static function recursiveResetDirtyMap(AbstractObject $object) {}
        public static function getObjectFromSession($objectId) {}
        public static function removeObjectFromSession($objectId) {}
    }

    /**
     * @method Localizedfield\Dao getDao()
     */
    class Localizedfield extends \pimcore\model\abstractmodel implements \pimcore\model\element\elementdumpstateinterface, \pimcore\model\dataobject\lazyloadedfieldsinterface, \pimcore\model\dataobject\dirtyindicatorinterface {
    use \pimcore\model\element\elementdumpstatetrait, \pimcore\model\dataobject\traits\dirtyindicatortrait, \pimcore\model\dataobject\traits\lazyloadedrelationtrait;

        const STRICT_DISABLED = 0;
        const STRICT_ENABLED = 1;

        /**
         * @var bool
         */
        static private $getFallbackValues;
        /**
         * @var array
         */
        protected $items;
        /**
         * @var Model\DataObject\Concrete
         */
        protected $object;
        /**
         * @var Model\DataObject\ClassDefinition
         */
        protected $class;
        /** @var array */
        protected $context;
        /** @var int */
        protected $objectId;
        /**
         * @var bool
         */
        static private $strictMode;
        /**
         * list of dirty languages. if null then no language is dirty. if empty array then all languages are dirty
         *
         * @var array|null
         */
        protected $o_dirtyLanguages;
        /**
         * @var bool
         */
        protected $_loadedAllLazyData;

        public static function setGetFallbackValues($getFallbackValues) {}
        /**
         * @return bool
         */
        public static function getGetFallbackValues() {}
        /**
         * @return bool
         */
        public static function isStrictMode() {}
        public static function setStrictMode($strictMode) {}
        /**
         * @return bool
         */
        public static function doGetFallbackValues() {}
        public function __construct($items = null) {}
        public function addItem($item) {}
        public function setItems($items) {}
        /**
         * @internal
         */
        public function loadLazyData() {}
        public function getInternalData($loadLazyFields = false) {}
        public function setObject($object, $markAsDirty = true) {}
        /**
         * @return Concrete
         */
        public function getObject() {}
        public function setClass($class) {}
        /**
         * @return Model\DataObject\ClassDefinition
         */
        public function getClass() {}
        public function getLanguage($language = null) {}
        public function languageExists($language) {}
/** @var Model\DataObject\ClassDefinition\Data\Localizedfields|null $localizedFields */
        public function getFieldDefinition(/** @var Model\DataObject\ClassDefinition\Data\Localizedfields|null $localizedFields */
$name, /** @var Model\DataObject\ClassDefinition\Data\Localizedfields|null $localizedFields */
$context = [ ]) {}
/** @var Model\DataObject\ClassDefinition\Data\Localizedfields $container */
        protected function getFieldDefinitions(/** @var Model\DataObject\ClassDefinition\Data\Localizedfields $container */
$context = [ ], /** @var Model\DataObject\ClassDefinition\Data\Localizedfields $container */
$params = [ ]) {}
        private function loadLazyField(Model\DataObject\ClassDefinition\Data $fieldDefinition, $name, $language) {}
        public function getLocalizedValue($name, $language = null, $ignoreFallbackLanguage = false) {}
/** @var Model\DataObject\ClassDefinition\Data\Localizedfields $localizedFieldDefinition */
        public function setLocalizedValue(/** @var Model\DataObject\ClassDefinition\Data\Localizedfields $localizedFieldDefinition */
$name, /** @var Model\DataObject\ClassDefinition\Data\Localizedfields $localizedFieldDefinition */
$value, /** @var Model\DataObject\ClassDefinition\Data\Localizedfields $localizedFieldDefinition */
$language = null, /** @var Model\DataObject\ClassDefinition\Data\Localizedfields $localizedFieldDefinition */
$markFieldAsDirty = true) {}
        /**
         * @inheritDoc
         */
        public function isAllLazyKeysMarkedAsLoaded() : bool {}
        /**
         * @return array
         */
        public function __sleep() {}
        /**
         * @return array
         */
        public function getContext() {}
        public function setContext($context) {}
        /**
         * @return bool
         */
        public function hasDirtyLanguages() {}
        public function isLanguageDirty($language) {}
        public function resetLanguageDirtyMap() {}
        /**
         * @return array|null
         */
        public function getDirtyLanguages() {}
        public function markAllLanguagesAsDirty() {}
        public function allLanguagesAreDirty() {}
        public function markLanguageAsDirty($language, $dirty = true) {}
        /**
         * @inheritdoc
         */
        protected function getLazyLoadedFieldNames() : array {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Concrete\Dao getDao()
     * @method \Pimcore\Model\Version getLatestVersion()
     */
    class Concrete extends \pimcore\model\dataobject\abstractobject implements \pimcore\model\dataobject\lazyloadedfieldsinterface {
    use \pimcore\model\dataobject\traits\lazyloadedrelationtrait;

        /**
         * @var array
         */
        static public $systemColumnNames;
        /**
         * @var bool
         */
        protected $o_published;
        /**
         * @var ClassDefinition
         */
        protected $o_class;
        /**
         * @var string
         */
        protected $o_classId;
        /**
         * @var string
         */
        protected $o_className;
        /**
         * @var array
         */
        protected $o_versions;
        /**
         * Contains all scheduled tasks
         *
         * @var array
         */
        protected $scheduledTasks;
        /**
         * @var bool
         */
        protected $omitMandatoryCheck;
        /**
         * @var bool
         */
        protected $allLazyKeysMarkedAsLoaded;
        /**
         * @var bool
         */
        static protected $disableLazyLoading;

        /**
         * returns the class ID of the current object class
         *
         * @return int
         */
        public static function classId() {}
        public function __construct() {}
/** @var \Exception $subItem */
        protected function update(/** @var \Exception $subItem */
$isUpdate = null, /** @var \Exception $subItem */
$params = [ ]) {}
        protected function saveChildData() {}
        public function saveScheduledTasks() {}
        public function delete(bool $isNested = false) {}
        public function saveVersion($setModificationDate = true, $saveOnlyVersion = true, $versionNote = null) {}
        /**
         * @return Model\Version[]
         */
        public function getVersions() {}
        public function setVersions($o_versions) {}
        public function getValueForFieldName($key) {}
        public function getCacheTags($tags = [ ]) {}
        /**
         * @return array
         */
        public function resolveDependencies() {}
        public function setClass($o_class) {}
        /**
         * @return ClassDefinition
         */
        public function getClass() {}
        /**
         * @return string
         */
        public function getClassId() {}
        public function setClassId($o_classId) {}
        /**
         * @return string
         */
        public function getClassName() {}
        public function setClassName($o_className) {}
        /**
         * @return bool
         */
        public function getPublished() {}
        /**
         * @return bool
         */
        public function isPublished() {}
        public function setPublished($o_published) {}
        public function setOmitMandatoryCheck($omitMandatoryCheck) {}
        /**
         * @return bool
         */
        public function getOmitMandatoryCheck() {}
        /**
         * @return array
         */
        public function getScheduledTasks() {}
        public function setScheduledTasks($scheduledTasks) {}
        public function getValueFromParent($key, $params = null) {}
        /**
         * @return AbstractObject|null
         */
        public function getNextParentForInheritance() {}
        public function getRelationData($fieldName, $forOwner, $remoteClassId) {}
        public static function __callStatic($method, $arguments) {}
        /**
         * @return $this
         *
         * @throws \Exception
         */
        public function save() {}
        /**
         * @internal
         * @inheritdoc
         */
        public function getLazyLoadedFieldNames() : array {}
        /**
         * @inheritDoc
         */
        public function isAllLazyKeysMarkedAsLoaded() : bool {}
        public function markAllLazyLoadedKeysAsLoaded() {}
        public function __sleep() {}
        public function __wakeup() {}
        /**
         * load lazy loaded fields before cloning
         */
        public function __clone() {}
        /**
         * @internal
         * Disables lazy loading
         */
        public static function disableLazyLoading() {}
        /**
         * @internal
         * Enables the lazy loading
         */
        public static function enableLazyloading() {}
        /**
         * @internal
         *
         * @return bool
         */
        public static function isLazyLoadingDisabled() {}
        public static function getLatestVersionByObjectIdAndLatestModificationDate($objectId, $modificationDate, $versionCount, $force = false) {}
        public function retrieveRelationData($descriptor) {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Objectbrick\Dao getDao()
     */
    class Objectbrick extends \pimcore\model\abstractmodel implements \pimcore\model\dataobject\dirtyindicatorinterface {
    use \pimcore\model\dataobject\traits\dirtyindicatortrait;

        /**
         * @var array
         */
        protected $items;
        /**
         * @var string
         */
        protected $fieldname;
        /**
         * @var Model\DataObject\Concrete
         */
        protected $object;
        /**
         * @var int
         */
        protected $objectId;
        /**
         * @var array
         */
        protected $brickGetters;

        public function __construct($object, $fieldname) {}
        public function getItems($withInheritedValues = false) {}
        public function setItems($items) {}
        /**
         * @return string
         */
        public function getFieldname() {}
        public function setFieldname($fieldname) {}
        /**
         * @return array
         */
        public function getBrickGetters() {}
        /**
         * @return array
         */
        public function getAllowedBrickTypes() {}
        /**
         * @return array
         */
        public function getItemDefinitions() {}
        public function save($object, $params = [ ]) {}
        /**
         * @return Concrete
         */
        public function getObject() {}
        public function setObject($object) {}
        public function delete(Concrete $object) {}
        /**
         * @return array
         */
        public function __sleep() {}
        public function __wakeup() {}
        public function get($fieldName) {}
        public function set($fieldName, $value) {}
/** @var Model\DataObject\ClassDefinition\Data\CustomResourcePersistingInterface $fieldDef */
        public function loadLazyField(/** @var Model\DataObject\ClassDefinition\Data\CustomResourcePersistingInterface $fieldDef */
$brick, /** @var Model\DataObject\ClassDefinition\Data\CustomResourcePersistingInterface $fieldDef */
$brickField, /** @var Model\DataObject\ClassDefinition\Data\CustomResourcePersistingInterface $fieldDef */
$field) {}
        /**
         * @internal
         */
        public function loadLazyData() {}
    }

    /**
     * @method \Pimcore\Model\DataObject\AbstractObject\Dao getDao()
     * @method bool __isBasedOnLatestData()
     */
    class AbstractObject extends \pimcore\model\element\abstractelement {
        const OBJECT_TYPE_OBJECT = 'object';
        const OBJECT_TYPE_VARIANT = 'variant';
        const OBJECT_CHILDREN_SORT_BY_DEFAULT = 'key';
        const OBJECT_CHILDREN_SORT_BY_INDEX = 'index';
        const OBJECT_TYPE_FOLDER = 'folder';

        /**
         * @var bool
         */
        static public $doNotRestoreKeyAndPath;
        /**
         * possible types of a document
         *
         * @var array
         */
        static public $types;
        /**
         * @var bool
         */
        static private $hideUnpublished;
        /**
         * @var bool
         */
        static private $getInheritedValues;
        /**
         * @var bool
         */
        static protected $disableDirtyDetection;
        /**
         * @var int
         */
        protected $o_id;
        /**
         * @var int
         */
        protected $o_parentId;
        /**
         * @var self
         */
        protected $o_parent;
        /**
         * @var string
         */
        protected $o_type;
        /**
         * @var string
         */
        protected $o_key;
        /**
         * @var string
         */
        protected $o_path;
        /**
         * @var int
         */
        protected $o_index;
        /**
         * @var int
         */
        protected $o_creationDate;
        /**
         * @var int
         */
        protected $o_modificationDate;
        /**
         * @var int
         */
        protected $o_userOwner;
        /**
         * @var int
         */
        protected $o_userModification;
        /**
         * @var array
         */
        protected $o_properties;
        /**
         * @var bool[]
         */
        protected $o_hasChildren;
        /**
         * Contains a list of sibling documents
         *
         * @var array
         */
        protected $o_siblings;
        /**
         * Indicator if object has siblings or not
         *
         * @var bool[]
         */
        protected $o_hasSiblings;
        /**
         * @var Model\Dependency[]
         */
        protected $o_dependencies;
        /**
         * @var array
         */
        protected $o_children;
        /**
         * @var string
         */
        protected $o_locked;
        /**
         * @var Model\Element\AdminStyle
         */
        protected $o_elementAdminStyle;
        /**
         * @var string
         */
        protected $o_childrenSortBy;
        /** @var int */
        protected $o_versionCount;

        /**
         * @static
         *
         * @return bool
         */
        public static function getHideUnpublished() {}
        public static function setHideUnpublished($hideUnpublished) {}
        /**
         * @static
         *
         * @return bool
         */
        public static function doHideUnpublished() {}
        public static function setGetInheritedValues($getInheritedValues) {}
        /**
         * @static
         *
         * @return bool
         */
        public static function getGetInheritedValues() {}
        public static function doGetInheritedValues(Concrete $object = null) {}
        /**
         * get possible types
         *
         * @return array
         */
        public static function getTypes() {}
        public static function getById($id, $force = false) {}
        public static function getByPath($path, $force = false) {}
        public static function getList($config = [ ]) {}
        public static function getTotalCount($config = [ ]) {}
        protected static function typeMatch(AbstractObject $object) {}
        public function getChildren(array $objectTypes = [self::OBJECT_TYPE_OBJECT, self::OBJECT_TYPE_FOLDER], $includingUnpublished = false) {}
        public function hasChildren($objectTypes = [self::OBJECT_TYPE_OBJECT, self::OBJECT_TYPE_FOLDER], $includingUnpublished = null) {}
        public function getSiblings(array $objectTypes = [self::OBJECT_TYPE_OBJECT, self::OBJECT_TYPE_FOLDER], $includingUnpublished = false) {}
        public function hasSiblings($objectTypes = [self::OBJECT_TYPE_OBJECT, self::OBJECT_TYPE_FOLDER], $includingUnpublished = null) {}
        /**
         * Returns true if the element is locked
         *
         * @return string
         */
        public function getLocked() {}
        public function setLocked($o_locked) {}
        public function delete(bool $isNested = false) {}
        /**
         * @return $this
         *
         * @throws \Exception
         */
        public function save() {}
        public function correctPath() {}
        protected function update($isUpdate = null, $params = [ ]) {}
        public function clearDependentCache($additionalTags = [ ]) {}
        public static function clearDependentCacheByObjectId($objectId, $additionalTags = [ ]) {}
        public function saveIndex($index) {}
        /**
         * @return Model\Dependency
         */
        public function getDependencies() {}
        /**
         * @return string
         */
        public function getFullPath() {}
        /**
         * @return string
         */
        public function getRealPath() {}
        /**
         * @return string
         */
        public function getRealFullPath() {}
        /**
         * @return int
         */
        public function getId() {}
        /**
         * @return int
         */
        public function getParentId() {}
        /**
         * @return string
         */
        public function getType() {}
        /**
         * @return string
         */
        public function getKey() {}
        /**
         * @return string path
         */
        public function getPath() {}
        /**
         * @return int
         */
        public function getIndex() {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        /**
         * @return int
         */
        public function getUserOwner() {}
        /**
         * @return int
         */
        public function getUserModification() {}
        public function setId($o_id) {}
        public function setParentId($o_parentId) {}
        public function setType($o_type) {}
        public function setKey($o_key) {}
        public function setPath($o_path) {}
        public function setIndex($o_index) {}
        public function setChildrenSortBy($childrenSortBy) {}
        public function setCreationDate($o_creationDate) {}
        public function setModificationDate($o_modificationDate) {}
        public function setUserOwner($o_userOwner) {}
        public function setUserModification($o_userModification) {}
        public function setChildren($children) {}
        /**
         * @return self
         */
        public function getParent() {}
        public function setParent($o_parent) {}
        /**
         * @return Model\Property[]
         */
        public function getProperties() {}
        public function setProperties($o_properties) {}
        public function setProperty($name, $type, $data, $inherited = false, $inheritable = false) {}
        /**
         * @deprecated since 6.4.1, use AdminEvents.RESOLVE_ELEMENT_ADMIN_STYLE event instead
         *
         * @return Model\Element\AdminStyle
         */
        public function getElementAdminStyle() {}
        /**
         * @return string
         */
        public function getChildrenSortBy() {}
        public function __sleep() {}
        public function __wakeup() {}
        public function removeInheritedProperties() {}
        public function renewInheritedProperties() {}
        public function __call($method, $args) {}
        /**
         * @return bool
         */
        public static function doNotRestoreKeyAndPath() {}
        public static function setDoNotRestoreKeyAndPath($doNotRestoreKeyAndPath) {}
        public function get($fieldName, $language = null) {}
        public function set($fieldName, $value, $language = null) {}
        /**
         * @return bool
         */
        public static function isDirtyDetectionDisabled() {}
        public static function setDisableDirtyDetection(bool $disableDirtyDetection) {}
        /**
         * Disables the dirty detection
         */
        public static function disableDirtyDetection() {}
        /**
         * Enables the dirty detection
         */
        public static function enableDirtyDetection() {}
        /**
         * @return int
         */
        public function getVersionCount() : int {}
        public function setVersionCount(?int $o_versionCount) : Element\ElementInterface {}
        protected function getListingCacheKey(array $args = [ ]) {}
    }

    /**
     * @method Model\DataObject[] load()
     * @method Model\DataObject current()
     * @method int getTotalCount()
     * @method int getCount()
     * @method int[] loadIdList()
     * @method \Pimcore\Model\DataObject\Listing\Dao getDao()
     * @method onCreateQuery(callable $callback)
     */
    class Listing extends \pimcore\model\listing\abstractlisting implements \zend\paginator\adapter\adapterinterface, \zend\paginator\adapteraggregateinterface {
        /**
         * @var array|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $objects;
        /**
         * @var bool
         */
        public $unpublished;
        /**
         * @var array
         */
        public $objectTypes;

        public function __construct() {}
        /**
         * @return array
         */
        public function getObjects() {}
        public function setObjects($objects) {}
        /**
         * @return bool
         */
        public function getUnpublished() {}
        public function setUnpublished($unpublished) {}
        public function setObjectTypes($objectTypes) {}
        /**
         * @return array
         */
        public function getObjectTypes() {}
        public function addConditionParam($key, $value = null, $concatenator = 'AND') {}
        /**
         * @return $this
         */
        public function resetConditionParams() {}
        public function setCondition($condition, $conditionVariables = null) {}
        public function setGroupBy($groupBy, $qoute = true) {}
        /**
         * @return int
         */
        public function count() {}
        public function getItems($offset, $itemCountPerPage) {}
        /**
         * @return self
         */
        public function getPaginatorAdapter() {}
        /**
         * @return bool
         */
        public function addDistinct() {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Folder\Dao getDao()
     */
    class Folder extends \pimcore\model\dataobject\abstractobject {
        /**
         * @var string
         */
        protected $o_type;

        public static function create($values) {}
        protected function update($isUpdate = null, $params = [ ]) {}
        public function delete(bool $isNested = false) {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Classificationstore\Dao getDao()
     */
    class Classificationstore extends \pimcore\model\abstractmodel implements \pimcore\model\dataobject\dirtyindicatorinterface {
    use \pimcore\model\dataobject\traits\dirtyindicatortrait;

        /**
         * @var array
         */
        protected $items;
        /**
         * @var Model\DataObject\Concrete
         */
        protected $object;
        /**
         * @var Model\DataObject\ClassDefinition
         */
        protected $class;
        /** @var string */
        protected $fieldname;
        /** @var array */
        protected $activeGroups;
        /** @var array */
        protected $groupCollectionMapping;

        public function __construct($items = null) {}
        public function addItem($item) {}
        public function setItems($items) {}
        /**
         * @return array
         */
        public function getItems() {}
        public function setObject($object) {}
        /**
         * @return Concrete
         */
        public function getObject() {}
        public function setClass(?ClassDefinition $class) {}
        /**
         * @return Model\DataObject\ClassDefinition
         */
        public function getClass() {}
        public function getLanguage($language = null) {}
        public function setLocalizedKeyValue($groupId, $keyId, $value, $language = null) {}
        public function removeGroupData($groupId) {}
        /** Returns an array of
         * @return array
         */
        public function getGroupIdsWithData() {}
        /**
         * @return string
         */
        public function getFieldname() {}
        public function setFieldname($fieldname) {}
        /**
         * @return array
         */
        public function getActiveGroups() {}
        protected function sanitizeActiveGroups($activeGroups) {}
        public function setActiveGroups($activeGroups) {}
        protected function getFallbackValue($groupId, $keyId, $language, $fielddefinition) {}
        public function getLocalizedKeyValue($groupId, $keyId, $language = 'default', $ignoreFallbackLanguage = false, $ignoreDefaultLanguage = false) {}
        /**
         * @return bool
         */
        public static function doGetFallbackValues() {}
        /**
         * @return array
         */
        public function getGroupCollectionMappings() {}
        public function setGroupCollectionMappings($groupCollectionMapping) {}
        public function setGroupCollectionMapping($groupId = null, $collectionId = null) {}
        public function getGroupCollectionMapping($groupId) {}
    }


    interface LazyLoadedFieldsInterface {
    const LAZY_KEY_SEPARATOR = '~~';
        function markLazyKeyAsLoaded(string $key) ;
        function isLazyKeyLoaded(string $key) : bool ;
        /**
         * @internal
         *
         * @return bool
         */
        function isAllLazyKeysMarkedAsLoaded() : bool ;
    }

    interface DirtyIndicatorInterface {
        /**
         * @return bool
         */
        function hasDirtyFields() ;
        function isFieldDirty($key) ;
        function markFieldDirty($field, $dirty = true) ;
        function resetDirtyMap() ;
    }

    interface OwnerAwareFieldInterface {
        function setOwner($owner, string $fieldname, $language = null) ;
    }

    interface CacheRawRelationDataInterface {
        /**
         * @return array
         */
        function __getRawRelationData() : array ;
    }

    interface PreGetValueHookInterface {
        function preGetValue(string $key) ;
    }

}

namespace Pimcore\Model\DataObject\Localizedfield {
    /**
     * @property \Pimcore\Model\DataObject\Localizedfield $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
    use \pimcore\model\dataobject\classdefinition\helper\dao;

        /**
         * @var array|null
         */
        protected $tableDefinitions;
        /**
         * @var DataObject\Concrete\Dao\InheritanceHelper
         */
        protected $inheritanceHelper;

        /**
         * @return string
         */
        public function getTableName() {}
        /**
         * @return string
         */
        public function getQueryTableName() {}
/**
 * We temporary enable the runtime cache so we don't have to calculate the tree for each language
 * which is a great performance gain if you have a lot of languages
 */
        public function save(/**
 * We temporary enable the runtime cache so we don't have to calculate the tree for each language
 * which is a great performance gain if you have a lot of languages
 */
$params = [ ]) {}
/** @var DataObject\ClassDefinition\Data\Localizedfields $fieldDefinition */
        public function delete(/** @var DataObject\ClassDefinition\Data\Localizedfields $fieldDefinition */
$deleteQuery = true, /** @var DataObject\ClassDefinition\Data\Localizedfields $fieldDefinition */
$isUpdate = true) {}
/** @var DataObject\ClassDefinition\Data\Localizedfields $localizedfields */
        public function load(/** @var DataObject\ClassDefinition\Data\Localizedfields $localizedfields */
$object, /** @var DataObject\ClassDefinition\Data\Localizedfields $localizedfields */
$params = [ ]) {}
        public function createLocalizedViews() {}
/** @var DataObject\ClassDefinition\Data\Localizedfields $localizedfields */
        public function createUpdateTable(/** @var DataObject\ClassDefinition\Data\Localizedfields $localizedfields */
$params = [ ]) {}
        private function getFieldDefinitionParams(string $fieldname, string $language) {}
    }

}

namespace Pimcore\Model\DataObject\QuantityValue {
    class DefaultConverter implements \pimcore\model\dataobject\quantityvalue\quantityvalueconverterinterface {
        public function convert(QuantityValue $quantityValue, Unit $toUnit) : QuantityValue {}
    }

    /**
     * @method \Pimcore\Model\DataObject\QuantityValue\Unit\Dao getDao()
     */
    class Unit extends \pimcore\model\abstractmodel {
        const CACHE_KEY = 'quantityvalue_units_table';

        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $abbreviation;
        /**
         * @var string
         */
        public $group;
        /**
         * @var string
         */
        public $longname;
        /**
         * @var int
         */
        public $baseunit;
        /**
         * @var string
         */
        public $reference;
        /**
         * @var float
         */
        public $factor;
        /**
         * @var float
         */
        public $conversionOffset;
        /** @var string */
        public $converter;

        public static function getByAbbreviation($abbreviation) {}
        public static function getByReference($reference) {}
/** @var Model\DataObject\QuantityValue\Unit $item */
        public static function getById(/** @var Model\DataObject\QuantityValue\Unit $item */
$id) {}
        public static function create($values = [ ]) {}
        public function save() {}
        public function delete() {}
        /**
         * @return string
         */
        public function __toString() {}
        public function setAbbreviation($abbreviation) {}
        public function getAbbreviation() {}
        public function setBaseunit($baseunit) {}
        public function getBaseunit() {}
        public function setFactor($factor) {}
        public function getFactor() {}
        public function setGroup($group) {}
        public function getGroup() {}
        public function setId($id) {}
        public function getId() {}
        public function setLongname($longname) {}
        public function getLongname() {}
        /**
         * @return string
         */
        public function getReference() {}
        public function setReference($reference) {}
        /**
         * @return float
         */
        public function getConversionOffset() {}
        public function setConversionOffset($conversionOffset) {}
        /**
         * @return string
         */
        public function getConverter() {}
        public function setConverter($converter) {}
    }

    class UnitConversionService {
        /** @var ContainerInterface */
        private $container;

        public function __construct(ContainerInterface $container) {}
        public function convert(QuantityValue $quantityValue, Unit $toUnit) {}
    }


    interface QuantityValueConverterInterface {
        function convert(QuantityValue $quantityValue, Unit $toUnit) : QuantityValue ;
    }

}

namespace Pimcore\Model\DataObject\QuantityValue\Unit {
    /**
     * @property \Pimcore\Model\DataObject\QuantityValue\Unit $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        const TABLE_NAME = 'quantityvalue_units';

        /**
         * Contains all valid columns in the database table
         *
         * @var array
         */
        protected $validColumns;

        /**
         * Get the valid columns from the database
         *
         */
        public function init() {}
        public function getByAbbreviation($abbreviation) {}
        public function getByReference($reference) {}
        public function getById($id) {}
        /**
         * Create a new record for the object in database
         *
         * @return bool
         */
        public function create() {}
        /**
         * Save object to database
         */
        public function save() {}
        public function update() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\DataObject\QuantityValue\Unit\Listing\Dao getDao()
     * @method Model\DataObject\QuantityValue\Unit[] load()
     * @method Model\DataObject\QuantityValue\Unit current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\DataObject\QuantityValue\Unit[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $units;

        public function __construct() {}
        public function isValidOrderKey($key) {}
        /**
         * @return Model\DataObject\QuantityValue\Unit[]
         */
        public function getUnits() {}
        public function setUnits($units) {}
    }

}

namespace Pimcore\Model\DataObject\QuantityValue\Unit\Listing {
    /**
     * @property \Pimcore\Model\DataObject\QuantityValue\Unit\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * @return array
         */
        public function load() {}
        /**
         * @return mixed
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\DataObject\Traits {
    trait DirtyIndicatorTrait {
        /**
         * @var array
         */
        protected $o_dirtyFields;
        /**
         * @return bool
         */
        public function hasDirtyFields() {}
        public function isFieldDirty($key) {}
        public function markFieldDirty($field, $dirty = true) {}
        public function resetDirtyMap() {}
    }

    trait CacheRawRelationDataTrait {
        /** @var array|null */
        protected $__rawRelationData;
        /**
         * @return array
         */
        public function __getRawRelationData() : array {}
    }

    trait ObjectVarTrait {
        /**
         * returns object values without the dao
         *
         * @return array
         */
        public function getObjectVars() {}
        public function getObjectVar($var) {}
        public function setObjectVar($var, $value, bool $silent = false) {}
    }

    trait SimpleComparisonTrait {
        public function isEqual($oldValue, $newValue) {}
    }

    trait OwnerAwareFieldTrait {
        /**
         * @var mixed
         */
        protected $_owner;
        /**
         * @var string
         */
        protected $_fieldname;
        /**
         * @var string|null
         */
        protected $_language;
        public function setOwner($owner, string $fieldname, $language = null) {}
        protected function markMeDirty() {}
    }

    trait DefaultValueTrait {
        /**
         * @return mixed
         */
        abstract protected function doGetDefaultValue() ;
/**
 * 2. if inheritance is enabled and there is no parent value then take the default value.
 * 3. if inheritance is disabled, take the default value.
 */
        protected function handleDefaultValue(/**
 * 2. if inheritance is enabled and there is no parent value then take the default value.
 * 3. if inheritance is disabled, take the default value.
 */
$data, /**
 * 2. if inheritance is enabled and there is no parent value then take the default value.
 * 3. if inheritance is disabled, take the default value.
 */
$object = null, /**
 * 2. if inheritance is enabled and there is no parent value then take the default value.
 * 3. if inheritance is disabled, take the default value.
 */
$params = [ ]) {}
    }

    trait ElementWithMetadataComparisonTrait {
/** @var ElementInterface $el2 */
        public function isEqual(/** @var ElementInterface $el2 */
$array1, /** @var ElementInterface $el2 */
$array2) {}
    }

    trait LazyLoadedRelationTrait {
        /**
         * @var array
         */
        protected $loadedLazyKeys;
        public function markLazyKeyAsLoaded(string $key) {}
        public function isLazyKeyLoaded(string $key) : bool {}
    }

}

namespace Pimcore\Model\DataObject\Concrete {
    /**
     * @property \Pimcore\Model\DataObject\Concrete $model
     */
    class Dao extends \pimcore\model\dataobject\abstractobject\dao {
        /**
         * @var DataObject\Concrete\Dao\InheritanceHelper
         */
        protected $inheritanceHelper;

        public function init() {}
        public function getById($id) {}
        public function getRelationIds($fieldName) {}
        public function getRelationData($field, $forOwner, $remoteClassId) {}
        /**
         * Get the data-elements for the object from database for the given path
         */
        public function getData() {}
        public function update($isUpdate = null) {}
        public function saveChildData() {}
        /**
         * Save object to database
         */
        public function delete() {}
        /**
         * get versions from database, and assign it to object
         *
         * @return Model\Version[]
         */
        public function getVersions() {}
        public function getLatestVersion($force = false) {}
        public function deleteAllTasks() {}
    }

}

namespace Pimcore\Model\DataObject\Concrete\Dao {
    class InheritanceHelper {
        const DEFAULT_QUERY_ID_COLUMN = 'ooo_id';
        const ID_FIELD = 'oo_id';
        const OBJECTS_TABLE = 'objects';
        const RELATION_TABLE = 'object_relations_';
        const QUERY_TABLE = 'object_query_';
        const STORE_TABLE = 'object_store_';

        /**
         * @var ConnectionInterface
         */
        protected $db;
        /**
         * @var array
         */
        protected $fields;
        /**
         * @var array
         */
        protected $relations;
        /**
         * @var array
         */
        protected $fieldIds;
        /**
         * @var array
         */
        protected $deletionFieldIds;
        /**
         * @var array
         */
        protected $fieldDefinitions;
        /**
         * @var string
         */
        protected $classId;
        /**
         * @var bool
         */
        static protected $useRuntimeCache;
        /**
         * @var bool
         */
        protected $childFound;
        /**
         * @var array
         */
        static protected $runtimeCache;
        /**
         * @var string|null
         */
        protected $storetable;
        /**
         * @var string|null
         */
        protected $querytable;
        /**
         * @var null|string
         */
        protected $relationtable;
        /**
         * @var null|string
         */
        protected $idField;
        /**
         * @var null|string
         */
        protected $queryIdField;

        public function __construct($classId, $idField = null, $storetable = null, $querytable = null, $relationtable = null, $queryIdField = null) {}
        public static function setUseRuntimeCache($value) {}
        /**
         * clear the runtime cache
         */
        public static function clearRuntimeCache() {}
        public function resetFieldsToCheck() {}
        public function addFieldToCheck($fieldname, $fieldDefinition) {}
        public function addRelationToCheck($fieldname, $fieldDefinition, $queryfields = null) {}
        public function doUpdate($oo_id, $createMissingChildrenRows = false, $params = [ ]) {}
        public function doDelete($objectId, $params = [ ]) {}
        protected function filterResultByLanguage($result, $language, $column) {}
        protected function buildTree($currentParentId, $fields = '', $parentIdGroups = null, $params = [ ]) {}
        protected function getRelationCondition($params = [ ]) {}
        protected function getRelationsForNode($node, $params = [ ]) {}
        protected function getIdsToCheckForDeletionForValuefields($currentNode, $fieldname, $params = [ ]) {}
        protected function getIdsToUpdateForValuefields($currentNode, $fieldname) {}
        protected function getIdsToCheckForDeletionForRelationfields($currentNode, $fieldname) {}
        protected function getIdsToUpdateForRelationfields($currentNode, $fieldname, $params = [ ]) {}
        protected function updateQueryTable($oo_id, $ids, $fieldname) {}
        protected function updateQueryTableOnDelete($oo_id, $ids, $fieldname) {}
    }

}

namespace Pimcore\Model\DataObject\Folder {
    /**
     * @property \Pimcore\Model\DataObject\Folder $model
     */
    class Dao extends \pimcore\model\dataobject\abstractobject\dao {}

}

namespace Pimcore\Model\DataObject\Fieldcollection {
    /**
     * @property \Pimcore\Model\DataObject\Fieldcollection $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function save(DataObject\Concrete $object, $params = [ ]) {}
        public function load(DataObject\Concrete $object) {}
        public function delete(DataObject\Concrete $object, $saveMode = false) {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Fieldcollection\Definition\Dao getDao()
     */
    class Definition extends \pimcore\model\abstractmodel {
    use \pimcore\model\dataobject\classdefinition\helper\varexport;

        /**
         * @var string
         */
        public $key;
        /**
         * @var string
         */
        public $parentClass;
        /**
         * @var string
         */
        public $title;
        /**
         * @var string
         */
        public $group;
        /**
         * @var array
         */
        public $layoutDefinitions;
        /**
         * @var DataObject\ClassDefinition\Data[]
         */
        protected $fieldDefinitions;

        /**
         * @return string
         */
        public function getKey() {}
        public function setKey($key) {}
        /**
         * @return string
         */
        public function getParentClass() {}
        public function setParentClass($parentClass) {}
        /**
         * @return string
         */
        public function getTitle() {}
        public function setTitle($title) {}
        /**
         * @return array
         */
        public function getLayoutDefinitions() {}
        public function setLayoutDefinitions($layoutDefinitions) {}
        public function getFieldDefinitions($context = [ ]) {}
        public function setFieldDefinitions($fieldDefinitions) {}
        public function addFieldDefinition($key, $data) {}
        public function getFieldDefinition($key, $context = [ ]) {}
        protected function doEnrichFieldDefinition($fieldDefinition, $context = [ ]) {}
        public function extractDataDefinitions($def) {}
/** @var Definition $fc */
        public static function getByKey(/** @var Definition $fc */
$key) {}
        public function save($saveDefinitionFile = true) {}
        public function delete() {}
        /**
         * @return string
         */
        protected function getDefinitionFile() {}
        /**
         * @return string
         */
        protected function getPhpClassFile() {}
        /**
         * @return string
         */
        protected function getInfoDocBlock() {}
        protected function getInfoDocBlockForFields($definition, $text, $level) {}
        /**
         * @return string
         */
        public function getGroup() {}
        public function setGroup($group) {}
    }

}

namespace Pimcore\Model\DataObject\Fieldcollection\Definition {
    /**
     * @property \Pimcore\Model\DataObject\Fieldcollection\Definition $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
    use \pimcore\model\dataobject\classdefinition\helper\dao;

        /**
         * @var array|null
         */
        protected $tableDefinitions;

        public function getTableName(DataObject\ClassDefinition $class) {}
        public function getLocalizedTableName(DataObject\ClassDefinition $class) {}
        public function delete(DataObject\ClassDefinition $class) {}
        public function createUpdateTable(DataObject\ClassDefinition $class) {}
        public function classSaved(DataObject\ClassDefinition $classDefinition) {}
    }

    class Listing {
        /**
         * @return Definition[]
         */
        public function load() {}
    }

}

namespace Pimcore\Model\DataObject\Fieldcollection\Data {
    /**
     * @property \Pimcore\Model\DataObject\Fieldcollection\Data\AbstractData $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function save(Model\DataObject\Concrete $object, $params = [ ], $saveRelationalData = true) {}
    }

    /**
     * @method Dao getDao()
     */
    abstract class AbstractData extends \pimcore\model\abstractmodel implements \pimcore\model\dataobject\lazyloadedfieldsinterface, \pimcore\model\element\elementdumpstateinterface {
    use \pimcore\model\element\elementdumpstatetrait, \pimcore\model\dataobject\traits\lazyloadedrelationtrait;

        /**
         * @var int
         */
        protected $index;
        /**
         * @var string
         */
        protected $fieldname;
        /**
         * @var Model\DataObject\Concrete
         */
        protected $object;
        /**
         * @var int
         */
        protected $objectId;
        /**
         * @var string
         */
        protected $type;

        /**
         * @return int
         */
        public function getIndex() {}
        public function setIndex($index) {}
        /**
         * @return string
         */
        public function getFieldname() {}
        public function setFieldname($fieldname) {}
        /**
         * @return string
         */
        public function getType() {}
        /**
         * @return Model\DataObject\Fieldcollection\Definition
         */
        public function getDefinition() {}
        public function setObject($object) {}
        /**
         * @return Concrete
         */
        public function getObject() {}
        public function get($fieldName, $language = null) {}
        public function set($fieldName, $value, $language = null) {}
        /**
         * @inheritdoc
         */
        protected function getLazyLoadedFieldNames() : array {}
        /**
         * @inheritDoc
         */
        public function isAllLazyKeysMarkedAsLoaded() : bool {}
        /**
         * @return array
         */
        public function __sleep() {}
        public function __wakeup() {}
    }

}

namespace Pimcore\Model\DataObject\ClassDefinition {
    /**
     * @property \Pimcore\Model\DataObject\ClassDefinition $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
    use \pimcore\model\dataobject\classdefinition\helper\dao;

        /**
         * @var DataObject\ClassDefinition
         */
        protected $model;
        /**
         * @var mixed
         */
        protected $tableDefinitions;

        public function getNameById($id) {}
        public function getIdByName($name) {}
        public function save($isUpdate = true) {}
        /**
         * @throws \Exception
         * @throws \Exception
         */
        public function update() {}
        /**
         * Create a new record for the object in database
         *
         * @return void
         */
        public function create() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
        public function updateClassNameInObjects($newName) {}
    }

    /**
     * Class Service
     *
     * @package Pimcore\Model\DataObject\ClassDefinition
     */
    class Service {
        public static function generateClassDefinitionJson($class) {}
        public static function removeDynamicOptionsFromLayoutDefinition($layout) {}
        public static function importClassDefinitionFromJson($class, $json, $throwException = false, $ignoreId = false) {}
        public static function generateFieldCollectionJson($fieldCollection) {}
        public static function importFieldCollectionFromJson($fieldCollection, $json, $throwException = false) {}
        public static function generateObjectBrickJson($objectBrick) {}
        public static function importObjectBrickFromJson($objectBrick, $json, $throwException = false) {}
/** @var LoaderInterface $loader */
        public static function generateLayoutTreeFromArray(/** @var LoaderInterface $loader */
$array, /** @var LoaderInterface $loader */
$throwException = false, /** @var LoaderInterface $loader */
$insideLocalizedField = false) {}
        public static function updateTableDefinitions($tableDefinitions, $tableNames) {}
        public static function skipColumn($tableDefinitions, $table, $colName, $type, $default, $null) {}
    }

    /**
     * @method \Pimcore\Model\DataObject\ClassDefinition\Listing\Dao getDao()
     * @method Model\DataObject\ClassDefinition[] load()
     * @method Model\DataObject\ClassDefinition current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\DataObject\ClassDefinition[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $classes;

        public function __construct() {}
        /**
         * @return Model\DataObject\ClassDefinition[]
         */
        public function getClasses() {}
        public function setClasses($classes) {}
    }

    class Layout {
    use \pimcore\model\element\childscompatibilitytrait, \pimcore\model\dataobject\classdefinition\helper\varexport;

        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $type;
        /**
         * @var string
         */
        public $region;
        /**
         * @var string
         */
        public $title;
        /**
         * @var int
         */
        public $width;
        /**
         * @var int
         */
        public $height;
        /**
         * @var bool
         */
        public $collapsible;
        /**
         * @var bool
         */
        public $collapsed;
        /**
         * @var string
         */
        public $bodyStyle;
        /**
         * @var string
         */
        public $datatype;
        /**
         * @var array
         */
        public $permissions;
        /**
         * @var array
         */
        public $childs;
        /**
         * @var bool
         */
        public $locked;

        /**
         * @return string
         */
        public function getName() {}
        /**
         * @return string
         */
        public function getType() {}
        /**
         * @return string
         */
        public function getRegion() {}
        /**
         * @return string
         */
        public function getTitle() {}
        /**
         * @return int
         */
        public function getWidth() {}
        /**
         * @return int
         */
        public function getHeight() {}
        /**
         * @return bool
         */
        public function getCollapsible() {}
        /**
         * @return array
         */
        public function getPermissions() {}
        public function setName($name) {}
        public function setType($type) {}
        public function setRegion($region) {}
        public function setTitle($title) {}
        public function setWidth($width) {}
        public function setHeight($height) {}
        public function setCollapsible($collapsible) {}
        public function setPermissions($permissions) {}
        /**
         * @return array
         */
        public function getChildren() {}
        public function setChildren($children) {}
        /**
         * @return bool
         */
        public function hasChildren() {}
        public function addChild($child) {}
        public function setValues($data = [ ], $blockedKeys = [ ]) {}
        /**
         * @return mixed
         */
        public function getDatatype() {}
        public function setDatatype($datatype) {}
        /**
         *
         * @return bool
         */
        public function getLocked() {}
        public function setLocked($locked) {}
        public function setCollapsed($collapsed) {}
        /**
         * @return bool
         */
        public function getCollapsed() {}
        public function setBodyStyle($bodyStyle) {}
        /**
         * @return string
         */
        public function getBodyStyle() {}
        /**
         * @return Layout
         */
        protected function filterCollapsibleValue() {}
        public function enrichLayoutDefinition($object, $context = [ ]) {}
    }

    /**
     * @method \Pimcore\Model\DataObject\ClassDefinition\CustomLayout\Dao getDao()
     */
    class CustomLayout extends \pimcore\model\abstractmodel {
    use \pimcore\model\dataobject\classdefinition\helper\varexport;

        /**
         * @var string
         */
        public $id;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $description;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $userOwner;
        /**
         * @var int
         */
        public $userModification;
        /**
         * @var string
         */
        public $classId;
        /**
         * @var array
         */
        public $layoutDefinitions;
        /**
         * @var int
         */
        public $default;

        public static function getById($id) {}
        public static function getByName(string $name) {}
        public static function getByNameAndClassId(string $name, $classId) {}
        public function getFieldDefinition($field) {}
        public static function create($values = [ ]) {}
        public function save($saveDefinitionFile = true) {}
        private function saveCustomLayoutFile($saveDefinitionFile = true) {}
        /**
         * @return string
         */
        public function getDefinitionFile() {}
        public static function cleanupForExport($data) {}
        /**
         * @return string
         */
        protected function getInfoDocBlock() {}
        public static function getIdentifier($classId) {}
        public function delete() {}
        /**
         * @return bool
         */
        public function exists() {}
        /**
         * @return string
         */
        public function getId() {}
        /**
         * @return string
         */
        public function getName() {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        /**
         * @return int
         */
        public function getUserOwner() {}
        /**
         * @return int
         */
        public function getUserModification() {}
        public function setId($id) {}
        public function setName($name) {}
        /**
         * @return int
         */
        public function getDefault() {}
        public function setDefault($default) {}
        public function setCreationDate($creationDate) {}
        public function setModificationDate($modificationDate) {}
        public function setUserOwner($userOwner) {}
        public function setUserModification($userModification) {}
        public function setDescription($description) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setLayoutDefinitions($layoutDefinitions) {}
        /**
         * @return array
         */
        public function getLayoutDefinitions() {}
        public function setClassId($classId) {}
        /**
         * @return string
         */
        public function getClassId() {}
    }

    abstract class Data {
    use \pimcore\model\dataobject\classdefinition\helper\varexport;

        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $title;
        /**
         * @var string
         */
        public $tooltip;
        /**
         * @var bool
         */
        public $mandatory;
        /**
         * @var bool
         */
        public $noteditable;
        /**
         * @var int
         */
        public $index;
        /**
         * @var string
         */
        public $phpdocType;
        /**
         * @var bool
         */
        public $locked;
        /**
         * @var bool
         */
        public $style;
        /**
         * @var array
         */
        public $permissions;
        /**
         * @var string
         */
        public $datatype;
        /**
         * @var string
         */
        public $fieldtype;
        /**
         * @var bool
         */
        public $relationType;
        /**
         * @var bool
         */
        public $invisible;
        /**
         * @var bool
         */
        public $visibleGridView;
        /**
         * @var bool
         */
        public $visibleSearch;
        /**
         * If set to true then null values will not be exported.
         *
         * @var bool
         */
        static protected $dropNullValues;
        /**
         * @var array
         */
        static public $validFilterOperators;

        abstract public function getDataForEditmode($data, $object = null, $params = [ ]) ;
        abstract public function getDataFromEditmode($data, $object = null, $params = [ ]) ;
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        /**
         * @return string
         */
        public function getName() {}
        /**
         * @return string
         */
        public function getTitle() {}
        /**
         * @return bool
         */
        public function getMandatory() {}
        /**
         * @return array
         */
        public function getPermissions() {}
        public function setName($name) {}
        public function setTitle($title) {}
        public function setMandatory($mandatory) {}
        public function setPermissions($permissions) {}
        public function setValues($data = [ ]) {}
        /**
         * @return string
         */
        public function getDatatype() {}
        public function setDatatype($datatype) {}
        /**
         * @return string
         */
        public function getFieldtype() {}
        /**
         * @return bool
         */
        public function getNoteditable() {}
        public function setNoteditable($noteditable) {}
        /**
         * @return int
         */
        public function getIndex() {}
        public function setIndex($index) {}
        /**
         * @return string
         */
        public function getPhpdocType() {}
        /**
         *
         * @return bool
         */
        public function getStyle() {}
        public function setStyle($style) {}
        /**
         *
         * @return bool
         */
        public function getLocked() {}
        public function setLocked($locked) {}
        /**
         *
         * @return string
         */
        public function getTooltip() {}
        public function setTooltip($tooltip) {}
        /**
         *
         * @return bool
         */
        public function isRelationType() {}
        /**
         * @return bool
         */
        public function getInvisible() {}
        public function setInvisible($invisible) {}
        /**
         * @return bool
         */
        public function getVisibleGridView() {}
        public function setVisibleGridView($visibleGridView) {}
        /**
         * @return bool
         */
        public function getVisibleSearch() {}
        public function setVisibleSearch($visibleSearch) {}
        public function getCacheTags($data, $tags = [ ]) {}
        public function resolveDependencies($data) {}
        public function getFilterCondition($value, $operator, $params = [ ]) {}
        public function getFilterConditionExt($value, $operator, $params = [ ]) {}
        protected function getPreGetValueHookCode(string $key) : string {}
        public function getGetterCode($class) {}
        public function getSetterCode($class) {}
        public function getGetterCodeObjectbrick($brickClass) {}
        public function getSetterCodeObjectbrick($brickClass) {}
        public function getGetterCodeFieldcollection($fieldcollectionDefinition) {}
        public function getSetterCodeFieldcollection($fieldcollectionDefinition) {}
        public function getGetterCodeLocalizedfields($class) {}
        public function getSetterCodeLocalizedfields($class) {}
        /**
         * Creates filter method code for listing classes
         *
         * @return string
         */
        public function getFilterCode() {}
        public function getAsIntegerCast($number) {}
        public function getAsFloatCast($number) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function isEmpty($data) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDiffDataForEditMode($data, $object = null, $params = [ ]) {}
        public static function setDropNullValues($dropNullValues) {}
        /**
         * @return bool
         */
        public static function getDropNullValues() {}
        /**
         * @return bool
         */
        public function getUnique() {}
/** @var DataObject\Classificationstore $classificationStoreData */
        protected function getDataFromObjectParam(/** @var DataObject\Classificationstore $classificationStoreData */
$object, /** @var DataObject\Classificationstore $classificationStoreData */
$params = [ ]) {}
        public function synchronizeWithMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
        public function adoptMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
        public function marshal($value, $object = null, $params = [ ]) {}
        public function unmarshal($data, $object = null, $params = [ ]) {}
        public function appendData($existingData, $additionalData) {}
        public function removeData($existingData, $removeData) {}
        /**
         * Returns if datatype supports data inheritance
         *
         * @return bool
         */
        public function supportsInheritance() {}
        /**
         * @return bool
         */
        public function supportsDirtyDetection() {}
        public function isEqual($oldValue, $newValue) {}
        public function markLazyloadedFieldAsLoaded($object) {}
        public function isFilterable() : bool {}
        public function addListingFilter(DataObject\Listing $listing, $data, $operator = '=') {}
    }

    class ClassDefinitionManager {
        public const DELETED = 'deleted';
        public const CREATED = 'created';
        public const SAVED = 'saved';

        /**
         * Delete all classes from db
         */
        public function cleanUpDeletedClassDefinitions() : array {}
        /**
         * Updates all classes from PIMCORE_CLASS_DIRECTORY
         */
        public function createOrUpdateClassDefinitions() : array {}
    }

    class ClassLayoutDefinitionManager {
        public const SAVED = 'saved';
        public const CREATED = 'created';
        public const DELETED = 'deleted';

        /**
         * Delete all custom layouts from db
         */
        public function cleanUpDeletedLayoutDefinitions() : array {}
        /**
         * Updates all custom layouts from PIMCORE_CUSTOMLAYOUT_DIRECTORY
         */
        public function createOrUpdateLayoutDefinitions() : array {}
    }


    interface PathFormatterInterface {
        function formatPath(array $result, ElementInterface $source, array $targets, array $params) : array ;
    }

    interface CalculatorClassInterface {
        function compute(Concrete $object, CalculatedValue $context) : string ;
        function getCalculatedValueForEditMode(Concrete $object, CalculatedValue $context) : string ;
    }

    interface PathFormatterAwareInterface {
        /**
         * @return string
         */
        function getPathFormatterClass() : ?string ;
    }

    interface LinkGeneratorInterface {
        function generate(Concrete $object, array $params = [ ]) : string ;
    }

}

namespace Pimcore\Model\DataObject\ClassDefinition\CustomLayout {
    /**
     * @property \Pimcore\Model\DataObject\ClassDefinition\CustomLayout $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        /**
         * @var Model\DataObject\ClassDefinition\CustomLayout
         */
        protected $model;

        public function getById($id = null) {}
        public function getIdByName($name) {}
        public function getNameById($id) {}
        public function getIdByNameAndClassId($name, $classId) {}
        /**
         * @return int
         */
        public function getNewId() {}
        /**
         * Save object to database
         *
         * @return string|null
         */
        protected function getLayoutData() {}
        public function getLatestIdentifier($classId) {}
        public function save($isUpdate = true) {}
        /**
         * @throws \Exception
         */
        public function update() {}
        /**
         * Create a new record for the object in database
         */
        public function create() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\DataObject\ClassDefinition\CustomLayout\Listing\Dao getDao()
     * @method Model\DataObject\ClassDefinition\CustomLayout[] load()
     * @method Model\DataObject\ClassDefinition\CustomLayout current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var array|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $layoutDefinitions;

        public function __construct() {}
        public function setLayoutDefinitions($layoutDefinitions) {}
        /**
         * @return Model\DataObject\ClassDefinition\CustomLayout[]
         */
        public function getLayoutDefinitions() {}
    }

}

namespace Pimcore\Model\DataObject\ClassDefinition\CustomLayout\Listing {
    /**
     * @property \Pimcore\Model\DataObject\ClassDefinition\CustomLayout\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of custom layouts for the specified parameters, returns an array of DataObject\ClassDefinition\CustomLayout elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         *
         * @todo: $amount could not be defined, so this could cause an issue
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\DataObject\ClassDefinition\Layout {
    class Region extends \pimcore\model\dataobject\classdefinition\layout {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;

    }

    class Accordion extends \pimcore\model\dataobject\classdefinition\layout {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var bool
         */
        public $border;

        /**
         * @return bool
         */
        public function getBorder() : bool {}
        public function setBorder(bool $border) : void {}
    }

    class Fieldcontainer extends \pimcore\model\dataobject\classdefinition\layout {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Width of input field labels
         *
         * @var int
         */
        public $labelWidth;
        /**
         * @var string
         */
        public $layout;
        /**
         * @var string
         */
        public $fieldLabel;

        public function setLabelWidth($labelWidth) {}
        /**
         * @return int
         */
        public function getLabelWidth() {}
        public function setLayout($layout) {}
        /**
         * @return string
         */
        public function getLayout() {}
        public function setFieldLabel($fieldLabel) {}
        /**
         * @return string
         */
        public function getFieldLabel() {}
    }

    class Panel extends \pimcore\model\dataobject\classdefinition\layout {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Width of input field labels
         *
         * @var int
         */
        public $labelWidth;
        /**
         * @var string
         */
        public $layout;
        /**
         * @var bool
         */
        public $border;
        /**
         * @var string|null
         */
        public $icon;

        public function setLabelWidth($labelWidth) {}
        /**
         * @return int
         */
        public function getLabelWidth() {}
        public function setLayout($layout) {}
        /**
         * @return string
         */
        public function getLayout() {}
        /**
         * @return bool
         */
        public function getBorder() : bool {}
        public function setBorder(bool $border) : void {}
        /**
         * @return string
         */
        public function getIcon() : ?string {}
        public function setIcon(?string $icon) : void {}
    }

    class Fieldset extends \pimcore\model\dataobject\classdefinition\layout {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Width of input field labels
         *
         * @var int
         */
        public $labelWidth;

        public function setLabelWidth($labelWidth) {}
        /**
         * @return int
         */
        public function getLabelWidth() {}
    }

    class Tabpanel extends \pimcore\model\dataobject\classdefinition\layout {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var bool
         */
        public $border;
        /**
         * @var string
         */
        public $tabPosition;

        /**
         * @return bool
         */
        public function getBorder() : bool {}
        public function setBorder(bool $border) : void {}
        /**
         * @return string
         */
        public function getTabPosition() : string {}
        public function setTabPosition($tabPosition) : void {}
    }

    class Iframe extends \pimcore\model\dataobject\classdefinition\layout {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /** @var string */
        public $iframeUrl;
        /** @var string */
        public $renderingData;

        /**
         * @return string
         */
        public function getIframeUrl() : string {}
        public function setIframeUrl(string $iframeUrl) : void {}
        /**
         * @return string
         */
        public function getRenderingData() : string {}
        public function setRenderingData(string $renderingData) : void {}
        public function enrichLayoutDefinition($object, $context = [ ]) {}
    }

    class Text extends \pimcore\model\dataobject\classdefinition\layout {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var string
         */
        public $html;
        /**
         * @var string
         */
        public $renderingClass;
        /**
         * @var string
         */
        public $renderingData;
        /**
         * @var bool
         */
        public $border;

        /**
         * @return string
         */
        public function getHtml() {}
        public function setHtml($html) {}
        /**
         * @return string
         */
        public function getRenderingClass() {}
        public function setRenderingClass($renderingClass) {}
        /**
         * @return string
         */
        public function getRenderingData() {}
        public function setRenderingData($renderingData) {}
        /**
         * @return bool
         */
        public function getBorder() : bool {}
        public function setBorder(bool $border) : void {}
        public function enrichLayoutDefinition($object, $context = [ ]) {}
    }

    class Button extends \pimcore\model\dataobject\classdefinition\layout {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var string
         */
        public $handler;
        /**
         * @var string
         */
        public $text;
        /**
         * @var string
         */
        public $icon;

        /**
         * @return string
         */
        public function getText() {}
        public function setText($text) {}
        /**
         * @return string
         */
        public function getHandler() {}
        public function setHandler($handler) {}
        /**
         * @return string
         */
        public function getIcon() {}
        public function setIcon($icon) {}
    }

}

namespace Pimcore\Model\DataObject\ClassDefinition\Listing {
    /**
     * @property \Pimcore\Model\DataObject\ClassDefinition\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of object-classes for the specicifies parameters, returns an array of DataObject\ClassDefinition elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\DataObject\ClassDefinition\Data {
    class Email extends \pimcore\model\dataobject\classdefinition\data\input {
    use \pimcore\model\dataobject\traits\simplecomparisontrait;

        /**
         * @var string
         */
        public $fieldtype;

        public function checkValidity($data, $omitMandatoryCheck = false) {}
    }

    class Slider extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\traits\simplecomparisontrait, \pimcore\model\dataobject\classdefinition\data\extension\columntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var int
         */
        public $width;
        /**
         * @var int
         */
        public $height;
        /**
         * @var float
         */
        public $minValue;
        /**
         * @var float
         */
        public $maxValue;
        /**
         * @var bool
         */
        public $vertical;
        /**
         * @var float
         */
        public $increment;
        /**
         * @var int
         */
        public $decimalPrecision;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        /**
         * @return int
         */
        public function getHeight() {}
        public function setHeight($height) {}
        /**
         * @return float
         */
        public function getMinValue() {}
        public function setMinValue($minValue) {}
        /**
         * @return float
         */
        public function getMaxValue() {}
        public function setMaxValue($maxValue) {}
        /**
         * @return bool
         */
        public function getVertical() {}
        /**
         * @return int
         */
        public function getDefaultValue() {}
        public function setVertical($vertical) {}
        /**
         * @return float
         */
        public function getIncrement() {}
        public function setIncrement($increment) {}
        /**
         * @return int
         */
        public function getDecimalPrecision() {}
        public function setDecimalPrecision($decimalPrecision) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function synchronizeWithMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
        public function isFilterable() : bool {}
    }

    class Localizedfields extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\customresourcepersistinginterface {
    use \pimcore\model\element\childscompatibilitytrait;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var array
         */
        public $childs;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $region;
        /**
         * @var string
         */
        public $layout;
        /**
         * @var string
         */
        public $title;
        /**
         * @var int
         */
        public $width;
        /**
         * @var int
         */
        public $height;
        /**
         * @var int
         */
        public $maxTabs;
        /**
         * @var int
         */
        public $labelWidth;
        /**
         * @var bool
         */
        public $border;
        /**
         * @var bool
         */
        public $provideSplitView;
        /**
         * @var string
         */
        public $tabPosition;
        /**
         * @var int
         */
        public $hideLabelsWhenTabsReached;
        /**
         * contains further localized field definitions if there are more than one localized fields in on class
         *
         * @var array
         */
        protected $referencedFields;
        /**
         * @var array
         */
        public $fieldDefinitionsCache;

        public function getDataForEditmode($localizedField, $object = null, $params = [ ]) {}
        private function doGetDataForEditMode($data, $object, $fieldData, $metaData, $level = 1, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        /**
         * @return array
         */
        public function getChildren() {}
        public function setChildren($children) {}
        /**
         * @return bool
         */
        public function hasChildren() {}
        public function addChild($child) {}
        public function setReferencedFields($referencedFields) {}
        /**
         * @return array
         */
        public function getReferencedFields() {}
        public function addReferencedField($field) {}
        public function setValues($data = [ ], $blockedKeys = [ ]) {}
        public function save($object, $params = [ ]) {}
        public function load($object, $params = [ ]) {}
        public function delete($object, $params = [ ]) {}
        public function classSaved($class, $params = [ ]) {}
        public function preGetData($container, $params = [ ]) {}
/**
 * @var $fd DataObject\ClassDefinition\Data
 */
        public function getGetterCode(/**
 * @var $fd DataObject\ClassDefinition\Data
 */
$class) {}
/**
 * @var $fd DataObject\ClassDefinition\Data
 */
        public function getSetterCode(/**
 * @var $fd DataObject\ClassDefinition\Data
 */
$class) {}
        public function getFieldDefinition($name, $context = [ ]) {}
        public function getFieldDefinitions($context = [ ]) {}
        protected function doEnrichFieldDefinition($fieldDefinition, $context = [ ]) {}
        public function doGetFieldDefinitions($def = null, $fields = [ ]) {}
        public function getCacheTags($data, $tags = [ ]) {}
        public function resolveDependencies($data) {}
        public function setHeight($height) {}
        /**
         * @return int
         */
        public function getHeight() {}
        public function setLayout($layout) {}
        /**
         * @return string
         */
        public function getLayout() {}
        /**
         * @return bool
         */
        public function getBorder() : bool {}
        public function setBorder(bool $border) : void {}
        public function setName($name) {}
        public function setRegion($region) {}
        /**
         * @return string
         */
        public function getRegion() {}
        public function setWidth($width) {}
        /**
         * @return int
         */
        public function getWidth() {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        protected function getDataForValidity($localizedObject, array $languages) {}
        public function getDiffDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDiffDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        /**
         * @return array
         */
        public function __sleep() {}
        public function rewriteIds($object, $idMapping, $params = [ ]) {}
        /**
         * @return int
         */
        public function getHideLabelsWhenTabsReached() {}
        public function setHideLabelsWhenTabsReached($hideLabelsWhenTabsReached) {}
        public function setMaxTabs($maxTabs) {}
        /**
         * @return int
         */
        public function getMaxTabs() {}
        public function setLabelWidth($labelWidth) {}
        /**
         * @return int
         */
        public function getLabelWidth() {}
        /**
         * @return bool
         */
        public function getProvideSplitView() {}
        public function setProvideSplitView($provideSplitView) : void {}
        public function marshal($value, $object = null, $params = [ ]) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
        /**
         * @return bool
         */
        public function supportsDirtyDetection() {}
        public function isFilterable() : bool {}
        /**
         * @return string
         */
        public function getTabPosition() : string {}
        public function setTabPosition($tabPosition) : void {}
    }

    class StructuredTable extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\classdefinition\data\extension\columntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var int
         */
        public $width;
        /**
         * @var int
         */
        public $height;
        /**
         * @var int
         */
        public $labelWidth;
        /**
         * @var string
         */
        public $labelFirstCell;
        /**
         * @var object
         */
        public $cols;
        /**
         * @var object
         */
        public $rows;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        /**
         * @return int
         */
        public function getHeight() {}
        public function setHeight($height) {}
        /**
         * @return int
         */
        public function getLabelWidth() {}
        public function setLabelWidth($labelWidth) {}
        public function setLabelFirstCell($labelFirstCell) {}
        /**
         * @return string
         */
        public function getLabelFirstCell() {}
        /**
         * @return object
         */
        public function getCols() {}
        public function setCols($cols) {}
        /**
         * @return object
         */
        public function getRows() {}
        public function setRows($rows) {}
        public function sort($a, $b) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        /**
         * @return array|string
         */
        public function getColumnType() {}
        /**
         * @return array|string
         */
        public function getQueryColumnType() {}
        /**
         * @return array
         */
        protected function calculateDbColumns() {}
        protected function typeMapper($type, $length = null) {}
        public function isEmpty($data) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffDataForEditMode($data, $object = null, $params = [ ]) {}
        public function synchronizeWithMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
    }

    class Wysiwyg extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface {
    use \pimcore\model\dataobject\traits\simplecomparisontrait, \pimcore\model\dataobject\classdefinition\data\extension\text, \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\classdefinition\data\extension\columntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var int
         */
        public $width;
        /**
         * @var int
         */
        public $height;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var string
         */
        public $toolbarConfig;
        /**
         * @var bool
         */
        public $excludeFromSearchIndex;

        /**
         * @return int
         */
        public function getWidth() {}
        /**
         * @return int
         */
        public function getHeight() {}
        public function setWidth($width) {}
        public function setHeight($height) {}
        public function setToolbarConfig($toolbarConfig) {}
        /**
         * @return string
         */
        public function getToolbarConfig() {}
        /**
         * @return bool
         */
        public function isExcludeFromSearchIndex() : bool {}
        public function setExcludeFromSearchIndex(bool $excludeFromSearchIndex) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function resolveDependencies($data) {}
        public function getCacheTags($data, $tags = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function preGetData($object, $params = [ ]) {}
        public function getDiffVersionPreview($data, $object = null, $params = [ ]) {}
        public function rewriteIds($object, $idMapping, $params = [ ]) {}
        public function isFilterable() : bool {}
    }

    class Datetime extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\classdefinition\data\extension\columntype, \pimcore\model\dataobject\traits\defaultvaluetrait;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var int
         */
        public $defaultValue;
        /**
         * @var bool
         */
        public $useCurrentDate;

        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        protected function getDateFromTimestamp($timestamp) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        /**
         * @return Date
         */
        public function getDefaultValue() {}
        public function setDefaultValue($defaultValue) {}
        public function setUseCurrentDate($useCurrentDate) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDiffDataForEditMode($data, $object = null, $params = [ ]) {}
        public function getFilterConditionExt($value, $operator, $params = [ ]) {}
        public function isFilterable() : bool {}
        /**
         * @return Carbon|null
         */
        protected function doGetDefaultValue() {}
    }

    class ManyToManyRelation extends \pimcore\model\dataobject\classdefinition\data\relations\abstractrelations implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\optimizedadminloadinginterface {
    use \pimcore\model\dataobject\classdefinition\data\relations\allowdocumentrelationtrait, \pimcore\model\dataobject\classdefinition\data\relations\allowassetrelationtrait, \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\classdefinition\data\extension\relation, \pimcore\model\dataobject\classdefinition\data\relations\allowobjectrelationtrait;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var int
         */
        public $width;
        /**
         * Type for the column to query
         *
         * @var int
         */
        public $height;
        /**
         * @var int
         */
        public $maxItems;
        /**
         * @var string
         */
        public $assetUploadPath;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var bool
         */
        public $relationType;
        /**
         *
         * @var bool
         */
        public $objectsAllowed;
        /**
         *
         * @var bool
         */
        public $assetsAllowed;
        /**
         * Allowed asset types
         *
         * @var array
         */
        public $assetTypes;
        /**
         *
         * @var bool
         */
        public $documentsAllowed;
        /**
         * Allowed document types
         *
         * @var array
         */
        public $documentTypes;

        /**
         * @return bool
         */
        public function getObjectsAllowed() {}
        public function setObjectsAllowed($objectsAllowed) {}
        /**
         * @return bool
         */
        public function getDocumentsAllowed() {}
        public function setDocumentsAllowed($documentsAllowed) {}
        /**
         * @return array
         */
        public function getDocumentTypes() {}
        public function setDocumentTypes($documentTypes) {}
        /**
         *
         * @return bool
         */
        public function getAssetsAllowed() {}
        public function setAssetsAllowed($assetsAllowed) {}
        /**
         * @return array
         */
        public function getAssetTypes() {}
        public function setAssetTypes($assetTypes) {}
        public function prepareDataForPersistence($data, $object = null, $params = [ ]) {}
        public function loadData($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        /**
         * @return int
         */
        public function getHeight() {}
        public function setHeight($height) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getCacheTags($data, $tags = [ ]) {}
        public function resolveDependencies($data) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $relatedObject = null, $params = [ ], $idMapper = null) {}
        public function preGetData($object, $params = [ ]) {}
        public function preSetData($object, $data, $params = [ ]) {}
        public function setMaxItems($maxItems) {}
        /**
         * @return int
         */
        public function getMaxItems() {}
        public function setAssetUploadPath($assetUploadPath) {}
        /**
         * @return string
         */
        public function getAssetUploadPath() {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffVersionPreview($data, $object = null, $params = [ ]) {}
        public function rewriteIds($object, $idMapping, $params = [ ]) {}
        public function synchronizeWithMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
        /**
         * @return string
         */
        public function getPhpdocType() {}
        public function marshal($value, $object = null, $params = [ ]) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
        public function buildUniqueKeyForDiffEditor($item) {}
        public function processDiffDataForEditMode($originalData, $data, $object = null, $params = [ ]) {}
        public function getDiffDataForEditMode($data, $object = null, $params = [ ]) {}
        public function getDiffDataFromEditmode($data, $object = null, $params = [ ]) {}
        /**
         * @return bool
         */
        public function isOptimizedAdminLoading() : bool {}
        public function isFilterable() : bool {}
        public function addListingFilter(DataObject\Listing $listing, $data, $operator = '=') {}
    }

    /**
     * @deprecated use \Pimcore\Model\DataObject\ClassDefinition\Data\AdvancedManyToManyObjectRelation instead
     */
    class ObjectsMetadata extends \pimcore\model\dataobject\classdefinition\data\advancedmanytomanyobjectrelation {}

    class Time extends \pimcore\model\dataobject\classdefinition\data\input {
    use \pimcore\model\dataobject\traits\simplecomparisontrait;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Column length
         *
         * @var int
         */
        public $columnLength;
        /**
         * @var string
         */
        public $minValue;
        /**
         * @var string
         */
        public $maxValue;
        /**
         * @var int
         */
        public $increment;

        /**
         * @return string
         */
        public function getMinValue() {}
        public function setMinValue($minValue) {}
        /**
         * @return string
         */
        public function getMaxValue() {}
        public function setMaxValue($maxValue) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function isEmpty($data) {}
        public function toTime($string) {}
        protected function toTimestamp($string, $baseTimestamp = null) {}
        public function isEarlier($subject, $comparison) {}
        public function isLater($subject, $comparison) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        /**
         * @return int
         */
        public function getIncrement() {}
        public function setIncrement($increment) {}
    }

    class Geopolyline extends \pimcore\model\dataobject\classdefinition\data\geo\abstractgeo implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\classdefinition\data\extension\columntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffVersionPreview($data, $object = null, $params = [ ]) {}
/** @var DataObject\Data\Geopoint $point */
        public function marshal(/** @var DataObject\Data\Geopoint $point */
$value, /** @var DataObject\Data\Geopoint $point */
$object = null, /** @var DataObject\Data\Geopoint $point */
$params = [ ]) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
    }

    /**
     * @deprecated use \Pimcore\Model\DataObject\ClassDefinition\Data\AdvancedManyToManyRelation instead
     */
    class MultihrefMetadata extends \pimcore\model\dataobject\classdefinition\data\advancedmanytomanyrelation {}

    class AdvancedManyToManyObjectRelation extends \pimcore\model\dataobject\classdefinition\data\manytomanyobjectrelation {
    use \pimcore\model\dataobject\traits\elementwithmetadatacomparisontrait;

        /**
         * @var string
         */
        public $allowedClassId;
        /**
         * @var string|null
         */
        public $visibleFields;
        /**
         * @var array
         */
        public $columns;
        /**
         * @var string[]
         */
        public $columnKeys;
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var bool
         */
        public $enableBatchEdit;
        /**
         * @var bool
         */
        public $allowMultipleAssignments;
        /**
         * @var array
         */
        public $visibleFieldDefinitions;

        public function prepareDataForPersistence($data, $object = null, $params = [ ]) {}
/** @var DataObject\Data\ObjectMetadata $metaData */
        public function loadData(/** @var DataObject\Data\ObjectMetadata $metaData */
$data, /** @var DataObject\Data\ObjectMetadata $metaData */
$container = null, /** @var DataObject\Data\ObjectMetadata $metaData */
$params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getCacheTags($data, $tags = [ ]) {}
        public function resolveDependencies($data) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        public function save($object, $params = [ ]) {}
        public function preGetData($object, $params = [ ]) {}
        public function delete($object, $params = [ ]) {}
        public function setAllowedClassId($allowedClassId) {}
        /**
         * @return mixed
         */
        public function getAllowedClassId() {}
/**
 * @extjs6
 */
        public function setVisibleFields(/**
 * @extjs6
 */
$visibleFields) {}
        /**
         * @return string|null
         */
        public function getVisibleFields() {}
        public function setColumns($columns) {}
        /**
         * @return mixed
         */
        public function getColumns() {}
        /**
         * @return array
         */
        public function getColumnKeys() {}
        /**
         * @return bool
         */
        public function getEnableBatchEdit() {}
        public function setEnableBatchEdit($enableBatchEdit) {}
        public function sort($a, $b) {}
        public function classSaved($class, $params = [ ]) {}
        public function rewriteIds($object, $idMapping, $params = [ ]) {}
        public function synchronizeWithMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
/** @var Localizedfields|null $localizedfields */
        public function enrichLayoutDefinition(/** @var Localizedfields|null $localizedfields */
$object, /** @var Localizedfields|null $localizedfields */
$context = [ ]) {}
/** @var DataObject\Data\ObjectMetadata $elementMetadata */
        public function marshal(/** @var DataObject\Data\ObjectMetadata $elementMetadata */
$value, /** @var DataObject\Data\ObjectMetadata $elementMetadata */
$object = null, /** @var DataObject\Data\ObjectMetadata $elementMetadata */
$params = [ ]) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
        public function processDiffDataForEditMode($originalData, $data, $object = null, $params = [ ]) {}
        /**
         * @return bool
         */
        public function getAllowMultipleAssignments() {}
        public function setAllowMultipleAssignments($allowMultipleAssignments) {}
        protected function buildUniqueKeyForAppending($item) {}
    }

    class ManyToOneRelation extends \pimcore\model\dataobject\classdefinition\data\relations\abstractrelations implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\relation, \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\classdefinition\data\relations\allowobjectrelationtrait, \pimcore\model\dataobject\classdefinition\data\relations\allowassetrelationtrait, \pimcore\model\dataobject\classdefinition\data\relations\allowdocumentrelationtrait;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var int
         */
        public $width;
        /**
         * @var string
         */
        public $assetUploadPath;
        /**
         * @var bool
         */
        public $relationType;
        /**
         * Type for the column to query
         *
         * @var array
         */
        public $queryColumnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         *
         * @var bool
         */
        public $objectsAllowed;
        /**
         *
         * @var bool
         */
        public $assetsAllowed;
        /**
         * Allowed asset types
         *
         * @var array
         */
        public $assetTypes;
        /**
         *
         * @var bool
         */
        public $documentsAllowed;
        /**
         * Allowed document types
         *
         * @var array
         */
        public $documentTypes;

        /**
         * @return bool
         */
        public function getObjectsAllowed() {}
        public function setObjectsAllowed($objectsAllowed) {}
        /**
         * @return bool
         */
        public function getDocumentsAllowed() {}
        public function setDocumentsAllowed($documentsAllowed) {}
        /**
         * @return array
         */
        public function getDocumentTypes() {}
        public function setDocumentTypes($documentTypes) {}
        /**
         *
         * @return bool
         */
        public function getAssetsAllowed() {}
        public function setAssetsAllowed($assetsAllowed) {}
        /**
         * @return array
         */
        public function getAssetTypes() {}
        public function setAssetTypes($assetTypes) {}
        public function prepareDataForPersistence($data, $object = null, $params = [ ]) {}
        public function loadData($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getCacheTags($data, $tags = [ ]) {}
        public function resolveDependencies($data) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $relatedObject = null, $params = [ ], $idMapper = null) {}
        public function preGetData($object, $params = [ ]) {}
        public function preSetData($object, $data, $params = [ ]) {}
        public function setAssetUploadPath($assetUploadPath) {}
        /**
         * @return string
         */
        public function getAssetUploadPath() {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function rewriteIds($object, $idMapping, $params = [ ]) {}
        public function synchronizeWithMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
        /**
         * @return string
         */
        public function getPhpdocType() {}
        public function marshal($value, $object = null, $params = [ ]) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
        public function isEqual($value1, $value2) {}
        public function isFilterable() : bool {}
        public function addListingFilter(DataObject\Listing $listing, $data, $operator = '=') {}
    }

    class Link extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\columntype, \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function resolveDependencies($data) {}
        public function getCacheTags($data, $tags = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $relatedObject = null, $params = [ ], $idMapper = null) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffVersionPreview($data, $object = null, $params = [ ]) {}
        public function rewriteIds($object, $idMapping, $params = [ ]) {}
    }

    class AdvancedManyToManyRelation extends \pimcore\model\dataobject\classdefinition\data\manytomanyrelation {
    use \pimcore\model\dataobject\traits\elementwithmetadatacomparisontrait;

        /**
         * @var string[]
         */
        public $columns;
        /**
         * @var string[]
         */
        public $columnKeys;
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var bool
         */
        public $optimizedAdminLoading;
        /**
         * @var bool
         */
        public $enableBatchEdit;
        /**
         * @var bool
         */
        public $allowMultipleAssignments;

        public function prepareDataForPersistence($data, $object = null, $params = [ ]) {}
/** @var DataObject\Data\ElementMetadata $metaData */
        public function loadData(/** @var DataObject\Data\ElementMetadata $metaData */
$data, /** @var DataObject\Data\ElementMetadata $metaData */
$object = null, /** @var DataObject\Data\ElementMetadata $metaData */
$params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
/** @var DataObject\Data\ElementMetadata $metaObject */
        public function getDataForEditmode(/** @var DataObject\Data\ElementMetadata $metaObject */
$data, /** @var DataObject\Data\ElementMetadata $metaObject */
$object = null, /** @var DataObject\Data\ElementMetadata $metaObject */
$params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getCacheTags($data, $tags = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $relatedObject = null, $params = [ ], $idMapper = null) {}
        public function save($object, $params = [ ]) {}
        public function preGetData($object, $params = [ ]) {}
        public function delete($object, $params = [ ]) {}
        public function setColumns($columns) {}
        /**
         * @return mixed
         */
        public function getColumns() {}
        /**
         * @return array
         */
        public function getColumnKeys() {}
        public function sort($a, $b) {}
        public function classSaved($class) {}
        public function rewriteIds($object, $idMapping, $params = [ ]) {}
        public function synchronizeWithMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
        public function enrichLayoutDefinition($object, $context = [ ]) {}
        public function resolveDependencies($data) {}
/** @var DataObject\Data\ElementMetadata $elementMetadata */
        public function marshal(/** @var DataObject\Data\ElementMetadata $elementMetadata */
$value, /** @var DataObject\Data\ElementMetadata $elementMetadata */
$object = null, /** @var DataObject\Data\ElementMetadata $elementMetadata */
$params = [ ]) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
        /**
         * @return string
         */
        public function getPhpdocType() {}
        public function processDiffDataForEditMode($originalData, $data, $object = null, $params = [ ]) {}
        public function getDiffDataForEditMode($data, $object = null, $params = [ ]) {}
        public function getDiffDataFromEditmode($data, $object = null, $params = [ ]) {}
        protected function buildUniqueKeyForAppending($item) {}
        /**
         * @return bool
         */
        public function isOptimizedAdminLoading() : bool {}
        public function setOptimizedAdminLoading($optimizedAdminLoading) {}
        /**
         * @return bool
         */
        public function getAllowMultipleAssignments() {}
        public function setAllowMultipleAssignments($allowMultipleAssignments) {}
        /**
         * @return bool
         */
        public function getEnableBatchEdit() {}
        public function setEnableBatchEdit($enableBatchEdit) {}
    }

    /**
     * @deprecated use \Pimcore\Model\DataObject\ClassDefinition\Data\ManyToManyRelation instead
     */
    class Multihref extends \pimcore\model\dataobject\classdefinition\data\manytomanyrelation {}

    class Country extends \pimcore\model\dataobject\classdefinition\data\select {
    use \pimcore\model\dataobject\traits\simplecomparisontrait;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /** Restrict selection to comma-separated list of countries.
         * @var null
         */
        public $restrictTo;

        public function __construct() {}
        private function buildOptions() {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
/**
 * @extjs6
 */
        public function setRestrictTo(/**
 * @extjs6
 */
$restrictTo) {}
        /**
         * @return string
         */
        public function getRestrictTo() {}
        public function isFilterable() : bool {}
    }

    class Hotspotimage extends \pimcore\model\dataobject\classdefinition\data\image {
    use \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\classdefinition\data\extension\columntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var int
         */
        public $ratioX;
        /**
         * @var int
         */
        public $ratioY;
        /**
         * @var string
         */
        public $predefinedDataTemplates;

        public function setRatioX($ratioX) {}
        /**
         * @return int
         */
        public function getRatioX() {}
        public function setRatioY($ratioY) {}
        /**
         * @return int
         */
        public function getRatioY() {}
        /**
         * @return string
         */
        public function getPredefinedDataTemplates() {}
        public function setPredefinedDataTemplates($predefinedDataTemplates) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function getCacheTags($data, $tags = [ ]) {}
        public function resolveDependencies($data) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
/** @var DataObject\Data\Hotspotimage $hotspotImage */
        public function getFromWebserviceImport(/** @var DataObject\Data\Hotspotimage $hotspotImage */
$value, /** @var DataObject\Data\Hotspotimage $hotspotImage */
$object = null, /** @var DataObject\Data\Hotspotimage $hotspotImage */
$params = [ ], /** @var DataObject\Data\Hotspotimage $hotspotImage */
$idMapper = null) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function rewriteIds($object, $idMapping, $params = [ ]) {}
        public function doRewriteIds($object, $idMapping, $params, $data) {}
        private function rewriteIdsInDataEntries($dataArray, $idMapping) {}
        public function marshal($value, $object = null, $params = [ ]) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
    }

    class CalculatedValue extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /** @var string */
        public $elementType;
        /**
         * @var float
         */
        public $width;
        /**
         * @var string
         */
        public $calculatorClass;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Column length
         *
         * @var int
         */
        public $columnLength;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        /**
         * @return string
         */
        public function getElementType() : string {}
        public function setElementType($elementType) {}
        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        /**
         * @return int
         */
        public function getColumnLength() {}
        public function setColumnLength($columnLength) {}
        /**
         * @return string
         */
        public function getCalculatorClass() {}
        public function setCalculatorClass($calculatorClass) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        /**
         * @return string
         */
        public function getQueryColumnType() {}
        public function getGetterCode($class) {}
        public function getGetterCodeLocalizedfields($class) {}
        public function getGetterCodeObjectbrick($brickClass) {}
        public function getGetterCodeFieldcollection($fieldcollectionDefinition) {}
        public function getSetterCode($class) {}
        public function getSetterCodeObjectbrick($brickClass) {}
        public function getSetterCodeFieldcollection($fieldcollectionDefinition) {}
        public function getSetterCodeLocalizedfields($class) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function supportsInheritance() {}
    }

    class Fieldcollections extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\customresourcepersistinginterface {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var string
         */
        public $allowedTypes;
        /**
         * @var bool
         */
        public $lazyLoading;
        /**
         * @var int
         */
        public $maxItems;
        /**
         * @var bool
         */
        public $disallowAddRemove;
        /**
         * @var bool
         */
        public $disallowReorder;
        /**
         * @var bool
         */
        public $collapsed;
        /**
         * @var bool
         */
        public $collapsible;
        /**
         * @var bool
         */
        public $border;

        /**
         * @return bool
         */
        public function getLazyLoading() {}
        public function setLazyLoading($lazyLoading) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function save($object, $params = [ ]) {}
        public function load($object, $params = [ ]) {}
        public function delete($object, $params = [ ]) {}
        /**
         * @return array
         */
        public function getAllowedTypes() {}
        public function setAllowedTypes($allowedTypes) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($data, $object = null, $params = [ ], $idMapper = null) {}
        public function resolveDependencies($data) {}
        public function getCacheTags($data, $tags = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function preGetData($object, $params = [ ]) {}
        public function preSetData($object, $data, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getGetterCode($class) {}
        public function setMaxItems($maxItems) {}
        /**
         * @return int
         */
        public function getMaxItems() {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffVersionPreview($data, $object = null, $params = [ ]) {}
        public function getDiffDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function rewriteIds($object, $idMapping, $params = [ ]) {}
        public function synchronizeWithMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
        public function classSaved($class, $params = [ ]) {}
        public function setDisallowAddRemove($disallowAddRemove) {}
        /**
         * @return bool
         */
        public function getDisallowAddRemove() {}
        public function setDisallowReorder($disallowReorder) {}
        /**
         * @return bool
         */
        public function getDisallowReorder() {}
        /**
         * @return bool
         */
        public function getBorder() : bool {}
        public function setBorder(bool $border) : void {}
        /**
         * @return bool
         */
        public function isCollapsed() {}
        public function setCollapsed($collapsed) {}
        /**
         * @return bool
         */
        public function isCollapsible() {}
        public function setCollapsible($collapsible) {}
        public static function collectCalculatedValueItems($container, $list = [ ]) {}
        /**
         * @inheritdoc
         */
        public function supportsInheritance() {}
    }

    class TargetGroupMultiselect extends \pimcore\model\dataobject\classdefinition\data\multiselect {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;

        /** @var Tool\Targeting\TargetGroup\Listing|Tool\Targeting\TargetGroup\Listing\Dao $list */
        public function configureOptions() {}
        public static function __set_state($data) {}
    }

    class QuantityValue extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\traits\defaultvaluetrait, \pimcore\model\dataobject\classdefinition\data\extension\columntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var int
         */
        public $width;
        /**
         * @var int
         */
        public $unitWidth;
        /**
         * @var float
         */
        public $defaultValue;
        /**
         * @var string
         */
        public $defaultUnit;
        /**
         * @var array
         */
        public $validUnits;
        /**
         * @var int
         */
        public $decimalPrecision;
        /**
         *
         * @var bool
         */
        public $autoConvert;
        /**
         * Type for the column to query
         *
         * @var int
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        /**
         * @return int
         */
        public function getUnitWidth() {}
        public function setUnitWidth($unitWidth) {}
        /**
         * @return int
         */
        public function getDefaultValue() {}
        public function setDefaultValue($defaultValue) {}
        public function setValidUnits($validUnits) {}
        /**
         * @return array
         */
        public function getValidUnits() {}
        /**
         * @return string
         */
        public function getDefaultUnit() {}
        public function setDefaultUnit($defaultUnit) {}
        /**
         * @return int
         */
        public function getDecimalPrecision() {}
        public function setDecimalPrecision($decimalPrecision) {}
        /**
         * @return bool
         */
        public function isAutoConvert() : bool {}
        public function setAutoConvert($autoConvert) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        public function marshal($value, $object = null, $params = [ ]) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
        /** @var Model\DataObject\QuantityValue\Unit $unit */
        public function configureOptions() {}
        /**
         * @return Model\DataObject\Data\QuantityValue|null
         */
        protected function doGetDefaultValue() {}
        public static function __set_state($data) {}
/** @var UnitConversionService $converter */
        public function getFilterCondition(/** @var UnitConversionService $converter */
$value, /** @var UnitConversionService $converter */
$operator, /** @var UnitConversionService $converter */
$params = [ ]) {}
    }

    class User extends \pimcore\model\dataobject\classdefinition\data\select {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;

        /**
         * @return User
         */
        protected function init() {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function configureOptions() {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public static function __set_state($data) {}
    }

    class NewsletterActive extends \pimcore\model\dataobject\classdefinition\data\checkbox {
    use \pimcore\model\dataobject\traits\simplecomparisontrait;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;

    }

    class Lastname extends \pimcore\model\dataobject\classdefinition\data\input {
    use \pimcore\model\dataobject\traits\simplecomparisontrait;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;

    }

    class BooleanSelect extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface {
    use \pimcore\model\dataobject\traits\simplecomparisontrait, \pimcore\model\dataobject\classdefinition\data\extension\columntype, \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype;

        const NO_VALUE = -1;
        const YES_VALUE = 1;
        const EMPTY_VALUE = null;
        const EMPTY_VALUE_EDITMODE = 0;
        const DEFAULT_OPTIONS = [['key' => 'empty', 'value' => self::EMPTY_VALUE_EDITMODE], ['key' => 'yes', 'value' => self::YES_VALUE], ['key' => 'no', 'value' => self::NO_VALUE]];

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /** @var string */
        public $yesLabel;
        /** @var string */
        public $noLabel;
        /** @var string */
        public $emptyLabel;
        public $options;
        /**
         * @var int
         */
        public $width;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        /**
         * @return array
         */
        public function getOptions() {}
        public function setOptions($options) {}
        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffDataForEditMode($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function isEmpty($data) {}
        public function synchronizeWithMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
        /**
         * @return string
         */
        public function getYesLabel() {}
        public function setYesLabel($yesLabel) {}
        public function setOptionsEntry($value, $label) {}
        /**
         * @return string
         */
        public function getNoLabel() {}
        public function setNoLabel($noLabel) {}
        /**
         * @return string
         */
        public function getEmptyLabel() {}
        public function setEmptyLabel($emptyLabel) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
    }

    class Countrymultiselect extends \pimcore\model\dataobject\classdefinition\data\multiselect {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /** Restrict selection to comma-separated list of countries.
         * @var null
         */
        public $restrictTo;

        public function __construct() {}
/**
 * @extjs6
 */
        public function setRestrictTo(/**
 * @extjs6
 */
$restrictTo) {}
        /**
         * @return string
         */
        public function getRestrictTo() {}
        /**
         * @return array
         */
        public function getOptions() {}
    }

    class Block extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\customresourcepersistinginterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\columntype, \pimcore\model\element\childscompatibilitytrait;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var bool
         */
        public $lazyLoading;
        /**
         * @var bool
         */
        public $disallowAddRemove;
        /**
         * @var bool
         */
        public $disallowReorder;
        /**
         * @var bool
         */
        public $collapsible;
        /**
         * @var bool
         */
        public $collapsed;
        /**
         * @var int
         */
        public $maxItems;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * @var string
         */
        public $styleElement;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var array
         */
        public $childs;
        /**
         * @var string
         */
        public $layout;
        /**
         * contains further child field definitions if there are more than one localized fields in on class
         *
         * @var array
         */
        protected $referencedFields;
        /**
         * @var array
         */
        public $fieldDefinitionsCache;

/** @var DataObject\Data\BlockElement $blockElement */
        public function getDataForResource(/** @var DataObject\Data\BlockElement $blockElement */
$data, /** @var DataObject\Data\BlockElement $blockElement */
$object = null, /** @var DataObject\Data\BlockElement $blockElement */
$params = [ ]) {}
/** @var DataObject\Localizedfield $data */
        public function getDataFromResource(/** @var DataObject\Localizedfield $data */
$data, /** @var DataObject\Localizedfield $data */
$object = null, /** @var DataObject\Localizedfield $data */
$params = [ ]) {}
/** @var DataObject\Data\BlockElement $blockElement */
        public function getDataForEditmode(/** @var DataObject\Data\BlockElement $blockElement */
$data, /** @var DataObject\Data\BlockElement $blockElement */
$object = null, /** @var DataObject\Data\BlockElement $blockElement */
$params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
/** @var DataObject\Objectbrick\Data\AbstractData $brickData */
        protected function getBlockDataFromContainer(/** @var DataObject\Objectbrick\Data\AbstractData $brickData */
$object, /** @var DataObject\Objectbrick\Data\AbstractData $brickData */
$params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
/** @var DataObject\Data\BlockElement $blockElement */
        public function getForWebserviceExport(/** @var DataObject\Data\BlockElement $blockElement */
$object, /** @var DataObject\Data\BlockElement $blockElement */
$params = [ ]) {}
        public function getFromWebserviceImport($value, $relatedObject = null, $params = [ ], $idMapper = null) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffVersionPreview($data, $object = null, $params = [ ]) {}
        public function synchronizeWithMasterDefinition(Model\DataObject\ClassDefinition\Data $masterDefinition) {}
        public function isEmpty($data) {}
        /**
         * @return array
         */
        public function getChildren() {}
        public function setChildren($children) {}
        /**
         * @return bool
         */
        public function hasChildren() {}
        public function addChild($child) {}
        public function setLayout($layout) {}
        /**
         * @return string
         */
        public function getLayout() {}
        public function setValues($data = [ ], $blockedKeys = [ ]) {}
        public function doGetFieldDefinitions($def = null, $fields = [ ]) {}
        public function getFieldDefinitions($context = [ ]) {}
        public function getFieldDefinition($name, $context = [ ]) {}
        protected function doEnrichFieldDefinition($fieldDefinition, $context = [ ]) {}
        public function setReferencedFields($referencedFields) {}
        /**
         * @return array
         */
        public function getReferencedFields() {}
        public function addReferencedField($field) {}
        /**
         * @return array
         */
        public function __sleep() {}
        public function resolveDependencies($data) {}
        public function getCacheTags($data, $tags = [ ]) {}
        /**
         * @return bool
         */
        public function isCollapsed() {}
        public function setCollapsed($collapsed) {}
        /**
         * @return bool
         */
        public function isCollapsible() {}
        public function setCollapsible($collapsible) {}
        /**
         * @return string
         */
        public function getStyleElement() {}
        public function setStyleElement($styleElement) {}
        /**
         * @return bool
         */
        public function getLazyLoading() {}
        public function setLazyLoading($lazyLoading) {}
/** @var DataObject\Localizedfield $itemElementData */
        public function preSetData(/** @var DataObject\Localizedfield $itemElementData */
$object, /** @var DataObject\Localizedfield $itemElementData */
$data, /** @var DataObject\Localizedfield $itemElementData */
$params = [ ]) {}
        public function save($object, $params = [ ]) {}
        public function load($container, $params = [ ]) {}
        public function delete($object, $params = [ ]) {}
        public function preGetData($object, $params = [ ]) {}
        /**
         * @return bool
         */
        public function isRemoteOwner() {}
        /**
         * @return int
         */
        public function getMaxItems() {}
        public function setMaxItems($maxItems) {}
        /**
         * @return bool
         */
        public function isDisallowAddRemove() {}
        public function setDisallowAddRemove($disallowAddRemove) {}
        /**
         * @return bool
         */
        public function isDisallowReorder() {}
        public function setDisallowReorder($disallowReorder) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function classSaved($class, $params = [ ]) {}
    }

    class ImageGallery extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\classdefinition\data\extension\columntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var int
         */
        public $width;
        /**
         * Type for the column to query
         *
         * @var int
         */
        public $height;
        /**
         * @var string
         */
        public $uploadPath;
        /**
         * @var int
         */
        public $ratioX;
        /**
         * @var int
         */
        public $ratioY;
        /**
         * @var string
         */
        public $predefinedDataTemplates;

        public function setRatioX($ratioX) {}
        /**
         * @return int
         */
        public function getRatioX() {}
        public function setRatioY($ratioY) {}
        /**
         * @return int
         */
        public function getRatioY() {}
        /**
         * @return string
         */
        public function getPredefinedDataTemplates() {}
        public function setPredefinedDataTemplates($predefinedDataTemplates) {}
        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        /**
         * @return int
         */
        public function getHeight() {}
        public function setHeight($height) {}
        /**
         * @return string
         */
        public function getUploadPath() {}
        public function setUploadPath($uploadPath) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        private function createEmptyImageGallery($params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function getCacheTags($data, $tags = [ ]) {}
        public function resolveDependencies($data) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function rewriteIds($object, $idMapping, $params = [ ]) {}
        public function marshal($value, $object = null, $params = [ ]) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
        public function isEmpty($data) {}
    }

    class Objectbricks extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\customresourcepersistinginterface {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var array
         */
        public $allowedTypes;
        /**
         * @var int
         */
        public $maxItems;
        /**
         * @var bool
         */
        public $border;

        public function setMaxItems($maxItems) {}
        /**
         * @return int
         */
        public function getMaxItems() {}
        /**
         * @return bool
         */
        public function getBorder() : bool {}
        public function setBorder(bool $border) : void {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
/** @var DataObject\Objectbrick\Definition $item */
        private function doGetDataForEditmode(/** @var DataObject\Objectbrick\Definition $item */
$getter, /** @var DataObject\Objectbrick\Definition $item */
$data, /** @var DataObject\Objectbrick\Definition $item */
$params, /** @var DataObject\Objectbrick\Definition $item */
$allowedBrickType, /** @var DataObject\Objectbrick\Definition $item */
$level = 0) {}
        private function getDataForField($item, $key, $fielddefinition, $level, $baseObject, $getter, $params) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function save($object, $params = [ ]) {}
        public function load($object, $params = [ ]) {}
        public function delete($object, $params = [ ]) {}
        /**
         * @return array
         */
        public function getAllowedTypes() {}
        public function setAllowedTypes($allowedTypes) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($data, $relatedObject = null, $params = [ ], $idMapper = null) {}
        public function preSetData($object, $value, $params = [ ]) {}
        public function resolveDependencies($data) {}
        public function getCacheTags($data, $tags = [ ]) {}
        public function getGetterCode($class) {}
/** @var DataObject\Objectbrick\Data\AbstractData $item */
        public function checkValidity(/** @var DataObject\Objectbrick\Data\AbstractData $item */
$data, /** @var DataObject\Objectbrick\Data\AbstractData $item */
$omitMandatoryCheck = false) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        private function getDiffDataForField($item, $key, $fielddefinition, $level, $baseObject, $getter, $params = [ ]) {}
        private function doGetDiffDataForEditmode($data, $getter, $params = [ ], $level = 0) {}
        public function getDiffDataForEditMode($data, $object = null, $params = [ ]) {}
        public function getDiffDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function rewriteIds($object, $idMapping, $params = [ ]) {}
        public function synchronizeWithMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
        public function classSaved($class, $params = [ ]) {}
/** @var $childDef DataObject\ClassDefinition\Data */
        public static function collectCalculatedValueItems(/** @var $childDef DataObject\ClassDefinition\Data */
$container, /** @var $childDef DataObject\ClassDefinition\Data */
$list = [ ]) {}
    }

    class TargetGroup extends \pimcore\model\dataobject\classdefinition\data\select {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;

        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        /** @var Tool\Targeting\TargetGroup\Listing|Tool\Targeting\TargetGroup\Listing\Dao $list */
        public function configureOptions() {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public static function __set_state($data) {}
    }

    class ExternalImage extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\columntype, \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var int
         */
        public $previewWidth;
        /**
         * @var int
         */
        public $inputWidth;
        /**
         * @var int
         */
        public $previewHeight;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        /**
         * @return int
         */
        public function getPreviewWidth() {}
        public function setPreviewWidth($previewWidth) {}
        /**
         * @return int
         */
        public function getPreviewHeight() {}
        public function setPreviewHeight($previewHeight) {}
        /**
         * @return int
         */
        public function getInputWidth() {}
        public function setInputWidth($inputWidth) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $relatedObject = null, $params = [ ], $idMapper = null) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffVersionPreview($data, $object = null, $params = [ ]) {}
        public function synchronizeWithMasterDefinition(Model\DataObject\ClassDefinition\Data $masterDefinition) {}
        public function isEmpty($data) {}
    }

    class Password extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\classdefinition\data\extension\columntype;

        const HASH_FUNCTION_PASSWORD_HASH = 'password_hash';

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var int
         */
        public $width;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var string
         */
        public $algorithm;
        /**
         * @var string
         */
        public $salt;
        /**
         * @var string
         */
        public $saltlocation;

        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        public function setAlgorithm($algorithm) {}
        /**
         * @return string
         */
        public function getAlgorithm() {}
        public function setSalt($salt) {}
        /**
         * @return string
         */
        public function getSalt() {}
        public function setSaltlocation($saltlocation) {}
        /**
         * @return string
         */
        public function getSaltlocation() {}
/** set the hashed password back to the object, to be sure that is not plain-text after the first save
         this is especially to avoid plaintext passwords in the search-index see: PIMCORE-1406 */
        public function getDataForResource(/** set the hashed password back to the object, to be sure that is not plain-text after the first save
         this is especially to avoid plaintext passwords in the search-index see: PIMCORE-1406 */
$data, /** set the hashed password back to the object, to be sure that is not plain-text after the first save
         this is especially to avoid plaintext passwords in the search-index see: PIMCORE-1406 */
$object = null, /** set the hashed password back to the object, to be sure that is not plain-text after the first save
         this is especially to avoid plaintext passwords in the search-index see: PIMCORE-1406 */
$params = [ ]) {}
        public function calculateHash($data) {}
        public function verifyPassword($password, DataObject\AbstractObject $object, $updateHash = true) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDiffDataForEditMode($data, $object = null, $params = [ ]) {}
        public function synchronizeWithMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
    }

    class ManyToManyObjectRelation extends \pimcore\model\dataobject\classdefinition\data\relations\abstractrelations implements \pimcore\model\dataobject\classdefinition\data\optimizedadminloadinginterface, \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\relations\allowobjectrelationtrait, \pimcore\model\dataobject\classdefinition\data\extension\relation, \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var int
         */
        public $width;
        /**
         * Type for the column to query
         *
         * @var int
         */
        public $height;
        /**
         * @var int
         */
        public $maxItems;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var bool
         */
        public $relationType;
        /**
         * @var string|null
         */
        public $visibleFields;
        /**
         * @var bool
         */
        public $allowToCreateNewObject;
        /**
         * @var bool
         */
        public $optimizedAdminLoading;
        /**
         * @var array
         */
        public $visibleFieldDefinitions;

        /**
         * @return bool
         */
        public function getObjectsAllowed() {}
        public function prepareDataForPersistence($data, $object = null, $params = [ ]) {}
        public function loadData($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        /**
         * @return int
         */
        public function getHeight() {}
        public function setHeight($height) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getCacheTags($data, $tags = [ ]) {}
        public function resolveDependencies($data) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        public function preGetData($object, $params = [ ]) {}
        public function preSetData($object, $data, $params = [ ]) {}
        public function setMaxItems($maxItems) {}
        /**
         * @return int
         */
        public function getMaxItems() {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffVersionPreview($data, $object = null, $params = [ ]) {}
        public function rewriteIds($object, $idMapping, $params = [ ]) {}
        public function synchronizeWithMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
/** @var Localizedfields|null $localizedfields */
        public function enrichLayoutDefinition(/** @var Localizedfields|null $localizedfields */
$object, /** @var Localizedfields|null $localizedfields */
$context = [ ]) {}
        /**
         * @return string
         */
        public function getPhpdocType() {}
        public function marshal($value, $object = null, $params = [ ]) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
        public function buildUniqueKeyForDiffEditor($item) {}
        public function processDiffDataForEditMode($originalData, $data, $object = null, $params = [ ]) {}
        public function getDiffDataForEditMode($data, $object = null, $params = [ ]) {}
        public function getDiffDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function setVisibleFields($visibleFields) {}
        /**
         * @return string|null
         */
        public function getVisibleFields() {}
        /**
         * @return bool
         */
        public function isAllowToCreateNewObject() : bool {}
        public function setAllowToCreateNewObject($allowToCreateNewObject) {}
        /**
         * @return bool
         */
        public function isOptimizedAdminLoading() : bool {}
        public function setOptimizedAdminLoading($optimizedAdminLoading) {}
        public function isFilterable() : bool {}
        public function addListingFilter(DataObject\Listing $listing, $data, $operator = '=') {}
    }

    /**
     * @deprecated use \Pimcore\Model\DataObject\ClassDefinition\Data\ManyToManyObjectRelation instead
     */
    class Objects extends \pimcore\model\dataobject\classdefinition\data\manytomanyobjectrelation {}

    class Date extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface {
    use \pimcore\model\dataobject\traits\defaultvaluetrait, \pimcore\model\dataobject\classdefinition\data\extension\columntype, \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var int
         */
        public $defaultValue;
        /**
         * @var bool
         */
        public $useCurrentDate;

        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        protected function getDateFromTimestamp($timestamp) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        /**
         * @return int
         */
        public function getDefaultValue() {}
        public function setDefaultValue($defaultValue) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        public function setUseCurrentDate($useCurrentDate) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDiffDataForEditMode($data, $object = null, $params = [ ]) {}
        public function getFilterConditionExt($value, $operator, $params = [ ]) {}
        public function isFilterable() : bool {}
        /**
         * @return Carbon|null
         */
        protected function doGetDefaultValue() {}
    }

    class Video extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\classdefinition\data\extension\columntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var int
         */
        public $width;
        /**
         * Type for the column to query
         *
         * @var int
         */
        public $height;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        /**
         * @return int
         */
        public function getHeight() {}
        public function setHeight($height) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function getCacheTags($data, $tags = [ ]) {}
        public function resolveDependencies($data) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $relatedObject = null, $params = [ ], $idMapper = null) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffVersionPreview($data, $object = null, $params = [ ]) {}
        public function rewriteIds($object, $idMapping, $params = [ ]) {}
        public function marshal($value, $object = null, $params = [ ]) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
    }

    class Consent extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\classdefinition\data\extension\columntype, \pimcore\model\dataobject\traits\simplecomparisontrait;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var bool
         */
        public $defaultValue;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * Width of field
         *
         * @var string
         */
        public $width;

        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
/** @var DataObject\Data\Consent $oldData */
        public function getDataFromEditmode(/** @var DataObject\Data\Consent $oldData */
$data, /** @var DataObject\Data\Consent $oldData */
$object = null, /** @var DataObject\Data\Consent $oldData */
$params = [ ]) {}
        public function getDiffDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function synchronizeWithMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
        public function getFilterCondition($value, $operator, $params = [ ]) {}
        public function getFilterConditionExt($value, $operator, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        /**
         * @return int
         */
        public function getWidth() : int {}
        public function setWidth($width) {}
        /**
         * @inheritdoc
         */
        public function supportsInheritance() {}
    }

    class Numeric extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\traits\defaultvaluetrait, \pimcore\model\dataobject\classdefinition\data\extension\columntype, \pimcore\model\dataobject\traits\simplecomparisontrait;

        const DECIMAL_SIZE_DEFAULT = 64;
        const DECIMAL_PRECISION_DEFAULT = 0;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var float
         */
        public $width;
        /**
         * @var float
         */
        public $defaultValue;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var bool
         */
        public $integer;
        /**
         * @var bool
         */
        public $unsigned;
        /**
         * @var float
         */
        public $minValue;
        /**
         * @var float
         */
        public $maxValue;
        /**
         * @var bool
         */
        public $unique;
        /**
         * This is the x part in DECIMAL(x, y) and denotes the total amount of digits. In MySQL this is called precision
         * but as decimalPrecision already existed to denote the amount of digits after the point (as it is called on the ExtJS
         * number field), decimalSize was chosen instead.
         *
         * @var int
         */
        public $decimalSize;
        /**
         * This is the y part in DECIMAL(x, y) and denotes amount of digits after a comma. In MySQL this is called scale. See
         * commend on decimalSize.
         *
         * @var int
         */
        public $decimalPrecision;

        /**
         * @inheritDoc
         */
        public function getPhpdocType() : string {}
        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        /**
         * @return int|null
         */
        public function getDefaultValue() {}
        public function setDefaultValue($defaultValue) {}
        public function setInteger($integer) {}
        /**
         * @return bool
         */
        public function getInteger() {}
        public function setMaxValue($maxValue) {}
        /**
         * @return float
         */
        public function getMaxValue() {}
        public function setMinValue($minValue) {}
        /**
         * @return float
         */
        public function getMinValue() {}
        public function setUnsigned($unsigned) {}
        /**
         * @return bool
         */
        public function getUnsigned() {}
        /**
         * @return int
         */
        public function getDecimalSize() {}
        public function setDecimalSize($decimalSize) {}
        public function setDecimalPrecision($decimalPrecision) {}
        /**
         * @return int
         */
        public function getDecimalPrecision() {}
        /**
         * @return bool
         */
        public function getUnique() {}
        public function setUnique($unique) {}
        /**
         * @return string
         */
        public function getColumnType() {}
        /**
         * @return string
         */
        public function getQueryColumnType() {}
        public function isDecimalType() : bool {}
        private function buildDecimalColumnType() : string {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function isEmpty($data) {}
        protected function toNumeric($value) {}
        public function preSetData($object, $data, $params = [ ]) {}
        public function isFilterable() : bool {}
        /**
         * @return null|int
         */
        protected function doGetDefaultValue() {}
    }

    class Language extends \pimcore\model\dataobject\classdefinition\data\select {
    use \pimcore\model\dataobject\traits\simplecomparisontrait;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var bool
         */
        public $onlySystemLanguages;

        public function configureOptions() {}
        /**
         * @return bool
         */
        public function getOnlySystemLanguages() {}
        public function setOnlySystemLanguages($value) {}
        public static function __set_state($data) {}
        public function isFilterable() : bool {}
    }

    /**
     * Class EncryptedField
     *
     * @package Pimcore\Model\DataObject\ClassDefinition\Data
     *
     * How to generate a key: vendor/bin/generate-defuse-key
     */
    class EncryptedField extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\columntype;

        const STRICT_DISABLED = 0;
        const STRICT_ENABLED = 1;

        /**
         * @var bool
         */
        static private $strictMode;
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var string
         */
        public $delegateDatatype;
        /**
         * @var Model\DataObject\ClassDefinition\Data
         */
        public $delegate;
        /**
         * Type for the column
         *
         * @var array
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function encrypt($data, $object, $params = [ ]) {}
        public function decrypt($data, $object, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function synchronizeWithMasterDefinition(Model\DataObject\ClassDefinition\Data $masterDefinition) {}
        public function isEmpty($data) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function marshal($value, $object = null, $params = [ ]) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getFilterCondition($value, $operator, $params = [ ]) {}
        /**
         * @return string
         */
        public function getDelegateDatatype() {}
        public function setDelegateDatatype($delegateDatatype) {}
        public function setPhpdocType($phpdocType) {}
        /**
         * @return Model\DataObject\ClassDefinition\Data
         */
        public function getDelegateDatatypeDefinition() {}
        public function setupDelegate($data) {}
        /**
         * @return bool
         */
        public static function isStrictMode() {}
        public static function setStrictMode($strictMode) {}
        public function setValues($data = [ ]) {}
        /**
         * @return Model\DataObject\ClassDefinition\Data
         */
        public function getDelegate() {}
        public function setDelegate($delegate) {}
        public function enrichLayoutDefinition($object, $context = [ ]) {}
        /**
         * @return string
         */
        public function getPhpdocType() {}
    }

    class Input extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\classdefinition\data\extension\columntype, \pimcore\model\dataobject\traits\simplecomparisontrait, \pimcore\model\dataobject\classdefinition\data\extension\text;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var int
         */
        public $width;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Column length
         *
         * @var int
         */
        public $columnLength;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var string
         */
        public $regex;
        /**
         * @var bool
         */
        public $unique;
        /**
         * @var bool
         */
        public $showCharCount;

        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        /**
         * @return int
         */
        public function getColumnLength() {}
        public function setColumnLength($columnLength) {}
        public function setRegex($regex) {}
        /**
         * @return string
         */
        public function getRegex() {}
        /**
         * @return bool
         */
        public function getUnique() {}
        public function setUnique($unique) {}
        /**
         * @return bool
         */
        public function getShowCharCount() {}
        public function setShowCharCount($showCharCount) {}
        /**
         * @return string
         */
        public function getColumnType() {}
        /**
         * @return string
         */
        public function getQueryColumnType() {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function synchronizeWithMasterDefinition(Model\DataObject\ClassDefinition\Data $masterDefinition) {}
        public function isFilterable() : bool {}
    }

    class Textarea extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\text, \pimcore\model\dataobject\classdefinition\data\extension\columntype, \pimcore\model\dataobject\traits\simplecomparisontrait, \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var int
         */
        public $width;
        /**
         * @var int
         */
        public $height;
        /**
         * @var int
         */
        public $maxLength;
        /**
         * @var bool
         */
        public $showCharCount;
        /**
         * @var bool
         */
        public $excludeFromSearchIndex;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        /**
         * @return int
         */
        public function getWidth() {}
        /**
         * @return int
         */
        public function getHeight() {}
        public function setWidth($width) {}
        public function setHeight($height) {}
        /**
         * @return int
         */
        public function getMaxLength() {}
        public function setMaxLength($maxLength) {}
        /**
         * @return bool
         */
        public function isShowCharCount() {}
        public function setShowCharCount($showCharCount) {}
        /**
         * @return bool
         */
        public function isExcludeFromSearchIndex() : bool {}
        public function setExcludeFromSearchIndex(bool $excludeFromSearchIndex) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDiffVersionPreview($data, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function isFilterable() : bool {}
    }

    class RgbaColor extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\classdefinition\data\extension\columntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var int
         */
        public $width;
        /**
         * Type for the column to query
         *
         * @var array
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var array
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function synchronizeWithMasterDefinition(Model\DataObject\ClassDefinition\Data $masterDefinition) {}
        public function isEmpty($data) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function marshal($value, $object = null, $params = [ ]) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getFilterCondition($value, $operator, $params = [ ]) {}
        public function getFilterConditionExt($value, $operator, $params = [ ]) {}
        public function marshalBeforeEncryption($value, $object = null, $params = [ ]) {}
        public function unmarshalAfterDecryption($value, $object = null, $params = [ ]) {}
    }

    class Select extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface {
    use \pimcore\model\dataobject\traits\simplecomparisontrait, \pimcore\model\dataobject\traits\defaultvaluetrait, \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\classdefinition\data\extension\columntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Available options to select
         *
         * @var array
         */
        public $options;
        /**
         * @var int
         */
        public $width;
        /**
         * @var string
         */
        public $defaultValue;
        /** Options provider class
         * @var string
         */
        public $optionsProviderClass;
        /** Options provider data
         * @var string
         */
        public $optionsProviderData;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Column length
         *
         * @var int
         */
        public $columnLength;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var bool
         */
        public $dynamicOptions;

        /**
         * @return int
         */
        public function getColumnLength() {}
        public function setColumnLength($columnLength) {}
        protected function correctColumnDefinition($type) {}
        /**
         * @return string
         */
        public function getColumnType() {}
        /**
         * @return string
         */
        public function getQueryColumnType() {}
        /**
         * @return array
         */
        public function getOptions() {}
        public function setOptions($options) {}
        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffDataForEditMode($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function isEmpty($data) {}
        public function synchronizeWithMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
        /**
         * @return string
         */
        public function getDefaultValue() {}
        public function setDefaultValue($defaultValue) {}
        /**
         * @return string
         */
        public function getOptionsProviderClass() {}
        public function setOptionsProviderClass($optionsProviderClass) {}
        /**
         * @return string
         */
        public function getOptionsProviderData() {}
        public function setOptionsProviderData($optionsProviderData) {}
        public function enrichFieldDefinition($context = [ ]) {}
        public function enrichLayoutDefinition($object, $context = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getFilterConditionExt($value, $operator, $params = [ ]) {}
        public function isFilterable() : bool {}
        /**
         * @return null|string
         */
        protected function doGetDefaultValue() {}
    }

    class Multiselect extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\columntype, \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Available options to select
         *
         * @var array
         */
        public $options;
        /**
         * @var int
         */
        public $width;
        /**
         * @var int
         */
        public $height;
        /**
         * @var int
         */
        public $maxItems;
        /**
         * @var string
         */
        public $renderType;
        /** Options provider class
         * @var string
         */
        public $optionsProviderClass;
        /** Options provider data
         * @var string
         */
        public $optionsProviderData;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var bool
         */
        public $dynamicOptions;

        /**
         * @return array
         */
        public function getOptions() {}
        public function setOptions($options) {}
        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        /**
         * @return int
         */
        public function getHeight() {}
        public function setHeight($height) {}
        public function setMaxItems($maxItems) {}
        /**
         * @return int
         */
        public function getMaxItems() {}
        public function setRenderType($renderType) {}
        /**
         * @return string
         */
        public function getRenderType() {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function getFilterCondition($value, $operator, $params = [ ]) {}
        public function getFilterConditionExt($value, $operator, $params = [ ]) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffVersionPreview($data, $object = null, $params = [ ]) {}
        public function synchronizeWithMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
        /**
         * @return string
         */
        public function getOptionsProviderClass() {}
        public function setOptionsProviderClass($optionsProviderClass) {}
        /**
         * @return string
         */
        public function getOptionsProviderData() {}
        public function setOptionsProviderData($optionsProviderData) {}
        public function enrichFieldDefinition($context = [ ]) {}
        public function enrichLayoutDefinition($object, $context = [ ]) {}
        public function appendData($existingData, $additionalData) {}
        public function removeData($existingData, $removeData) {}
        public function isFilterable() : bool {}
    }

    /**
     * TODO: Refactor - this class is very similar to the parent one so probably we can try to refactor parent and have better results here also
     *
     * Class InputQuantityValue
     *
     * @package Pimcore\Model\DataObject\ClassDefinition\Data
     */
    class InputQuantityValue extends \pimcore\model\dataobject\classdefinition\data\quantityvalue {
    use \pimcore\model\dataobject\classdefinition\data\extension\columntype, \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype;

        /**
         * @var string
         */
        public $fieldtype;
        /**
         * Type for the column to query
         *
         * @var array
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var array
         */
        public $columnType;
        public $phpdocType;

        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
        protected function getNewDataObject($value = null, $unitId = null) {}
    }

    class Checkbox extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface {
    use \pimcore\model\dataobject\traits\simplecomparisontrait, \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\classdefinition\data\extension\columntype, \pimcore\model\dataobject\traits\defaultvaluetrait;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var bool
         */
        public $defaultValue;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        /**
         * @return int|null
         */
        public function getDefaultValue() {}
        public function setDefaultValue($defaultValue) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function synchronizeWithMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
        public function getFilterCondition($value, $operator, $params = [ ]) {}
        public function getFilterConditionExt($value, $operator, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function isEmpty($data) {}
        public function isFilterable() : bool {}
        /**
         * @return null|int
         */
        protected function doGetDefaultValue() {}
    }

    class Languagemultiselect extends \pimcore\model\dataobject\classdefinition\data\multiselect {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var bool
         */
        public $onlySystemLanguages;

        public function configureOptions() {}
        /**
         * @return bool
         */
        public function getOnlySystemLanguages() {}
        public function setOnlySystemLanguages($value) {}
        public static function __set_state($data) {}
    }

    class Geopoint extends \pimcore\model\dataobject\classdefinition\data\geo\abstractgeo implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\classdefinition\data\extension\columntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function marshal($value, $object = null, $params = [ ]) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
    }

    /**
     * @deprecated use \Pimcore\Model\DataObject\ClassDefinition\Data\ManyToOneRelation instead
     */
    class Href extends \pimcore\model\dataobject\classdefinition\data\manytoonerelation {}

    class Firstname extends \pimcore\model\dataobject\classdefinition\data\input {
    use \pimcore\model\dataobject\traits\simplecomparisontrait;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;

    }

    class Table extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype, \pimcore\model\dataobject\classdefinition\data\extension\columntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var int
         */
        public $width;
        /**
         * @var int
         */
        public $height;
        /**
         * @var int
         */
        public $cols;
        /**
         * @var bool
         */
        public $colsFixed;
        /**
         * @var int
         */
        public $rows;
        /**
         * @var bool
         */
        public $rowsFixed;
        /**
         * Default data
         *
         * @var int
         */
        public $data;
        /**
         * @var bool
         */
        public $columnConfigActivated;
        /**
         * @var array
         */
        public $columnConfig;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        /**
         * @return int
         */
        public function getHeight() {}
        public function setHeight($height) {}
        /**
         * @return int
         */
        public function getCols() {}
        public function setCols($cols) {}
        /**
         * @return int
         */
        public function getRows() {}
        public function setRows($rows) {}
        /**
         * @return bool
         */
        public function getRowsFixed() {}
        public function setRowsFixed($rowsFixed) {}
        /**
         * @return bool
         */
        public function getColsFixed() {}
        public function setColsFixed($colsFixed) {}
        /**
         * @return int
         */
        public function getData() {}
        public function setData($data) {}
        /**
         * @return bool
         */
        public function isColumnConfigActivated() : bool {}
        public function setColumnConfigActivated(bool $columnConfigActivated) : void {}
        /**
         * @return array
         */
        public function getColumnConfig() : array {}
        public function setColumnConfig(array $columnConfig) : void {}
        protected function convertDataToValueArray(array $data) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffVersionPreview($data, $object = null, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        public function synchronizeWithMasterDefinition(DataObject\ClassDefinition\Data $masterDefinition) {}
    }

    class Geopolygon extends \pimcore\model\dataobject\classdefinition\data\geo\abstractgeo implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\columntype, \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffVersionPreview($data, $object = null, $params = [ ]) {}
/** @var DataObject\Data\Geopoint $point */
        public function marshal(/** @var DataObject\Data\Geopoint $point */
$value, /** @var DataObject\Data\Geopoint $point */
$object = null, /** @var DataObject\Data\Geopoint $point */
$params = [ ]) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
    }

    class NewsletterConfirmed extends \pimcore\model\dataobject\classdefinition\data\checkbox {
    use \pimcore\model\dataobject\traits\simplecomparisontrait;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;

    }

    class Image extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\columntype, \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var int
         */
        public $width;
        /**
         * Type for the column to query
         *
         * @var int
         */
        public $height;
        /**
         * @var string
         */
        public $uploadPath;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        /**
         * @return int
         */
        public function getWidth() {}
        public function setWidth($width) {}
        /**
         * @return int
         */
        public function getHeight() {}
        public function setHeight($height) {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromGridEditor($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function getCacheTags($data, $tags = [ ]) {}
        public function resolveDependencies($data) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        public function setUploadPath($uploadPath) {}
        /**
         * @return string
         */
        public function getUploadPath() {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getDiffVersionPreview($data, $object = null, $params = [ ]) {}
        public function rewriteIds($object, $idMapping, $params = [ ]) {}
        public function synchronizeWithMasterDefinition(Model\DataObject\ClassDefinition\Data $masterDefinition) {}
        public function marshal($value, $object = null, $params = [ ]) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
        public function isFilterable() : bool {}
    }

    class Geobounds extends \pimcore\model\dataobject\classdefinition\data\geo\abstractgeo implements \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\columntype, \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Type for the column to query
         *
         * @var array
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var array
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;

        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function marshal($value, $object = null, $params = [ ]) {}
        public function unmarshal($value, $object = null, $params = [ ]) {}
    }

    class ReverseManyToManyObjectRelation extends \pimcore\model\dataobject\classdefinition\data\manytomanyobjectrelation {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * @var bool
         */
        static public $remoteOwner;
        /**
         * @var string
         */
        public $ownerClassName;
        /**
         * @var number
         */
        public $ownerClassId;
        /**
         * @var string
         */
        public $ownerFieldName;
        /**
         * NonOwnerObjects must be lazy loading!
         *
         * @var bool
         */
        public $lazyLoading;

        /**
         * @return bool
         */
        public function isRemoteOwner() {}
        public function setClasses($classes) {}
        /**
         * @return bool
         */
        public function getLazyLoading() {}
        public function setLazyLoading($lazyLoading) {}
        public function setOwnerClassName($ownerClassName) {}
        /**
         * @return string
         */
        public function getOwnerClassName() {}
        /**
         * @return number
         */
        public function getOwnerClassId() {}
        /**
         * @return string
         */
        public function getOwnerFieldName() {}
        public function setOwnerFieldName($fieldName) {}
        protected function allowObjectRelation($object) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getCacheTags($data, $tags = [ ]) {}
        public function resolveDependencies($data) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        /**
         * @return bool
         */
        public function isOptimizedAdminLoading() : bool {}
    }

    class Classificationstore extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\customresourcepersistinginterface {
    use \pimcore\model\element\childscompatibilitytrait;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        /**
         * @var array
         */
        public $childs;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $region;
        /**
         * @var string
         */
        public $layout;
        /**
         * @var string
         */
        public $title;
        /**
         * @var int
         */
        public $width;
        /**
         * @var int
         */
        public $height;
        /**
         * @var int
         */
        public $maxTabs;
        /**
         * @var int
         */
        public $labelWidth;
        /** @var bool */
        public $localized;
        /**
         * @var int
         */
        public $storeId;
        /**
         * @var bool
         */
        public $hideEmptyData;
        /**
         * @var bool
         */
        public $disallowAddRemove;
        /**
         * contains further localized field definitions if there are more than one localized fields in on class
         *
         * @var array
         */
        protected $referencedFields;
        /**
         * @var array
         */
        public $fieldDefinitionsCache;
        /**
         * @var array
         */
        public $allowedGroupIds;
        /**
         * @var array
         */
        public $activeGroupDefinitions;

        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        private function doGetDataForEditMode($data, $object, $fieldData, $metaData, $level = 1) {}
        public function getDataFromEditmode($containerData, $object = null, $params = [ ]) {}
        public function getDataForGrid($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
/** @var DataObject\Classificationstore $data */
        private function doGetForWebserviceExport(/** @var DataObject\Classificationstore $data */
$object, /** @var DataObject\Classificationstore $data */
$params = [ ], /** @var DataObject\Classificationstore $data */
$result = [ ], /** @var DataObject\Classificationstore $data */
$level = 0) {}
        public function getFromWebserviceImport($value, $object = null, $params = [ ], $idMapper = null) {}
        /**
         * @return array
         */
        public function getChildren() {}
        public function setChildren($children) {}
        /**
         * @return bool
         */
        public function hasChildren() {}
        public function addChild($child) {}
        public function setReferencedFields($referencedFields) {}
        /**
         * @return array
         */
        public function getReferencedFields() {}
        public function addReferencedField($field) {}
        public function setValues($data = [ ], $blockedKeys = [ ]) {}
        public function save($object, $params = [ ]) {}
        public function load($object, $params = [ ]) {}
        public function delete($object, $params = [ ]) {}
        public function classSaved($class, $params = [ ]) {}
        public function preGetData($object, $params = [ ]) {}
        public function getGetterCode($class) {}
        public function getSetterCode($class) {}
/** @var DataObject\Classificationstore\KeyConfig $keyConfig */
        public function getKeyConfiguration(/** @var DataObject\Classificationstore\KeyConfig $keyConfig */
$keyId) {}
        public function setHeight($height) {}
        /**
         * @return int
         */
        public function getHeight() {}
        public function setLayout($layout) {}
        /**
         * @return string
         */
        public function getLayout() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setRegion($region) {}
        /**
         * @return string
         */
        public function getRegion() {}
        public function setTitle($title) {}
        /**
         * @return string
         */
        public function getTitle() {}
        public function setWidth($width) {}
        /**
         * @return int
         */
        public function getWidth() {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getDiffDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDiffDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        /**
         * @return array
         */
        public function __sleep() {}
        public function setMaxTabs($maxTabs) {}
        /**
         * @return int
         */
        public function getMaxTabs() {}
        public function setLabelWidth($labelWidth) {}
        /**
         * @return int
         */
        public function getLabelWidth() {}
        /**
         * @return bool
         */
        public function isLocalized() {}
        public function setLocalized($localized) {}
/** @var DataObject\Classificationstore $classificationStore */
        public function recursiveGetActiveGroupCollectionMapping(/** @var DataObject\Classificationstore $classificationStore */
$object, /** @var DataObject\Classificationstore $classificationStore */
$mergedMapping = [ ]) {}
/** @var DataObject\Classificationstore $classificationStore */
        public function recursiveGetActiveGroupsIds(/** @var DataObject\Classificationstore $classificationStore */
$object, /** @var DataObject\Classificationstore $classificationStore */
$activeGroups = [ ]) {}
        public function enrichLayoutDefinition($object, $context = [ ]) {}
        /**
         * @return array
         */
        public function getAllowedGroupIds() {}
        public function setAllowedGroupIds($allowedGroupIds) {}
        /**
         * @return int
         */
        public function getStoreId() {}
        public function setStoreId($storeId) {}
        /**
         * @return string[]
         */
        public function getValidLanguages() {}
        /**
         * @return bool
         */
        public function getHideEmptyData() {}
        public function setHideEmptyData($hideEmptyData) {}
        /**
         * @return bool
         */
        public function isDisallowAddRemove() {}
        public function setDisallowAddRemove($disallowAddRemove) {}
    }

    class Gender extends \pimcore\model\dataobject\classdefinition\data\select {
    use \pimcore\model\dataobject\traits\simplecomparisontrait;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;

        /**
         * Gender constructor.
         */
        public function __construct() {}
    }

    /**
     * @deprecated use \Pimcore\Model\DataObject\ClassDefinition\Data\ReverseManyToManyObjectRelation instead
     */
    class Nonownerobjects extends \pimcore\model\dataobject\classdefinition\data\reversemanytomanyobjectrelation {}


    interface OptimizedAdminLoadingInterface {
        /**
         * e.g. load relations directly from relations table and if necessary additional data
         * (like object attributes or meta data) asynchronously when the UI is ready
         *
         * @return bool
         */
        function isOptimizedAdminLoading() : bool ;
    }

    interface CustomResourcePersistingInterface {
        function save($object, $params = [ ]) ;
        function load($object, $params = [ ]) ;
        function delete($object, $params = [ ]) ;
    }

    interface DataInterface {
        function getForCsvExport($object, $params = [ ]) ;
        function getFromCsvImport($importValue, $object = null, $params = [ ]) ;
    }

    interface CustomVersionMarshalInterface {
        function marshalVersion($object, $data) ;
        function unmarshalVersion($object, $data) ;
    }

    interface QueryResourcePersistenceAwareInterface {
        function getDataForQueryResource($data, $object = null, $params = [ ]) ;
        /**
         * @return string|array
         */
        function getQueryColumnType() ;
    }

    interface CustomRecyclingMarshalInterface {
        function marshalRecycleData($object, $data) ;
        function unmarshalRecycleData($object, $data) ;
    }

    interface ResourcePersistenceAwareInterface {
        function getDataForResource($data, $object = null, $params = [ ]) ;
        function getDataFromResource($data, $object = null, $params = [ ]) ;
        /**
         * @return string|array
         */
        function getColumnType() ;
    }

}

namespace Pimcore\Model\DataObject\ClassDefinition\Data\Extension {
    /**
     * Class Relation
     *
     * @package Pimcore\Model\DataObject\ClassDefinition\Data\Extension
     *
     * @method bool getDocumentsAllowed()
     * @method bool getAssetsAllowed()
     * @method bool getObjectsAllowed()
     * @method string[] getDocumentTypes()
     * @method string[] getAssetTypes()
     * @method string[] getClasses()
     */
    trait Relation {
        protected function getPhpDocClassString($asArray = false) {}
    }

    trait QueryColumnType {
        /**
         * @return string | array
         */
        public function getQueryColumnType() {}
        public function setQueryColumnType($queryColumnType) {}
    }

    trait Text {
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function isEmpty($data) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
    }

    trait ColumnType {
        /**
         * @return string | array
         */
        public function getColumnType() {}
        public function setColumnType($columnType) {}
    }

}

namespace Pimcore\Model\DataObject\ClassDefinition\Data\Relations {
    abstract class AbstractRelations extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\pathformatterawareinterface, \pimcore\model\dataobject\classdefinition\data\customresourcepersistinginterface {
        const RELATION_ID_SEPARATOR = '$$';

        /**
         * @var bool
         */
        static public $remoteOwner;
        /**
         * @var bool
         */
        public $lazyLoading;
        /**
         * Set of allowed classes
         *
         * @var array
         */
        public $classes;
        /** Optional path formatter class
         * @var null|string
         */
        public $pathFormatterClass;

        /**
         * @return array
         */
        public function getClasses() {}
        public function setClasses($classes) {}
        /**
         * @return bool
         */
        public function getLazyLoading() {}
        public function setLazyLoading($lazyLoading) {}
        /**
         * @return bool
         */
        public function isRemoteOwner() {}
        protected function enrichRelation($object, $params, $classId, $relation = [ ]) {}
        public function save($object, $params = [ ]) {}
        public function load($object, $params = [ ]) {}
        abstract public function loadData($data, $object = null, $params = [ ]) ;
        abstract public function prepareDataForPersistence($data, $object = null, $params = [ ]) ;
        public function delete($object, $params = [ ]) {}
        public function rewriteIdsService($data, $idMapping) {}
        /**
         * @return null|string
         */
        public function getPathFormatterClass() : ?string {}
        public function setPathFormatterClass($pathFormatterClass) {}
        public function getDataForSearchIndex($object, $params = [ ]) {}
/** @var Element\ElementInterface $item */
        public function appendData(/** @var Element\ElementInterface $item */
$existingData, /** @var Element\ElementInterface $item */
$additionalData) {}
/** @var Element\ElementInterface $item */
        public function removeData(/** @var Element\ElementInterface $item */
$existingData, /** @var Element\ElementInterface $item */
$removeData) {}
        protected function buildUniqueKeyForAppending($item) {}
/** @var Element\ElementInterface $el2 */
        public function isEqual(/** @var Element\ElementInterface $el2 */
$array1, /** @var Element\ElementInterface $el2 */
$array2) {}
        /**
         * @return bool
         */
        public function supportsDirtyDetection() {}
/** @var DataObject\Fieldcollection $container */
        public function loadLazyFieldcollectionField(/** @var DataObject\Fieldcollection $container */
DataObject\Fieldcollection\Data\AbstractData $item) {}
/** @var DataObject\Objectbrick $container */
        public function loadLazyBrickField(/** @var DataObject\Objectbrick $container */
DataObject\Objectbrick\Data\AbstractData $item) {}
    }


    trait AllowAssetRelationTrait {
        protected function allowAssetRelation($asset) {}
    }

    trait AllowDocumentRelationTrait {
        protected function allowDocumentRelation($document) {}
    }

    trait AllowObjectRelationTrait {
        protected function allowObjectRelation($object) {}
    }

}

namespace Pimcore\Model\DataObject\ClassDefinition\Data\Geo {
    abstract class AbstractGeo extends \pimcore\model\dataobject\classdefinition\data {
        /**
         * @var float
         */
        public $lat;
        /**
         * @var float
         */
        public $lng;
        /**
         * @var int
         */
        public $zoom;
        /**
         * @var string
         */
        public $mapType;

        /**
         * @return float
         */
        public function getLat() {}
        public function setLat($lat) {}
        /**
         * @return float
         */
        public function getLng() {}
        public function setLng($lng) {}
        /**
         * @return int
         */
        public function getZoom() {}
        public function setZoom($zoom) {}
        public function marshalBeforeEncryption($value, $object = null, $params = [ ]) {}
        public function unmarshalAfterDecryption($value, $object = null, $params = [ ]) {}
    }

}

namespace Pimcore\Model\DataObject\ClassDefinition\Helper {
    class OptionsProviderResolver extends \pimcore\model\dataobject\classdefinition\helper\classresolver {
        const MODE_MULTISELECT = 2;
        const MODE_SELECT = 1;

        static public $providerCache;

        public static function resolveProvider($providerClass, $mode) {}
    }

    class LinkGeneratorResolver extends \pimcore\model\dataobject\classdefinition\helper\classresolver {
        public static function resolveGenerator($generatorClass) {}
    }

    class PathFormatterResolver extends \pimcore\model\dataobject\classdefinition\helper\classresolver {
        static public $formatterCache;

        public static function resolvePathFormatter($formatterClass) : ?PathFormatterInterface {}
    }

    class CalculatorClassResolver extends \pimcore\model\dataobject\classdefinition\helper\classresolver {
        public static function resolveCalculatorClass($calculatorClass) {}
    }

    class ClassResolver {
        static private $cache;

        protected static function resolve($class, callable $validationCallback = null) {}
        private static function returnValidServiceOrNull($service, callable $validationCallback = null) {}
    }


    trait VarExport {
        public static function __set_state($data) {}
    }

    trait Dao {
        protected function addIndexToField($field, $table, $columnTypeGetter = 'getColumnType', $considerUniqueIndex = false, $isLocalized = false, $isFieldcollection = false) {}
        protected function addModifyColumn($table, $colName, $type, $default, $null) {}
        protected function removeUnusedColumns($table, $columnsToRemove, $protectedColumns) {}
        protected function handleEncryption(DataObject\ClassDefinition $classDefinition, array $tables) {}
        protected function encryptTables(array $tables) {}
        protected function decryptTables(DataObject\ClassDefinition $classDefinition, array $tables) {}
    }

}

namespace Pimcore\Model\DataObject\ClassDefinition\DynamicOptionsProvider {
    interface MultiSelectOptionsProviderInterface {
        function getOptions($context, $fieldDefinition) ;
        function hasStaticOptions($context, $fieldDefinition) ;
    }

    interface SelectOptionsProviderInterface extends \pimcore\model\dataobject\classdefinition\dynamicoptionsprovider\multiselectoptionsproviderinterface {
        function getDefaultValue($context, $fieldDefinition) ;
    }

}

namespace Pimcore\Model\DataObject\Listing {
    /**
     * @property \Pimcore\Model\DataObject\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * @var \Closure
         */
        protected $onCreateQueryCallback;

        /**
         * @return string
         */
        public function getTableName() {}
        /**
         * get select query
         *
         * @return QueryBuilder
         *
         * @throws \Exception
         */
        public function getQuery() {}
        /**
         * Loads a list of objects for the specicifies parameters, returns an array of DataObject\AbstractObject elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
        private function isQueryPartinUse($query, $part) {}
        /**
         * @return int
         */
        public function getCount() {}
        /**
         * Loads a list of document ids for the specicifies parameters, returns an array of ids
         *
         * @return int[]
         */
        public function loadIdList() {}
        protected function addJoins(QueryBuilder $select) {}
        protected function addConditions(QueryBuilder $select) {}
        public function onCreateQuery(callable $callback) {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Listing\Concrete\Dao getDao()
     * @method Model\Webservice\Data\DataObject\Concrete[] load()
     * @method Model\Webservice\Data\DataObject\Concrete current()
     */
    abstract class Concrete extends \pimcore\model\dataobject\listing {
        /**
         * @var string
         */
        protected $classId;
        /**
         * @var string
         */
        protected $className;
        /**
         * @var string
         */
        protected $locale;
        /**
         * do not use the localized views for this list (in the case the class contains localized fields),
         * conditions on localized fields are not possible
         *
         * @var bool
         */
        public $ignoreLocalizedFields;
        /**
         * field collection queries
         *
         * @var array
         */
        private $fieldCollectionConfigs;
        /**
         * object brick queries
         *
         * @var array
         */
        private $objectBrickConfigs;

        /**
         * @throws \Exception
         */
        public function __construct() {}
        /**
         * @return string
         */
        public function getClassId() {}
        /**
         * @return string
         */
        public function getClassName() {}
        public function setClassId($classId) {}
        public function setClassName($className) {}
        /**
         * @return DataObject\ClassDefinition
         */
        public function getClass() {}
        public function setLocale($locale) {}
        /**
         * @return string
         */
        public function getLocale() {}
        public function setIgnoreLocalizedFields($ignoreLocalizedFields) {}
        /**
         * @return bool
         */
        public function getIgnoreLocalizedFields() {}
        public function addFieldCollection($type, $fieldname = null) {}
        public function setFieldCollections($fieldCollections) {}
        /**
         * @return array
         */
        public function getFieldCollections() {}
        public function addObjectbrick($type) {}
        public function setObjectbricks($objectbricks) {}
        /**
         * @return array
         */
        public function getObjectbricks() {}
        /**
         * @return bool
         */
        public function addDistinct() {}
    }

}

namespace Pimcore\Model\DataObject\Listing\Concrete {
    /**
     * @property \Pimcore\Model\DataObject\Listing\Concrete $model
     */
    class Dao extends \pimcore\model\dataobject\listing\dao {
        /**
         * @var bool
         */
        protected $firstException;
        /**
         * @var string
         */
        private $tableName;
        /**
         * @var int
         */
        protected $totalCount;
        /**
         * @var \Closure
         */
        protected $onCreateQueryCallback;

        public function getQuery($forceNew = false) {}
        /**
         * @return int[]
         *
         * @throws \Exception
         */
        public function loadIdList() {}
        protected function exceptionHandler($e) {}
        /**
         * @return string
         *
         * @throws \Exception
         */
        public function getLocalizedBrickLanguage() {}
        /**
         * @return string
         *
         * @throws \Exception
         */
        public function getTableName() {}
        protected function getSelectPart($defaultString = '', $column = 'oo_id') {}
        protected function addJoins(QueryBuilder $select) {}
        public function onCreateQuery(callable $callback) {}
    }

}

namespace Pimcore\Model\DataObject\Classificationstore {
    /**
     * @property \Pimcore\Model\DataObject\Classificationstore $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
    use \pimcore\model\dataobject\classdefinition\helper\dao;

        /**
         * @var array|null
         */
        protected $tableDefinitions;

        /**
         * @return string
         */
        public function getDataTableName() {}
        /**
         * @return string
         */
        public function getGroupsTableName() {}
        public function save() {}
        public function delete() {}
        /** @var DataObject\Classificationstore $classificationStore */
        public function load() {}
        public function createUpdateTable() {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Classificationstore\StoreConfig\Dao getDao()
     */
    class StoreConfig extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * The store name.
         *
         * @var string
         */
        public $name;
        /**
         * The store description.
         *
         * @var string
         */
        public $description;

        public static function getById($id) {}
        public static function getByName($name) {}
        /**
         * @return Model\DataObject\Classificationstore\StoreConfig
         */
        public static function create() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getName() {}
        /**
         * Returns the description.
         *
         * @return string
         */
        public function getDescription() {}
        public function setDescription($description) {}
        /**
         * Deletes the key value group configuration
         */
        public function delete() {}
        /**
         * Saves the store config
         */
        public function save() {}
        /**
         * @return int
         */
        public function getId() {}
        public function setId($id) {}
    }

    class Service {
        public static function getFieldDefinitionFromKeyConfig($keyConfig) {}
/** @var \Pimcore\Model\DataObject\ClassDefinition\Data $dataDefinition */
        public static function getFieldDefinitionFromJson(/** @var \Pimcore\Model\DataObject\ClassDefinition\Data $dataDefinition */
$definition, /** @var \Pimcore\Model\DataObject\ClassDefinition\Data $dataDefinition */
$type) {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Classificationstore\CollectionConfig\Dao getDao()
     */
    class CollectionConfig extends \pimcore\model\abstractmodel {
        /** Group id.
         * @var int
         */
        public $id;
        /**
         * Store ID
         *
         * @var int
         */
        public $storeId;
        /** The collection name.
         * @var string
         */
        public $name;
        /**
         * The collection description.
         *
         * @var string
         */
        public $description;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;

        public static function getById($id) {}
        public static function getByName($name, $storeId = 1) {}
        /**
         * @return Model\DataObject\Classificationstore\CollectionConfig
         */
        public static function create() {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getName() {}
        /**
         * Returns the description.
         *
         * @return string
         */
        public function getDescription() {}
        public function setDescription($description) {}
        /**
         * Deletes the key value group configuration
         */
        public function delete() {}
        /**
         * Saves the collection config
         */
        public function save() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        /**
         * @return int
         */
        public function getStoreId() {}
        public function setStoreId($storeId) {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Classificationstore\KeyConfig\Dao getDao()
     */
    class KeyConfig extends \pimcore\model\abstractmodel {
        /**
         * @var array
         */
        static public $cache;
        /**
         * @var bool
         */
        static public $cacheEnabled;
        /**
         * @var int
         */
        public $id;
        /**
         * Store ID
         *
         * @var int
         */
        public $storeId;
        /** The key
         * @var string
         */
        public $name;
        /** Pseudo column for title
         * @var string
         */
        public $title;
        /**
         * The key description.
         *
         * @var string
         */
        public $description;
        /**
         * The key type ("text", "number", etc...)
         *
         * @var string
         */
        public $type;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var string
         */
        public $definition;
        /** @var bool */
        public $enabled;

        public static function getById($id) {}
        public static function setCacheEnabled($cacheEnabled) {}
        /**
         * @return bool
         */
        public static function getCacheEnabled() {}
        public static function getByName($name, $storeId = 1) {}
        /**
         * @return Model\DataObject\Classificationstore\KeyConfig
         */
        public static function create() {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getName() {}
        /**
         * Returns the key description.
         *
         * @return string
         */
        public function getDescription() {}
        public function setDescription($description) {}
        /**
         * Deletes the key value key configuration
         */
        public function delete() {}
        /**
         * Saves the key config
         */
        public function save() {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return string
         */
        public function getType() {}
        public function setType($type) {}
        /**
         * @return string
         */
        public function getDefinition() {}
        public function setDefinition($definition) {}
        /**
         * @return bool
         */
        public function getEnabled() {}
        public function setEnabled($enabled) {}
        /**
         * @return string
         */
        public function getTitle() {}
        public function setTitle($title) {}
        /**
         * @return int
         */
        public function getStoreId() {}
        public function setStoreId($storeId) {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Classificationstore\GroupConfig\Dao getDao()
     */
    class GroupConfig extends \pimcore\model\abstractmodel {
    use \pimcore\model\element\childscompatibilitytrait;

        /** Group id.
         * @var int
         */
        public $id;
        /**
         * Store ID
         *
         * @var int
         */
        public $storeId;
        /** Parent id
         * @var int
         */
        public $parentId;
        /** The group name.
         * @var string
         */
        public $name;
        /**
         * The group description.
         *
         * @var string
         */
        public $description;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;

        public static function getById($id) {}
        public static function getByName($name, $storeId = 1) {}
        /**
         * @return int
         */
        public function hasChildren() {}
        /**
         * @return Model\DataObject\Classificationstore\GroupConfig
         */
        public static function create() {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getId() {}
        /**
         * @return int
         */
        public function getParentId() {}
        public function setParentId($parentId) {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getName() {}
        /**
         * Returns the description.
         *
         * @return string
         */
        public function getDescription() {}
        public function setDescription($description) {}
        /**
         * Deletes the key value group configuration
         */
        public function delete() {}
        /**
         * Saves the group config
         */
        public function save() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        /**
         * Returns all keys belonging to this group
         *
         * @return KeyGroupRelation[]
         */
        public function getRelations() {}
        /**
         * @return int
         */
        public function getStoreId() {}
        public function setStoreId($storeId) {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Classificationstore\CollectionGroupRelation\Dao getDao()
     */
    class CollectionGroupRelation extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $colId;
        /**
         * @var int
         */
        public $groupId;
        /** The key
         * @var string
         */
        public $name;
        /**
         * The key description.
         *
         * @var string
         */
        public $description;
        /** @var int */
        public $sorter;

        /**
         * @return Model\DataObject\Classificationstore\CollectionGroupRelation
         */
        public static function create() {}
        /**
         * @return int
         */
        public function getGroupId() {}
        public function setGroupId($groupId) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setDescription($description) {}
        /**
         * @return int
         */
        public function getColId() {}
        public function setColId($colId) {}
        /**
         * @return int
         */
        public function getSorter() {}
        public function setSorter($sorter) {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Classificationstore\KeyGroupRelation\Dao getDao()
     */
    class KeyGroupRelation extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $keyId;
        /**
         * @var int
         */
        public $groupId;
        /** The key
         * @var string
         */
        public $name;
        /**
         * The key description.
         *
         * @var string
         */
        public $description;
        /**
         * Field definition
         *
         * @var string
         */
        public $definition;
        /**
         * Field type
         *
         * @var string
         */
        public $type;
        /** @var int */
        public $sorter;
        /** The group name
         * @var string
         */
        public $groupName;
        /** @var bool */
        public $mandatory;
        /** @var bool */
        public $enabled;

        /**
         * @return Model\DataObject\Classificationstore\KeyGroupRelation
         */
        public static function create() {}
        /**
         * @return int
         */
        public function getGroupId() {}
        public function setGroupId($groupId) {}
        /**
         * @return int
         */
        public function getKeyId() {}
        public function setKeyId($keyId) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setDescription($description) {}
        /**
         * @return string
         */
        public function getDefinition() {}
        public function setDefinition($definition) {}
        /**
         * @return string
         */
        public function getType() {}
        public function setType($type) {}
        /**
         * @return int
         */
        public function getSorter() {}
        public function setSorter($sorter) {}
        /**
         * @return bool
         */
        public function isMandatory() {}
        public function setMandatory($mandatory) {}
        /**
         * @return bool
         */
        public function isEnabled() {}
        public function setEnabled($enabled) {}
        public static function getByGroupAndKeyId($groupId, $keyId) {}
    }

    class DefinitionCache {
        /**
         * @var array
         */
        static public $cache;

        public static function get($id, $type = 'key') {}
        public static function put($config) {}
        public static function clear($config) {}
        protected static function getType($config) {}
    }

}

namespace Pimcore\Model\DataObject\Classificationstore\KeyGroupRelation {
    /**
     * @property \Pimcore\Model\DataObject\Classificationstore\KeyGroupRelation $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        const TABLE_NAME_RELATIONS = 'classificationstore_relations';

        public function getById($keyId = null, $groupId = null) {}
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
        public function update() {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Classificationstore\KeyGroupRelation\Listing\Dao getDao()
     * @method Model\DataObject\Classificationstore\KeyGroupRelation[] load()
     * @method Model\DataObject\Classificationstore\KeyGroupRelation current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\DataObject\Classificationstore\KeyGroupRelation[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $list;
        /** @var bool */
        public $resolveGroupName;

        public function __construct() {}
        /**
         * @return Model\DataObject\Classificationstore\KeyGroupRelation[]
         */
        public function getList() {}
        public function setList($theList) {}
        /**
         * @return bool
         */
        public function getResolveGroupName() {}
        public function setResolveGroupName($resolveGroupName) {}
    }

}

namespace Pimcore\Model\DataObject\Classificationstore\KeyGroupRelation\Listing {
    /**
     * @property \Pimcore\Model\DataObject\Classificationstore\KeyGroupRelation\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of Classificationstore group configs for the specified parameters, returns an array of config elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return array
         */
        public function getDataArray() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\DataObject\Classificationstore\CollectionGroupRelation {
    /**
     * @property \Pimcore\Model\DataObject\Classificationstore\CollectionGroupRelation $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        const TABLE_NAME_RELATIONS = 'classificationstore_collectionrelations';

        public function getById($colId = null, $groupId = null) {}
        /**
         * @return void
         *
         * @throws \Exception
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
        /**
         * @throws \Exception
         */
        public function update() {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Classificationstore\CollectionGroupRelation\Listing\Dao getDao()
     * @method Model\DataObject\Classificationstore\CollectionGroupRelation[] load()
     * @method Model\DataObject\Classificationstore\CollectionGroupRelation current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\DataObject\Classificationstore\CollectionGroupRelation[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $list;

        public function __construct() {}
        /**
         * @return Model\DataObject\Classificationstore\CollectionGroupRelation[]
         */
        public function getList() {}
        public function setList($theList) {}
    }

}

namespace Pimcore\Model\DataObject\Classificationstore\CollectionGroupRelation\Listing {
    /**
     * @property \Pimcore\Model\DataObject\Classificationstore\CollectionGroupRelation\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of Classificationstore group configs for the specified parameters, returns an array of config elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return array
         */
        public function getDataArray() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\DataObject\Classificationstore\CollectionConfig {
    /**
     * @property \Pimcore\Model\DataObject\Classificationstore\CollectionConfig $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        const TABLE_NAME_COLLECTIONS = 'classificationstore_collections';

        public function getById($id = null) {}
        public function getByName($name = null) {}
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
        /**
         * @throws \Exception
         */
        public function update() {}
        public function create() {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Classificationstore\CollectionConfig\Listing\Dao getDao()
     * @method Model\DataObject\Classificationstore\CollectionConfig[] load()
     * @method Model\DataObject\Classificationstore\CollectionConfig current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\DataObject\Classificationstore\CollectionConfig[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $list;

        public function __construct() {}
        /**
         * @return Model\DataObject\Classificationstore\CollectionConfig[]
         */
        public function getList() {}
        public function setList($theList) {}
    }

}

namespace Pimcore\Model\DataObject\Classificationstore\CollectionConfig\Listing {
    /**
     * @property \Pimcore\Model\DataObject\Classificationstore\CollectionConfig\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of Classificationstore collection configs for the specified parameters, returns an array of config elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return array
         */
        public function getDataArray() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\DataObject\Classificationstore\KeyConfig {
    /**
     * @property \Pimcore\Model\DataObject\Classificationstore\KeyConfig $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        const TABLE_NAME_KEYS = 'classificationstore_keys';

        public function getById($id = null) {}
        public function getByName($name = null) {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
        /**
         * @throws \Exception
         */
        public function update() {}
        public function create() {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Classificationstore\KeyConfig\Listing\Dao getDao()
     * @method Model\DataObject\Classificationstore\KeyConfig[] load()
     * @method Model\DataObject\Classificationstore\KeyConfig current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\DataObject\Classificationstore\KeyConfig[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $list;
        /** @var bool */
        public $includeDisabled;

        public function __construct() {}
        /**
         * @return Model\DataObject\Classificationstore\KeyConfig[]
         */
        public function getList() {}
        public function setList($theList) {}
        /**
         * @return bool
         */
        public function getIncludeDisabled() {}
        public function setIncludeDisabled($includeDisabled) {}
    }

}

namespace Pimcore\Model\DataObject\Classificationstore\KeyConfig\Listing {
    /**
     * @property \Pimcore\Model\DataObject\Classificationstore\KeyConfig\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of Classificationstore key configs for the specified parameters, returns an array of config elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return array
         */
        public function getDataArray() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
        /**
         * @return string
         */
        protected function getCondition() {}
    }

}

namespace Pimcore\Model\DataObject\Classificationstore\GroupConfig {
    /**
     * @property \Pimcore\Model\DataObject\Classificationstore\GroupConfig $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
    use \pimcore\model\element\childscompatibilitytrait;

        const TABLE_NAME_GROUPS = 'classificationstore_groups';

        public function getById($id = null) {}
        public function getByName($name = null) {}
        /**
         * @return int
         *
         * @todo: $amount could not be defined, so this could cause an issue
         */
        public function hasChildren() {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
        /**
         * @throws \Exception
         */
        public function update() {}
        public function create() {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Classificationstore\GroupConfig\Listing\Dao getDao()
     * @method Model\DataObject\Classificationstore\GroupConfig[] load()
     * @method Model\DataObject\Classificationstore\GroupConfig current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\DataObject\Classificationstore\GroupConfig[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $list;

        public function __construct() {}
        /**
         * @return Model\DataObject\Classificationstore\GroupConfig[]
         */
        public function getList() {}
        public function setList($theList) {}
    }

}

namespace Pimcore\Model\DataObject\Classificationstore\GroupConfig\Listing {
    /**
     * @property \Pimcore\Model\DataObject\Classificationstore\GroupConfig\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of Classificationstore group configs for the specified parameters, returns an array of config elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return array
         */
        public function getDataArray() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\DataObject\Classificationstore\StoreConfig {
    /**
     * @property \Pimcore\Model\DataObject\Classificationstore\StoreConfig $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        const TABLE_NAME_STORES = 'classificationstore_stores';

        public function getById($id = null) {}
        public function getByName($name = null) {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
        /**
         * @throws \Exception
         */
        public function update() {}
        public function create() {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Classificationstore\StoreConfig\Listing\Dao getDao()
     * @method Model\DataObject\Classificationstore\StoreConfig[] load()
     * @method Model\DataObject\Classificationstore\StoreConfig current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\DataObject\Classificationstore\StoreConfig[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $list;

        public function __construct() {}
        /**
         * @return Model\DataObject\Classificationstore\StoreConfig[]
         */
        public function getList() {}
        public function setList($theList) {}
    }

}

namespace Pimcore\Model\DataObject\Classificationstore\StoreConfig\Listing {
    /**
     * @property \Pimcore\Model\DataObject\Classificationstore\StoreConfig\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of Classificationstore store configs for the specified parameters, returns an array of config elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return array
         */
        public function getDataArray() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\DataObject\Objectbrick {
    /**
     * @property \Pimcore\Model\DataObject\Objectbrick $model
     */
    class Dao extends \pimcore\model\dataobject\fieldcollection\dao {
        public function load(DataObject\Concrete $object, $params = [ ]) {}
        public function delete(DataObject\Concrete $object, $saveMode = false) {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Objectbrick\Definition\Dao getDao()
     */
    class Definition extends \pimcore\model\dataobject\fieldcollection\definition {
    use \pimcore\model\dataobject\classdefinition\helper\varexport;

        /**
         * @var array
         */
        public $classDefinitions;
        /**
         * @var array
         */
        private $oldClassDefinitions;
        /**
         * @var string
         */
        public $title;
        /**
         * @var string
         */
        public $group;

        public function setClassDefinitions($classDefinitions) {}
        /**
         * @return array
         */
        public function getClassDefinitions() {}
        public static function getByKey($key) {}
        /**
         * @throws \Exception
         */
        public function checkTablenames() {}
        public function save($saveDefinitionFile = true) {}
        protected function buildClassList($definitions) {}
        protected function getClassesToCleanup($oldObject) {}
        private function cleanupOldFiles($serializedFilename) {}
        /**
         * Update Database according to class-definition
         */
        private function updateDatabase() {}
        private function getAllowedTypesWithFieldname(DataObject\ClassDefinition $class) {}
        /**
         * @throws \Exception
         */
        private function createContainerClasses() {}
        private function getContainerClassName($classname, $fieldname) {}
        private function getContainerNamespace($classname, $fieldname) {}
        private function getContainerClassFolder($classname) {}
        /**
         * Delete Brick Definition
         */
        public function delete() {}
        protected function doEnrichFieldDefinition($fieldDefinition, $context = [ ]) {}
        /**
         * @return string
         */
        protected function getDefinitionFile() {}
        /**
         * @return string
         */
        protected function getPhpClassFile() {}
        /**
         * @return string
         */
        public function getTitle() {}
        public function setTitle($title) {}
    }

}

namespace Pimcore\Model\DataObject\Objectbrick\Definition {
    /**
     * @property \Pimcore\Model\DataObject\Objectbrick\Definition $model
     */
    class Dao extends \pimcore\model\dataobject\fieldcollection\definition\dao {
        public function getTableName(DataObject\ClassDefinition $class, $query = false) {}
        public function delete(DataObject\ClassDefinition $class) {}
        public function createUpdateTable(DataObject\ClassDefinition $class) {}
        public function classSaved(DataObject\ClassDefinition $classDefinition) {}
    }

    class Listing {
        /**
         * @return Definition[]
         */
        public function load() {}
    }

}

namespace Pimcore\Model\DataObject\Objectbrick\Data {
    /**
     * @property \Pimcore\Model\DataObject\Objectbrick\Data\AbstractData $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        /**
         * @var DataObject\Concrete\Dao\InheritanceHelper
         */
        protected $inheritanceHelper;

        public function save(DataObject\Concrete $object, $params = [ ]) {}
        public function delete(DataObject\Concrete $object) {}
        public function getRelationData($field, $forOwner, $remoteClassId) {}
    }

    /**
     * @method Dao getDao()
     */
    abstract class AbstractData extends \pimcore\model\abstractmodel implements \pimcore\model\dataobject\lazyloadedfieldsinterface, \pimcore\model\element\elementdumpstateinterface {
    use \pimcore\model\dataobject\traits\lazyloadedrelationtrait, \pimcore\model\element\elementdumpstatetrait;

        /**
         * Will be overriden by the actual ObjectBrick
         *
         * @var string
         */
        protected $type;
        /**
         * @var string
         */
        protected $fieldname;
        /**
         * @var bool
         */
        protected $doDelete;
        /**
         * @var Model\DataObject\Concrete
         */
        protected $object;
        /**
         * @var int
         */
        protected $objectId;

        public function __construct(DataObject\Concrete $object) {}
        /**
         * @return string
         */
        public function getFieldname() {}
        public function setFieldname($fieldname) {}
        /**
         * @return string
         */
        public function getType() {}
        /**
         * @return DataObject\Objectbrick\Definition
         */
        public function getDefinition() {}
        public function setDoDelete($doDelete) {}
        /**
         * @return bool
         */
        public function getDoDelete() {}
        /**
         * @return DataObject\Concrete
         */
        public function getBaseObject() {}
        public function delete($object) {}
        /**
         * Flushes the already collected items of the container object
         */
        protected function flushContainer() {}
        public function getValueFromParent($key) {}
        public function setObject($object) {}
        /**
         * @return DataObject\Concrete
         */
        public function getObject() {}
        public function getValueForFieldName($key) {}
        public function get($fieldName) {}
        public function set($fieldName, $value) {}
        /**
         * @inheritdoc
         */
        protected function getLazyLoadedFieldNames() : array {}
        /**
         * @inheritDoc
         */
        public function isAllLazyKeysMarkedAsLoaded() : bool {}
        /**
         * @return array
         */
        public function __sleep() {}
        public function __wakeup() {}
    }

}

namespace Pimcore\Model\DataObject\Data {
    class StructuredTable implements \pimcore\model\dataobject\ownerawarefieldinterface {
    use \pimcore\model\dataobject\traits\ownerawarefieldtrait;

        /**
         * @var array
         */
        protected $data;

        public function __construct($data = [ ]) {}
        public function setData($data) {}
        /**
         * @return array
         */
        public function getData() {}
        public function __call($name, $arguments) {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        /**
         * @return string
         */
        public function __toString() {}
        public function getHtmlTable($rowDefs, $colDefs) {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Data\ElementMetadata\Dao getDao()
     */
    class ElementMetadata extends \pimcore\model\abstractmodel implements \pimcore\model\dataobject\ownerawarefieldinterface {
    use \pimcore\model\dataobject\traits\ownerawarefieldtrait;

        /**
         * @var string
         */
        protected $elementType;
        /**
         * @var int
         */
        protected $elementId;
        /**
         * @var string
         */
        protected $fieldname;
        /**
         * @var array
         */
        protected $columns;
        /**
         * @var array
         */
        protected $data;

        public function __construct($fieldname, $columns = [ ], $element = null) {}
        public function setElementTypeAndId($elementType, $elementId) {}
        public function __call($name, $arguments) {}
        public function save($object, $ownertype = 'object', $ownername, $position, $index) {}
        public function load(DataObject\Concrete $source, $destinationId, $fieldname, $ownertype, $ownername, $position, $index, $destinationType) {}
        public function setFieldname($fieldname) {}
        /**
         * @return string
         */
        public function getFieldname() {}
        public function setElement($element) {}
        /**
         * @return Model\Element\ElementInterface|null
         */
        public function getElement() {}
        /**
         * @return string
         */
        public function getElementType() {}
        /**
         * @return int
         */
        public function getElementId() {}
        public function setColumns($columns) {}
        /**
         * @return array
         */
        public function getColumns() {}
        /**
         * @return array
         */
        public function getData() : array {}
        public function setData(array $data) : void {}
        /**
         * @return string
         */
        public function __toString() {}
    }

    class Link implements \pimcore\model\dataobject\ownerawarefieldinterface {
    use \pimcore\model\dataobject\traits\objectvartrait, \pimcore\model\dataobject\traits\ownerawarefieldtrait;

        /**
         * @var string
         */
        protected $text;
        /**
         * @var string
         */
        protected $internalType;
        /**
         * @var string
         */
        protected $internal;
        /**
         * @var string
         */
        protected $direct;
        /**
         * @var string
         */
        protected $linktype;
        /**
         * @var string
         */
        protected $target;
        /**
         * @var string
         */
        protected $parameters;
        /**
         * @var string
         */
        protected $anchor;
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $accesskey;
        /**
         * @var string
         */
        protected $rel;
        /**
         * @var string
         */
        protected $tabindex;
        /**
         * @var string
         */
        protected $class;
        /**
         * @var string
         */
        protected $attributes;

        /**
         * @return string
         */
        public function getText() {}
        public function setText($text) {}
        /**
         * @return string
         */
        public function getInternalType() {}
        public function setInternalType($internalType) {}
        /**
         * @return string
         */
        public function getInternal() {}
        public function setInternal($internal) {}
        /**
         * @return string
         */
        public function getDirect() {}
        public function setDirect($direct) {}
        /**
         * @return string
         */
        public function getLinktype() {}
        public function setLinktype($linktype) {}
        /**
         * @return string
         */
        public function getTarget() {}
        public function setTarget($target) {}
        /**
         * @return string
         */
        public function getParameters() {}
        public function setParameters($parameters) {}
        /**
         * @return string
         */
        public function getAnchor() {}
        public function setAnchor($anchor) {}
        /**
         * @return string
         */
        public function getTitle() {}
        public function setTitle($title) {}
        /**
         * @return string
         */
        public function getAccesskey() {}
        public function setAccesskey($accesskey) {}
        /**
         * @return string
         */
        public function getRel() {}
        public function setRel($rel) {}
        /**
         * @return string
         */
        public function getTabindex() {}
        public function setTabindex($tabindex) {}
        public function setAttributes($attributes) {}
        /**
         * @return string
         */
        public function getAttributes() {}
        public function setClass($class) {}
        /**
         * @return string
         */
        public function getClass() {}
        public function setPath($path) {}
        /**
         * @return string
         */
        public function getPath() {}
        /**
         * Returns the plain text path of the link
         *
         * @return string
         */
        public function getHref() {}
        /**
         * @return Document|Asset|DataObject|null
         */
        public function getObject() {}
        public function setObject($object) {}
        /**
         * @return string
         */
        public function getHtml() {}
        /**
         * @return bool
         */
        public function isEmpty() {}
        public function setValues($data = [ ]) {}
        /**
         * @return string
         */
        public function __toString() {}
    }

    class Hotspotimage implements \pimcore\model\dataobject\ownerawarefieldinterface {
    use \pimcore\model\dataobject\traits\ownerawarefieldtrait;

        /**
         * @var Asset\Image
         */
        protected $image;
        /**
         * @var array[]
         */
        protected $hotspots;
        /**
         * @var array[]
         */
        protected $marker;
        /**
         * @var array[]
         */
        protected $crop;

        public function __construct($image = null, $hotspots = [ ], $marker = [ ], $crop = [ ]) {}
        public function setHotspots($hotspots) {}
        /**
         * @return array|array[]
         */
        public function getHotspots() {}
        public function setMarker($marker) {}
        /**
         * @return array|array[]
         */
        public function getMarker() {}
        public function setCrop($crop) {}
        /**
         * @return array[]
         */
        public function getCrop() {}
        public function setImage($image) {}
        /**
         * @return Asset\Image
         */
        public function getImage() {}
        public function getThumbnail($thumbnailName = null, $deferred = true) {}
        /**
         * @return string
         */
        public function __toString() {}
    }

    class CalculatedValue implements \pimcore\model\dataobject\ownerawarefieldinterface {
    use \pimcore\model\dataobject\traits\ownerawarefieldtrait;

        /** @var string */
        protected $fieldname;
        /** @var string */
        protected $ownerType;
        /** @var string */
        protected $ownerName;
        /** @var int */
        protected $index;
        /** @var string */
        protected $position;
        /** @var int */
        protected $groupId;
        /** @var int */
        protected $keyId;
        /**
         * @var mixed
         */
        protected $keyDefinition;

        public function __construct($fieldname) {}
        public function setContextualData($ownerType, $ownerName, $index, $position, $groupId = null, $keyId = null, $keyDefinition = null) {}
        /**
         * @return string
         */
        public function getFieldname() {}
        /**
         * @return int
         */
        public function getIndex() {}
        /**
         * @return string
         */
        public function getOwnerName() {}
        /**
         * @return string
         */
        public function getOwnerType() {}
        /**
         * @return string
         */
        public function getPosition() {}
        /**
         * @return int
         */
        public function getGroupId() {}
        /**
         * @return mixed
         */
        public function getKeyDefinition() {}
        /**
         * @return int
         */
        public function getKeyId() {}
    }

    class QuantityValue implements \pimcore\model\dataobject\ownerawarefieldinterface {
    use \pimcore\model\dataobject\traits\ownerawarefieldtrait;

        /**
         * @var float
         */
        protected $value;
        /**
         * @var int
         */
        protected $unitId;
        /**
         * @var \Pimcore\Model\DataObject\QuantityValue\Unit
         */
        protected $unit;

        public function __construct($value = null, $unitId = null) {}
        public function setUnitId($unitId) {}
        /**
         * @return int
         */
        public function getUnitId() {}
        /**
         * @return Unit
         */
        public function getUnit() {}
        public function setValue($value) {}
        /**
         * @return float
         */
        public function getValue() {}
        /**
         * @return string
         *
         * @throws \Exception
         */
        public function __toString() {}
    }

    /**
     * @method \Pimcore\Model\DataObject\Data\ObjectMetadata\Dao getDao()
     */
    class ObjectMetadata extends \pimcore\model\abstractmodel implements \pimcore\model\dataobject\ownerawarefieldinterface {
    use \pimcore\model\dataobject\traits\ownerawarefieldtrait;

        /** @var DataObject\AbstractObject */
        protected $object;
        /**
         * @var int
         */
        protected $objectId;
        /**
         * @var string
         */
        protected $fieldname;
        /**
         * @var array
         */
        protected $columns;
        /**
         * @var array
         */
        protected $data;

        public function __construct($fieldname, $columns = [ ], $object = null) {}
        public function setObject($object) {}
        public function __call($name, $arguments) {}
        public function save($object, $ownertype, $ownername, $position, $index) {}
        public function load(DataObject\Concrete $source, $destinationId, $fieldname, $ownertype, $ownername, $position, $index) {}
        public function setFieldname($fieldname) {}
        /**
         * @return string
         */
        public function getFieldname() {}
        /**
         * @return DataObject\Concrete
         */
        public function getObject() {}
        public function setElement($element) {}
        /**
         * @return DataObject\Concrete
         */
        public function getElement() {}
        public function setColumns($columns) {}
        /**
         * @return array
         */
        public function getColumns() {}
        /**
         * @return array
         */
        public function getData() : array {}
        public function setData(array $data) : void {}
        /**
         * @return string
         */
        public function __toString() {}
        /**
         * @return int
         */
        public function getObjectId() {}
        public function setObjectId($objectId) {}
        public function __wakeup() {}
        /**
         * @return array
         */
        public function __sleep() {}
    }

    class ImageGallery implements \iterator, \pimcore\model\dataobject\ownerawarefieldinterface {
    use \pimcore\model\dataobject\traits\ownerawarefieldtrait;

        /**
         * @var Hotspotimage[]
         */
        protected $items;

        public function __construct($items) {}
        /**
         * Return the current element
         *
         * @link http://php.net/manual/en/iterator.current.php
         *
         * @return mixed Can return any type.
         *
         * @since 5.0.0
         */
        public function current() {}
        /**
         * Move forward to next element
         *
         * @link http://php.net/manual/en/iterator.next.php
         *
         * @return void Any returned value is ignored.
         *
         * @since 5.0.0
         */
        public function next() {}
        /**
         * Return the key of the current element
         *
         * @link http://php.net/manual/en/iterator.key.php
         *
         * @return mixed scalar on success, or null on failure.
         *
         * @since 5.0.0
         */
        public function key() {}
        /**
         * Checks if current position is valid
         *
         * @link http://php.net/manual/en/iterator.valid.php
         *
         * @return bool The return value will be casted to boolean and then evaluated.
         * Returns true on success or false on failure.
         *
         * @since 5.0.0
         */
        public function valid() {}
        /**
         * Rewind the Iterator to the first element
         *
         * @link http://php.net/manual/en/iterator.rewind.php
         *
         * @return void Any returned value is ignored.
         *
         * @since 5.0.0
         */
        public function rewind() {}
        /**
         * @return Hotspotimage[]
         */
        public function getItems() {}
        public function setItems($items) {}
    }

    class ExternalImage implements \pimcore\model\dataobject\ownerawarefieldinterface {
    use \pimcore\model\dataobject\traits\ownerawarefieldtrait;

        /** @var string */
        protected $url;

        public function __construct($url = null) {}
        /**
         * @return string
         */
        public function getUrl() {}
        public function setUrl($url) {}
        /**
         * @return string
         */
        public function __toString() {}
    }

    class Video implements \pimcore\model\dataobject\ownerawarefieldinterface {
    use \pimcore\model\dataobject\traits\objectvartrait, \pimcore\model\dataobject\traits\ownerawarefieldtrait;

        /**
         * @var string
         */
        protected $type;
        /**
         * @var Asset|string
         */
        protected $data;
        /**
         * @var Asset
         */
        protected $poster;
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $description;

        public function setData($data) {}
        /**
         * @return Asset|string
         */
        public function getData() {}
        public function setType($type) {}
        /**
         * @return string
         */
        public function getType() {}
        public function setDescription($description) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setPoster($poster) {}
        /**
         * @return Asset|string
         */
        public function getPoster() {}
        public function setTitle($title) {}
        /**
         * @return string
         */
        public function getTitle() {}
    }

    class Consent implements \pimcore\model\dataobject\ownerawarefieldinterface {
    use \pimcore\model\dataobject\traits\ownerawarefieldtrait;

        /**
         * @var bool
         */
        protected $consent;
        /**
         * @var int
         */
        protected $noteId;
        /**
         * @var Note
         */
        protected $note;

        public function __construct(bool $consent = false, int $noteId = null) {}
        /**
         * @return bool
         */
        public function getConsent() : bool {}
        public function setConsent(bool $consent) {}
        /**
         * @return int
         */
        public function getNoteId() {}
        public function setNoteId(int $noteId) {}
        /**
         * @return Note
         */
        public function getNote() {}
        public function setNote(Note $note) {}
        /**
         * @return string
         */
        public function getSummaryString() {}
    }

    class EncryptedField implements \pimcore\model\dataobject\ownerawarefieldinterface {
    use \pimcore\model\dataobject\traits\ownerawarefieldtrait;

        /**
         * @var Data
         */
        protected $delegate;
        /**
         * @var mixed
         */
        protected $plain;
        /**
         * @var mixed
         */
        protected $encrypted;

        public function __construct(Data $delegate, $plain) {}
        /**
         * @return Data
         */
        public function getDelegate() : Data {}
        public function setDelegate(Data $delegate) {}
        /**
         * @return mixed
         */
        public function getPlain() {}
        public function setPlain($plain) {}
        /**
         * @return array
         *
         * @throws \Exception
         */
        public function __sleep() {}
        /**
         * @throws \Exception
         */
        public function __wakeup() {}
    }

    class RgbaColor implements \pimcore\model\dataobject\ownerawarefieldinterface {
    use \pimcore\model\dataobject\traits\ownerawarefieldtrait;

        /** @var int */
        protected $r;
        /** @var int */
        protected $g;
        /** @var int */
        protected $b;
        /** @var int */
        protected $a;

        public function __construct($r = null, $g = null, $b = null, $a = null) {}
        /**
         * @return int
         */
        public function getR() {}
        public function setR($r) {}
        /**
         * @return int
         */
        public function getG() : int {}
        public function setG($g) {}
        /**
         * @return int
         */
        public function getB() {}
        public function setB($b) {}
        /**
         * @return int
         */
        public function getA() {}
        public function setA($a) {}
        /**
         * @return array
         */
        public function getRgb() {}
        /**
         *  Return R 0-255, G 0-255, B 0-255, A 0-255
         *
         * @return array
         */
        public function getRgba() {}
        /**
         *  Return R 0-255, G 0-255, B 0-255, A 0-1 (1 == full opacity)
         *
         * @return array
         */
        public function getCssRgba() {}
        public function getHex($withAlpha = false, $withHash = true) {}
        public function setHex($hexValue) {}
        public function setRgba($r = null, $g = null, $b = null, $a = null) {}
        /**
         * @return string
         */
        public function __toString() {}
    }

    class InputQuantityValue extends \pimcore\model\dataobject\data\quantityvalue implements \pimcore\model\dataobject\ownerawarefieldinterface {
    use \pimcore\model\dataobject\traits\ownerawarefieldtrait;

        /**
         * @var null|string
         */
        protected $value;

        /**
         * @return string
         */
        public function getValue() {}
        /**
         * @return string
         *
         * @throws \Exception
         */
        public function __toString() {}
    }

    class BlockElement extends \pimcore\model\abstractmodel implements \pimcore\model\dataobject\ownerawarefieldinterface {
    use \pimcore\model\dataobject\traits\ownerawarefieldtrait;

        /**
         * @var string
         */
        protected $name;
        /**
         * @var string
         */
        protected $type;
        /**
         * @var mixed
         */
        protected $data;

        public function __construct($name, $type, $data) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getType() {}
        public function setType($type) {}
        /**
         * @return mixed
         */
        public function getData() {}
        public function setData($data) {}
        /**
         * @return string
         */
        public function __toString() {}
    }

    class Geopoint implements \pimcore\model\dataobject\ownerawarefieldinterface {
    use \pimcore\model\dataobject\traits\ownerawarefieldtrait;

        /**
         * @var float
         */
        protected $longitude;
        /**
         * @var float
         */
        protected $latitude;

        public function __construct($longitude = null, $latitude = null) {}
        /**
         * @return float
         */
        public function getLongitude() {}
        public function setLongitude($longitude) {}
        /**
         * @return float
         */
        public function getLatitude() {}
        public function setLatitude($latitude) {}
        /**
         * @return string
         */
        public function __toString() {}
    }

    class Geobounds implements \pimcore\model\dataobject\ownerawarefieldinterface {
    use \pimcore\model\dataobject\traits\ownerawarefieldtrait;

        /**
         * @var Geopoint
         */
        protected $northEast;
        /**
         * @var Geopoint
         */
        protected $southWest;

        public function __construct($northEast = null, $southWest = null) {}
        /**
         * @return Geopoint
         */
        public function getNorthEast() {}
        public function setNorthEast($northEast) {}
        /**
         * @return Geopoint
         */
        public function getSouthWest() {}
        public function setSouthWest($southWest) {}
        /**
         * @return string
         */
        public function __toString() {}
    }

}

namespace Pimcore\Model\DataObject\Data\ObjectMetadata {
    /**
     * @property \Pimcore\Model\DataObject\Data\ObjectMetadata $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
    use \pimcore\model\dataobject\classdefinition\helper\dao;

        /**
         * @var array|null
         */
        protected $tableDefinitions;

        public function save(DataObject\Concrete $object, $ownertype, $ownername, $position, $index, $type = 'object') {}
        protected function getTablename($object) {}
        public function load(DataObject\Concrete $source, $destinationId, $fieldname, $ownertype, $ownername, $position, $index) {}
        public function createOrUpdateTable(DataObject\ClassDefinition $class) {}
    }

}

namespace Pimcore\Model\DataObject\Data\ElementMetadata {
    /**
     * @property \Pimcore\Model\DataObject\Data\ElementMetadata $model
     */
    class Dao extends \pimcore\model\dataobject\data\objectmetadata\dao {
        public function load(DataObject\Concrete $source, $destinationId, $fieldname, $ownertype, $ownername, $position, $index, $destinationType = 'object') {}
    }

}

namespace Pimcore\Model\DataObject\Exception {
    class InheritanceParentNotFoundException extends \exception {}

}

namespace Pimcore\Model\DataObject\AbstractObject {
    /**
     * @property \Pimcore\Model\DataObject\AbstractObject $model
     */
    class Dao extends \pimcore\model\element\dao {
        public function getById($id) {}
        public function getByPath($path) {}
        /**
         * Create a new record for the object in database
         *
         * @return bool
         */
        public function create() {}
        public function update($isUpdate = null) {}
        /**
         * Deletes object from database
         *
         * @return void
         */
        public function delete() {}
        public function updateWorkspaces() {}
        public function updateChildPaths($oldPath) {}
        /**
         * deletes all properties for the object from database
         *
         * @return void
         */
        public function deleteAllProperties() {}
        /**
         * @return string retrieves the current full object path from DB
         */
        public function getCurrentFullPath() {}
        /**
         * @return int
         */
        public function getVersionCountForUpdate() : int {}
        public function getProperties($onlyInherited = false) {}
        public function deleteAllPermissions() {}
        public function hasChildren($objectTypes = [DataObject::OBJECT_TYPE_OBJECT, DataObject::OBJECT_TYPE_FOLDER], $includingUnpublished = null) {}
        public function hasSiblings($objectTypes = [DataObject::OBJECT_TYPE_OBJECT, DataObject::OBJECT_TYPE_FOLDER], $includingUnpublished = null) {}
        public function getChildAmount($objectTypes = [DataObject::OBJECT_TYPE_OBJECT, DataObject::OBJECT_TYPE_FOLDER], $user = null) {}
        public function getTypeById($id) {}
        /**
         * @return bool
         */
        public function isLocked() {}
        /**
         * @return array
         */
        public function unlockPropagate() {}
        /**
         * @return array
         */
        public function getClasses() {}
        /**
         * @return int[]
         */
        protected function collectParentIds() {}
        public function isAllowed($type, $user) {}
        public function getPermissions($type, $user, $quote = true) {}
        public function getChildPermissions($type, $user, $quote = true) {}
        public function saveIndex($index) {}
        /**
         * @return bool
         */
        public function __isBasedOnLatestData() {}
    }

}

namespace Pimcore\Model\Staticroute {
    /**
     * @property \Pimcore\Model\Staticroute $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        public function getById($id = null) {}
        public function getByName($name = null, $siteId = null) {}
        /**
         * @return Model\Staticroute[]
         */
        public function getAll() {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\Staticroute\Listing\Dao getDao()
     */
    class Listing extends \pimcore\model\listing\jsonlisting {
        /**
         * @var \Pimcore\Model\Staticroute[]|null
         */
        protected $routes;

        /**
         * @return \Pimcore\Model\Staticroute[]
         */
        public function getRoutes() {}
        public function setRoutes($routes) {}
    }

}

namespace Pimcore\Model\Staticroute\Listing {
    /**
     * @property \Pimcore\Model\Staticroute\Listing $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        /**
         * Loads a list of static routes for the specicifies parameters, returns an array of Staticroute elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Metadata {
    /**
     * @method \Pimcore\Model\Metadata\Predefined\Dao getDao()
     * @method void save()
     * @method void delete()
     */
    class Predefined extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $description;
        /**
         * @var string
         */
        public $key;
        /**
         * @var string
         */
        public $type;
        /**
         * @var string
         */
        public $targetSubtype;
        /**
         * @var string
         */
        public $data;
        /**
         * @var string
         */
        public $config;
        /**
         * @var string
         */
        public $ctype;
        /**
         * @var string
         */
        public $language;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;

        public static function getById($id) {}
        public static function getByName($name, $language = '') {}
        /**
         * @return self
         */
        public static function create() {}
        /**
         * @return string
         */
        public function getName() {}
        /**
         * @return string
         */
        public function getType() {}
        /**
         * @return string
         */
        public function getData() {}
        public function setName($name) {}
        public function setType($type) {}
        public function setData($data) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setId($id) {}
        public function setDescription($description) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setLanguage($language) {}
        /**
         * @return string
         */
        public function getLanguage() {}
        public function setTargetSubtype($targetSubtype) {}
        /**
         * @return string
         */
        public function getTargetSubtype() {}
        /**
         * @return string
         */
        public function getConfig() {}
        public function setConfig($config) {}
        public function minimize() {}
        public function expand() {}
    }

}

namespace Pimcore\Model\Metadata\Predefined {
    /**
     * @property \Pimcore\Model\Metadata\Predefined $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        public function getById($id = null) {}
        public function getByNameAndLanguage($name = null, $language = null) {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\Metadata\Predefined\Listing\Dao getDao()
     * @method \Pimcore\Model\Metadata\Predefined[] load()
     */
    class Listing extends \pimcore\model\listing\jsonlisting {
        /**
         * @var \Pimcore\Model\Metadata\Predefined[]|null
         */
        protected $definitions;

        /**
         * @return \Pimcore\Model\Metadata\Predefined[]
         */
        public function getDefinitions() {}
        public function setDefinitions($definitions) {}
        public static function getByTargetType($type, $subTypes) {}
        public static function getByKeyAndLanguage($key, $language, $targetSubtype = null) {}
    }

}

namespace Pimcore\Model\Metadata\Predefined\Listing {
    /**
     * @property \Pimcore\Model\Metadata\Predefined\Listing $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        /**
         * Loads a list of predefined metadata definitions for the specicified parameters, returns an array of
         * Metadata\Predefined elements
         *
         * @return \Pimcore\Model\Metadata\Predefined[]
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\GridConfig {
    /**
     * @property \Pimcore\Model\GridConfig $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getById($id) {}
        /**
         * Save object to database
         *
         * @return int
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\GridConfig\Listing\Dao getDao()
     * @method Model\GridConfig[] load()
     * @method Model\GridConfig current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\GridConfig[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $gridConfigs;

        public function __construct() {}
        /**
         * @return Model\GridConfig[]
         */
        public function getGridConfigs() {}
        public function setGridConfigs($gridConfigs) {}
    }

}

namespace Pimcore\Model\GridConfig\Listing {
    /**
     * @property \Pimcore\Model\GridConfig\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of gridconfigs for the specicified parameters, returns an array of GridConfig elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Tool {
    /**
     * @method \Pimcore\Model\Tool\Lock\Dao getDao()
     */
    class Lock extends \pimcore\model\abstractmodel {
        /**
         * @var string
         */
        public $id;
        /**
         * @var int
         */
        public $date;
        /**
         * @var array
         */
        static protected $acquiredLocks;
        /**
         * @var Lock
         */
        static protected $instance;

        /**
         * @return Lock
         */
        protected static function getInstance() {}
        public static function acquire($key, $expire = 120, $refreshInterval = 1) {}
        public static function release($key) {}
        public static function lock($key) {}
        public static function isLocked($key, $expire = 120) {}
        public static function get($key) {}
        public static function releaseAll() {}
        public function setDate($date) {}
        /**
         * @return int
         */
        public function getDate() {}
        public function setId($id) {}
        /**
         * @return string
         */
        public function getId() {}
    }

    /**
     * @method \Pimcore\Model\Tool\TmpStore\Dao getDao()
     */
    class TmpStore extends \pimcore\model\abstractmodel {
        /**
         * @var string
         */
        public $id;
        /**
         * @var string
         */
        public $tag;
        /**
         * @var mixed
         */
        public $data;
        /**
         * @var int
         */
        public $date;
        /**
         * @var int
         */
        public $expiryDate;
        /**
         * @var bool
         */
        public $serialized;
        /**
         * @var TmpStore
         */
        static protected $instance;

        /**
         * @return TmpStore
         */
        protected static function getInstance() {}
        /**
         * @return int
         */
        protected static function getDefaultLifetime() {}
        public static function add($id, $data, $tag = null, $lifetime = null) {}
        public static function set($id, $data, $tag = null, $lifetime = null) {}
        public static function delete($id) {}
        public static function get($id) {}
        public static function getIdsByTag($tag) {}
        /**
         * @return string
         */
        public function getId() {}
        public function setId($id) {}
        /**
         * @return string
         */
        public function getTag() {}
        public function setTag($tag) {}
        /**
         * @return mixed
         */
        public function getData() {}
        public function setData($data) {}
        /**
         * @return int
         */
        public function getDate() {}
        public function setDate($date) {}
        /**
         * @return bool
         */
        public function isSerialized() {}
        public function setSerialized($serialized) {}
        /**
         * @return int
         */
        public function getExpiryDate() {}
        public function setExpiryDate($expiryDate) {}
        public function update($lifetime = null) {}
    }

    /**
     * @method \Pimcore\Model\Tool\UUID\Dao getDao()
     */
    class UUID extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $itemId;
        /**
         * @var string
         */
        public $type;
        /**
         * @var string
         */
        public $uuid;
        /**
         * @var string
         */
        public $instanceIdentifier;
        /**
         * @var mixed
         */
        protected $item;

        public function setInstanceIdentifier($instanceIdentifier) {}
        /**
         * @return string
         */
        public function getInstanceIdentifier() {}
        /**
         * @return $this
         *
         * @throws \Exception
         */
        public function setSystemInstanceIdentifier() {}
        public function setItemId($id) {}
        /**
         * @return int
         */
        public function getItemId() {}
        public function setType($type) {}
        /**
         * @return string
         */
        public function getType() {}
        /**
         * @return mixed
         *
         * @throws \Exception
         */
        public function createUuid() {}
        /**
         * @return string
         */
        public function getUuid() {}
        public function setUuid($uuid) {}
        public function setItem($item) {}
        public static function getByItem($item) {}
        public static function getByUuid($uuid) {}
        public static function create($item) {}
    }

}

namespace Pimcore\Model\Tool\Targeting {
    /**
     * @method Rule\Dao getDao()
     */
    class Rule extends \pimcore\model\abstractmodel {
        const SCOPE_SESSION_WITH_VARIABLES = 'session_with_variables';
        const SCOPE_SESSION = 'session';
        const SCOPE_VISITOR = 'visitor';
        const SCOPE_HIT = 'hit';

        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $description;
        /**
         * @var string
         */
        public $scope;
        /**
         * @var bool
         */
        public $active;
        /**
         * @var int
         */
        public $prio;
        /**
         * @var array
         */
        public $conditions;
        /**
         * @var array
         */
        public $actions;

        public static function inTarget($target) {}
        public static function getById($id) {}
        public static function getByName($name) {}
        public function setDescription($description) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setActions($actions) {}
        /**
         * @return array
         */
        public function getActions() : array {}
        public function setConditions($conditions) {}
        /**
         * @return array
         */
        public function getConditions() {}
        public function setScope($scope) {}
        /**
         * @return string
         */
        public function getScope() {}
        public function setActive($active) {}
        /**
         * @return bool
         */
        public function getActive() {}
        /**
         * @return int
         */
        public function getPrio() : int {}
        public function setPrio(int $prio) {}
    }

    /**
     * @method TargetGroup\Dao getDao()
     */
    class TargetGroup extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $description;
        /**
         * @var int
         */
        public $threshold;
        /**
         * @var bool
         */
        public $active;

        public static function getById($id) {}
        public static function getByName($name) {}
        public static function isIdActive($id) {}
        public function setDescription($description) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setThreshold($threshold) {}
        /**
         * @return int
         */
        public function getThreshold() {}
        public function setActive($active) {}
        /**
         * @return bool
         */
        public function getActive() {}
    }

}

namespace Pimcore\Model\Tool\Targeting\Rule {
    /**
     * @property Rule|Model\Tool\Targeting\Rule\Dao $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getById($id = null) {}
        public function getByName($name = null) {}
        /**
         * Save object to database
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
        /**
         * @throws \Exception
         */
        public function update() {}
        public function create() {}
    }

    /**
     * @method Listing\Dao getDao()
     * @method Rule[] load()
     * @method Rule current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Rule[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $targets;

        public function __construct() {}
        public function setTargets(array $targets) {}
        /**
         * @return Rule[]
         */
        public function getTargets() : array {}
    }

}

namespace Pimcore\Model\Tool\Targeting\Rule\Listing {
    /**
     * @property \Pimcore\Model\Tool\Targeting\Rule\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * @return Rule[]
         */
        public function load() {}
    }

}

namespace Pimcore\Model\Tool\Targeting\TargetGroup {
    /**
     * @property TargetGroup $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getById(int $id = null) {}
        public function getByName(string $name = null) {}
        public function save() {}
        public function delete() {}
        public function update() {}
        public function create() {}
    }

    /**
     * @method Listing\Dao getDao()
     * @method TargetGroup[] load()
     * @method TargetGroup current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var TargetGroup[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $targetGroups;

        public function __construct() {}
        public function setTargetGroups(array $targetGroups) {}
        /**
         * @return TargetGroup[]
         */
        public function getTargetGroups() : array {}
    }

}

namespace Pimcore\Model\Tool\Targeting\TargetGroup\Listing {
    /**
     * @property TargetGroup\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * @return TargetGroup[]
         */
        public function load() {}
    }

}

namespace Pimcore\Model\Tool\Lock {
    /**
     * @property \Pimcore\Model\Tool\Lock $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function isLocked($key, $expire = 120) {}
        public function acquire($key, $expire = 120, $refreshInterval = 1) {}
        public function release($key) {}
        public function lock($key, $force = true) {}
        public function getById($key) {}
    }

}

namespace Pimcore\Model\Tool\Qrcode {
    /**
     * @method \Pimcore\Model\Tool\Qrcode\Config\Dao getDao()
     */
    class Config extends \pimcore\model\abstractmodel {
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $description;
        /**
         * @var string
         */
        public $url;
        /**
         * @var string
         */
        public $foreColor;
        /**
         * @var string
         */
        public $backgroundColor;
        /**
         * @var bool
         */
        public $googleAnalytics;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $creationDate;

        public static function getByName($name) {}
        public function setDescription($description) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setUrl($url) {}
        /**
         * @return string
         */
        public function getUrl() {}
        public function setBackgroundColor($backgroundColor) {}
        /**
         * @return string
         */
        public function getBackgroundColor() {}
        public function setForeColor($foreColor) {}
        /**
         * @return string
         */
        public function getForeColor() {}
        public function setGoogleAnalytics($googleAnalytics) {}
        /**
         * @return bool
         */
        public function getGoogleAnalytics() {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        public function setCreationDate($creationDate) {}
    }

}

namespace Pimcore\Model\Tool\Qrcode\Config {
    /**
     * @property \Pimcore\Model\Tool\Qrcode\Config $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        public function getByName($id = null) {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\Tool\Qrcode\Config\Listing\Dao getDao()
     */
    class Listing extends \pimcore\model\listing\jsonlisting {
        /**
         * @var Model\Tool\Qrcode\Config[]|null
         */
        protected $codes;

        /**
         * @return Model\Tool\Qrcode\Config[]
         */
        public function getCodes() {}
        public function setCodes($codes) {}
    }

}

namespace Pimcore\Model\Tool\Qrcode\Config\Listing {
    /**
     * @property \Pimcore\Model\Tool\Qrcode\Config\Listing $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        /**
         * Loads a list of predefined properties for the specicifies parameters, returns an array of Property\Predefined elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Tool\TmpStore {
    /**
     * @property \Pimcore\Model\Tool\TmpStore $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function add($id, $data, $tag, $lifetime) {}
        public function delete($id) {}
        public function getById($id) {}
        public function getIdsByTag($tag) {}
    }

}

namespace Pimcore\Model\Tool\Tracking {
    /**
     * @method \Pimcore\Model\Tool\Tracking\Event\Dao getDao()
     */
    class Event extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $category;
        /**
         * @var string
         */
        public $action;
        /**
         * @var string
         */
        public $label;
        /**
         * @var int
         */
        public $timestamp;
        /**
         * @var string
         */
        public $data;

        public static function getById($id) {}
        public static function getByDate($category, $action, $label, $day, $month, $year) {}
        public function setAction($action) {}
        /**
         * @return string
         */
        public function getAction() {}
        public function setCategory($category) {}
        /**
         * @return string
         */
        public function getCategory() {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setLabel($label) {}
        /**
         * @return string
         */
        public function getLabel() {}
        public function setTimestamp($timestamp) {}
        /**
         * @return int
         */
        public function getTimestamp() {}
        public function setData($data) {}
        /**
         * @return string
         */
        public function getData() {}
    }

}

namespace Pimcore\Model\Tool\Tracking\Event {
    /**
     * @property \Pimcore\Model\Tool\Tracking\Event $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getById($id) {}
        public function getByDate($category, $action, $label, $day, $month, $year) {}
        public function save() {}
    }

}

namespace Pimcore\Model\Tool\CustomReport {
    /**
     * @method \Pimcore\Model\Tool\CustomReport\Config\Dao getDao()
     */
    class Config extends \pimcore\model\abstractmodel implements \jsonserializable {
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $sql;
        /**
         * @var string[]
         */
        public $dataSourceConfig;
        /**
         * @var array
         */
        public $columnConfiguration;
        /**
         * @var string
         */
        public $niceName;
        /**
         * @var string
         */
        public $group;
        /**
         * @var string
         */
        public $groupIconClass;
        /**
         * @var string
         */
        public $iconClass;
        /**
         * @var bool
         */
        public $menuShortcut;
        /**
         * @var string
         */
        public $reportClass;
        /**
         * @var string
         */
        public $chartType;
        /**
         * @var string
         */
        public $pieColumn;
        /**
         * @var string
         */
        public $pieLabelColumn;
        /**
         * @var string
         */
        public $xAxis;
        /**
         * @var string|array
         */
        public $yAxis;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var bool
         */
        public $shareGlobally;
        /**
         * @var string[]
         */
        public $sharedUserNames;
        /**
         * @var string[]
         */
        public $sharedRoleNames;

        public static function getByName($name) {}
        public static function getReportsList(Model\User $user = null) {}
/** @var Model\Tool\CustomReport\Adapter\CustomReportAdapterFactoryInterface $factory */
        public static function getAdapter(/** @var Model\Tool\CustomReport\Adapter\CustomReportAdapterFactoryInterface $factory */
$configuration, /** @var Model\Tool\CustomReport\Adapter\CustomReportAdapterFactoryInterface $factory */
$fullConfig = null) {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setSql($sql) {}
        /**
         * @return string
         */
        public function getSql() {}
        public function setColumnConfiguration($columnConfiguration) {}
        /**
         * @return array
         */
        public function getColumnConfiguration() {}
        public function setGroup($group) {}
        /**
         * @return string
         */
        public function getGroup() {}
        public function setGroupIconClass($groupIconClass) {}
        /**
         * @return string
         */
        public function getGroupIconClass() {}
        public function setIconClass($iconClass) {}
        /**
         * @return string
         */
        public function getIconClass() {}
        public function setNiceName($niceName) {}
        /**
         * @return string
         */
        public function getNiceName() {}
        public function setMenuShortcut($menuShortcut) {}
        /**
         * @return bool
         */
        public function getMenuShortcut() {}
        public function setDataSourceConfig($dataSourceConfig) {}
        /**
         * @return \stdClass|null
         */
        public function getDataSourceConfig() {}
        public function setChartType($chartType) {}
        /**
         * @return string
         */
        public function getChartType() {}
        public function setPieColumn($pieColumn) {}
        /**
         * @return string
         */
        public function getPieColumn() {}
        public function setXAxis($xAxis) {}
        /**
         * @return string
         */
        public function getXAxis() {}
        public function setYAxis($yAxis) {}
        /**
         * @return array|string
         */
        public function getYAxis() {}
        public function setPieLabelColumn($pieLabelColumn) {}
        /**
         * @return string
         */
        public function getPieLabelColumn() {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return string
         */
        public function getReportClass() {}
        public function setReportClass($reportClass) {}
        /**
         * @return bool
         */
        public function getShareGlobally() {}
        public function setShareGlobally($shareGlobally) : void {}
        /**
         * @return int[]
         */
        public function getSharedUserIds() {}
        public function setSharedUserIds($sharedUserIds) : void {}
        /**
         * @return int[]
         */
        public function getSharedRoleIds() {}
        public function setSharedRoleIds($sharedRoleIds) : void {}
        /**
         * @return string[]
         */
        public function getSharedUserNames() {}
        public function setSharedUserNames($sharedUserNames) : void {}
        /**
         * @return string[]
         */
        public function getSharedRoleNames() {}
        public function setSharedRoleNames($sharedRoleNames) : void {}
        public function jsonSerialize() {}
    }

}

namespace Pimcore\Model\Tool\CustomReport\Config {
    /**
     * @property \Pimcore\Model\Tool\CustomReport\Config $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        public function getByName($id = null) {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\Tool\CustomReport\Config\Listing\Dao getDao()
     */
    class Listing extends \pimcore\model\listing\jsonlisting {
        /**
         * @var Model\Tool\CustomReport\Config[]|null
         */
        protected $reports;

        /**
         * @return Model\Tool\CustomReport\Config[]
         */
        public function getReports() {}
        public function setReports($reports) {}
    }

}

namespace Pimcore\Model\Tool\CustomReport\Config\Listing {
    /**
     * @property \Pimcore\Model\Tool\CustomReport\Config\Listing $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        /**
         * @return Config[]
         */
        public function load() {}
        public function loadForGivenUser(Model\User $user) {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Tool\CustomReport\Adapter {
    class Sql extends \pimcore\model\tool\customreport\adapter\abstractadapter {
        public function getData($filters, $sort, $dir, $offset, $limit, $fields = null, $drillDownFilters = null) {}
        public function getColumns($configuration) {}
        protected function buildQueryString($config, $ignoreSelectAndGroupBy = false, $drillDownFilters = null, $selectField = null) {}
        protected function getBaseQuery($filters, $fields, $ignoreSelectAndGroupBy = false, $drillDownFilters = null, $selectField = null) {}
        public function getAvailableOptions($filters, $field, $drillDownFilters) {}
    }

    class Analytics extends \pimcore\model\tool\customreport\adapter\abstractadapter {
        public function getData($filters, $sort, $dir, $offset, $limit, $fields = null, $drillDownFilters = null) {}
        public function getColumns($configuration) {}
        protected function setFilters($filters, $drillDownFilters = [ ]) {}
        protected function getDataHelper($fields = null, $drillDownFilters = null, $useDimensionHandling = true) {}
        protected function extractData($results) {}
        protected function handleFields($configuration, $fields) {}
        protected function handleDimensions($configuration) {}
        protected function calcDate($date, $relativeDate) {}
        public function getAvailableOptions($filters, $field, $drillDownFilters) {}
    }

    class DefaultCustomReportAdapterFactory implements \pimcore\model\tool\customreport\adapter\customreportadapterfactoryinterface {
        /**
         * @var string
         */
        private $className;

        public function __construct($className) {}
        public function create($config, $fullConfig = null) {}
    }

    abstract class AbstractAdapter implements \pimcore\model\tool\customreport\adapter\customreportadapterinterface {
        /** @var \stdClass */
        protected $config;
        /** @var Config|null */
        protected $fullConfig;

        public function __construct($config, $fullConfig = null) {}
        abstract public function getData($filters, $sort, $dir, $offset, $limit, $fields = null, $drillDownFilters = null) ;
        abstract public function getColumns($configuration) ;
        abstract public function getAvailableOptions($filters, $field, $drillDownFilters) ;
    }


    interface CustomReportAdapterInterface {
        function getData($filters, $sort, $dir, $offset, $limit, $fields = null, $drillDownFilters = null) ;
        function getColumns($configuration) ;
        function getAvailableOptions($filters, $field, $drillDownFilters) ;
    }

    interface CustomReportAdapterFactoryInterface {
        function create($config, $fullConfig = null) ;
    }

}

namespace Pimcore\Model\Tool\UUID {
    /**
     * @property \Pimcore\Model\Tool\UUID $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        const TABLE_NAME = 'uuids';

        public function save() {}
        /**
         * @throws \Exception
         */
        public function delete() {}
        public function getByUuid($uuid) {}
    }

    /**
     * @method \Pimcore\Model\Tool\UUID\Listing\Dao getDao()
     * @method Model\Tool\UUID[] load()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {}

}

namespace Pimcore\Model\Tool\UUID\Listing {
    /**
     * @property \Pimcore\Model\Tool\UUID\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of Email_Log for the specified parameters, returns an array of Email_Log elements
         *
         * @return array
         */
        public function load() {}
        /**
         * Returns the total amount of Email_Log entries
         *
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Tool\Tag {
    /**
     * @method \Pimcore\Model\Tool\Tag\Config\Dao getDao()
     */
    class Config extends \pimcore\model\abstractmodel {
        /**
         * @var array
         */
        public $items;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $description;
        /**
         * @var int
         */
        public $siteId;
        /**
         * @var string
         */
        public $urlPattern;
        /**
         * @var string
         */
        public $textPattern;
        /**
         * @var string
         */
        public $httpMethod;
        /**
         * @var bool
         */
        public $disabled;
        /**
         * @var array
         */
        public $params;
        /**
         * @var int
         */
        public $modificationDate;
        /**
         * @var int
         */
        public $creationDate;

        public static function getByName($name) {}
        /**
         * Delete from Database
         */
        public function delete() {}
        public function addItem($parameters) {}
        public function addItemAt($position, $parameters) {}
        public function resetItems() {}
        public function setDescription($description) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setItems($items) {}
        /**
         * @return array
         */
        public function getItems() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setHttpMethod($httpMethod) {}
        /**
         * @return string
         */
        public function getHttpMethod() {}
        public function setUrlPattern($urlPattern) {}
        /**
         * @return string
         */
        public function getUrlPattern() {}
        public function setSiteId($siteId) {}
        /**
         * @return int
         */
        public function getSiteId() {}
        public function setParams($params) {}
        /**
         * @return array
         */
        public function getParams() {}
        public function setTextPattern($textPattern) {}
        /**
         * @return string
         */
        public function getTextPattern() {}
        /**
         * @return int
         */
        public function getModificationDate() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return bool
         */
        public function isDisabled() {}
        public function setDisabled($disabled) {}
    }

}

namespace Pimcore\Model\Tool\Tag\Config {
    /**
     * @property \Pimcore\Model\Tool\Tag\Config $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        public function getByName($id = null) {}
        /**
         * @throws \Exception
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\Tool\Tag\Config\Listing\Dao getDao()
     */
    class Listing extends \pimcore\model\listing\jsonlisting {
        /**
         * @var Model\Tool\Tag\Config[]|null
         */
        protected $tags;

        /**
         * @return Model\Tool\Tag\Config[]
         */
        public function getTags() {}
        public function setTags($tags) {}
    }

}

namespace Pimcore\Model\Tool\Tag\Config\Listing {
    /**
     * @property \Pimcore\Model\Tool\Tag\Config\Listing $model
     */
    class Dao extends \pimcore\model\dao\phparraytable {
        public function configure() {}
        /**
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Tool\Email {
    /**
     * @method \Pimcore\Model\Tool\Email\Blacklist\Dao getDao()
     */
    class Blacklist extends \pimcore\model\abstractmodel {
        /**
         * @var string
         */
        public $address;
        /**
         * @var int
         */
        public $creationDate;
        /**
         * @var int
         */
        public $modificationDate;

        public static function getByAddress($addr) {}
        public function setAddress($address) {}
        /**
         * @return string
         */
        public function getAddress() {}
        public function setCreationDate($creationDate) {}
        /**
         * @return int
         */
        public function getCreationDate() {}
        public function setModificationDate($modificationDate) {}
        /**
         * @return int
         */
        public function getModificationDate() {}
    }

    /**
     * @method \Pimcore\Model\Tool\Email\Log\Dao getDao()
     */
    class Log extends \pimcore\model\abstractmodel {
        /**
         * EmailLog Id
         *
         * @var int
         */
        public $id;
        /**
         * Id of the email document or null if no document was given
         *
         * @var int | null
         */
        public $documentId;
        /**
         * Parameters passed for replacement
         *
         * @var array
         */
        public $params;
        /**
         * Modification date as timestamp
         *
         * @var int
         */
        public $modificationDate;
        /**
         * The request URI from were the email was sent
         *
         * @var string
         */
        public $requestUri;
        /**
         * The "from" email address
         *
         * @var string
         */
        public $from;
        /**
         * Contains the reply to email addresses (multiple recipients are separated by a ",")
         *
         * @var string
         */
        public $replyTo;
        /**
         * The "to" recipients (multiple recipients are separated by a ",")
         *
         * @var string
         */
        public $to;
        /**
         * The carbon copy recipients (multiple recipients are separated by a ",")
         *
         * @var string
         */
        public $cc;
        /**
         * The blind carbon copy recipients (multiple recipients are separated by a ",")
         *
         * @var string
         */
        public $bcc;
        /**
         * Contains 1 if a html logfile exists and 0 if no html logfile exists
         *
         * @var int
         */
        public $emailLogExistsHtml;
        /**
         * Contains 1 if a text logfile exists and 0 if no text logfile exists
         *
         * @var int
         */
        public $emailLogExistsText;
        /**
         * Contains the timestamp when the email was sent
         *
         * @var int
         */
        public $sentDate;
        /**
         * Contains the rendered html content of the email
         *
         * @var string
         */
        public $bodyHtml;
        /**
         * Contains the rendered text content of the email
         *
         * @var string
         */
        public $bodyText;
        /**
         * Contains the rendered subject of the email
         *
         * @var string
         */
        public $subject;

        public function setDocumentId($id) {}
        public function setRequestUri($requestUri) {}
        /**
         * Returns the request uri
         *
         * @return string
         */
        public function getRequestUri() {}
        /**
         * Returns the email log id
         *
         * @return int
         */
        public function getId() {}
        public function setId($id) {}
        public function setSubject($subject) {}
        /**
         * Returns the subject
         *
         * @return string
         */
        public function getSubject() {}
        public static function getById($id) {}
        /**
         * Returns the email document id
         *
         * @return int|null
         */
        public function getDocumentId() {}
        public function setParams($params) {}
        /**
         * Returns the dynamic parameter
         *
         * @return array
         */
        public function getParams() {}
        public function setModificationDate($modificationDate) {}
        /**
         * Returns the modification date
         *
         * @return int - Timestamp
         */
        public function getModificationDate() {}
        public function setSentDate($sentDate) {}
        /**
         * Returns the sent date and time as unix timestamp
         *
         * @return int
         */
        public function getSentDate() {}
        /**
         *  Checks if a html log file exits and sets $this->emailLogExistsHtml to 0 or 1
         */
        public function setEmailLogExistsHtml() {}
        /**
         * Returns 1 if a html email log file exists and 0 if no html log file exists
         *
         * @return int - 0 or 1
         */
        public function getEmailLogExistsHtml() {}
        /**
         * Checks if a text log file exits and sets $this->emailLogExistsText to 0 or 1
         */
        public function setEmailLogExistsText() {}
        /**
         * Returns 1 if a text email log file exists and 0 if no text log file exists
         *
         * @return int - 0 or 1
         */
        public function getEmailLogExistsText() {}
        /**
         * Returns the content of the html log file
         *
         * @return string | false
         */
        public function getHtmlLog() {}
        /**
         * Returns the content of the text log file
         *
         * @return string | false
         */
        public function getTextLog() {}
        /**
         * Removes the log file entry from the db and removes the log files on the system
         */
        public function delete() {}
        public function save() {}
        public function setTo($to) {}
        /**
         * Returns the "to" recipients
         *
         * @return string
         */
        public function getTo() {}
        public function setCc($cc) {}
        /**
         * Returns the carbon copy recipients
         *
         * @return string
         */
        public function getCc() {}
        public function setBcc($bcc) {}
        /**
         * Returns the blind carbon copy recipients
         *
         * @return string
         */
        public function getBcc() {}
        public function setFrom($from) {}
        /**
         * Returns the "from" email address
         *
         * @return string
         */
        public function getFrom() {}
        public function setReplyTo($replyTo) {}
        /**
         * Returns the "replyTo" email address
         *
         * @return string
         */
        public function getReplyTo() {}
        public function setBodyHtml($html) {}
        /**
         * returns the html content of the email
         *
         * @return string | null
         */
        public function getBodyHtml() {}
        public function setBodyText($text) {}
        /**
         * Returns the text version of the email
         *
         * @return string
         */
        public function getBodyText() {}
    }

}

namespace Pimcore\Model\Tool\Email\Blacklist {
    /**
     * @property \Pimcore\Model\Tool\Email\Blacklist $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getByAddress($address) {}
        /**
         * Save object to database
         *
         * @return bool
         *
         * @todo: $data could be undefined
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\Tool\Email\Blacklist\Listing\Dao getDao()
     * @method Model\Tool\Email\Blacklist[] load()
     * @method Model\Tool\Email\Blacklist current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var Model\Tool\Email\Blacklist[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $items;

        public function __construct() {}
        public function setItems($items) {}
        /**
         * @return Model\Tool\Email\Blacklist[]
         */
        public function getItems() {}
    }

}

namespace Pimcore\Model\Tool\Email\Blacklist\Listing {
    /**
     * @property \Pimcore\Model\Tool\Email\Blacklist\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of static routes for the specicifies parameters, returns an array of Tool\Email\Blacklist elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         *
         * @todo: $amount could not be defined, so this could cause an issue
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\Tool\Email\Log {
    /**
     * @property \Pimcore\Model\Tool\Email\Log $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        /**
         * Name of the db table
         *
         * @var string
         */
        static protected $dbTable;

        public function getById($id = null) {}
        /**
         * Save document to database
         */
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
        public function create() {}
        protected function createJsonLoggingObject($data) {}
        protected function prepareLoggingData($key, $value) {}
    }

    /**
     * @method \Pimcore\Model\Tool\Email\Log\Listing\Dao getDao()
     * @method Model\Tool\Email\Log[] load()
     * @method Model\Tool\Email\Log current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var array
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $emailLogs;

        public function __construct() {}
        /**
         * @return Model\Tool\Email\Log[]
         */
        public function getEmailLogs() {}
        public function setEmailLogs($emailLogs) {}
    }

}

namespace Pimcore\Model\Tool\Email\Log\Listing {
    /**
     * @property \Pimcore\Model\Tool\Email\Log\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of Email_Log for the specified parameters, returns an array of Email_Log elements
         *
         * @return array
         */
        public function load() {}
        /**
         * Returns the db entries from email_log by the specified parameters
         *
         * @return array
         */
        public function getDataArray() {}
        /**
         * Returns the total amount of Email_Log entries
         *
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore\Model\GridConfigShare {
    /**
     * @property \Pimcore\Model\GridConfigShare $model
     */
    class Dao extends \pimcore\model\dao\abstractdao {
        public function getByGridConfigAndSharedWithId($gridConfigId, $sharedWithUserId) {}
        public function save() {}
        /**
         * Deletes object from database
         */
        public function delete() {}
    }

    /**
     * @method \Pimcore\Model\GridConfigShare\Listing\Dao getDao()
     * @method Model\GridConfigShare[] load()
     * @method Model\GridConfigShare current()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var array|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $gridConfigShares;

        public function __construct() {}
        /**
         * @return Model\GridConfigShare[]
         */
        public function getGridconfigShares() {}
        public function setGridconfigShares($gridconfigShares) {}
    }

}

namespace Pimcore\Model\GridConfigShare\Listing {
    /**
     * @property \Pimcore\Model\GridConfigShare\Listing $model
     */
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * Loads a list of gridconfigs for the specicified parameters, returns an array of GridConfigFavourite elements
         *
         * @return array
         */
        public function load() {}
        /**
         * @return int
         */
        public function getTotalCount() {}
    }

}

namespace Pimcore {
    /**
     * @deprecated
     */
    define('PIMCORE_DEBUG', false);
    define('PIMCORE_TEST', true);

    class Tool {
        /**
         * Sets the current request to use when resolving request at early
         * stages (before container is loaded)
         *
         * @var Request
         */
        static private $currentRequest;
        /**
         * @var array
         */
        static protected $notFoundClassNames;
        /**
         * @var array
         */
        static protected $validLanguages;
        /**
         * @var null
         */
        static protected $isFrontend;

        public static function setCurrentRequest(Request $request = null) {}
        public static function getValidCacheKey($key) {}
        public static function isValidPath($path) {}
        public static function isValidLanguage($language) {}
        /**
         * Returns an array of language codes that configured for this system
         * in pimcore's system settings at "Localization & Internationalization (i18n/l10n)".
         * An empty array is returned if no languages are configured.
         *
         * @static
         *
         * @return string[]
         */
        public static function getValidLanguages() {}
        public static function getFallbackLanguagesFor($language) {}
        /**
         * Returns the default language for this system. If no default is set,
         * returns the first language, or null, if no languages are configured
         * at all.
         *
         * @return null|string
         */
        public static function getDefaultLanguage() {}
        /**
         * @return array|mixed
         *
         * @throws \Exception
         */
        public static function getSupportedLocales() {}
        public static function getLanguageFlagFile($language, $absolutePath = true) {}
        /**
         * @static
         *
         * @return array
         */
        public static function getRoutingDefaults() {}
        public static function resolveRequest(Request $request = null) {}
        public static function isFrontend(Request $request = null) : bool {}
        public static function isFrontendRequestByAdmin(Request $request = null) {}
        public static function useFrontendOutputFilters(Request $request = null) {}
        public static function getHostname(Request $request = null) {}
        public static function getRequestScheme(Request $request = null) {}
        public static function getHostUrl($useProtocol = null, Request $request = null) {}
        public static function getClientIp(Request $request = null) {}
        public static function getAnonymizedClientIp(Request $request = null) {}
        /**
         * @static
         *
         * @return array|bool
         */
        public static function getCustomViewConfig() {}
        public static function getMail($recipients = null, $subject = null, $charset = null) {}
        public static function getHttpData($url, $paramsGet = [ ], $paramsPost = [ ], $options = [ ]) {}
        public static function classExists($class) {}
        public static function interfaceExists($class) {}
        protected static function classInterfaceExists($class, $type) {}
        /**
         * @return array
         */
        public static function getCachedSymfonyEnvironments() : array {}
        public static function exitWithError($message) {}
    }

    class Document {
        public static function getInstance($adapter = null) {}
        /**
         * Checks if adapter is available.
         *
         * @return bool
         */
        public static function isAvailable() {}
        public static function isFileTypeSupported($filetype) {}
        /**
         * Returns adapter class if exists or false if doesn't exist
         *
         * @return Document\Adapter|null
         */
        public static function getDefaultAdapter() {}
    }

    class Logger {
        public static function log($message, $level = 'info', $context = [ ]) {}
        public static function emergency($m, $context = [ ]) {}
        public static function emerg($m, $context = [ ]) {}
        public static function alert($m, $context = [ ]) {}
        public static function critical($m, $context = [ ]) {}
        public static function crit($m, $context = [ ]) {}
        public static function error($m, $context = [ ]) {}
        public static function err($m, $context = [ ]) {}
        public static function warning($m, $context = [ ]) {}
        public static function warn($m, $context = [ ]) {}
        public static function notice($m, $context = [ ]) {}
        public static function info($m, $context = [ ]) {}
        public static function debug($m, $context = [ ]) {}
    }

    class Mail extends \swift_message {
        /**
         * @var bool
         */
        static protected $forceDebugMode;
        /**
         * Contains the debug email addresses from settings -> system -> Email Settings -> Debug email addresses
         *
         * @var array
         * @static
         */
        static protected $debugEmailAddresses;
        /**
         * @var Placeholder
         */
        protected $placeholderObject;
        /**
         * If true - emails are logged in the database and on the file-system
         *
         * @var bool
         */
        protected $loggingEnable;
        /**
         * Contains the email document
         *
         * @var Model\Document\Email
         */
        protected $document;
        /**
         * Contains the dynamic Params for the Placeholders
         *
         * @var array
         */
        protected $params;
        /**
         * html2text from mbayer is installed (http://www.mbayer.de/html2text/)
         *
         * @var bool|null
         */
        static protected $html2textInstalled;
        /**
         * Options passed to html2text
         *
         * @var string
         */
        protected $html2textOptions;
        /**
         * use html2text from mbayer if it is installed (http://www.mbayer.de/html2text/)
         *
         * @var bool
         */
        protected $html2textBinaryEnabled;
        /**
         * Prevent adding debug information
         *
         * @var bool
         */
        protected $preventDebugInformationAppending;
        /**
         * if true - the Pimcore debug mode is ignored
         *
         * @var bool
         */
        protected $ignoreDebugMode;
        /**
         * if true - the layout is enabled when document is rendered to a string
         *
         * @var bool
         */
        protected $enableLayoutOnPlaceholderRendering;
        /**
         * forces the mail class to always us the "Pimcore Mode",
         * so you don't have to set the charset every time when you create new Pimcore_Mail instance
         *
         * @var bool
         */
        static public $forcePimcoreMode;
        /**
         * if $hostUrl is set - this url well be used to create absolute urls
         * otherwise it is determined automatically
         *
         * @see MailHelper::setAbsolutePaths()
         *
         * @var string|null
         */
        protected $hostUrl;
        /**
         * if true: prevent setting the recipients from the Document - set in $this->clearRecipients()
         *
         * @var bool
         */
        protected $recipientsCleared;
        /**
         * body plain text
         *
         * @var string
         */
        protected $bodyText;
        /**
         * plain text mime part
         * this is created and attached to mail on send
         *
         * @var \Swift_MimePart
         */
        protected $bodyTextMimePart;
        /**
         * place to store original data before modifying message when sending in debug mode
         *
         * @var array
         */
        protected $originalData;
        /**
         * @var Model\Tool\Email\Log
         */
        protected $lastLogEntry;

        public function setHostUrl($url) {}
        /**
         * @return string|null
         */
        public function getHostUrl() {}
        public function __construct($subject = null, $body = null, $contentType = null, $charset = null) {}
        public function init($type = 'email') {}
        public function setIgnoreDebugMode($value) {}
        /**
         * Checks if the Debug mode is ignored
         *
         * @return bool
         */
        public function getIgnoreDebugMode() {}
        /**
         * returns if redirecting to debug mail addresses should take place when sending the mail
         *
         * @return bool
         */
        public function doRedirectMailsToDebugMailAddresses() {}
        public function setEnableLayoutOnPlaceholderRendering($value) {}
        /**
         * @return bool
         */
        public function getEnableLayoutOnPlaceholderRendering() {}
        /**
         * Determines if mbayer html2text is installed (more information at http://www.mbayer.de/html2text/)
         * and uses it to automatically create a text version of the html email
         *
         * @static
         *
         * @return bool
         */
        public static function determineHtml2TextIsInstalled() {}
        public function setHtml2TextOptions($options = '') {}
        /**
         * Returns options for html2text
         *
         * @return string
         */
        public function getHtml2TextOptions() {}
        /**
         * Clears list of recipient email addresses
         *
         * @return \Pimcore\Mail Provides fluent interface
         */
        public function clearRecipients() {}
        /**
         * Disables email logging
         *
         * @return \Pimcore\Mail Provides fluent interface
         */
        public function disableLogging() {}
        /**
         * Enables email logging (by default it's enabled)
         *
         * @return \Pimcore\Mail Provides fluent interface
         */
        public function enableLogging() {}
        /**
         * returns the logging status
         *
         * @return bool
         */
        public function loggingIsEnabled() {}
        public function setParams(array $params) {}
        public function setParam($key, $value) {}
        /**
         * Returns the parameters which were set with "setParams" or "setParam"
         *
         * @return array
         */
        public function getParams() {}
        public function getParam($key) {}
        public static function setForceDebugMode($value) {}
        public function unsetParams(array $params) {}
        public function unsetParam($key) {}
        /**
         * Sets the settings which are defined in the Document Settings (from,to,cc,bcc,replyTo)
         *
         * @return \Pimcore\Mail Provides fluent interface
         */
        protected function setDocumentSettings() {}
        public function send(\Swift_Mailer $mailer = null) {}
        public function sendWithoutRendering(\Swift_Mailer $mailer = null) {}
        private function filterLogAddresses(array $addresses) : array {}
/** @var \Swift_Mime_Headers_MailboxHeader $header */
        private function getDebugMailRecipients(/** @var \Swift_Mime_Headers_MailboxHeader $header */
array $recipients) : array {}
        public static function isValidEmailAddress($emailAddress) {}
        /**
         * Replaces the placeholders with the content and returns the rendered Subject
         *
         * @return string
         */
        public function getSubjectRendered() {}
        /**
         * Replaces the placeholders with the content and returns the rendered Html
         *
         * @return string|null
         */
        public function getBodyHtmlRendered() {}
        /**
         * Replaces the placeholders with the content and returns
         * the rendered text if a text was set with "$mail->setBodyText()"
         *
         * @return string
         */
        public function getBodyTextRendered() {}
        public function setDocument($document) {}
        /**
         * Returns the Document
         *
         * @return Model\Document\Email | null
         */
        public function getDocument() {}
        /**
         * Prevents appending of debug information (used for resending emails)
         *
         * @return \Pimcore\Mail
         */
        public function preventDebugInformationAppending() {}
        /**
         * Returns, if debug information is not added
         *
         * @return bool
         */
        public function isPreventingDebugInformationAppending() {}
        /**
         *
         * @return bool
         */
        public function getHtml2TextBinaryEnabled() {}
        /**
         * @return $this
         *
         * @throws \Exception
         */
        public function enableHtml2textBinary() {}
        /**
         * @static
         * returns  html2text binary installation status
         *
         * @return bool
         */
        public static function getHtml2textInstalled() {}
        protected function html2Text($htmlContent) {}
        /**
         * @return string
         */
        public function getBodyText() {}
        public function setBodyText($bodyText) {}
        public function setBodyHtml($body) {}
        /**
         * @return \Swift_MimePart
         */
        public function getBodyTextMimePart() {}
        /**
         * @return array
         */
        public function getOriginalData() {}
        public function setOriginalData($originalData) {}
        public function addAttachment(\Swift_Mime_Attachment $attachment) {}
        public function createAttachment($data, $mimeType = null, $filename = null, $disposition = null) {}
        public function addTo($address, $name = null) {}
        /**
         * @return Model\Tool\Email\Log
         */
        public function getLastLogEntry() {}
    }

    /**
     * This acts as facade for the actual cache implementation and exists primarily for BC reasons.
     */
    class Cache {
        /**
         * @var CoreHandlerInterface
         */
        static protected $handler;

        public static function getInstance() {}
        /**
         * Get the cache handler implementation
         *
         * @return CoreHandlerInterface
         */
        public static function getHandler() {}
        /**
         * Initialize the cache. This acts mainly as integration point with legacy caches.
         */
        public static function init() {}
        public static function load($key) {}
        public static function save($data, $key, $tags = [ ], $lifetime = null, $priority = 0, $force = false) {}
        public static function remove($key) {}
        /**
         * Empty the cache
         *
         * @return bool
         */
        public static function clearAll() {}
        public static function clearTag($tag) {}
        public static function clearTags($tags = [ ]) {}
        public static function addClearTagOnShutdown($tag) {}
        public static function addIgnoredTagOnSave($tag) {}
        public static function removeIgnoredTagOnSave($tag) {}
        public static function addIgnoredTagOnClear($tag) {}
        public static function removeIgnoredTagOnClear($tag) {}
        public static function shutdown($forceWrite = false) {}
        /**
         * Disables the complete pimcore cache
         */
        public static function disable() {}
        /**
         * Enables the pimcore cache
         */
        public static function enable() {}
        /**
         * @return bool
         */
        public static function isEnabled() {}
        public static function setForceImmediateWrite($forceImmediateWrite) {}
        /**
         * @return bool
         */
        public static function getForceImmediateWrite() {}
    }

    class File {
        /**
         * @var int
         */
        static public $defaultMode;
        /**
         * @var array
         */
        static private $isIncludeableCache;
        /**
         * @var null|resource
         */
        static protected $context;

        public static function getFileExtension($name) {}
        public static function getValidFilename($tmpFilename, $language = null, $replacement = '-') {}
        public static function isIncludeable($filename) {}
        public static function setDefaultMode($mode) {}
        /**
         * @return int
         */
        public static function getDefaultMode() {}
        public static function put($path, $data) {}
        public static function putPhpFile($path, $data) {}
        public static function mkdir($path, $mode = null, $recursive = true) {}
        public static function rename($oldPath, $newPath) {}
        /**
         * @return null|resource
         */
        public static function getContext() {}
        public static function setContext($context) {}
    }

    class Bootstrap {
        public static function startup() {}
        /**
         * @return KernelInterface
         */
        public static function startupCli() {}
        public static function setProjectRoot() {}
        /** @var \Composer\Autoload\ClassLoader $loader */
        public static function bootstrap() {}
        /**
         * @deprecated 7.0.0 Typo in name; use Bootstrap::bootstrap() instead
         * @see Bootstrap::bootstrap()
         */
        public static function boostrap() {}
        protected static function prepareEnvVariables() {}
        public static function defineConstants() {}
        public static function autoload() {}
        /**
         * @return KernelInterface
         */
        public static function kernel() {}
    }

    class Config {
        /**
         * @var array
         */
        static protected $configFileCache;
        /**
         * @var string
         */
        static protected $environment;
        /**
         * @var EnvironmentConfigInterface
         */
        static private $environmentConfig;

        public static function locateConfigFile($name) {}
        /**
         * @internal
         *
         * @return null|array
         */
        public static function getSystemConfiguration() {}
        public static function setSystemConfig(\Pimcore\Config\Config $config) {}
        public static function getWebsiteConfigRuntimeCacheKey($languange = null) {}
/** @var WebsiteSetting $item */
        public static function getWebsiteConfig(/** @var WebsiteSetting $item */
$language = null) {}
        public static function setWebsiteConfig(\Pimcore\Config\Config $config, $language = null) {}
        public static function getWebsiteConfigValue($key = null, $default = null, $language = null) {}
        private static function getArrayValue($keys, $array) {}
        private static function mapLegacyConfiguration($config) {}
        /**
         * @return mixed|null|\Pimcore\Config\Config
         *
         * @throws \Exception
         */
        public static function getSystemConfig() {}
        /**
         * @internal
         * @static
         *
         * @return \Pimcore\Config\Config
         */
        public static function getReportConfig() {}
        public static function setReportConfig(\Pimcore\Config\Config $config) {}
        /**
         * @static
         *
         * @return \Pimcore\Config\Config
         */
        public static function getRobotsConfig() {}
        public static function setRobotsConfig(\Pimcore\Config\Config $config) {}
        /**
         * @internal
         * @static
         *
         * @return \Pimcore\Config\Config
         */
        public static function getWeb2PrintConfig() {}
        public static function setWeb2PrintConfig(\Pimcore\Config\Config $config) {}
        public static function setModelClassMappingConfig($config) {}
        /**
         * @internal
         * @static
         *
         * @return mixed|\Pimcore\Config\Config
         */
        public static function getPerspectivesConfig() {}
        /**
         * @internal
         *
         * @return array
         */
        public static function getStandardPerspective() {}
        public static function getRuntimePerspective(Model\User $currentUser = null) {}
        protected static function getRuntimeElementTreeConfig($name) {}
        public static function setPerspectivesConfig(\Pimcore\Config\Config $config) {}
        public static function getAvailablePerspectives($user) {}
        public static function inPerspective($runtimeConfig, $key) {}
        public static function getEnvironment(bool $reset = false, string $default = null) {}
        public static function setEnvironment($environment) {}
        /**
         * @internal
         *
         * @return EnvironmentConfigInterface
         */
        public static function getEnvironmentConfig() : EnvironmentConfigInterface {}
        public static function setEnvironmentConfig(EnvironmentConfigInterface $environmentConfig) {}
        public static function getFlag($key) {}
        public static function getConfigInstance($file, bool $asArray = false) {}
        public static function resolveEnvVarValue(string $varName, $default = null) : ?string {}
        /**
         * @internal
         */
        public static function initDebugDevMode() {}
    }

    class Placeholder {
        /**
         * Prefix for the Placeholders
         *
         * @var string
         */
        static protected $placeholderPrefix;
        /**
         * Suffix for the Placeholders
         *
         * @var string
         */
        static protected $placeholderSuffix;
        /**
         * Prefixes for the Placeholder Classes
         *
         * @var array
         */
        static protected $placeholderClassPrefixes;
        /**
         * Contains the document object
         *
         * @var Model\Document | null
         */
        protected $document;

        public static function addPlaceholderClassPrefix($classPrefix) {}
        public static function removePlaceholderClassPrefix($classPrefix) {}
        /**
         * Returns the Placeholder class prefixes
         *
         * @static
         *
         * @return array
         */
        public static function getPlaceholderClassPrefixes() {}
        /**
         * Returns the Placeholder prefix
         *
         * @return string
         */
        public static function getPlaceholderPrefix() {}
        /**
         * Returns the Placeholder suffix
         *
         * @return string
         */
        public static function getPlaceholderSuffix() {}
        public function setPlaceholderSuffix($suffix) {}
        public function detectPlaceholders($contentString, $params, $document = null) {}
        public function replacePlaceholders($mixed, $params = [ ], $document = null, $enableLayoutOnPlaceholderReplacement = true) {}
        protected function replacePlaceholdersFromStack($placeholderStack = [ ]) {}
    }

    class Composer {
        static protected $options;

        protected static function getRootPath($event) {}
        public static function postCreateProject(Event $event) {}
        public static function postInstall(Event $event) {}
        public static function postUpdate(Event $event) {}
        public static function executeMigrationsUp(Event $event) {}
        public static function clearDataCache($event, $consoleDir) {}
        public static function parametersYmlCheck($rootPath) {}
/** @var UpdateOperation $operation */
        public static function prePackageUpdate(/** @var UpdateOperation $operation */
PackageEvent $event) {}
        protected static function executeCommand(Event $event, $consoleDir, $cmd, $timeout = 900, $writeBuffer = true) {}
        protected static function getPhp($includeArgs = true) {}
        protected static function getPhpArguments() {}
        protected static function getOptions(Event $event) {}
        protected static function getConsoleDir(Event $event, $actionName) {}
        protected static function hasDirectory(Event $event, $configName, $path, $actionName) {}
        protected static function useNewDirectoryStructure(array $options) {}
        private static function removeDecoration($string) {}
        public static function installAssets(Event $event) {}
        public static function clearCache(Event $event) {}
    }

    class Db {
        /**
         * @static
         *
         * @return \Pimcore\Db\ConnectionInterface
         */
        public static function getConnection() {}
        /**
         * @return Db\ConnectionInterface
         */
        public static function reset() {}
        /**
         * @static
         *
         * @return \Pimcore\Db\ConnectionInterface|Connection
         */
        public static function get() {}
        /**
         * @static
         *
         * @return LoggerInterface
         */
        public static function getLogger() {}
        /**
         * @static
         */
        public static function close() {}
    }

    class Version {
        const PART_HASH = 1;
        const PART_NUMBER = 0;

        /**
         * @return string
         */
        public static function getVersion() {}
        protected static function getVersionPart($part = self::PART_NUMBER) {}
        /**
         * @return int
         */
        public static function getRevision() {}
    }

    class Video {
        public static function getInstance($adapter = null) {}
        /**
         * @return bool
         */
        public static function isAvailable() {}
        /**
         * @return Video\Adapter|null
         */
        public static function getDefaultAdapter() {}
    }

    class Browser {
        const BROWSER_OPERA_MINI = 'Opera Mini';
        const BROWSER_OPERA = 'Opera';
        const VERSION_UNKNOWN = 'unknown';
        const BROWSER_UNKNOWN = 'unknown';
        const BROWSER_FIREFOX = 'Firefox';
        const BROWSER_FIREBIRD = 'Firebird';
        const BROWSER_OMNIWEB = 'OmniWeb';
        const BROWSER_ICAB = 'iCab';
        const BROWSER_KONQUEROR = 'Konqueror';
        const BROWSER_POCKET_IE = 'Pocket Internet Explorer';
        const BROWSER_IE = 'Internet Explorer';
        const BROWSER_WEBTV = 'WebTV';
        const BROWSER_GALEON = 'Galeon';
        const BROWSER_NETSCAPE_NAVIGATOR = 'Netscape Navigator';
        const BROWSER_PHOENIX = 'Phoenix';
        const BROWSER_NETPOSITIVE = 'NetPositive';
        const BROWSER_NOKIA = 'Nokia Browser';
        const BROWSER_NOKIA_S60 = 'Nokia S60 OSS Browser';
        const BROWSER_MSNBOT = 'MSN Bot';
        const BROWSER_MSN = 'MSN Browser';
        const PLATFORM_OS2 = 'OS/2';
        const PLATFORM_LINUX = 'Linux';
        const PLATFORM_IPHONE = 'iPhone';
        const PLATFORM_BEOS = 'BeOS';
        const PLATFORM_WINDOWS = 'Windows';
        const PLATFORM_UNKNOWN = 'unknown';
        const PLATFORM_APPLE = 'Apple';
        const PLATFORM_WINDOWS_CE = 'Windows CE';
        const BROWSER_LYNX = 'Lynx';
        const BROWSER_SAFARI = 'Safari';
        const BROWSER_IPHONE = 'iPhone';
        const BROWSER_IPOD = 'iPod';
        const BROWSER_ICEWEASEL = 'Iceweasel';
        const BROWSER_SHIRETOKO = 'Shiretoko';
        const BROWSER_MOZILLA = 'Mozilla';
        const BROWSER_AMAYA = 'Amaya';
        const BROWSER_SLURP = 'Yahoo! Slurp';
        const BROWSER_W3CVALIDATOR = 'W3C Validator';
        const BROWSER_BLACKBERRY = 'BlackBerry';
        const BROWSER_ICECAT = 'IceCat';
        const BROWSER_IPAD = 'iPad';
        const BROWSER_CHROME = 'Chrome';
        const BROWSER_ANDROID = 'Android';
        const PLATFORM_ANDROID = 'Android';
        const PLATFORM_OPENSOLARIS = 'OpenSolaris';
        const OPERATING_SYSTEM_UNKNOWN = 'unknown';
        const PLATFORM_OPENBSD = 'OpenBSD';
        const PLATFORM_FREEBSD = 'FreeBSD';
        const PLATFORM_SUNOS = 'SunOS';
        const PLATFORM_NETBSD = 'NetBSD';
        const PLATFORM_IPAD = 'iPad';
        const PLATFORM_IPOD = 'iPod';
        const PLATFORM_NOKIA = 'Nokia';
        const PLATFORM_BLACKBERRY = 'BlackBerry';
        const BROWSER_GOOGLEBOT = 'GoogleBot';

        /**
         * @var string
         */
        private $_agent;
        /**
         * @var string
         */
        private $_browser_name;
        /**
         * @var string
         */
        private $_version;
        /**
         * @var string
         */
        private $_platform;
        /**
         * @var string
         */
        private $_os;
        /**
         * @var bool
         */
        private $_is_aol;
        /**
         * @var bool
         */
        private $_is_mobile;
        /**
         * @var bool
         */
        private $_is_tablet;
        /**
         * @var bool
         */
        private $_is_robot;
        /**
         * @var bool
         */
        private $_is_facebook;
        /**
         * @var string
         */
        private $_aol_version;

        public function __construct($userAgent = '') {}
        /**
         * Reset all properties
         */
        public function reset() {}
        public function isBrowser($browserName) {}
        /**
         * The name of the browser.  All return types are from the class contants
         *
         * @return string Name of the browser
         */
        public function getBrowser() {}
        public function setBrowser($browser) {}
        /**
         * The name of the platform.  All return types are from the class contants
         *
         * @return string Name of the browser
         */
        public function getPlatform() {}
        public function setPlatform($platform) {}
        /**
         * The version of the browser.
         *
         * @return string Version of the browser (will only contain alpha-numeric characters and a period)
         */
        public function getVersion() {}
        public function setVersion($version) {}
        /**
         * The version of AOL.
         *
         * @return string Version of AOL (will only contain alpha-numeric characters and a period)
         */
        public function getAolVersion() {}
        public function setAolVersion($version) {}
        /**
         * Is the browser from AOL?
         *
         * @return bool True if the browser is from AOL otherwise false
         */
        public function isAol() {}
        /**
         * Is the browser from a mobile device?
         *
         * @return bool True if the browser is from a mobile device otherwise false
         */
        public function isMobile() {}
        /**
         * Is the browser from a tablet device?
         *
         * @return bool True if the browser is from a tablet device otherwise false
         */
        public function isTablet() {}
        /**
         * Is the browser from a robot (ex Slurp,GoogleBot)?
         *
         * @return bool True if the browser is from a robot otherwise false
         */
        public function isRobot() {}
        /**
         * Is the browser from facebook?
         *
         * @return bool True if the browser is from facebook otherwise false
         */
        public function isFacebook() {}
        public function setAol($isAol) {}
        protected function setMobile($value = true) {}
        protected function setTablet($value = true) {}
        protected function setRobot($value = true) {}
        protected function setFacebook($value = true) {}
        /**
         * Get the user agent value in use to determine the browser
         *
         * @return string The user agent from the HTTP header
         */
        public function getUserAgent() {}
        public function setUserAgent($agent_string) {}
        /**
         * Used to determine if the browser is actually "chromeframe"
         *
         * @since 1.7
         *
         * @return bool True if the browser is using chromeframe
         */
        public function isChromeFrame() {}
        /**
         * Returns a formatted string with a summary of the details of the browser.
         *
         * @return string formatted string with a summary of the browser
         */
        public function __toString() {}
        /**
         * Protected routine to calculate and determine what the browser is in use (including platform)
         */
        protected function determine() {}
        /**
         * Protected routine to determine the browser type
         *
         * @return bool True if the browser was detected otherwise false
         */
        protected function checkBrowsers() {}
        /**
         * Determine if the user is using a BlackBerry (last updated 1.7)
         *
         * @return bool True if the browser is the BlackBerry browser otherwise false
         */
        protected function checkBrowserBlackBerry() {}
        /**
         * Determine if the user is using an AOL User Agent (last updated 1.7)
         *
         * @return bool True if the browser is from AOL otherwise false
         */
        protected function checkForAol() {}
        /**
         * Determine if the browser is the GoogleBot or not (last updated 1.7)
         *
         * @return bool True if the browser is the GoogletBot otherwise false
         */
        protected function checkBrowserGoogleBot() {}
        /**
         * Determine if the browser is the MSNBot or not (last updated 1.9)
         *
         * @return bool True if the browser is the MSNBot otherwise false
         */
        protected function checkBrowserMSNBot() {}
        /**
         * Determine if the browser is the W3C Validator or not (last updated 1.7)
         *
         * @return bool True if the browser is the W3C Validator otherwise false
         */
        protected function checkBrowserW3CValidator() {}
        /**
         * Determine if the browser is the Yahoo! Slurp Robot or not (last updated 1.7)
         *
         * @return bool True if the browser is the Yahoo! Slurp Robot otherwise false
         */
        protected function checkBrowserSlurp() {}
        /**
         * Determine if the browser is Internet Explorer or not (last updated 1.7)
         *
         * @return bool True if the browser is Internet Explorer otherwise false
         */
        protected function checkBrowserInternetExplorer() {}
        /**
         * Determine if the browser is Opera or not (last updated 1.7)
         *
         * @return bool True if the browser is Opera otherwise false
         */
        protected function checkBrowserOpera() {}
        /**
         * Determine if the browser is Chrome or not (last updated 1.7)
         *
         * @return bool True if the browser is Chrome otherwise false
         */
        protected function checkBrowserChrome() {}
        /**
         * Determine if the browser is WebTv or not (last updated 1.7)
         *
         * @return bool True if the browser is WebTv otherwise false
         */
        protected function checkBrowserWebTv() {}
        /**
         * Determine if the browser is NetPositive or not (last updated 1.7)
         *
         * @return bool True if the browser is NetPositive otherwise false
         */
        protected function checkBrowserNetPositive() {}
        /**
         * Determine if the browser is Galeon or not (last updated 1.7)
         *
         * @return bool True if the browser is Galeon otherwise false
         */
        protected function checkBrowserGaleon() {}
        /**
         * Determine if the browser is Konqueror or not (last updated 1.7)
         *
         * @return bool True if the browser is Konqueror otherwise false
         */
        protected function checkBrowserKonqueror() {}
        /**
         * Determine if the browser is iCab or not (last updated 1.7)
         *
         * @return bool True if the browser is iCab otherwise false
         */
        protected function checkBrowserIcab() {}
        /**
         * Determine if the browser is OmniWeb or not (last updated 1.7)
         *
         * @return bool True if the browser is OmniWeb otherwise false
         */
        protected function checkBrowserOmniWeb() {}
        /**
         * Determine if the browser is Phoenix or not (last updated 1.7)
         *
         * @return bool True if the browser is Phoenix otherwise false
         */
        protected function checkBrowserPhoenix() {}
        /**
         * Determine if the browser is Firebird or not (last updated 1.7)
         *
         * @return bool True if the browser is Firebird otherwise false
         */
        protected function checkBrowserFirebird() {}
        /**
         * Determine if the browser is Netscape Navigator 9+ or not (last updated 1.7)
         * NOTE: (http://browser.netscape.com/ - Official support ended on March 1st, 2008)
         *
         * @return bool True if the browser is Netscape Navigator 9+ otherwise false
         */
        protected function checkBrowserNetscapeNavigator9Plus() {}
        /**
         * Determine if the browser is Shiretoko or not (https://wiki.mozilla.org/Projects/shiretoko) (last updated 1.7)
         *
         * @return bool True if the browser is Shiretoko otherwise false
         */
        protected function checkBrowserShiretoko() {}
        /**
         * Determine if the browser is Ice Cat or not (http://en.wikipedia.org/wiki/GNU_IceCat) (last updated 1.7)
         *
         * @return bool True if the browser is Ice Cat otherwise false
         */
        protected function checkBrowserIceCat() {}
        /**
         * Determine if the browser is Nokia or not (last updated 1.7)
         *
         * @return bool True if the browser is Nokia otherwise false
         */
        protected function checkBrowserNokia() {}
        /**
         * Determine if the browser is Firefox or not (last updated 1.7)
         *
         * @return bool True if the browser is Firefox otherwise false
         */
        protected function checkBrowserFirefox() {}
        /**
         * Determine if the browser is Firefox or not (last updated 1.7)
         *
         * @return bool True if the browser is Firefox otherwise false
         */
        protected function checkBrowserIceweasel() {}
        /**
         * Determine if the browser is Mozilla or not (last updated 1.7)
         *
         * @return bool True if the browser is Mozilla otherwise false
         */
        protected function checkBrowserMozilla() {}
        /**
         * Determine if the browser is Lynx or not (last updated 1.7)
         *
         * @return bool True if the browser is Lynx otherwise false
         */
        protected function checkBrowserLynx() {}
        /**
         * Determine if the browser is Amaya or not (last updated 1.7)
         *
         * @return bool True if the browser is Amaya otherwise false
         */
        protected function checkBrowserAmaya() {}
        /**
         * Determine if the browser is Safari or not (last updated 1.7)
         *
         * @return bool True if the browser is Safari otherwise false
         */
        protected function checkBrowserSafari() {}
        /**
         * Detect if URL is loaded from FacebookExternalHit
         *
         * @return bool True if it detects FacebookExternalHit otherwise false
         */
        protected function checkFacebookExternalHit() {}
        /**
         * Detect if URL is being loaded from internal Facebook browser
         *
         * @return bool True if it detects internal Facebook browser otherwise false
         */
        protected function checkForFacebookIos() {}
        /**
         * Detect Version for the Safari browser on iOS devices
         *
         * @return bool True if it detects the version correctly otherwise false
         */
        protected function getSafariVersionOnIos() {}
        /**
         * Detect Version for the Chrome browser on iOS devices
         *
         * @return bool True if it detects the version correctly otherwise false
         */
        protected function getChromeVersionOnIos() {}
        /**
         * Determine if the browser is iPhone or not (last updated 1.7)
         *
         * @return bool True if the browser is iPhone otherwise false
         */
        protected function checkBrowseriPhone() {}
        /**
         * Determine if the browser is iPad or not (last updated 1.7)
         *
         * @return bool True if the browser is iPad otherwise false
         */
        protected function checkBrowseriPad() {}
        /**
         * Determine if the browser is iPod or not (last updated 1.7)
         *
         * @return bool True if the browser is iPod otherwise false
         */
        protected function checkBrowseriPod() {}
        /**
         * Determine if the browser is Android or not (last updated 1.7)
         *
         * @return bool True if the browser is Android otherwise false
         */
        protected function checkBrowserAndroid() {}
        /**
         * Determine the user's platform (last updated 1.7)
         */
        protected function checkPlatform() {}
    }

    class Report {
        /**
         * @static
         * @depricated
         *
         * @return \Pimcore\Config\Config
         */
        public static function getConfig() {}
    }

    class Image {
        /**
         * @return null|Adapter\GD|Adapter\Imagick
         *
         * @throws \Exception
         */
        public static function getInstance() {}
        /**
         * @return null|Adapter\GD|Adapter\Imagick
         *
         * @throws \Exception
         */
        public static function create() {}
    }

    abstract class Kernel extends \symfony\component\httpkernel\kernel {
        /**
         * @var Extension\Config
         */
        protected $extensionConfig;
        /**
         * @var BundleCollection
         */
        private $bundleCollection;

        /**
         * {@inheritdoc}
         */
        public function getRootDir() {}
        /**
         * {@inheritdoc}
         */
        public function getProjectDir() {}
        /**
         * {@inheritdoc}
         */
        public function getCacheDir() {}
        /**
         * {@inheritdoc}
         */
        public function getLogDir() {}
        public function registerContainerConfiguration(LoaderInterface $loader) {}
        private function registerExtensionConfigFileResources(ContainerBuilder $container) {}
        /**
         * @inheritdoc
         */
        public function boot() {}
        /**
         * @inheritdoc
         */
        public function shutdown() {}
        /**
         * @inheritDoc
         */
        protected function initializeContainer() {}
        /**
         * Returns an array of bundles to register.
         *
         * @return BundleInterface[] An array of bundle instances
         */
        public function registerBundles() : array {}
        /**
         * Creates bundle collection. Use this method to set bundles on the collection
         * early.
         *
         * @return BundleCollection
         */
        protected function createBundleCollection() : BundleCollection {}
        /**
         * Returns the bundle collection which was used to build the set of used bundles
         *
         * @return BundleCollection
         */
        public function getBundleCollection() : BundleCollection {}
        protected function registerCoreBundlesToCollection(BundleCollection $collection) {}
        protected function getEnvironmentsForDevBundles() : array {}
        protected function getEnvironmentsForDevGeneratorBundles() : array {}
        protected function registerExtensionManagerBundles(BundleCollection $collection) {}
        public function registerBundlesToCollection(BundleCollection $collection) {}
        /**
         * Handle system settings and requirements
         */
        protected function setSystemRequirements() {}
    }

}

namespace Pimcore\HttpKernel {
    /**
     * Builds public web path for a resource saved in Resources/public of a bundle
     *
     * @see http://stackoverflow.com/questions/21017639/get-path-of-image-in-specified-bundle
     */
    class WebPathResolver {
        public function getPrefix(BundleInterface $bundle) {}
        public function getPath(BundleInterface $bundle, $type, $resource) {}
    }

}

namespace Pimcore\HttpKernel\CacheWarmer {
    /**
     * Creates needed pimcore directories when warming up the cache
     */
    class MkdirCacheWarmer implements \symfony\component\httpkernel\cachewarmer\cachewarmerinterface {
        /**
         * @var int
         */
        private $mode;

        public function __construct($mode = 775) {}
        /**
         * @inheritDoc
         */
        public function isOptional() {}
        public function warmUp($cacheDir) {}
    }

}

namespace Pimcore\HttpKernel\Bundle {
    /**
     * Defines a bundle which has dependencies on other bundles. When adding a DependentBundle to the collection, the
     * collection will call the static method to register additional bundles.
     */
    interface DependentBundleInterface {
        static function registerDependentBundles(BundleCollection $collection) ;
    }

}

namespace Pimcore\HttpKernel\BundleLocator {
    class NotFoundException extends \runtimeexception {}

    class InvalidArgumentException extends \invalidargumentexception {}

    class BundleLocator implements \pimcore\httpkernel\bundlelocator\bundlelocatorinterface {
        /**
         * @var KernelInterface
         */
        private $kernel;
        /**
         * @var array
         */
        private $bundleCache;

        public function __construct(KernelInterface $kernel) {}
        public function getBundle($class) : BundleInterface {}
        public function getBundlePath($class) : string {}
        private function getBundleForClass($class) : BundleInterface {}
        private function findBundleForClass(string $class) : BundleInterface {}
    }


    interface BundleLocatorInterface {
        function getBundle($class) : BundleInterface ;
        function getBundlePath($class) : string ;
    }

}

namespace Pimcore\HttpKernel\BundleCollection {
    class LazyLoadedItem extends \pimcore\httpkernel\bundlecollection\abstractitem {
        /**
         * @var string
         */
        private $className;
        /**
         * @var BundleInterface
         */
        private $bundle;
        /**
         * @var array
         */
        static private $classImplementsCache;

        public function __construct(string $className, int $priority = 0, array $environments = [ ], string $source = self::SOURCE_PROGRAMATICALLY) {}
        public function getBundleIdentifier() : string {}
        public function getBundle() : BundleInterface {}
        public function isPimcoreBundle() : bool {}
/** @var DependentBundleInterface $className */
        public function registerDependencies(/** @var DependentBundleInterface $className */
BundleCollection $collection) {}
        private static function implementsInterface(string $className, string $interfaceName) : bool {}
    }

    abstract class AbstractItem implements \pimcore\httpkernel\bundlecollection\iteminterface {
        /**
         * @var int
         */
        private $priority;
        /**
         * @var array
         */
        private $environments;
        /**
         * @var string
         */
        private $source;

        public function __construct(int $priority = 0, array $environments = [ ], string $source = self::SOURCE_PROGRAMATICALLY) {}
        public function getPriority() : int {}
        public function getEnvironments() : array {}
        public function matchesEnvironment(string $environment) : bool {}
        public function getSource() : string {}
    }

    class Item extends \pimcore\httpkernel\bundlecollection\abstractitem {
        /**
         * @var BundleInterface
         */
        private $bundle;

        public function __construct(BundleInterface $bundle, int $priority = 0, array $environments = [ ], string $source = self::SOURCE_PROGRAMATICALLY) {}
        public function getBundleIdentifier() : string {}
        public function getBundle() : BundleInterface {}
        public function isPimcoreBundle() : bool {}
        public function registerDependencies(BundleCollection $collection) {}
    }

    class BundleCollection {
        /**
         * @var ItemInterface[]
         */
        private $items;

        public function add(ItemInterface $item) : self {}
        public function getItem(string $identifier) : ItemInterface {}
        public function hasItem(string $identifier) {}
        public function getItems(string $environment = null) : array {}
        public function getIdentifiers(string $environment = null) : array {}
        public function getBundles(string $environment) : array {}
        public function addBundle($bundle, int $priority = 0, array $environments = [ ]) : self {}
        public function addBundles(array $bundles, int $priority = 0, array $environments = [ ]) : self {}
    }


    interface ItemInterface {
    const SOURCE_PROGRAMATICALLY = 'programatically';
    const SOURCE_EXTENSION_MANAGER_CONFIG = 'extension_manager_config';
        function getBundleIdentifier() : string ;
        function getBundle() : BundleInterface ;
        function isPimcoreBundle() : bool ;
        function getPriority() : int ;
        function getEnvironments() : array ;
        function registerDependencies(BundleCollection $collection) ;
        function matchesEnvironment(string $environment) : bool ;
        function getSource() : string ;
    }

}

namespace Pimcore\Migrations {
    class InstallVersion extends \pimcore\migrations\version {
        const INSTALL_VERSION = '00000001';

        /**
         * @var MigrationInstallerInterface
         */
        private $installer;

        public function __construct(MigrationInstallerInterface $installer, Configuration $configuration) {}
        public function getInstaller() : MigrationInstallerInterface {}
        protected function createMigration() {}
    }

    class Version extends \doctrine\dbal\migrations\version {
        /**
         * The Migrations Configuration instance for this migration
         *
         * @var Configuration
         */
        private $configuration;
        /**
         * The OutputWriter object instance used for outputting information
         *
         * @var OutputWriter
         */
        private $outputWriter;
        /**
         * The version in timestamp format (YYYYMMDDHHMMSS)
         *
         * @var int
         */
        private $version;
        /**
         * The migration instance for this version
         *
         * @var AbstractMigration
         */
        private $migration;
        /**
         * @var ConnectionInterface
         */
        private $connection;
        /**
         * @var string
         */
        private $class;
        /** The array of collected SQL statements for this version */
        private $sql;
        /** The array of collected parameters for SQL statements for this version */
        private $params;
        /** The array of collected types for SQL statements for this version */
        private $types;
        /** The time in seconds that this migration version took to execute */
        private $time;
        /**
         * @var int
         */
        private $state;
        /** @var SchemaDiffProviderInterface */
        private $schemaProvider;

        public function __construct(Configuration $configuration, $version, $class, SchemaDiffProviderInterface $schemaProvider = null) {}
        protected function createMigration() {}
        /**
         * Returns the string version in the format YYYYMMDDHHMMSS
         *
         * @return string $version
         */
        public function getVersion() {}
        /**
         * Returns the Migrations Configuration object instance
         *
         * @return Configuration $configuration
         */
        public function getConfiguration() {}
        /**
         * Check if this version has been migrated or not.
         *
         * @return bool
         */
        public function isMigrated() {}
        public function markMigrated() {}
        public function markNotMigrated() {}
        private function markVersion($direction) {}
        public function addSql($sql, array $params = [ ], array $types = [ ]) {}
        private function addQueryParams($params, $types) {}
        public function writeSqlFile($path, $direction = self::DIRECTION_UP) {}
        /**
         * @return AbstractMigration
         */
        public function getMigration() {}
        public function execute($direction, $dryRun = false, $timeAllQueries = false) {}
        public function getExecutionState() {}
        private function outputQueryTime($queryStart, $timeAllQueries = false) {}
        /**
         * Returns the time this migration version took to execute
         *
         * @return int $time The time this migration version took to execute
         */
        public function getTime() {}
        public function __toString() {}
        private function executeRegisteredSql($dryRun = false, $timeAllQueries = false) {}
        private function outputSqlQuery($idx, $query) {}
        private function formatParamsForOutput(array $params, array $types) {}
    }

    class MigrationManager {
        /**
         * @var ConnectionInterface
         */
        private $connection;
        /**
         * @var ConfigurationFactory
         */
        private $configurationFactory;

        public function __construct(ConnectionInterface $connection, ConfigurationFactory $configurationFactory) {}
        public function getConfiguration(string $migrationSet) : Configuration {}
        public function getVersion(string $migrationSet, string $versionId) : DoctrineVersion {}
        public function getBundleConfiguration(BundleInterface $bundle) : Configuration {}
        public function getBundleVersion(BundleInterface $bundle, string $versionId) : DoctrineVersion {}
        public function getInstallConfiguration(Configuration $configuration, MigrationInstallerInterface $installer) : InstallConfiguration {}
        public function executeVersion(DoctrineVersion $version, bool $up = true, bool $dryRun = false) : array {}
        public function markVersionAsMigrated(DoctrineVersion $version, bool $includePrevious = true) {}
        public function markVersionAsNotMigrated(DoctrineVersion $version) {}
    }

    class SqlFileWriter {
        /**
         * @var Configuration
         */
        private $configuration;
        /**
         * @var string
         */
        private $destPath;
        /**
         * @var null|OutputWriter
         */
        private $outputWriter;

        public function __construct(Configuration $configuration, $destPath, OutputWriter $outputWriter = null) {}
        public function write(array $queriesByVersion, $direction) {}
        private function buildMigrationFile(array $queriesByVersion, $direction) {}
        private function getVersionUpdateQuery($version, $direction) {}
        private function buildMigrationFilePath() {}
        protected function throwInvalidArgumentException($message) {}
    }

    class Migration extends \doctrine\dbal\migrations\migration {
        /**
         * @var Configuration
         */
        private $configuration;
        /**
         * The OutputWriter object instance used for outputting information
         *
         * @var OutputWriter
         */
        private $outputWriter;

        public function __construct(Configuration $configuration) {}
        public function writeSqlFile($path, $to = null) {}
    }

}

namespace Pimcore\Migrations\Configuration {
    class ConfigurationFactory implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @var ContainerInterface
         */
        private $container;
        /**
         * @var MigrationSetConfiguration[]
         */
        private $migrationSets;
        /**
         * @var Configuration[]
         */
        private $configurations;
        /**
         * @var InstallConfiguration[]
         */
        private $installConfigurations;

        public function __construct(ContainerInterface $container, array $migrationSetConfigurations = [ ]) {}
        public static function getSubscribedEvents() {}
        private function buildMigrationSets(array $configurations) {}
        public function getForSet(string $set, ConnectionInterface $connection, OutputWriter $outputWriter = null) {}
        public function getForBundle(BundleInterface $bundle, ConnectionInterface $connection, OutputWriter $outputWriter = null) : Configuration {}
        protected function getConfiguration(MigrationSetConfiguration $migrationSet, ConnectionInterface $connection, OutputWriter $outputWriter = null) : Configuration {}
        public function getInstallConfiguration(Configuration $configuration, MigrationInstallerInterface $installer) : InstallConfiguration {}
        /**
         * Reset all registered configurations. Can be necessary during tests when rebuilding the DB.
         */
        public function reset() {}
        protected function configureConfiguration(Configuration $configuration, MigrationSetConfiguration $migrationSet) {}
        protected function injectContainerToVersions(Configuration $configuration) {}
        private function getMigrationSetForBundle(BundleInterface $bundle) : MigrationSetConfiguration {}
        protected function buildBundleMigrationSet(BundleInterface $bundle) {}
        private function registerMigrationSet(MigrationSetConfiguration $migrationSet) {}
        protected function getMigrationSet(string $set) : MigrationSetConfiguration {}
    }

    class Configuration extends \doctrine\dbal\migrations\configuration\configuration {
        /**
         * @var string
         */
        private $migrationSet;
        /**
         * The column name to track the migration set
         *
         * @var string
         */
        private $migrationSetColumnName;
        /**
         * The column name to track migration date
         *
         * @var string
         */
        private $migrationDateColumnName;
        /**
         * Flag for whether or not the migration table has been created
         *
         * @var bool
         */
        private $migrationTableCreated;
        /**
         * Connection instance to use for migrations
         *
         * @var Connection
         */
        private $connection;
        /**
         * If the installer is set, the default current version will either be 0 or InstallVersion::INSTALL_VERSION depending
         * on isInstalled()
         *
         * @var MigrationInstallerInterface
         */
        private $installer;

        public function __construct(string $migrationSet, Connection $connection, OutputWriter $outputWriter = null, MigrationFinderInterface $finder = null) {}
        public function getMigrationSet() : string {}
        public function getMigrationSetColumnName() : string {}
        public function setMigrationSetColumnName(string $migrationSetColumnName) {}
        public function getMigrationDateColumnName() : string {}
        public function setMigrationDateColumnName(string $migrationDateColumnName) {}
        public function setMigrationsTableName($tableName) {}
        public function setInstaller(MigrationInstallerInterface $installer) {}
        public function registerMigrationsFromDirectory($path) {}
        public function registerMigration($version, $class) {}
        protected function setMigrations(array $migrations) {}
        public function reset() {}
        /**
         * Create the migration table to track migrations with.
         *
         * @return bool Whether or not the table was created.
         */
        public function createMigrationTable() {}
        public function hasVersionMigrated(\Doctrine\DBAL\Migrations\Version $version) {}
        /**
         * Returns all migrated versions from the versions table, in an array.
         *
         * @return Version[]
         */
        public function getMigratedVersions() {}
        /**
         * Returns the current migrated version from the versions table.
         *
         * @return string
         */
        public function getCurrentVersion() {}
        /**
         * Returns the total number of executed migration versions
         *
         * @return int
         */
        public function getNumberOfExecutedMigrations() {}
        /**
         * Clears migration table records.
         */
        public function clearMigratedVersions() {}
        /**
         * Returns the number of new (not migrated) migrations
         *
         * @return int
         */
        public function getNumberOfNewMigrations() : int {}
        public function formatQuery(string $query) : string {}
        private function ensureMigrationClassExists($class) {}
    }

    /**
     * Configuration for bundle install/uninstall operations handling only a single migration which delegates
     * changes to the bundle installer.
     */
    class InstallConfiguration extends \pimcore\migrations\configuration\configuration {
        /**
         * @var MigrationInstallerInterface
         */
        private $installer;
        /**
         * @var InstallVersion
         */
        private $installVersion;

        public function __construct(MigrationInstallerInterface $installer, string $migrationSet, Connection $connection, OutputWriter $outputWriter = null, MigrationFinderInterface $finder = null) {}
        public function getInstaller() : MigrationInstallerInterface {}
        public function getInstallVersion() : InstallVersion {}
        public function hasInstallVersionMigrated() : bool {}
        protected function registerInstallVersion() {}
    }

    final class MigrationSetConfiguration {
        /**
         * @var string
         */
        private $identifier;
        /**
         * @var string
         */
        private $name;
        /**
         * @var string
         */
        private $namespace;
        /**
         * @var string
         */
        private $directory;
        /**
         * Optional database connection name
         *
         * @var string|null
         */
        private $connection;
        /**
         * @var OptionsResolver
         */
        static private $configResolver;

        public function __construct(string $identifier, string $name, string $namespace, string $directory, string $connection = null) {}
        public static function fromConfig(array $config) : self {}
        private static function configureConfigResolver(OptionsResolver $resolver) {}
        public function getIdentifier() : string {}
        public function getName() : string {}
        public function getNamespace() : string {}
        public function getDirectory() : string {}
        /**
         * @return null|string
         */
        public function getConnection() {}
    }

}

namespace Pimcore\Migrations\Command {
    class MigrateCommand extends \doctrine\bundle\migrationsbundle\command\migrationsmigratedoctrinecommand {
    use \pimcore\migrations\command\traits\pimcoremigrationsconfiguration;

        protected function configure() {}
    }

    class GenerateCommand extends \doctrine\bundle\migrationsbundle\command\migrationsgeneratedoctrinecommand {
    use \pimcore\migrations\command\traits\pimcoremigrationsconfiguration;

        static private $_template;

        protected function configure() {}
        protected function getTemplate() {}
    }

    class LatestCommand extends \doctrine\bundle\migrationsbundle\command\migrationslatestdoctrinecommand {
    use \pimcore\migrations\command\traits\pimcoremigrationsconfiguration;

        protected function configure() {}
    }

    class VersionCommand extends \doctrine\bundle\migrationsbundle\command\migrationsversiondoctrinecommand {
    use \pimcore\migrations\command\traits\pimcoremigrationsconfiguration;

        protected function configure() {}
    }

    class ExecuteCommand extends \doctrine\bundle\migrationsbundle\command\migrationsexecutedoctrinecommand {
    use \pimcore\migrations\command\traits\pimcoremigrationsconfiguration;

        protected function configure() {}
    }

    class MarkAllDoneCommand extends \doctrine\dbal\migrations\tools\console\command\abstractcommand {
    use \pimcore\migrations\command\traits\pimcoremigrationsconfiguration;

        protected $migrationManager;

        public function __construct(MigrationManager $migrationManager) {}
        protected function configure() {}
        public function execute(InputInterface $input, OutputInterface $output) {}
    }

    class StatusCommand extends \doctrine\bundle\migrationsbundle\command\migrationsstatusdoctrinecommand {
    use \pimcore\migrations\command\traits\pimcoremigrationsconfiguration;

        protected function configure() {}
        public function execute(InputInterface $input, OutputInterface $output) {}
    }

}

namespace Pimcore\Migrations\Command\Traits {
    /**
     * @method Application getApplication()
     */
    trait PimcoreMigrationsConfiguration {
        /**
         * @var ConnectionInterface
         */
        protected $connection;
        /**
         * @var Configuration
         */
        protected $migrationConfiguration;
        /**
         * @var OutputWriter
         */
        protected $outputWriter;
/** @var AbstractCommand $this */
        protected function configureCommand(/** @var AbstractCommand $this */
string $name) {}
        protected function getMigrationConfiguration(InputInterface $input, OutputInterface $output) : Configuration {}
        protected function getBundle(InputInterface $input) {}
/** @var ConnectionInterface $connection */
        protected function getConnection(/** @var ConnectionInterface $connection */
InputInterface $input) : ConnectionInterface {}
        protected function getOutputWriter(OutputInterface $output) {}
    }

}

namespace Pimcore\Migrations\Migration {
    abstract class AbstractPimcoreMigration extends \doctrine\migrations\abstractmigration implements \pimcore\migrations\migration\pimcoremigrationinterface, \pimcore\migrations\migration\dryrunmigrationinterface {
        /**
         * @var bool
         */
        private $dryRun;

        public function setDryRun(bool $dryRun) {}
        /**
         * @inheritdoc
         */
        public function isDryRun() : bool {}
        /**
         * @inheritdoc
         */
        public function doesSqlMigrations() : bool {}
        protected function writeMessage($message) {}
        protected function dryRunMessage($message, $prefix = 'DRY-RUN:') {}
    }

    /**
     * This migration is executed when a bundle is about to be installed/uninstalled and is built in
     * conjunction with InstallConfiguration and InstallVersion.
     */
    class InstallMigration extends \pimcore\migrations\migration\abstractpimcoremigration {
        /**
         * @var MigrationInstallerInterface
         */
        protected $installer;

        public function __construct(MigrationInstallerInterface $installer, InstallVersion $version) {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }


    /**
     * Doctrine migrations by default output a warning if no SQL queries were run during a migration. This is
     * perfectly OK for only DB-based migrations, but might happen if a migration changes class definitions which
     * handle their SQL updates implicitely. If a migration implements this interface and doesSqlMigrations() returns
     * false, the warning will be omitted.
     */
    interface PimcoreMigrationInterface {
        /**
         * Determines if a warning should be issues when no SQL queries were executed
         * during a migration. Return false here to omit a warning.
         *
         * @return bool
         */
        function doesSqlMigrations() : bool ;
    }

    /**
     * Used in migrations handling something else than DB migrations (e.g. changing class definitions). As a normal
     * doctrine migration does not know about the dry-run switch (SQL is simply not executed), we need to pass the
     * dry-run state to the migration itself.
     */
    interface DryRunMigrationInterface {
        function setDryRun(bool $dryRun) ;
        /**
         * Migrations implementing this interface can check the dry-run state
         * on their own and omit changing data (e.g. changing a class definition)
         * if dry-run is set
         *
         * @return bool
         */
        function isDryRun() : bool ;
    }

}

namespace Pimcore\Video {
    abstract class Adapter {
        /**
         * @var int
         */
        public $videoBitrate;
        /**
         * @var int
         */
        public $audioBitrate;
        /**
         * @var string
         */
        public $format;
        /**
         * @var string
         */
        public $destinationFile;
        /**
         * @var string
         */
        public $storageFile;
        /**
         * length in seconds
         *
         * @var int
         */
        public $length;

        public function setAudioBitrate($audioBitrate) {}
        /**
         * @return int
         */
        public function getAudioBitrate() {}
        public function setVideoBitrate($videoBitrate) {}
        /**
         * @return int
         */
        public function getVideoBitrate() {}
        abstract public function load($file, $options = [ ]) ;
        /**
         * @return bool
         */
        abstract public function save() ;
        abstract public function saveImage($file, $timeOffset = null) ;
        /**
         * @abstract
         */
        abstract public function destroy() ;
        public function setFormat($format) {}
        /**
         * @return string
         */
        public function getFormat() {}
        public function setDestinationFile($destinationFile) {}
        /**
         * @return string
         */
        public function getDestinationFile() {}
        public function setLength($length) {}
        /**
         * @return int
         */
        public function getLength() {}
        /**
         * @return string
         */
        public function getStorageFile() {}
        public function setStorageFile($storageFile) {}
    }

}

namespace Pimcore\Video\Adapter {
    class Ffmpeg extends \pimcore\video\adapter {
        /**
         * @var string
         */
        public $file;
        /**
         * @var string
         */
        protected $processId;
        /**
         * @var string
         */
        protected $arguments;
        /**
         * @var array
         */
        private $tmpFiles;

        /**
         * @return bool
         */
        public function isAvailable() {}
        /**
         * @return mixed
         *
         * @throws \Exception
         */
        public static function getFfmpegCli() {}
        public function load($file, $options = [ ]) {}
        /**
         * @return bool
         *
         * @throws \Exception
         */
        public function save() {}
        public function saveImage($file, $timeOffset = null) {}
        /**
         * @return string
         *
         * @throws \Exception
         */
        protected function getVideoInfo() {}
        /**
         * @return int
         *
         * @throws \Exception
         */
        public function getDuration() {}
        /**
         * @return array
         */
        public function getDimensions() {}
        public function destroy() {}
        public function __destruct() {}
        public function deleteConversionLogFile() {}
        public function setProcessId($processId) {}
        /**
         * @return string
         */
        public function getProcessId() {}
        /**
         * @return string
         */
        protected function getConversionLogFile() {}
        public function addArgument($key, $value) {}
        public function setVideoBitrate($videoBitrate) {}
        public function setAudioBitrate($audioBitrate) {}
        public function resize($width, $height) {}
        public function scaleByWidth($width) {}
        public function scaleByHeight($height) {}
    }

}

namespace Pimcore\Extension {
    class Config {
        /**
         * @var PimcoreConfig\Config
         */
        private $config;
        /**
         * @var string
         */
        private $file;

        /**
         * @return PimcoreConfig\Config
         */
        public function loadConfig() : PimcoreConfig\Config {}
        public function saveConfig(PimcoreConfig\Config $config) {}
        /**
         * @return string
         */
        public function locateConfigFile() : string {}
        /**
         * @return bool
         */
        public function configFileExists() : bool {}
    }

}

namespace Pimcore\Extension\Bundle {
    class PimcoreBundleManager {
        /**
         * @var StateConfig
         */
        protected $stateConfig;
        /**
         * @var PimcoreBundleLocator
         */
        protected $bundleLocator;
        /**
         * @var Kernel
         */
        protected $kernel;
        /**
         * @var EventDispatcherInterface
         */
        protected $dispatcher;
        /**
         * @var RouterInterface
         */
        protected $router;
        /**
         * @var array
         */
        protected $availableBundles;
        /**
         * @var array
         */
        protected $enabledBundles;
        /**
         * @var array
         */
        protected $manuallyRegisteredBundleState;

        public function __construct(StateConfig $stateConfig, PimcoreBundleLocator $bundleLocator, Kernel $kernel, EventDispatcherInterface $dispatcher, RouterInterface $router) {}
        public function getActiveBundles(bool $onlyInstalled = true) : array {}
        public function getActiveBundle(string $id, bool $onlyInstalled = true) : PimcoreBundleInterface {}
        /**
         * List of available bundles from a defined set of paths
         *
         * @return array
         */
        public function getAvailableBundles() : array {}
        /**
         * Lists enabled bundle names
         *
         * @return array
         */
        public function getEnabledBundleNames() : array {}
        private function getManuallyRegisteredBundleNames(bool $onlyEnabled = false) : array {}
        /**
         * Builds state infos about manually configured bundles (not registered via extension manager)
         *
         * @return array
         */
        private function getManuallyRegisteredBundleState() {}
        public function exists($bundle) : bool {}
        public function getBundleIdentifier($bundle) : string {}
        protected function isValidBundleIdentifier(string $identifier) : bool {}
        protected function validateBundleIdentifier(string $identifier) {}
        public function isManuallyRegistered($bundle) : bool {}
        protected function validateStateChange(string $identifier) {}
        public function canChangeState($bundle) : bool {}
        public function getState($bundle) : array {}
        public function setState($bundle, array $options) {}
        public function setStates(array $states) {}
        public function enable($bundle, array $state = [ ]) {}
        public function disable($bundle) {}
        public function isEnabled($bundle) : bool {}
        protected function loadBundleInstaller(PimcoreBundleInterface $bundle, bool $throwException = false) {}
        public function getInstaller(PimcoreBundleInterface $bundle, bool $throwException = false) {}
        public function install(PimcoreBundleInterface $bundle) {}
        public function uninstall(PimcoreBundleInterface $bundle) {}
        public function canBeInstalled(PimcoreBundleInterface $bundle) : bool {}
        public function canBeUninstalled(PimcoreBundleInterface $bundle) : bool {}
        public function isInstalled(PimcoreBundleInterface $bundle) : bool {}
        public function needsReloadAfterInstall(PimcoreBundleInterface $bundle) : bool {}
        public function canBeUpdated(PimcoreBundleInterface $bundle) : bool {}
        public function update(PimcoreBundleInterface $bundle) {}
        /**
         * Resolves all admin javascripts to load
         *
         * @return array
         */
        public function getJsPaths() : array {}
        /**
         * Resolves all admin stylesheets to load
         *
         * @return array
         */
        public function getCssPaths() : array {}
        /**
         * Resolves all editmode javascripts to load
         *
         * @return array
         */
        public function getEditmodeJsPaths() : array {}
        /**
         * Resolves all editmode stylesheets to load
         *
         * @return array
         */
        public function getEditmodeCssPaths() : array {}
        protected function resolvePaths(string $type, string $mode = null) : array {}
        protected function resolveEventPaths(array $paths, string $eventName) : array {}
    }

    class PimcoreBundleLocator {
        /**
         * @var Composer\PackageInfo
         */
        private $composerPackageInfo;
        /**
         * @var array
         */
        private $paths;
        /**
         * @var bool
         */
        private $handleComposer;

        public function __construct(Composer\PackageInfo $composerPackageInfo, array $paths = [ ], $handleComposer = true) {}
        private function setPaths(array $paths) {}
        /**
         * Locate pimcore bundles in configured paths
         *
         * @return array A list of found bundle class names
         */
        public function findBundles() {}
/** @var SplFileInfo $file */
        private function findBundlesInPaths(/** @var SplFileInfo $file */
array $paths) {}
        /**
         * Finds composer bundles in /vendor with the following prerequisites:
         *
         *  * Composer package type is "pimcore-bundle"
         *  * If the [ extra: [ pimcore: [ bundles: [] ] ] entry is available in the config, it will use this config
         *    as list of available bundle names
         *  * If the config entry above is not available, it will scan the package directory with the same logic as for
         *    the other paths
         *
         * @return array
         */
        private function findComposerBundles() {}
        private function processBundleClass($bundle, array $result) {}
    }

    abstract class AbstractPimcoreBundle extends \symfony\component\httpkernel\bundle\bundle implements \pimcore\extension\bundle\pimcorebundleinterface {
        /**
         * @inheritDoc
         */
        public function getNiceName() {}
        /**
         * @inheritDoc
         */
        public function getDescription() {}
        /**
         * @inheritDoc
         */
        public function getVersion() {}
        /**
         * {@inheritdoc}
         */
        public function getInstaller() {}
        /**
         * {@inheritdoc}
         */
        public function getAdminIframePath() {}
        /**
         * {@inheritdoc}
         */
        public function getJsPaths() {}
        /**
         * {@inheritdoc}
         */
        public function getCssPaths() {}
        /**
         * @inheritDoc
         */
        public function getEditmodeJsPaths() {}
        /**
         * @inheritDoc
         */
        public function getEditmodeCssPaths() {}
    }


    interface PimcoreBundleInterface extends \symfony\component\httpkernel\bundle\bundleinterface {
        /**
         * Bundle name as shown in extension manager
         *
         * @return string
         */
        function getNiceName() ;
        /**
         * Bundle description as shown in extension manager
         *
         * @return string
         */
        function getDescription() ;
        /**
         * Bundle version as shown in extension manager
         *
         * @return string
         */
        function getVersion() ;
        /**
         * If the bundle has an installation routine, an installer is responsible of handling installation related tasks
         *
         * @return InstallerInterface|null
         */
        function getInstaller() ;
        /**
         * Get path to include in admin iframe
         *
         * @return string|RouteReferenceInterface|null
         */
        function getAdminIframePath() ;
        /**
         * Get javascripts to include in admin interface
         *
         * Strings will be directly included, RouteReferenceInterface objects are used to generate an URL through the
         * router.
         *
         * @return string[]|RouteReferenceInterface[]
         */
        function getJsPaths() ;
        /**
         * Get stylesheets to include in admin interface
         *
         * Strings will be directly included, RouteReferenceInterface objects are used to generate an URL through the
         * router.
         *
         * @return string[]|RouteReferenceInterface[]
         */
        function getCssPaths() ;
        /**
         * Get javascripts to include in editmode
         *
         * Strings will be directly included, RouteReferenceInterface objects are used to generate an URL through the
         * router.
         *
         * @return string[]|RouteReferenceInterface[]
         */
        function getEditmodeJsPaths() ;
        /**
         * Get stylesheets to include in editmode
         *
         * Strings will be directly included, RouteReferenceInterface objects are used to generate an URL through the
         * router.
         *
         * @return string[]|RouteReferenceInterface[]
         */
        function getEditmodeCssPaths() ;
    }

}

namespace Pimcore\Extension\Bundle\Traits {
    /**
     * Helper trait exposing static isEnabled() and isInstalled() methods for bundles which can be used
     * to check bundle state from non-service definitions (e.g. class definitions).
     */
    trait StateHelperTrait {
        /**
         * Helper method to check enabled state from class definitions/non-service instances
         *
         * @return bool
         */
        public static function isEnabled() : bool {}
        /**
         * Helper method to check installed state from class definitions/non-service instances
         *
         * @return bool
         */
        public static function isInstalled() : bool {}
    }

    /**
     * Exposes a simple getVersion() implementation by looking up the installed versions via ocramius/package-versions
     * which is generated on composer install. This trait can be used by using it from a bundle class and implementing
     * getComposerPackageName() to return the name of the composer package to lookup.
     */
    trait PackageVersionTrait {
        /**
         * Returns the composer package name used to resolve the version
         *
         * @return string
         */
        abstract protected function getComposerPackageName() : string ;
        public function getVersion() {}
    }

}

namespace Pimcore\Extension\Bundle\Config {
    final class StateConfig {
        /**
         * @var OptionsResolver
         */
        static private $optionsResolver;
        /**
         * @var array
         */
        static private $optionDefaults;
        /**
         * @var Config
         */
        private $config;

        public function __construct(Config $config) {}
        /**
         * Lists enabled bundles from config
         *
         * @return array
         */
        public function getEnabledBundles() : array {}
        /**
         * Lists enabled bundle names from config
         *
         * @return array
         */
        public function getEnabledBundleNames() : array {}
        /**
         * Loads bundles which are defined in configuration
         *
         * @return array
         */
        private function getBundlesFromConfig() : array {}
        public function getState(string $bundle) : array {}
        public function setState(string $bundle, array $options) {}
        public function setStates(array $states) {}
        private function updateBundleState(PimcoreConfig\Config $config, string $bundle, array $options) {}
        private function prepareWriteOptions(array $options) {}
        public function normalizeOptions($options) : array {}
        private static function getOptionsResolver() : OptionsResolver {}
    }

}

namespace Pimcore\Extension\Bundle\Installer {
    abstract class MigrationInstaller extends \pimcore\extension\bundle\installer\abstractinstaller implements \pimcore\extension\bundle\installer\migrationinstallerinterface {
        /**
         * @var BundleInterface
         */
        protected $bundle;
        /**
         * @var ConnectionInterface
         */
        protected $connection;
        /**
         * @var MigrationManager
         */
        protected $migrationManager;
        /**
         * @var InstallConfiguration
         */
        protected $installConfiguration;
        /**
         * @var InstallVersion
         */
        protected $installVersion;
        /**
         * @var DoctrineOutputWriter
         */
        protected $migrationOutputWriter;
        /**
         * @var bool
         */
        protected $runUpdateAfterInstall;

        public function __construct(BundleInterface $bundle, ConnectionInterface $connection, MigrationManager $migrationManager) {}
        public function setOutputWriter(OutputWriterInterface $outputWriter) {}
        /**
         * @inheritdoc
         */
        public function getMigrationVersion() : string {}
        /**
         * @inheritdoc
         */
        public function getMigrationConfiguration() : Configuration {}
        /**
         * @inheritdoc
         */
        public function getInstallMigrationConfiguration() : InstallConfiguration {}
        /**
         * @inheritdoc
         */
        public function install() {}
        protected function markInstallVersionAsMigrated(Version $version) {}
        /**
         * Runs update after a successful installation to make sure remaining migrations are applied
         */
        protected function updateAfterInstall() {}
        protected function beforeInstallMigration() {}
        protected function afterInstallMigration() {}
        /**
         * @inheritdoc
         */
        public function uninstall() {}
        protected function beforeUninstallMigration() {}
        protected function afterUninstallMigration() {}
        /**
         * @inheritdoc
         */
        public function update() {}
        protected function beforeUpdateMigration(string $version = null) {}
        protected function afterUpdateMigration(string $version = null) {}
        /**
         * @inheritdoc
         */
        public function isInstalled() {}
        /**
         * @inheritdoc
         */
        public function canBeInstalled() {}
        /**
         * @inheritdoc
         */
        public function canBeUninstalled() {}
        /**
         * @inheritdoc
         */
        public function canBeUpdated() : bool {}
        protected function migrateToVersion(string $versionId, bool $dryRun = false) {}
        protected function executeMigration(string $versionId, bool $up = true, bool $dryRun = false) : array {}
        protected function executeInstallMigration(bool $up = true, bool $dryRun = false) {}
        /**
         * Defines any migrations marked as migrated for this bundle should be removed from the
         * migration status table on uninstallation. If the bundle is installed again, migrations
         * would be re-executed.
         *
         * @return bool
         */
        protected function clearMigratedVersionsOnUninstall() : bool {}
        /**
         * Creates a schema instance for the current database.
         *
         * @return Schema
         */
        protected function createSchema() : Schema {}
    }

    class OutputWriter implements \pimcore\extension\bundle\installer\outputwriterinterface {
        /**
         * @var Output
         */
        private $output;
        /**
         * @var \Closure
         */
        private $closure;

        public function __construct(\Closure $closure = null, BufferedOutput $output = null) {}
        public function write($message) {}
        public function getOutput() {}
    }

    class AbstractInstaller implements \pimcore\extension\bundle\installer\installerinterface {
        /**
         * @var OutputWriterInterface
         */
        protected $outputWriter;

        public function __construct(OutputWriterInterface $outputWriter = null) {}
        public function setOutputWriter(OutputWriterInterface $outputWriter) {}
        public function getOutputWriter() : OutputWriterInterface {}
        /**
         * {@inheritdoc}
         */
        public function install() {}
        /**
         * {@inheritdoc}
         */
        public function uninstall() {}
        /**
         * {@inheritdoc}
         */
        public function isInstalled() {}
        /**
         * {@inheritdoc}
         */
        public function canBeInstalled() {}
        /**
         * {@inheritdoc}
         */
        public function canBeUninstalled() {}
        /**
         * {@inheritdoc}
         */
        public function needsReloadAfterInstall() {}
        /**
         * @inheritDoc
         */
        public function canBeUpdated() {}
        /**
         * @inheritDoc
         */
        public function update() {}
    }


    interface MigrationInstallerInterface extends \pimcore\extension\bundle\installer\installerinterface {
        /**
         * The version to mark as migrated after installation. This can be set to something else than
         * InstallVersion::INSTALL_VERSION to force a the recorded migration version to something else. This allows to
         * provide migrations for existing installations while keeping the install routine up to date as new installations
         * won't do any migrations before the one specified here.
         *
         * @return string|null
         */
        function getMigrationVersion() ;
        function migrateInstall(Schema $schema, Version $version) ;
        function migrateUninstall(Schema $schema, Version $version) ;
        /**
         * Returns the migration configuration for this bundle
         *
         * @return Configuration
         */
        function getMigrationConfiguration() : Configuration ;
        /**
         * Returns the install migration configuration for this bundle (handles only the install migration)
         *
         * @return InstallConfiguration
         */
        function getInstallMigrationConfiguration() : InstallConfiguration ;
    }

    interface OutputWriterInterface {
        function write($message) ;
        /**
         * Returns the written messages
         *
         * @return array
         */
        function getOutput() ;
    }

    interface InstallerInterface {
        /**
         * Installs the bundle
         *
         * @throws InstallationException
         */
        function install() ;
        /**
         * Uninstalls the bundle
         *
         * @throws InstallationException
         */
        function uninstall() ;
        /**
         * Determine if bundle is installed
         *
         * @return bool
         */
        function isInstalled() ;
        /**
         * Determine if bundle is ready to be installed. Can be used to check prerequisites
         *
         * @return bool
         */
        function canBeInstalled() ;
        /**
         * Determine if bundle can be uninstalled
         *
         * @return bool
         */
        function canBeUninstalled() ;
        /**
         * Determines if admin interface should be reloaded after installation/uninstallation
         *
         * @return bool
         */
        function needsReloadAfterInstall() ;
        /**
         * Determine if bundle can be updated
         *
         * @return bool
         */
        function canBeUpdated() ;
        /**
         * Updates the bundle
         *
         * @throws UpdateException
         */
        function update() ;
        /**
         * Returns the output writer
         *
         * @return OutputWriterInterface
         */
        function getOutputWriter() : OutputWriterInterface ;
        function setOutputWriter(OutputWriterInterface $outputWriter) ;
    }

}

namespace Pimcore\Extension\Bundle\Installer\Exception {
    class InstallationException extends \runtimeexception {}

    class UpdateException extends \runtimeexception {}

}

namespace Pimcore\Extension\Bundle\Exception {
    class RuntimeException extends \runtimeexception {}

    class BundleNotFoundException extends \invalidargumentexception {}

}

namespace Pimcore\Extension\Document\Areabrick {
    class AreabrickManager implements \pimcore\extension\document\areabrick\areabrickmanagerinterface {
        /**
         * @var Extension\Config
         */
        protected $config;
        /**
         * @var ContainerInterface
         */
        protected $container;
        /**
         * @var AreabrickInterface[]
         */
        protected $bricks;
        /**
         * @var array
         */
        protected $brickServiceIds;

        public function __construct(Extension\Config $config, ContainerInterface $container) {}
        public function register(string $id, AreabrickInterface $brick) {}
        public function registerService(string $id, string $serviceId) {}
        public function getBrick(string $id) : AreabrickInterface {}
        /**
         * @inheritdoc
         */
        public function getBricks() : array {}
        /**
         * @inheritdoc
         */
        public function getBrickIds() : array {}
        protected function loadServiceBrick(string $id) {}
        /**
         * Loads all brick instances registered as service definitions
         */
        protected function loadServiceBricks() {}
        public function enable(string $id) {}
        public function disable(string $id) {}
        public function setState(string $id, bool $state) {}
        public function isEnabled(string $id) : bool {}
        /**
         * @return array
         */
        private function getBrickConfig() {}
        private function setBrickConfig(array $config) {}
    }

    /**
     * Base brick with template autoloading capabilities.
     *
     * Depending on the result of getTemplateLocation and getTemplateSuffix the tag handler builds the following references:
     *
     * - <currentBundle>:Areas/<brickId>/(view|edit).<suffix>
     * - Areas/<brickId>/(view|edit).<suffix> -> resolves to app/Resources
     */
    abstract class AbstractTemplateAreabrick extends \pimcore\extension\document\areabrick\abstractareabrick implements \pimcore\extension\document\areabrick\templateareabrickinterface {
        /**
         * @inheritDoc
         */
        public function getViewTemplate() {}
        /**
         * @inheritDoc
         */
        public function getTemplateLocation() {}
        /**
         * @inheritDoc
         */
        public function getTemplateSuffix() {}
    }

    abstract class AbstractAreabrick implements \symfony\component\dependencyinjection\containerawareinterface, \pimcore\extension\document\areabrick\areabrickinterface, \pimcore\extension\document\areabrick\templateareabrickinterface {
    use \symfony\component\dependencyinjection\containerawaretrait;

        /**
         * @var string
         */
        protected $id;

        public function setId($id) {}
        /**
         * @inheritDoc
         */
        public function getId() {}
        /**
         * {@inheritdoc}
         */
        public function getName() {}
        /**
         * {@inheritdoc}
         */
        public function getDescription() {}
        /**
         * @inheritDoc
         */
        public function getVersion() {}
        /**
         * {@inheritdoc}
         */
        public function getIcon() {}
        /**
         * @inheritDoc
         */
        public function hasViewTemplate() {}
        /**
         * @inheritDoc
         */
        public function hasEditTemplate() {}
        /**
         * {@inheritdoc}
         */
        public function getEditTemplate() {}
        public function action(Info $info) {}
        public function postRenderAction(Info $info) {}
        public function getHtmlTagOpen(Info $info) {}
        public function getHtmlTagClose(Info $info) {}
        protected function getDocumentTag(PageSnippet $document, $type, $inputName, array $options = [ ]) {}
    }


    /**
     * Bricks implementing this interface auto-resolve view and edit templates if has*Template properties are set.
     * Depending on the result of getTemplateLocation and getTemplateSuffix the tag handler builds the following references:
     *
     * - <currentBundle>:Areas/<brickId>/(view|edit).<suffix>
     * - Areas/<brickId>/(view|edit).<suffix> -> resolves to app/Resources
     */
    interface TemplateAreabrickInterface extends \pimcore\extension\document\areabrick\areabrickinterface {
    const TEMPLATE_LOCATION_GLOBAL = 'global';
    const TEMPLATE_LOCATION_BUNDLE = 'bundle';
    const TEMPLATE_SUFFIX_PHP = 'html.php';
    const TEMPLATE_SUFFIX_TWIG = 'html.twig';
        /**
         * Determines if template should be auto-located in area bundle or in app/Resources
         *
         * @return string
         */
        function getTemplateLocation() ;
        /**
         * Returns view suffix used to auto-build view names
         *
         * @return string
         */
        function getTemplateSuffix() ;
    }

    interface AreabrickManagerInterface {
        function register(string $id, AreabrickInterface $brick) ;
        function registerService(string $id, string $serviceId) ;
        function getBrick(string $id) : AreabrickInterface ;
        /**
         * Lists all registered areabricks indexed by ID. Will implicitely load all bricks registered as service.
         *
         * @return AreabrickInterface[]
         */
        function getBricks() : array ;
        /**
         * Lists all registered areabrick IDs
         *
         * @return array
         */
        function getBrickIds() : array ;
        function enable(string $id) ;
        function disable(string $id) ;
        function isEnabled(string $id) : bool ;
    }

    interface AreabrickInterface {
        function setId($id) ;
        /**
         * Brick ID - needs to be unique throughout the system.
         *
         * @return string
         */
        function getId() ;
        /**
         * A descriptive name as shown in extension manager and edit mode.
         *
         * @return string
         */
        function getName() ;
        /**
         * Area description as shown in extension manager.
         *
         * @return string
         */
        function getDescription() ;
        /**
         * Area version as shown in extension manager.
         *
         * @return string
         */
        function getVersion() ;
        /**
         * Icon as absolute path, e.g. /bundles/websitedemo/img/areas/foo/icon.png
         *
         * @return string|null
         */
        function getIcon() ;
        /**
         * Determines if the brick has a view template
         *
         * @return bool
         */
        function hasViewTemplate() ;
        /**
         * Get view template
         *
         * @return string|null
         */
        function getViewTemplate() ;
        /**
         * Determines if the brick has an edit template
         *
         * @return bool
         */
        function hasEditTemplate() ;
        /**
         * Get edit template
         *
         * @return string|null
         */
        function getEditTemplate() ;
        function action(Info $info) ;
        function postRenderAction(Info $info) ;
        function getHtmlTagOpen(Info $info) ;
        function getHtmlTagClose(Info $info) ;
    }

}

namespace Pimcore\Extension\Document\Areabrick\Exception {
    class ConfigurationException extends \runtimeexception {}

    class BrickNotFoundException extends \pimcore\extension\bundle\exception\runtimeexception {}

}

namespace Pimcore\Cache {
    final class Runtime extends \arrayobject {
        const SERVICE_ID = __CLASS__;

        static protected $tempInstance;
        static protected $instance;
        /**
         * Array of indexes which are blocked from cache. If a given
         * index is queried or set, an exception with the given message
         * is thrown.
         *
         * @var array
         */
        static private $blockedIndexes;

        /** @var self $instance */
        public static function getInstance() {}
        public static function get($index) {}
        public static function set($index, $value) {}
        public static function isRegistered($index) {}
        public function __construct($array = [ ], $flags = parent::ARRAY_AS_PROPS) {}
        public function offsetSet($index, $value) {}
        public static function save($data, $id) {}
        public static function load($id) {}
        public static function clear($keepItems = [ ]) {}
        private static function checkIndexes($indexes) {}
    }

}

namespace Pimcore\Cache\Core {
    class CacheQueueItem {
        /**
         * @var string
         */
        protected $key;
        /**
         * @var mixed
         */
        protected $data;
        /**
         * @var PimcoreCacheItemInterface
         */
        protected $cacheItem;
        /**
         * @var array
         */
        protected $tags;
        /**
         * @param int|\DateInterval|null $lifetime
         */
        protected $lifetime;
        /**
         * @var int
         */
        protected $priority;
        /**
         * @var bool
         */
        protected $force;

        public function __construct($key, $data, array $tags = [ ], $lifetime = null, $priority = 0, $force = false) {}
        /**
         * @return string
         */
        public function getKey() {}
        /**
         * @return mixed
         */
        public function getData() {}
        /**
         * @return array
         */
        public function getTags() {}
        /**
         * @return mixed
         */
        public function getLifetime() {}
        /**
         * @return int
         */
        public function getPriority() {}
        /**
         * @return bool
         */
        public function isForce() {}
        public function setCacheItem(PimcoreCacheItemInterface $cacheItem) {}
        /**
         * @return PimcoreCacheItemInterface
         */
        public function getCacheItem() {}
    }

    /**
     * Core pimcore cache handler with logic handling deferred save on shutdown (specialized for internal pimcore use). This
     * explicitely does not expose a PSR-6 API but is intended for internal use from Pimcore\Cache or directly. Actual
     * cache calls are forwarded to a PSR-6 cache implementation though.
     */
    class CoreHandler implements \pimcore\cache\core\corehandlerinterface, \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * @var PimcoreCacheItemPoolInterface
         */
        protected $itemPool;
        /**
         * @var WriteLockInterface
         */
        protected $writeLock;
        /**
         * Actually write/load to/from cache?
         *
         * @var bool
         */
        protected $enabled;
        /**
         * Is the cache handled in CLI mode?
         *
         * @var bool
         */
        protected $handleCli;
        /**
         * Contains the items which should be written to the cache on shutdown
         *
         * @var CacheQueueItem[]
         */
        protected $saveQueue;
        /**
         * Tags which were already cleared
         *
         * @var array
         */
        protected $clearedTags;
        /**
         * Items having one of the tags in this list are not saved
         *
         * @var array
         */
        protected $tagsIgnoredOnSave;
        /**
         * Items having one of the tags in this list are not cleared when calling clearTags
         *
         * @var array
         */
        protected $tagsIgnoredOnClear;
        /**
         * Items having tags which are in this array are cleared on shutdown. This is especially for the output-cache.
         *
         * @var array
         */
        protected $tagsClearedOnShutdown;
        /**
         * State variable which is set to true after the cache was cleared - prevent new items being
         * written to cache after a clear.
         *
         * @var bool
         */
        protected $cacheCleared;
        /**
         * Tags in this list are shifted to the clearTagsOnShutdown list when scheduled via clearTags. See comment on normalizeClearTags
         * method why this exists.
         *
         * @var array
         */
        protected $shutdownTags;
        /**
         * If set to true items are directly written into the cache, and do not get into the queue
         *
         * @var bool
         */
        protected $forceImmediateWrite;
        /**
         * How many items should stored to the cache within one process
         *
         * @var int
         */
        protected $maxWriteToCacheItems;
        /**
         * @var \Closure
         */
        protected $emptyCacheItemClosure;

        public function __construct(PimcoreCacheItemPoolInterface $adapter, WriteLockInterface $writeLock) {}
        protected function setItemPool(PimcoreCacheItemPoolInterface $itemPool) {}
        /**
         * @inheritDoc
         */
        public function getWriteLock() {}
        /**
         * @codeCoverageIgnore
         *
         * @return LoggerInterface
         */
        public function getLogger() {}
        /**
         * @inheritdoc
         */
        public function enable() {}
        /**
         * @inheritdoc
         */
        public function disable() {}
        /**
         * @return bool
         */
        public function isEnabled() {}
        /**
         * @codeCoverageIgnore
         *
         * @return bool
         */
        public function getHandleCli() {}
        public function setHandleCli($handleCli) {}
        /**
         * @codeCoverageIgnore
         *
         * @return bool
         */
        public function getForceImmediateWrite() {}
        public function setForceImmediateWrite($forceImmediateWrite) {}
        public function setMaxWriteToCacheItems($maxWriteToCacheItems) {}
        public function load($key) {}
        public function getItem($key) {}
        public function save($key, $data, array $tags = [ ], $lifetime = null, $priority = 0, $force = false) {}
        protected function addToSaveQueue(CacheQueueItem $item) {}
        protected function prepareCacheItem($key, $data, $lifetime = null) {}
        protected function prepareCacheTags(PimcoreCacheItemInterface $cacheItem, $data, array $tags = [ ]) {}
        protected function storeCacheItem(PimcoreCacheItemInterface $item, $data, $force = false) {}
        public function remove($key) {}
        /**
         * Empty the cache
         *
         * @return bool
         */
        public function clearAll() {}
        public function clearTag($tag) {}
        public function clearTags(array $tags) {}
        /**
         * Clears all tags stored in tagsClearedOnShutdown, this function is executed during Pimcore shutdown
         *
         * @return bool
         */
        public function clearTagsOnShutdown() {}
        protected function normalizeClearTags(array $tags) {}
        protected function addClearedTags($tags) {}
        public function addTagClearedOnShutdown($tag) {}
        public function addTagIgnoredOnSave($tag) {}
        public function removeTagIgnoredOnSave($tag) {}
        public function addTagIgnoredOnClear($tag) {}
        public function removeTagIgnoredOnClear($tag) {}
        /**
         * Writes save queue to the cache
         *
         * @return bool
         */
        public function writeSaveQueue() {}
        public function shutdown($forceWrite = false) {}
        /**
         * Purge orphaned/invalid data
         *
         * @return bool
         */
        public function purge() {}
        /**
         * @codeCoverageIgnore
         *
         * @return bool
         */
        protected function isCli() {}
    }

    class WriteLock implements \psr\log\loggerawareinterface, \pimcore\cache\core\writelockinterface {
    use \psr\log\loggerawaretrait;

        /**
         * @var bool
         */
        protected $enabled;
        /**
         * @var PimcoreCacheItemPoolInterface
         */
        protected $itemPool;
        /**
         * @var string
         */
        protected $cacheKey;
        /**
         * @var int
         */
        protected $lifetime;
        /**
         * Contains the timestamp of the write lock time from the current process
         *
         * This is to recheck when removing the write lock (if the value is different -> higher) do not remove the lock
         * because then another process has acquired a lock.
         *
         * @var int|null
         */
        protected $timestamp;
        /**
         * @var bool
         */
        protected $lockInitialized;

        public function __construct(PimcoreCacheItemPoolInterface $itemPool) {}
        /**
         * @inheritDoc
         */
        public function enable() {}
        /**
         * @inheritDoc
         */
        public function disable() {}
        /**
         * @inheritDoc
         */
        public function isEnabled() {}
        /**
         * Initialize lock value once from storage
         */
        protected function initializeLock() {}
        public function lock($force = false) {}
        /**
         * Check if a write lock is active
         *
         * @return bool
         */
        public function hasLock() {}
        protected function isLockValid($lockTime) {}
        /**
         * Remove write lock from instance and from cache
         *
         * @return bool
         */
        public function removeLock() {}
    }

    class EventDispatchingCoreHandler extends \pimcore\cache\core\corehandler {
        /**
         * @var EventDispatcherInterface
         */
        protected $dispatcher;

        public function __construct(PimcoreCacheItemPoolInterface $adapter, WriteLockInterface $writeLock, EventDispatcherInterface $dispatcher) {}
        /**
         * @inheritDoc
         */
        public function enable() {}
        /**
         * @inheritDoc
         */
        public function disable() {}
        protected function setEnabled($enabled) {}
        /**
         * @inheritDoc
         */
        public function purge() {}
    }


    interface WriteLockInterface {
        /**
         * Enables the write lock
         */
        function enable() ;
        /**
         * Disables the write lock
         */
        function disable() ;
        /**
         * Determines if the write lock is enabled
         *
         * @return bool
         */
        function isEnabled() ;
        function lock($force = false) ;
        /**
         * Check if a write lock is active
         *
         * @return bool
         */
        function hasLock() ;
        /**
         * Remove write lock from instance and from cache
         *
         * @return bool
         */
        function removeLock() ;
    }

    interface CoreHandlerInterface {
        /**
         * @return WriteLockInterface
         */
        function getWriteLock() ;
        /**
         * @return LoggerInterface
         */
        function getLogger() ;
        /**
         * @return $this
         */
        function enable() ;
        /**
         * @return $this
         */
        function disable() ;
        /**
         * @return bool
         */
        function isEnabled() ;
        /**
         * @return bool
         */
        function getHandleCli() ;
        function setHandleCli($handleCli) ;
        /**
         * @return bool
         */
        function getForceImmediateWrite() ;
        function setForceImmediateWrite($forceImmediateWrite) ;
        function load($key) ;
        function getItem($key) ;
        function save($key, $data, array $tags = [ ], $lifetime = null, $priority = 0, $force = false) ;
        function remove($key) ;
        /**
         * Empty the cache
         *
         * @return bool
         */
        function clearAll() ;
        function clearTag($tag) ;
        function clearTags(array $tags) ;
        /**
         * Clears all tags stored in tagsClearedOnShutdown, this function is executed during Pimcore shutdown
         *
         * @return bool
         */
        function clearTagsOnShutdown() ;
        function addTagClearedOnShutdown($tag) ;
        function addTagIgnoredOnSave($tag) ;
        function removeTagIgnoredOnSave($tag) ;
        function addTagIgnoredOnClear($tag) ;
        function removeTagIgnoredOnClear($tag) ;
        /**
         * Writes save queue to the cache
         *
         * @return bool
         */
        function writeSaveQueue() ;
        function shutdown($forceWrite = false) ;
        /**
         * Purge orphaned/invalid data
         *
         * @return bool
         */
        function purge() ;
    }

}

namespace Pimcore\Cache\Core\Exception {
    class InvalidArgumentException extends \invalidargumentexception {}

}

namespace Pimcore\Cache\FullPage {
    /**
     * Determines if the full page cache should be disabled due to
     * session (started session containing data).
     */
    class SessionStatus {
        /**
         * @var string
         */
        private $symfonyMetadataStorageKey;
        /**
         * @var string
         */
        private $eventDispatcher;

        public function __construct(string $symfonyMetadataStorageKey, EventDispatcherInterface $eventDispatcher) {}
        public function isDisabledBySession(Request $request) : bool {}
        private function getIgnoredSessionKeys() : array {}
    }

}

namespace Pimcore\Cache\Symfony {
    class CacheClearer {
        /**
         * @var int
         */
        private $processTimeout;
        /**
         * @var \Closure
         */
        private $runCallback;

        public function __construct(array $options = [ ]) {}
        private function resolveOptions(array $options = [ ]) {}
        public function clear(string $environment, array $options = [ ]) : Process {}
        public function warmup(string $environment, array $options = [ ]) : Process {}
        public function setRunCallback(\Closure $runCallback = null) {}
        private function runCommand(string $command, array $arguments = [ ], array $options = [ ]) {}
        private function buildProcess(string $command, array $arguments = [ ], array $options = [ ]) : Process {}
    }

}

namespace Pimcore\Cache\Pool {
    class CacheItem implements \symfony\contracts\cache\iteminterface, \pimcore\cache\pool\pimcorecacheiteminterface {
        private const METADATA_EXPIRY_OFFSET = 1527506807;

        protected $key;
        protected $value;
        protected $isHit;
        protected $expiry;
        protected $defaultLifetime;
        protected $metadata;
        protected $previousTags;
        protected $tags;
        protected $newMetadata;

        public function __construct($key, $value, $isHit = false, array $previousTags = [ ], $defaultLifetime = null) {}
        /**
         * {@inheritdoc}
         */
        public function getKey() {}
        /**
         * {@inheritdoc}
         */
        public function get() {}
        /**
         * {@inheritdoc}
         */
        public function isHit() {}
        public function set($value) {}
        /**
         * @return int
         */
        public function getExpiry() {}
        /**
         * @return int|null
         */
        public function getDefaultLifetime() {}
        public function tag($tags) : ItemInterface {}
        /**
         * {@inheritdoc}
         */
        public function getMetadata() : array {}
        public function expiresAt($expiration) {}
        public function expiresAfter($time) {}
        /**
         * Get all existing tags. These are the tags the item has when the item is
         * returned from the pool.
         *
         * @return array
         */
        public function getPreviousTags() {}
        public function setTags(array $tags) {}
        public function mergeTags(array $tags) {}
        /**
         * Get currently set tags
         *
         * @return array
         */
        public function getTags() {}
        public static function validateKey($key) {}
        public static function log(LoggerInterface $logger, $message, $context = [ ]) {}
    }

    class Doctrine extends \pimcore\cache\pool\abstractcacheitempool implements \pimcore\cache\pool\purgeablecacheitempoolinterface {
        /**
         * @var ConnectionInterface
         */
        protected $db;

        public function __construct(ConnectionInterface $db, $defaultLifetime = 0) {}
        protected function doFetch(array $ids) {}
        protected function doHave($id) {}
        protected function doClear($namespace) {}
        protected function doDelete(array $ids) {}
        protected function getItemKeysByTags(array $tags) {}
        protected function doInvalidateTags(array $tags) {}
        /**
         * Persists any deferred cache items.
         *
         * @return bool
         *   True if all not-yet-saved items were successfully saved or there were none. False otherwise.
         */
        public function commit() {}
        protected function removeNotMatchingTags($id, array $tags) {}
        /**
         * Runs maintenance tasks which could take a long time. Should only be called from maintenance scripts.
         *
         * @return bool True on success
         */
        public function purge() {}
        /**
         * @return bool
         */
        protected function purgeExpiredItems() {}
        /**
         * @return bool
         */
        protected function purgeOrphanedTags() {}
    }

    abstract class AbstractCacheItemPool implements \pimcore\cache\pool\pimcorecacheitempoolinterface {
    use \psr\log\loggerawaretrait;

        /**
         * @var PimcoreCacheItemInterface[]
         */
        protected $deferred;
        /**
         * @var int
         */
        protected $defaultLifeTime;

        public function __construct($defaultLifeTime = 0) {}
        abstract protected function doFetch(array $ids) ;
        abstract protected function doHave($id) ;
        abstract protected function doClear($namespace) ;
        abstract protected function doDelete(array $ids) ;
        abstract protected function doInvalidateTags(array $tags) ;
        protected function getId($key) {}
        public function createCacheItem($key, $value = null, array $tags = [ ], $isHit = false) {}
        protected function generateItems($items, $keys) {}
        protected function serializeData($data) {}
        protected function unserializeData($serialized) {}
        public function getItem($key) {}
        public function getItems(array $keys = [ ]) {}
        public function hasItem($key) {}
        /**
         * Deletes all items in the pool.
         *
         * @return bool
         *   True if the pool was successfully cleared. False if there was an error.
         */
        public function clear() {}
        public function deleteItem($key) {}
        public function deleteItems(array $keys) {}
        public function save(CacheItemInterface $item) {}
        public function saveDeferred(CacheItemInterface $item) {}
        public function invalidateTag($tag) {}
        public function invalidateTags(array $tags) {}
        public function __destruct() {}
        public function get(string $key, callable $callback, float $beta = null, array $metadata = null) {}
        public function delete(string $key) : bool {}
        private function doGet(PimcoreCacheItemPoolInterface $pool, string $key, callable $callback, ?float $beta, array $metadata = null) {}
    }

    /**
     * Redis2 item pool with tagging and LUA support.
     *
     * WARNING: LUA mode is only working on standalone modes as it violates Redis EVAL semantics of passing every used key
     * in the KEYS argument when loading tags from an item and building tag item IDs inside the script.
     *
     * TODO this currently handles tag clearing wrong as potentially orphaned tag entries can lead to items being purged
     * despite being invalid. See the TaggableRedisTest for annotations.
     *
     * Adapted from https://github.com/colinmollenhour/Cm_Cache_Backend_Redis and from Pimcore\Cache\Backend\Redis2
     */
    class Redis extends \pimcore\cache\pool\abstractcacheitempool implements \pimcore\cache\pool\purgeablecacheitempoolinterface {
        const PREFIX_KEY = 'zc:k:';
        const SET_TAGS = 'zc:tags';
        const SET_IDS = 'zc:ids';
        const FIELD_TAGS = 't';
        const FIELD_MTIME = 'm';
        const FIELD_DATA = 'd';
        const PREFIX_TAG_IDS = 'zc:ti:';
        const COMPRESS_PREFIX = ":\x1f\x8b";
        const MAX_LIFETIME = 2592000;
        const FIELD_INF = 'i';

        /**
         * @var \Credis_Client
         */
        protected $redis;
        /**
         * @var bool
         */
        protected $notMatchingTags;
        /**
         * @var int
         */
        protected $compressTags;
        /**
         * @var int
         */
        protected $compressData;
        /**
         * @var int
         */
        protected $compressThreshold;
        /**
         * @var string
         */
        protected $compressionLib;
        /**
         * @var string
         */
        protected $compressPrefix;
        /**
         * @var bool
         */
        protected $useLua;
        /**
         * Lua's unpack() has a limit on the size of the table imposed by
         * the number of Lua stack slots that a C function can use.
         * This value is defined by LUAI_MAXCSTACK in luaconf.h and for Redis it is set to 8000.
         *
         * @see https://github.com/antirez/redis/blob/b903145/deps/lua/src/luaconf.h#L439
         *
         * @var int
         */
        protected $luaMaxCStack;

        public function __construct(\Credis_Client $redis, $options = [ ], $defaultLifetime = 0) {}
        protected function doFetch(array $ids) {}
        private function mapResponseIndexes(array $entry, array $fields) : array {}
        protected function doHave($id) {}
        protected function doClear($namespace) {}
        protected function doDelete(array $ids) {}
        /** @var CacheItem $item */
        public function commit() {}
        protected function commitItem(PimcoreCacheItemInterface $item) {}
        protected function doInvalidateTags(array $tags) {}
        /**
         * Runs maintenance tasks which could take a long time. Should only be called from maintenance scripts.
         *
         * @return bool True on success
         */
        public function purge() {}
        /**
         * Clean up tag id lists since as keys expire the ids remain in the tag id lists
         */
        protected function collectGarbage() {}
        protected function getIdsMatchingAnyTags($tags = [ ]) {}
        protected function preprocess($item, $index, $prefix) {}
        protected function preprocessIds($ids) {}
        protected function preprocessTagIds($tags) {}
        protected function encodeData($data, $level) {}
        protected function decodeData($data) {}
    }

    class SymfonyAdapterProxy extends \pimcore\cache\pool\abstractcacheitempool {
        /**
         * @var TagAwareAdapterInterface
         */
        protected $adapter;
        /**
         * @var \Closure
         */
        protected $transformItemClosure;

        public function __construct(AdapterInterface $adapter, $defaultLifetime = 0) {}
/** @var CacheItem $item */
        protected function doFetch(/** @var CacheItem $item */
array $ids) {}
        protected function doHave($id) {}
        protected function doClear($namespace) {}
        protected function doDelete(array $ids) {}
        /** @var CacheItem $symfonyItem */
        public function commit() {}
        protected function transformItem(PimcoreCacheItemInterface $cacheItem, CacheItem $symfonyItem) {}
        protected function doInvalidateTags(array $tags) {}
    }

    /**
     * @property PimcoreCacheItemPoolInterface $pool
     */
    class TraceablePimcoreAdapter extends \symfony\component\cache\adapter\traceableadapter implements \pimcore\cache\pool\pimcorecacheitempoolinterface {
        public function __construct(PimcoreCacheItemPoolInterface $pool) {}
        public function setLogger(LoggerInterface $logger) {}
        public function createCacheItem($key, $value = null, array $tags = [ ], $isHit = false) {}
        public function invalidateTag($tag) {}
        public function invalidateTags(array $tags) {}
    }


    interface PurgeableCacheItemPoolInterface {
        /**
         * Runs maintenance tasks which could take a long time. Should only be called from maintenance scripts.
         *
         * @return bool True on success
         */
        function purge() ;
    }

    interface PimcoreCacheItemInterface extends \cache\taginterop\taggablecacheiteminterface {
        function mergeTags(array $tags) ;
        /**
         * Get currently set tags
         *
         * @return array
         */
        function getTags() ;
        /**
         * @return int
         */
        function getExpiry() ;
        /**
         * @return int|null
         */
        function getDefaultLifetime() ;
    }

    interface PimcoreCacheItemPoolInterface extends \psr\log\loggerawareinterface {
        function getItem($key) ;
        function getItems(array $keys = [ ]) ;
        function createCacheItem($key, $value = null, array $tags = [ ], $isHit = false) ;
    }

}

namespace Pimcore\Cache\Pool\Exception {
    class InvalidArgumentException extends \invalidargumentexception implements \psr\cache\invalidargumentexception {}

    class CacheException extends \exception implements \psr\cache\cacheexception {}

}

namespace Pimcore\Cache\Tool {
    class Warming {
        /**
         * @var int
         */
        static protected $perIteration;
        /**
         * @var int
         */
        static protected $timoutBetweenIteration;

        public static function documents($types = null) {}
        public static function objects($types = null, $classes = null) {}
        public static function assets($types = null) {}
        public static function loadElementToCache($element) {}
        protected static function loadToCache(AbstractListing $list) {}
        public static function setTimoutBetweenIteration($timoutBetweenIteration) {}
        /**
         * @return int
         */
        public static function getTimoutBetweenIteration() {}
        public static function setPerIteration($perIteration) {}
        /**
         * @return int
         */
        public static function getPerIteration() {}
    }

}

namespace Pimcore\Test {
    abstract class KernelTestCase extends \symfony\bundle\frameworkbundle\test\kerneltestcase {
        protected static function createKernel(array $options = [ ]) {}
    }

    abstract class WebTestCase extends \symfony\bundle\frameworkbundle\test\webtestcase {
        protected static function createKernel(array $options = [ ]) {}
    }

}

namespace Pimcore\Translation {
    class Translator implements \symfony\component\translation\translatorinterface, \symfony\contracts\translation\translatorinterface, \symfony\component\translation\translatorbaginterface {
        /**
         * @var TranslatorInterface|TranslatorBagInterface
         */
        protected $translator;
        /**
         * @var bool
         */
        protected $caseInsensitive;
        /**
         * @var array
         */
        protected $initializedCatalogues;
        /**
         * @var string
         */
        protected $adminPath;
        /**
         * If true, the translator will just return the translation key instead of actually translating
         * the message. Can be useful for debugging and to get an overview over used translation keys on
         * a page.
         *
         * @var bool
         */
        protected $disableTranslations;
        /**
         * @var Kernel
         */
        protected $kernel;

        public function __construct(LegacyTranslatorInterface $translator, bool $caseInsensitive = false) {}
        public function trans($id, array $parameters = [ ], $domain = null, $locale = null) {}
        public function transChoice($id, $number, array $parameters = [ ], $domain = null, $locale = null) {}
        protected function getFromCatalogue(MessageCatalogueInterface $catalogue, $id, $domain, $locale) {}
        public function setLocale($locale) {}
        /**
         * {@inheritdoc}
         */
        public function getLocale() {}
        public function getCatalogue($locale = null) {}
        public function lazyInitialize($domain, $locale) {}
/** @var AbstractTranslation $t */
        protected function checkForEmptyTranslation(/** @var AbstractTranslation $t */
$id, /** @var AbstractTranslation $t */
$translated, /** @var AbstractTranslation $t */
$domain, /** @var AbstractTranslation $t */
$locale) {}
        protected function getBackendForDomain($domain) {}
        /**
         * @return string
         */
        public function getAdminPath() {}
        public function setAdminPath($adminPath) {}
        /**
         * @return Kernel
         */
        public function getKernel() {}
        public function setKernel($kernel) {}
        public function getDisableTranslations() : bool {}
        public function setDisableTranslations(bool $disableTranslations) {}
        public function updateLinks(string $text) {}
        public function getCaseInsensitive() : bool {}
        public function __call($method, $args) {}
    }

}

namespace Pimcore\Translation\ExportService {
    class ExportService implements \pimcore\translation\exportservice\exportserviceinterface {
        /**
         * @var ExportDataExtractorServiceInterface
         */
        private $exportDataExtractorService;
        /**
         * @var ExporterInterface
         */
        private $translationExporter;

        public function __construct(ExportDataExtractorServiceInterface $exportDataExtractorService, ExporterInterface $translationExporter) {}
        public function exportTranslationItems(TranslationItemCollection $translationItems, string $sourceLanguage, array $targetLanguages, string $exportId = null) : string {}
        /**
         * @return ExportDataExtractorServiceInterface
         */
        public function getExportDataExtractorService() : ExportDataExtractorServiceInterface {}
        public function setExportDataExtractorService(ExportDataExtractorServiceInterface $exportDataExtractorService) : ExportService {}
        /**
         * @return ExporterInterface
         */
        public function getTranslationExporter() : ExporterInterface {}
        public function setTranslationExporter(ExporterInterface $translationExporter) : ExportService {}
    }


    interface ExportServiceInterface {
        function exportTranslationItems(TranslationItemCollection $translationItems, string $sourceLanguage, array $targetLanguages, string $exportId = null) : string ;
        /**
         * @return ExporterInterface
         */
        function getTranslationExporter() : ExporterInterface ;
    }

}

namespace Pimcore\Translation\ExportService\Exporter {
    class Xliff12Exporter implements \pimcore\translation\exportservice\exporter\exporterinterface {
        const DELIMITER = '~-~';

        /**
         * @var Xliff12Escaper
         */
        private $xliffEscaper;

        public function __construct(Xliff12Escaper $xliffEscaper) {}
        public function export(AttributeSet $attributeSet, string $exportId = null) : string {}
        public function getExportFilePath(string $exportId) : string {}
        /**
         * @inheritdoc
         */
        public function getContentType() : string {}
        protected function addTransUnitNode(\SimpleXMLElement $xml, $name, $sourceContent, $sourceLang, $targetContent, $targetLang) {}
    }


    interface ExporterInterface {
        function export(AttributeSet $attributeSet, string $exportId = null) : string ;
        function getExportFilePath(string $exportId) : string ;
        /**
         * @return string
         */
        function getContentType() : string ;
    }

}

namespace Pimcore\Translation\Escaper {
    class Xliff12Escaper {
        const SELFCLOSING_TAGS = ['area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];

        public function escapeXliff(string $content) : string {}
        public function unescapeXliff(string $content) : string {}
        private function toCData(string $data) : string {}
    }

}

namespace Pimcore\Translation\ExportDataExtractorService {
    class ExportDataExtractorService implements \pimcore\translation\exportdataextractorservice\exportdataextractorserviceinterface {
        /**
         * @var DataExtractorInterface[]
         */
        private $dataExtractors;

        public function extract(TranslationItem $translationItem, string $sourceLanguage, array $targetLanguages) : AttributeSet {}
        public function registerDataExtractor(string $type, DataExtractorInterface $dataExtractor) : ExportDataExtractorServiceInterface {}
        public function getDataExtractor(string $type) : DataExtractorInterface {}
    }


    interface ExportDataExtractorServiceInterface {
        function extract(TranslationItem $translationItem, string $sourceLanguage, array $targetLanguages) : AttributeSet ;
        function registerDataExtractor(string $type, DataExtractorInterface $dataExtractor) : ExportDataExtractorServiceInterface ;
        function getDataExtractor(string $type) : DataExtractorInterface ;
    }

}

namespace Pimcore\Translation\ExportDataExtractorService\DataExtractor {
    class DataObjectDataExtractor extends \pimcore\translation\exportdataextractorservice\dataextractor\abstractelementdataextractor {
        const BRICK_DELIMITER = '|';
        const EXPORTABLE_TAGS = ['input', 'textarea', 'wysiwyg'];
        const BLOCK_DELIMITER = '|';
        const FIELD_COLLECTIONS_DELIMITER = '|';

        /**
         * @var array
         */
        protected $exportAttributes;

        public function __construct(array $exportAttributes = [ ]) {}
        public function extract(TranslationItem $translationItem, string $sourceLanguage, array $targetLanguages, array $exportAttributes = null) : AttributeSet {}
        private function extractRawAttributeSet(TranslationItem $translationItem, string $sourceLanguage, array $targetLanguages, array $exportAttributes = null, bool $inherited) : AttributeSet {}
        private function isAttributeIncluded(AttributeSet $attributeSet, Attribute $attribute) : bool {}
/**
 * @var Data $definition
 */
        protected function addLocalizedFields(/**
 * @var Data $definition
 */
DataObject\Concrete $object, /**
 * @var Data $definition
 */
AttributeSet $result, /**
 * @var Data $definition
 */
array $exportAttributes = null) : DataObjectDataExtractor {}
/** @var DataObject\Data\BlockElement $blockElement */
        protected function addBlocksInLocalizedfields(/** @var DataObject\Data\BlockElement $blockElement */
Localizedfields $fd, /** @var DataObject\Data\BlockElement $blockElement */
$definition, /** @var DataObject\Data\BlockElement $blockElement */
DataObject\Concrete $object, /** @var DataObject\Data\BlockElement $blockElement */
AttributeSet $result, /** @var DataObject\Data\BlockElement $blockElement */
array $exportAttributes = null) {}
/** @var DataObject\Localizedfield $blockItemData */
        protected function addBlocks(/** @var DataObject\Localizedfield $blockItemData */
DataObject\Concrete $object, /** @var DataObject\Localizedfield $blockItemData */
AttributeSet $result, /** @var DataObject\Localizedfield $blockItemData */
array $exportAttributes = null) : DataObjectDataExtractor {}
/** @var Localizedfields|null $localizedFieldsDefinition */
        protected function addLocalizedFieldsInBricks(/** @var Localizedfields|null $localizedFieldsDefinition */
DataObject\Concrete $object, /** @var Localizedfields|null $localizedFieldsDefinition */
AttributeSet $result, /** @var Localizedfields|null $localizedFieldsDefinition */
array $exportAttributes = null) : DataObjectDataExtractor {}
/** @var DataObject\Localizedfield $localizedFields */
        protected function addLocalizedFieldsInFieldCollections(/** @var DataObject\Localizedfield $localizedFields */
DataObject\Concrete $object, /** @var DataObject\Localizedfield $localizedFields */
AttributeSet $result, /** @var DataObject\Localizedfield $localizedFields */
array $exportAttributes = null) : DataObjectDataExtractor {}
        protected function isFieldExportable(string $className, Data $definition, array $exportAttributes = null) : bool {}
    }

    class DocumentDataExtractor extends \pimcore\translation\exportdataextractorservice\dataextractor\abstractelementdataextractor {
        const EXPORTABLE_TAGS = ['wysiwyg', 'input', 'textarea', 'image', 'link'];

        /**
         * @var TagUsageResolver
         */
        private $tagUsageResolver;

        public function __construct(TagUsageResolver $tagUsageResolver) {}
        public function extract(TranslationItem $translationItem, string $sourceLanguage, array $targetLanguages) : AttributeSet {}
        protected function addDoumentTags(Document $document, AttributeSet $result) : DocumentDataExtractor {}
        protected function addSettings(Document $document, AttributeSet $result) : DocumentDataExtractor {}
        protected function doExportProperty(Property $property) : bool {}
    }

    abstract class AbstractElementDataExtractor implements \pimcore\translation\exportdataextractorservice\dataextractor\dataextractorinterface {
        protected function createResultInstance(TranslationItem $translationItem) : AttributeSet {}
        public function extract(TranslationItem $translationItem, string $sourceLanguage, array $targetLanguages) : AttributeSet {}
        protected function doExportProperty(Property $property) : bool {}
        protected function addProperties(ElementInterface $element, AttributeSet $result) {}
    }


    interface DataExtractorInterface {
        function extract(TranslationItem $translationItem, string $sourceLanguage, array $targetLanguages) : AttributeSet ;
    }

}

namespace Pimcore\Translation\ImportDataExtractor {
    class Xliff12DataExtractor implements \pimcore\translation\importdataextractor\importdataextractorinterface {
        /**
         * @var Xliff12Escaper
         */
        protected $xliffEscaper;
        /**
         * @var TranslationItemResolverInterface
         */
        protected $translationItemResolver;

        public function __construct(Xliff12Escaper $xliffEscaper, TranslationItemResolverInterface $translationItemResolver) {}
        public function extractElement(string $importId, int $stepId) : AttributeSet {}
        public function getImportFilePath(string $importId) : string {}
        public function countSteps(string $importId) : int {}
        private function loadFile(string $importId) : \SimpleXMLElement {}
    }


    interface ImportDataExtractorInterface {
        function extractElement(string $importId, int $stepId) : AttributeSet ;
        function getImportFilePath(string $importId) : string ;
        function countSteps(string $importId) : int ;
    }

}

namespace Pimcore\Translation\ImportDataExtractor\TranslationItemResolver {
    class TranslationItemResolver implements \pimcore\translation\importdataextractor\translationitemresolver\translationitemresolverinterface {
        public function resolve(string $type, string $id) : ?TranslationItem {}
    }


    interface TranslationItemResolverInterface {
        function resolve(string $type, string $id) : ?TranslationItem ;
    }

}

namespace Pimcore\Translation\AttributeSet {
    class Attribute {
        const TYPE_PROPERTY = 'property';
        const TYPE_SETTINGS = 'settings';
        const TYPE_TAG = 'tag';
        const TYPE_BRICK_LOCALIZED_FIELD = 'localizedbrick';
        const TYPE_LOCALIZED_FIELD = 'localizedfield';
        const TYPE_BLOCK_IN_LOCALIZED_FIELD = 'blockinlocalizedfield';
        const TYPE_BLOCK = 'block';
        const TYPE_ELEMENT_KEY = 'key';
        const TYPE_FIELD_COLLECTION_LOCALIZED_FIELD = 'localizedfieldcollection';

        /**
         * @var string
         */
        private $type;
        /**
         * @var string
         */
        private $name;
        /**
         * @var string
         */
        private $content;
        /**
         * @var string[]
         */
        private $targetContent;
        /**
         * @var bool
         */
        private $isReadonly;

        public function __construct(string $type, string $name, string $content, bool $isReadonly = false, array $targetContent = [ ]) {}
        /**
         * @return string
         */
        public function getType() : string {}
        /**
         * @return string
         */
        public function getName() : string {}
        /**
         * @return string
         */
        public function getContent() : string {}
        /**
         * @return string[]
         */
        public function getTargetContent() : array {}
        /**
         * Readonly attributes should not be translated - relevant for information purposes only.
         *
         * @return bool
         */
        public function isReadonly() : bool {}
    }

    class AttributeSet {
        /**
         * @var TranslationItem
         */
        private $translationItem;
        /**
         * @var string
         */
        private $sourceLanguage;
        /**
         * @var string[]
         */
        private $targetLanguages;
        /**
         * @var Attribute[];
         */
        private $attributes;

        public function __construct(TranslationItem $translationItem) {}
        /**
         * @return TranslationItem
         */
        public function getTranslationItem() : TranslationItem {}
        public function setTranslationItem(ElementInterface $translationItem) : AttributeSet {}
        /**
         * @return string
         */
        public function getSourceLanguage() : string {}
        public function setSourceLanguage(string $sourceLanguage) : AttributeSet {}
        /**
         * @return string[]
         */
        public function getTargetLanguages() : array {}
        public function setTargetLanguages(array $targetLanguages) : AttributeSet {}
        /**
         * @return Attribute[]
         */
        public function getAttributes() : array {}
        public function isEmpty() : bool {}
        public function addAttribute(string $type, string $name, string $content, bool $isReadonly = false, array $targetContent = [ ]) : AttributeSet {}
    }

}

namespace Pimcore\Translation\ImporterService {
    class ImporterService implements \pimcore\translation\importerservice\importerserviceinterface {
        /**
         * @var ImporterInterface[]
         */
        private $importers;

        public function import(AttributeSet $attributeSet, bool $saveElement = true) {}
        public function registerImporter(string $type, ImporterInterface $importer) : ImporterServiceInterface {}
        public function getImporter(string $type) : ImporterInterface {}
    }


    interface ImporterServiceInterface {
        function import(AttributeSet $attributeSet, bool $saveElement = true) ;
        function registerImporter(string $type, ImporterInterface $importer) : ImporterServiceInterface ;
        function getImporter(string $type) : ImporterInterface ;
    }

}

namespace Pimcore\Translation\ImporterService\Importer {
    class DocumentImporter extends \pimcore\translation\importerservice\importer\abstractelementimporter {
        protected function importAttribute(Element\ElementInterface $element, string $targetLanguage, Attribute $attribute) {}
    }

    class DataObjectImporter extends \pimcore\translation\importerservice\importer\abstractelementimporter {
/** @var DataObject\Localizedfield $localizedFields */
        protected function importAttribute(/** @var DataObject\Localizedfield $localizedFields */
Element\ElementInterface $element, /** @var DataObject\Localizedfield $localizedFields */
string $targetLanguage, /** @var DataObject\Localizedfield $localizedFields */
Attribute $attribute) {}
        protected function saveElement(Element\ElementInterface $element) {}
    }

    class AbstractElementImporter implements \pimcore\translation\importerservice\importer\importerinterface {
        public function import(AttributeSet $attributeSet, bool $saveElement = true) {}
        protected function importAttribute(Element\ElementInterface $element, string $targetLanguage, Attribute $attribute) {}
        protected function saveElement(Element\ElementInterface $element) {}
    }


    interface ImporterInterface {
        function import(AttributeSet $attributeSet, bool $saveElement = true) ;
    }

}

namespace Pimcore\Translation\TranslationItemCollection {
    class TranslationItemCollection {
        /**
         * @var TranslationItem[]
         */
        private $items;

        public function add(string $type, string $id, $element) : TranslationItemCollection {}
        public function addItem(TranslationItem $item) : TranslationItemCollection {}
        public function addPimcoreElement(ElementInterface $element) : TranslationItemCollection {}
        /**
         * @return TranslationItem[]
         */
        public function getItems() : array {}
        public function toArray() : array {}
        public function isEmpty() : bool {}
    }

    class TranslationItem {
        /**
         * @var string
         */
        private $type;
        /**
         * @var string
         */
        private $id;
        /**
         * @var ElementInterface
         */
        private $element;

        public function __construct(string $type, string $id, $element) {}
        /**
         * @return string
         */
        public function getType() : string {}
        /**
         * @return string
         */
        public function getId() : string {}
        /**
         * @return ElementInterface
         */
        public function getElement() {}
    }

}

namespace Pimcore\Config {
    /**
     * Handles writing/merging report config and emitting an event on config save.
     */
    class ReportConfigWriter {
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;

        public function __construct(EventDispatcherInterface $eventDispatcher) {}
        public function write(array $settings) {}
        public function mergeConfig(Config $values) {}
        public function mergeArray(array $values) {}
        private function getConfigFile() : string {}
    }

    class EnvironmentConfig implements \pimcore\config\environmentconfiginterface {
        /**
         * Environments activating the kernel debug mode
         *
         * @var array
         */
        private $kernelDebugEnvironments;
        /**
         * The default environment to use used if no environment is explicitely
         * set and Pimcore is not in debug mode.
         *
         * @var string
         */
        private $defaultEnvironment;
        /**
         * The default environment to use used if no environment is explicitely
         * set and Pimcore is in debug mode.
         *
         * @var string
         */
        private $defaultDebugModeEnvironment;
        /**
         * Environments which will be handled by the profiler cleanup job
         *
         * @var array
         */
        private $profilerHousekeepingEnvironments;

        public function activatesKernelDebugMode(string $environment) : bool {}
        public function setKernelDebugEnvironments(array $kernelDebugEnvironments) {}
        public function getKernelDebugEnvironments() : array {}
        public function getDefaultEnvironment() : string {}
        public function setDefaultEnvironment(string $defaultEnvironment) {}
        /**
         * @inheritDoc
         */
        public function getDefaultDebugModeEnvironment() : string {}
        public function setDefaultDebugModeEnvironment(string $defaultDebugModeEnvironment) {}
        public function setProfilerHousekeepingEnvironments(array $profilerHousekeepingEnvironments) {}
        public function getProfilerHousekeepingEnvironments() : array {}
    }

    /**
     * Provides a property based interface to an array.
     * The data are read-only unless $allowModifications is set to true
     * on construction.
     *
     * Implements Countable, Iterator and ArrayAccess
     * to facilitate easy access to the data.
     */
    class Config implements \arrayaccess, \iterator, \countable {
        /**
         * Whether modifications to configuration data are allowed.
         *
         * @var bool
         */
        protected $allowModifications;
        /**
         * Data within the configuration.
         *
         * @var array
         */
        protected $data;
        /**
         * Used when unsetting values during iteration to ensure we do not skip
         * the next element.
         *
         * @var bool
         */
        protected $skipNextIteration;

        public function __construct(array $array, $allowModifications = false) {}
        public function get($name, $default = null) {}
        public function __get($name) {}
        public function __set($name, $value) {}
        /**
         * Deep clone of this instance to ensure that nested Zend\Configs are also
         * cloned.
         *
         * @return void
         */
        public function __clone() {}
        /**
         * Return an associative array of the stored data.
         *
         * @return array
         */
        public function toArray() {}
        public function __isset($name) {}
        public function __unset($name) {}
        /**
         * count(): defined by Countable interface.
         *
         * @see    Countable::count()
         *
         * @return int
         */
        public function count() {}
        /**
         * current(): defined by Iterator interface.
         *
         * @see    Iterator::current()
         *
         * @return mixed
         */
        public function current() {}
        /**
         * key(): defined by Iterator interface.
         *
         * @see    Iterator::key()
         *
         * @return mixed
         */
        public function key() {}
        /**
         * next(): defined by Iterator interface.
         *
         * @see    Iterator::next()
         *
         * @return void
         */
        public function next() {}
        /**
         * rewind(): defined by Iterator interface.
         *
         * @see    Iterator::rewind()
         *
         * @return void
         */
        public function rewind() {}
        /**
         * valid(): defined by Iterator interface.
         *
         * @see    Iterator::valid()
         *
         * @return bool
         */
        public function valid() {}
        public function offsetExists($offset) {}
        public function offsetGet($offset) {}
        public function offsetSet($offset, $value) {}
        public function offsetUnset($offset) {}
/** @var Config $value */
        public function merge(/** @var Config $value */
Config $merge) {}
        /**
         * Prevent any more modifications being made to this instance.
         *
         * Useful after merge() has been used to merge multiple Config objects
         * into one object which should then not be modified again.
         *
         * @return void
         */
        public function setReadOnly() {}
        /**
         * Returns whether this Config object is read only or not.
         *
         * @return bool
         */
        public function isReadOnly() {}
        /**
         * @inheritDoc
         */
        public function __toString() {}
    }

    /**
     * Locates configs from bundles if Resources/config/pimcore exists.
     *
     * Will first try to locate <name>_<environment>.<suffix> and fall back to <name>.<suffix> if the
     * environment specific lookup didn't find anything. All known suffixes are searched, so e.g. if a config.yml
     * and a config.php exist, both will be used.
     *
     * Example: lookup for config will try to locate the following files from every bundle (will return all files it finds):
     *
     *  - Resources/config/pimcore/config_dev.php
     *  - Resources/config/pimcore/config_dev.yml
     *  - Resources/config/pimcore/config_dev.xml
     *
     * If the previous lookup didn't return any results, it will fall back to:
     *
     *  - Resources/config/pimcore/config.php
     *  - Resources/config/pimcore/config.yml
     *  - Resources/config/pimcore/config.xml
     */
    class BundleConfigLocator {
        /**
         * @var KernelInterface
         */
        private $kernel;

        public function __construct(KernelInterface $kernel) {}
        public function locate(string $name) {}
        private function buildContainerConfigFinder(string $name, string $directory, bool $includeEnvironment = false) : Finder {}
    }


    interface EnvironmentConfigInterface {
        function activatesKernelDebugMode(string $environment) : bool ;
        /**
         * Default environment to use if no environment is explicitely defined
         *
         * @return string
         */
        function getDefaultEnvironment() : string ;
        /**
         * Default environment to use if no environment is explicitely defined and Pimcore is in debug mode
         *
         * @deprecated
         *
         * @return string
         */
        function getDefaultDebugModeEnvironment() : string ;
        /**
         * Environments to handle in housekeeping maintenance job
         *
         * @return array
         */
        function getProfilerHousekeepingEnvironments() : array ;
    }

}

namespace Pimcore\Security\Encoder {
    /**
     * Password encoding and verification for Pimcore objects and admin users is implemented on the user object itself.
     * Therefore the encoder needs the user object when encoding or verifying a password. This factory decorates the core
     * factory and allows to delegate building the encoder to a type specific factory which then is able to create a
     * dedicated encoder for a user object.
     *
     * If the given user is not configured to be handled by one of the encoder factories, the normal framework encoder
     * logic applies.
     */
    class EncoderFactory implements \symfony\component\security\core\encoder\encoderfactoryinterface {
        /**
         * @var EncoderFactoryInterface
         */
        protected $frameworkFactory;
        /**
         * @var EncoderFactoryInterface[]
         */
        protected $encoderFactories;

        public function __construct(EncoderFactoryInterface $frameworkFactory, array $encoderFactories = [ ]) {}
        public function getEncoder($user) {}
        private function getEncoderFromFactory($user) {}
    }

    /**
     * @method Concrete getUser()
     */
    class PasswordFieldEncoder extends \pimcore\security\encoder\abstractuserawarepasswordencoder {
        /**
         * @var string
         */
        protected $fieldName;
        /**
         * If true, the user password hash will be updated if necessary.
         *
         * @var bool
         */
        protected $updateHash;

        public function __construct($fieldName) {}
        /**
         * @return bool
         */
        public function getUpdateHash() {}
        public function setUpdateHash($updateHash) {}
        public function encodePassword($raw, $salt) {}
        public function isPasswordValid($encoded, $raw, $salt) {}
        /**
         * @return Password
         */
        protected function getFieldDefinition() {}
    }

    abstract class AbstractUserAwarePasswordEncoder extends \symfony\component\security\core\encoder\basepasswordencoder implements \pimcore\security\encoder\userawarepasswordencoderinterface {
        /**
         * @var UserInterface
         */
        protected $user;

        public function setUser(UserInterface $user) {}
        /**
         * @inheritDoc
         */
        public function getUser() {}
    }


    interface EncoderFactoryAwareUserInterface {
        /**
         * Gets the name of the encoder factory used to encode the password.
         *
         * If the method returns null, the standard way to retrieve the encoder
         * will be used instead.
         *
         * @return string
         */
        function getEncoderFactoryName() ;
    }

    interface EncoderFactoryAwareInterface {
        /**
         * Gets the name of the encoder factory used to create an encoder.
         *
         * If the method returns null, the standard way to retrieve the encoder
         * will be used instead.
         *
         * @return string
         */
        function getEncoderFactoryName() ;
    }

    interface UserAwarePasswordEncoderInterface extends \symfony\component\security\core\encoder\passwordencoderinterface {
        function setUser(UserInterface $user) ;
        /**
         * Get the user object
         *
         * @return UserInterface
         *
         * @throws RuntimeException
         *      if no user was set
         */
        function getUser() ;
    }

}

namespace Pimcore\Security\Encoder\Factory {
    abstract class AbstractEncoderFactory implements \symfony\component\security\core\encoder\encoderfactoryinterface {
        /**
         * Encoder class name to build
         *
         * @var string
         */
        protected $className;
        /**
         * Arguments passed to encoder constructor
         *
         * @var array
         */
        protected $arguments;
        /**
         * @var \ReflectionClass
         */
        protected $reflector;

        public function __construct($className, $arguments = null) {}
/** @var PasswordEncoderInterface $encoder */
        protected function buildEncoder(/** @var PasswordEncoderInterface $encoder */
\ReflectionClass $reflectionClass) {}
        /**
         * @return \ReflectionClass
         */
        protected function getReflector() {}
    }

    /**
     * Encoder factory keeping a dedicated encoder instance per user object. This is needed as Pimcore Users and user
     * objects containing Password field definitions handle their encoding logic by themself. The user aware encoder
     * delegates encoding and verification to the user object.
     *
     * Example DI configuration for a factory building PasswordFieldEncoder instances which get 'password' as argument:
     *
     *      website_demo.security.password_encoder_factory:
     *          class: Pimcore\Security\Encoder\Factory\UserAwareEncoderFactory
     *          arguments:
     *              - Pimcore\Security\Encoder\PasswordFieldEncoder
     *              - ['password']
     */
    class UserAwareEncoderFactory extends \pimcore\security\encoder\factory\abstractencoderfactory {
        /**
         * @var EncoderInterface[]
         */
        private $encoders;

/** @var PasswordEncoderInterface $encoder */
        public function getEncoder(/** @var PasswordEncoderInterface $encoder */
$user) {}
    }

}

namespace Pimcore\Security\User {
    /**
     * User provider loading users from pimcore objects. To load users, the provider needs
     * to know which kind of users to load (className) and which field to query for the
     * username (usernameField).
     *
     * Example DI configuration loading from the AppBundle\Model\DataObject\User class and searching by username:
     *
     *      website_demo.security.user_provider:
     *          class: Pimcore\Security\User\ObjectUserProvider
     *          arguments: ['AppBundle\Model\DataObject\User', 'username']
     */
    class ObjectUserProvider implements \symfony\component\security\core\user\userproviderinterface {
        /**
         * The pimcore class name to be used. Needs to be a fully qualified class
         * name (e.g. Pimcore\Model\DataObject\User or your custom user class extending
         * the generated one.
         *
         * @var string
         */
        protected $className;
        /**
         * @var string
         */
        protected $usernameField;

        public function __construct($className, $usernameField = 'username') {}
        protected function setClassName($className) {}
        public function loadUserByUsername($username) {}
        public function refreshUser(UserInterface $user) {}
        public function supportsClass($class) {}
    }

}

namespace Pimcore\Security\Exception {
    class ConfigurationException extends \symfony\component\security\core\exception\runtimeexception {}

}

namespace Pimcore\Targeting {
    class DataLoader implements \pimcore\targeting\dataloaderinterface {
    use \pimcore\debug\traits\stopwatchtrait;

        /**
         * @var ContainerInterface
         */
        private $dataProviders;

        public function __construct(ContainerInterface $dataProviders) {}
        public function loadDataFromProviders(VisitorInfo $visitorInfo, $providerKeys) {}
        public function hasDataProvider(string $type) : bool {}
        public function getDataProvider(string $type) : DataProviderInterface {}
    }

    class ConditionFactory implements \pimcore\targeting\conditionfactoryinterface {
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;
        /**
         * @var array
         */
        private $conditions;
        /**
         * @var array
         */
        private $blacklistedKeys;

        public function __construct(EventDispatcherInterface $eventDispatcher, array $conditions) {}
        public function build(array $config) : ConditionInterface {}
/** @var ConditionInterface $class */
        protected function buildInstance(/** @var ConditionInterface $class */
string $type, /** @var ConditionInterface $class */
array $config) : ConditionInterface {}
    }

    class VisitorInfoStorage implements \pimcore\targeting\visitorinfostorageinterface {
        /**
         * @var VisitorInfo
         */
        private $visitorInfo;

        public function getVisitorInfo() : VisitorInfo {}
        public function setVisitorInfo(VisitorInfo $visitorInfo) {}
        public function hasVisitorInfo() : bool {}
    }

    class VisitorInfoResolver {
    use \pimcore\debug\traits\stopwatchtrait;

        const STORAGE_KEY_MATCHED_SESSION_RULES = 'vi:sru';
        const STORAGE_KEY_RULE_CONDITION_VARIABLES = 'vi:var';
        const ATTRIBUTE_VISITOR_INFO = '_visitor_info';
        const STORAGE_KEY_MATCHED_VISITOR_RULES = 'vi:vru';

        /**
         * @var TargetingStorageInterface
         */
        private $targetingStorage;
        /**
         * @var VisitorInfoStorageInterface
         */
        private $visitorInfoStorage;
        /**
         * @var ConditionMatcherInterface
         */
        private $conditionMatcher;
        /**
         * @var DelegatingActionHandler|ActionHandlerInterface
         */
        private $actionHandler;
        /**
         * @var Connection
         */
        private $db;
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;
        /**
         * @var Rule[]
         */
        private $targetingRules;
        /**
         * @var bool
         */
        private $targetingConfigured;

        public function __construct(TargetingStorageInterface $targetingStorage, VisitorInfoStorageInterface $visitorInfoStorage, ConditionMatcherInterface $conditionMatcher, ActionHandlerInterface $actionHandler, Connection $db, EventDispatcherInterface $eventDispatcher) {}
        public function resolve(Request $request) : VisitorInfo {}
        public function isTargetingConfigured() : bool {}
        private function matchTargetingRuleConditions(VisitorInfo $visitorInfo) {}
        private function matchTargetingRuleCondition(VisitorInfo $visitorInfo, Rule $rule) {}
        private function handleTargetingRuleActions(VisitorInfo $visitorInfo, Rule $rule) {}
        /** @var Rule\Listing|Rule\Listing\Dao $list */
        private function getTargetingRules() : array {}
        private function ruleWasMatchedInSession(VisitorInfo $visitorInfo, Rule $rule) : bool {}
        private function markRuleAsMatchedInSession(VisitorInfo $visitorInfo, Rule $rule) {}
        private function ruleWasMatchedForVisitor(VisitorInfo $visitorInfo, Rule $rule) : bool {}
        private function markRuleAsMatchedForVisitor(VisitorInfo $visitorInfo, Rule $rule) {}
        private function ruleWasMatched(VisitorInfo $visitorInfo, Rule $rule, string $scope, string $storageKey) : bool {}
        private function markRuleAsMatched(VisitorInfo $visitorInfo, Rule $rule, string $scope, string $storageKey) {}
        private function ruleWasMatchedInSessionWithVariables(VisitorInfo $visitorInfo, Rule $rule, array $variables) : bool {}
    }

    class ConditionMatcher implements \pimcore\targeting\conditionmatcherinterface {
        /**
         * @var ConditionFactoryInterface
         */
        private $conditionFactory;
        /**
         * @var DataLoaderInterface
         */
        private $dataLoader;
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;
        /**
         * @var ExpressionLanguage
         */
        private $expressionLanguage;
        /**
         * @var LoggerInterface
         */
        private $logger;
        /**
         * @var array
         */
        private $collectedVariables;

        public function __construct(ConditionFactoryInterface $conditionFactory, DataLoaderInterface $dataLoader, EventDispatcherInterface $eventDispatcher, ExpressionLanguage $expressionLanguage, LoggerInterface $logger) {}
        public function match(VisitorInfo $visitorInfo, array $conditions, bool $collectVariables = false) : bool {}
        /**
         * @inheritDoc
         */
        public function getCollectedVariables() : array {}
        private function matchCondition(VisitorInfo $visitorInfo, array $config, bool $collectVariables = false) : bool {}
        private function collectConditionVariables(array $config, ConditionInterface $condition) {}
    }


    interface ConditionMatcherInterface {
        function match(VisitorInfo $visitorInfo, array $configs, bool $collectVariables = false) : bool ;
        /**
         * Returns collected variables from last match
         *
         * @return array
         */
        function getCollectedVariables() : array ;
    }

    /**
     * Interface for override handlers which can influence the debug toolbar form and override
     * targeting data based on form results.
     */
    interface OverrideHandlerInterface {
    const REQUEST_ATTRIBUTE = 'pimcore_targeting_overrides';
        function buildOverrideForm(FormBuilderInterface $form, Request $request) ;
        function overrideFromRequest(array $overrides, Request $request) ;
    }

    /**
     * Similar to the TokenStorage for user objects, this contains the current
     * visitorInfo valid for the current request.
     */
    interface VisitorInfoStorageInterface {
        function getVisitorInfo() : VisitorInfo ;
        function setVisitorInfo(VisitorInfo $visitorInfo) ;
        function hasVisitorInfo() : bool ;
    }

    interface ConditionFactoryInterface {
        function build(array $config) : ConditionInterface ;
    }

    interface DataLoaderInterface {
        function loadDataFromProviders(VisitorInfo $visitorInfo, $providerKeys) ;
        function hasDataProvider(string $type) : bool ;
        function getDataProvider(string $type) : DataProviderInterface ;
    }

    /**
     * Defines a component which depends on data providers. Currently supported for
     *
     *  - Conditions
     *  - Data Providers (depending on other data providers)
     *  - Action Handlers
     */
    interface DataProviderDependentInterface {
        /**
         * Returns keys of data providers which this component depends on.
         *
         * @return array
         */
        function getDataProviderKeys() : array ;
    }

}

namespace Pimcore\Targeting\Code {
    class TargetingCodeGenerator {
        const BLOCK_BEFORE_SCRIPT_TAG = 'beforeScriptTag';
        const BLOCK_AFTER_SCRIPT = 'afterScript';
        const BLOCK_BEFORE_SCRIPT = 'beforeScript';
        const BLOCK_AFTER_SCRIPT_TAG = 'afterScriptTag';

        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;
        /**
         * @var EngineInterface
         */
        private $templatingEngine;
        /**
         * @var array
         */
        private $blocks;

        public function __construct(EventDispatcherInterface $eventDispatcher, EngineInterface $templatingEngine) {}
        public function generateCode(VisitorInfo $visitorInfo) : string {}
        private function renderTemplate(TargetingCodeEvent $event) : string {}
        private function buildCodeBlocks() : array {}
    }

}

namespace Pimcore\Targeting\Document {
    class DocumentTargetingConfigurator {
        /**
         * @var VisitorInfoStorageInterface
         */
        private $visitorInfoStorage;
        /**
         * @var RequestHelper
         */
        private $requestHelper;
        /**
         * @var UserLoader
         */
        private $userLoader;
        /**
         * @var CoreHandlerInterface
         */
        private $cache;
        /**
         * @var array
         */
        private $targetGroupMapping;
        /**
         * @var TargetGroup|null
         */
        private $overrideTargetGroup;

        public function __construct(VisitorInfoStorageInterface $visitorInfoStorage, RequestHelper $requestHelper, UserLoader $userLoader, CoreHandlerInterface $cache) {}
        public function configureTargetGroup(Document $document) {}
        private function isConfiguredByAdminParam(TargetingDocumentInterface $document) : bool {}
        private function isConfiguredByOverride(TargetingDocumentInterface $document) : bool {}
        public function getConfiguredTargetGroup(Document $document) {}
        public function getResolvedTargetGroupMapping() : array {}
        public function getMatchingTargetGroups(Document $document) : array {}
        public function getTargetGroupsForDocument(Document $document) : array {}
        public function setOverrideTargetGroup(TargetGroup $overrideTargetGroup = null) {}
        /**
         * @return null|TargetGroup
         */
        public function getOverrideTargetGroup() {}
    }

}

namespace Pimcore\Targeting\Storage {
    class SessionStorage implements \pimcore\targeting\storage\targetingstorageinterface {
    use \pimcore\targeting\storage\traits\timestampstrait;

        const STORAGE_KEY_UPDATED_AT = '_u';
        const STORAGE_KEY_CREATED_AT = '_c';

        public function all(VisitorInfo $visitorInfo, string $scope) : array {}
        public function has(VisitorInfo $visitorInfo, string $scope, string $name) : bool {}
        public function set(VisitorInfo $visitorInfo, string $scope, string $name, $value) {}
        public function get(VisitorInfo $visitorInfo, string $scope, string $name, $default = null) {}
        public function clear(VisitorInfo $visitorInfo, string $scope = null) {}
        public function migrateFromStorage(TargetingStorageInterface $storage, VisitorInfo $visitorInfo, string $scope) {}
        public function getCreatedAt(VisitorInfo $visitorInfo, string $scope) {}
        public function getUpdatedAt(VisitorInfo $visitorInfo, string $scope) {}
/** @var NamespacedAttributeBag $bag */
        private function getSessionBag(/** @var NamespacedAttributeBag $bag */
VisitorInfo $visitorInfo, /** @var NamespacedAttributeBag $bag */
string $scope, /** @var NamespacedAttributeBag $bag */
bool $checkPreviousSession = false) {}
        private function updateTimestamps(NamespacedAttributeBag $bag, \DateTimeInterface $createdAt = null, \DateTimeInterface $updatedAt = null) {}
    }

    /**
     * Implements a 2-step storage handling a primary storage which needs a visitor ID (e.g. external DB)
     * and a fallback storage which is able to save data without a visitor ID (e.g. session or cookie).
     *
     * As soon as the primary storage is able to handle the request, data is migrated from the fallback to
     * the primary. Example flow (cookie + redis):
     *
     *  - Visitor visits page for the first time without a visitor ID. This request will write to the fallback storage
     *  (cookie) and a visitor ID is generated during this first request.
     *  - The next request already includes a visitorID. Upon encountering the visitor ID for the first time, data is
     *  migrated from the fallback to the primary and the fallback data is cleared (if configured).
     */
    class FallbackStorage implements \pimcore\targeting\storage\targetingstorageinterface {
        /**
         * @var TargetingStorageInterface
         */
        private $primaryStorage;
        /**
         * @var TargetingStorageInterface
         */
        private $fallbackStorage;
        /**
         * @var LoggerInterface
         */
        private $logger;
        /**
         * @var array
         */
        private $options;

        public function __construct(TargetingStorageInterface $primaryStorage, TargetingStorageInterface $fallbackStorage, LoggerInterface $logger, array $options = [ ]) {}
        protected function configureOptions(OptionsResolver $resolver) {}
        public function all(VisitorInfo $visitorInfo, string $scope) : array {}
        public function has(VisitorInfo $visitorInfo, string $scope, string $name) : bool {}
        public function set(VisitorInfo $visitorInfo, string $scope, string $name, $value) {}
        public function get(VisitorInfo $visitorInfo, string $scope, string $name, $default = null) {}
        public function clear(VisitorInfo $visitorInfo, string $scope = null) {}
        public function migrateFromStorage(TargetingStorageInterface $storage, VisitorInfo $visitorInfo, string $scope) : bool {}
        public function getCreatedAt(VisitorInfo $visitorInfo, string $scope) {}
        public function getUpdatedAt(VisitorInfo $visitorInfo, string $scope) {}
        private function migrateFromFallback(VisitorInfo $visitorInfo, string $scope) {}
    }

    class DbStorage implements \pimcore\targeting\storage\targetingstorageinterface, \pimcore\targeting\storage\maintenancestorageinterface {
    use \pimcore\targeting\storage\traits\timestampstrait;

        /**
         * @var Connection
         */
        private $db;
        /**
         * @var string
         */
        private $tableName;

        public function __construct(Connection $db, array $options = [ ]) {}
        protected function handleOptions(array $options) {}
        protected function configureOptions(OptionsResolver $resolver) {}
        public function all(VisitorInfo $visitorInfo, string $scope) : array {}
        public function has(VisitorInfo $visitorInfo, string $scope, string $name) : bool {}
        public function set(VisitorInfo $visitorInfo, string $scope, string $name, $value) {}
        public function get(VisitorInfo $visitorInfo, string $scope, string $name, $default = null) {}
        public function clear(VisitorInfo $visitorInfo, string $scope = null) {}
        public function migrateFromStorage(TargetingStorageInterface $storage, VisitorInfo $visitorInfo, string $scope) {}
        public function getCreatedAt(VisitorInfo $visitorInfo, string $scope) {}
        public function getUpdatedAt(VisitorInfo $visitorInfo, string $scope) {}
        public function maintenance() {}
        private function loadDate(VisitorInfo $visitorInfo, string $scope, string $select) {}
        private function convertToDateTime($result = null) {}
        private function updateTimestamps(VisitorInfo $visitorInfo, string $scope, \DateTimeInterface $createdAt = null, \DateTimeInterface $updatedAt = null) {}
        protected function expiryFor(string $scope) : int {}
        private function addExpiryParam(QueryBuilder $qb, string $scope) {}
        private function cleanup(string $scope) {}
    }

    class RedisStorage implements \pimcore\targeting\storage\targetingstorageinterface {
    use \pimcore\targeting\storage\traits\timestampstrait;

        const STORAGE_KEY_CREATED_AT = '_c';
        const STORAGE_KEY_UPDATED_AT = '_u';

        /**
         * @var \Credis_Client
         */
        private $redis;

        public function __construct(\Credis_Client $redis) {}
        public function all(VisitorInfo $visitorInfo, string $scope) : array {}
        public function has(VisitorInfo $visitorInfo, string $scope, string $name) : bool {}
        public function set(VisitorInfo $visitorInfo, string $scope, string $name, $value) {}
        public function get(VisitorInfo $visitorInfo, string $scope, string $name, $default = null) {}
        public function clear(VisitorInfo $visitorInfo, string $scope = null) {}
        public function migrateFromStorage(TargetingStorageInterface $storage, VisitorInfo $visitorInfo, string $scope) {}
        public function getCreatedAt(VisitorInfo $visitorInfo, string $scope) {}
        public function getUpdatedAt(VisitorInfo $visitorInfo, string $scope) {}
        private function loadDate(VisitorInfo $visitorInfo, string $scope, string $storageKey) {}
        private function buildKey(VisitorInfo $visitorInfo, string $scope) : string {}
        private function getCurrentCreatedAt(string $key) : int {}
        private function updateTimestamps(\Credis_Client $multi, string $key, int $currentCreatedAt, \DateTimeInterface $createdAt = null, \DateTimeInterface $updatedAt = null) {}
        private function updateExpiry(\Credis_Client $multi, string $scope, string $key) {}
        protected function expiryFor(string $scope) : int {}
    }

    /**
     * Stores data as cookie in the client's browser
     *
     * NOTE: using this storage without signed cookies is inherently insecure and can open vulnerabilities by injecting
     * malicious data into the client cookie. Use only for testing!
     */
    class CookieStorage implements \pimcore\targeting\storage\targetingstorageinterface {
    use \pimcore\targeting\storage\traits\timestampstrait;

        const COOKIE_NAME_VISITOR = '_pc_tvs';
        const COOKIE_NAME_SESSION = '_pc_tss';
        const STORAGE_KEY_UPDATED_AT = '_u';
        const STORAGE_KEY_CREATED_AT = '_c';

        /**
         * @var CookieSaveHandlerInterface
         */
        private $saveHandler;
        /**
         * @var RequestStack
         */
        private $requestStack;
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;
        /**
         * @var array
         */
        private $data;
        /**
         * @var bool
         */
        private $changed;
        /**
         * @var array
         */
        private $scopeCookieMapping;

        public function __construct(CookieSaveHandlerInterface $saveHandler, RequestStack $requestHelper, EventDispatcherInterface $eventDispatcher) {}
        public function all(VisitorInfo $visitorInfo, string $scope) : array {}
        public function has(VisitorInfo $visitorInfo, string $scope, string $name) : bool {}
        public function get(VisitorInfo $visitorInfo, string $scope, string $name, $default = null) {}
        public function set(VisitorInfo $visitorInfo, string $scope, string $name, $value) {}
        public function clear(VisitorInfo $visitorInfo, string $scope = null) {}
        public function migrateFromStorage(TargetingStorageInterface $storage, VisitorInfo $visitorInfo, string $scope) {}
        public function getCreatedAt(VisitorInfo $visitorInfo, string $scope) {}
        public function getUpdatedAt(VisitorInfo $visitorInfo, string $scope) {}
        private function loadData(VisitorInfo $visitorInfo, string $scope) : array {}
        private function addSaveListener(VisitorInfo $visitorInfo) {}
        private function updateTimestamps(string $scope, \DateTimeInterface $createdAt = null, \DateTimeInterface $updatedAt = null) {}
        protected function expiryFor(string $scope) {}
    }


    interface MaintenanceStorageInterface {
        /**
         * Runs maintenance tasks which can be potentially heavy and should only be executed
         * asynchronously (e.g. in maintenance task).
         */
        function maintenance() ;
    }

    /**
     * This defines the interface for a persistent targeting storage (e.g. Session). The targeting storage needs to define
     * by itself if it needs a unique visitor ID to store data and fetch if from the visitor info itself.
     */
    interface TargetingStorageInterface {
    const SCOPE_SESSION = 'session';
    const SCOPE_VISITOR = 'visitor';
    const VALID_SCOPES = [self::SCOPE_SESSION, self::SCOPE_VISITOR];
    const STORAGE_KEY_META_ENTRY = '_m';
        function all(VisitorInfo $visitorInfo, string $scope) : array ;
        function has(VisitorInfo $visitorInfo, string $scope, string $name) : bool ;
        function set(VisitorInfo $visitorInfo, string $scope, string $name, $value) ;
        function get(VisitorInfo $visitorInfo, string $scope, string $name, $default = null) ;
        function clear(VisitorInfo $visitorInfo, string $scope = null) ;
        function migrateFromStorage(TargetingStorageInterface $storage, VisitorInfo $visitorInfo, string $scope) ;
        function getCreatedAt(VisitorInfo $visitorInfo, string $scope) ;
        function getUpdatedAt(VisitorInfo $visitorInfo, string $scope) ;
    }

}

namespace Pimcore\Targeting\Storage\Traits {
    trait TimestampsTrait {
        private function normalizeTimestamps(\DateTimeInterface $createdAt = null, \DateTimeInterface $updatedAt = null) : array {}
    }

}

namespace Pimcore\Targeting\Storage\Cookie {
    /**
     * NOTE: using this save handler is inherently insecure and can open vulnerabilities by injecting malicious data into the
     * client cookie. Use only for testing!
     */
    class JsonCookieSaveHandler extends \pimcore\targeting\storage\cookie\abstractcookiesavehandler {
        protected function parseData(string $scope, string $name, $data) : array {}
        protected function prepareData(string $scope, string $name, $expire, $data) {}
    }

    class JWTCookieSaveHandler extends \pimcore\targeting\storage\cookie\abstractcookiesavehandler {
        const CLAIM_TARGETING_DATA = 'ptg';

        /**
         * @var string
         */
        private $secret;
        /**
         * @var Signer
         */
        private $signer;
        /**
         * @var LoggerInterface
         */
        private $logger;

        public function __construct(string $secret, array $options = [ ], Signer $signer = null, LoggerInterface $logger = null) {}
        protected function parseData(string $scope, string $name, $data) : array {}
        protected function prepareData(string $scope, string $name, $expire, $data) {}
        protected function createTokenBuilder(string $scope, string $name, $expire, $data) : Builder {}
    }

    abstract class AbstractCookieSaveHandler implements \pimcore\targeting\storage\cookie\cookiesavehandlerinterface {
        /**
         * @var array
         */
        protected $options;

        public function __construct(array $options = [ ]) {}
        protected function configureOptions(OptionsResolver $resolver) {}
        public function load(Request $request, string $scope, string $name) : array {}
        public function save(Response $response, string $scope, string $name, $expire, $data) {}
        abstract protected function parseData(string $scope, string $name, $data) : array ;
        abstract protected function prepareData(string $scope, string $name, $expire, $data) ;
    }


    interface CookieSaveHandlerInterface {
        function load(Request $request, string $scope, string $name) : array ;
        function save(Response $response, string $scope, string $name, $expire, $data) ;
    }

}

namespace Pimcore\Targeting\Storage\Cookie\JWT {
    /**
     * Extends core decoder and decodes to array instead of object.
     */
    class Decoder extends \lcobucci\jwt\parsing\decoder {
        public function jsonDecode($json) {}
    }

}

namespace Pimcore\Targeting\DataProvider {
    /**
     * Loads geolocation from GeoIP (IP to geo database).
     */
    class GeoIp implements \pimcore\targeting\dataprovider\dataproviderinterface {
        const PROVIDER_KEY = 'geoip';

        /**
         * @var ProviderInterface
         */
        private $geoIpProvider;
        /**
         * @var LoggerInterface
         */
        private $logger;
        /**
         * @var CoreHandlerInterface
         */
        private $cache;

        public function __construct(ProviderInterface $geoIpProvider, LoggerInterface $logger) {}
        public function setCache(CoreHandlerInterface $cache) {}
        public function load(VisitorInfo $visitorInfo) {}
        public function loadData(VisitorInfo $visitorInfo) {}
        private function handleOverrides(Request $request, array $result = null) {}
        private function isPublicIp(string $ip) : bool {}
        private function resolveIp(string $ip) {}
        private function doResolveIp(string $ip) {}
        protected function extractData(City $city) : array {}
    }

    class TargetingStorage implements \pimcore\targeting\dataprovider\dataproviderinterface {
        const PROVIDER_KEY = 'targeting_storage';

        /**
         * @var TargetingStorageInterface
         */
        private $storage;

        public function __construct(TargetingStorageInterface $storage) {}
        public function load(VisitorInfo $visitorInfo) {}
    }

    /**
     * Loads geolocation (only coordinates and optional altitude) from either
     * browser geolocation delivered as cookie or from geoip lookup as fallback.
     */
    class GeoLocation implements \pimcore\targeting\dataprovider\dataproviderinterface {
        const PROVIDER_KEY = 'geolocation';
        const COOKIE_NAME_GEOLOCATION = '_pc_tgl';

        /**
         * @var GeoIp
         */
        private $geoIpDataProvider;
        /**
         * @var LoggerInterface
         */
        private $logger;

        public function __construct(GeoIp $geoIpProvider, LoggerInterface $logger) {}
        public function load(VisitorInfo $visitorInfo) {}
        private function handleOverrides(Request $request, GeoLocationModel $location = null) {}
        private function loadLocation(VisitorInfo $visitorInfo) {}
        private function loadGeolocationData(VisitorInfo $visitorInfo) {}
        private function loadGeoIpData(VisitorInfo $visitorInfo) {}
    }

    class Device implements \pimcore\targeting\dataprovider\dataproviderinterface {
        const PROVIDER_KEY = 'device';

        /**
         * @var LoggerInterface
         */
        private $logger;
        /**
         * The cache handler caching detected results
         *
         * @var CoreHandlerInterface
         */
        private $cache;
        /**
         * The cache pool which is passed to the DeviceDetector
         *
         * @var PimcoreCacheItemPoolInterface
         */
        private $cachePool;

        public function __construct(LoggerInterface $logger) {}
        public function setCache(CoreHandlerInterface $cache) {}
        public function setCachePool(PimcoreCacheItemPoolInterface $cachePool) {}
        public function load(VisitorInfo $visitorInfo) {}
        private function handleOverrides(Request $request, array $result = null) {}
        private function loadData(string $userAgent) {}
        private function doLoadData(string $userAgent) {}
        protected function extractData(DeviceDetector $dd) : array {}
    }

    class VisitedPagesCounter implements \pimcore\targeting\dataprovider\dataproviderinterface {
        const PROVIDER_KEY = 'visited_pages_counter';

        /**
         * @var VisitedPagesCounterService
         */
        private $service;

        public function __construct(VisitedPagesCounterService $service) {}
        public function load(VisitorInfo $visitorInfo) {}
    }

    class Piwik implements \pimcore\targeting\dataprovider\dataproviderinterface {
    use \pimcore\debug\traits\stopwatchtrait;

        const PROVIDER_KEY = 'piwik';

        /**
         * @var Config
         */
        private $config;
        /**
         * @var SiteIdProvider
         */
        private $siteIdProvider;
        /**
         * @var VisitorClient
         */
        private $visitorClient;
        /**
         * @var LoggerInterface
         */
        private $logger;

        public function __construct(Config $config, SiteIdProvider $siteIdProvider, VisitorClient $visitorClient, LoggerInterface $logger) {}
        public function load(VisitorInfo $visitorInfo) {}
        private function loadData(VisitorInfo $visitorInfo) {}
    }


    interface DataProviderInterface {
        function load(VisitorInfo $visitorInfo) ;
    }

}

namespace Pimcore\Targeting\Condition {
    class HardwarePlatform extends \pimcore\targeting\condition\abstractvariablecondition implements \pimcore\targeting\dataproviderdependentinterface {
        /**
         * @var null|string
         */
        private $platform;
        /**
         * Mapping from admin UI values to DeviceDetector results. If value
         * is an array, in_array is used to determine match.
         *
         * @var array
         */
        static protected $deviceMapping;

        public function __construct(string $platform = null) {}
        public static function fromConfig(array $config) {}
        /**
         * @inheritDoc
         */
        public function getDataProviderKeys() : array {}
        /**
         * @inheritDoc
         */
        public function canMatch() : bool {}
        public function match(VisitorInfo $visitorInfo) : bool {}
        private function matchesPlatform(string $platform = null) : bool {}
    }

    class OperatingSystem extends \pimcore\targeting\condition\abstractvariablecondition implements \pimcore\targeting\dataproviderdependentinterface {
        /**
         * @var null|string
         */
        private $system;
        /**
         * Mapping from admin UI values to DeviceDetector results
         *
         * @var array
         */
        static protected $osMapping;

        public function __construct(string $system = null) {}
        public static function fromConfig(array $config) {}
        /**
         * @inheritDoc
         */
        public function getDataProviderKeys() : array {}
        /**
         * @inheritDoc
         */
        public function canMatch() : bool {}
        public function match(VisitorInfo $visitorInfo) : bool {}
        private function matchesOperatingSystem(string $os = null) : bool {}
    }

    class TimeOnSite implements \pimcore\targeting\condition\conditioninterface, \pimcore\targeting\dataproviderdependentinterface {
        /**
         * @var int
         */
        private $seconds;

        public function __construct(int $seconds) {}
        public static function fromConfig(array $config) {}
        /**
         * @inheritDoc
         */
        public function getDataProviderKeys() : array {}
        /**
         * @inheritDoc
         */
        public function canMatch() : bool {}
/** @var TargetingStorageInterface $storage */
        public function match(/** @var TargetingStorageInterface $storage */
VisitorInfo $visitorInfo) : bool {}
    }

    abstract class AbstractVariableCondition implements \pimcore\targeting\condition\conditioninterface, \pimcore\targeting\condition\variableconditioninterface {
        /**
         * @var array
         */
        private $variables;

        /**
         * @inheritdoc
         */
        public function getMatchedVariables() : array {}
        protected function setMatchedVariables(array $variables) {}
        protected function setMatchedVariable(string $key, $value) {}
    }

    class SearchEngine extends \pimcore\targeting\condition\abstractvariablecondition implements \pimcore\targeting\condition\conditioninterface {
        /**
         * @var string|null
         */
        private $engine;
        /**
         * @var array
         */
        private $validEngines;

        public function __construct(string $engine = null) {}
        public static function fromConfig(array $config) {}
        /**
         * @inheritDoc
         */
        public function canMatch() : bool {}
        public function match(VisitorInfo $visitorInfo) : bool {}
    }

    class Country extends \pimcore\targeting\condition\abstractvariablecondition implements \pimcore\targeting\dataproviderdependentinterface {
        /**
         * @var string
         */
        private $country;

        public function __construct(string $country = null) {}
        public static function fromConfig(array $config) {}
        /**
         * @inheritDoc
         */
        public function getDataProviderKeys() : array {}
        /**
         * @inheritDoc
         */
        public function canMatch() : bool {}
        public function match(VisitorInfo $visitorInfo) : bool {}
    }

    class Url extends \pimcore\targeting\condition\abstractvariablecondition implements \pimcore\targeting\condition\conditioninterface {
        /**
         * @var string|null
         */
        private $pattern;

        public function __construct(string $pattern = null) {}
        public static function fromConfig(array $config) {}
        /**
         * @inheritDoc
         */
        public function canMatch() : bool {}
        public function match(VisitorInfo $visitorInfo) : bool {}
    }

    class TargetGroup extends \pimcore\targeting\condition\abstractvariablecondition implements \pimcore\targeting\condition\conditioninterface {
        /**
         * @var int|null
         */
        private $targetGroupId;

        public function __construct(int $targetGroupId = null) {}
        public static function fromConfig(array $config) {}
        /**
         * @inheritDoc
         */
        public function canMatch() : bool {}
        public function match(VisitorInfo $visitorInfo) : bool {}
    }

    class Language extends \pimcore\targeting\condition\abstractvariablecondition implements \pimcore\targeting\condition\conditioninterface {
        /**
         * @var string|null
         */
        private $language;

        public function __construct(string $language = null) {}
        public static function fromConfig(array $config) {}
        /**
         * @inheritDoc
         */
        public function canMatch() : bool {}
        public function match(VisitorInfo $visitorInfo) : bool {}
        protected function loadLanguage(Request $request) {}
    }

    class VisitedPagesBefore extends \pimcore\targeting\condition\abstractvariablecondition implements \pimcore\targeting\dataproviderdependentinterface, \pimcore\targeting\condition\eventdispatchingconditioninterface {
        /**
         * @var int
         */
        private $count;

        public function __construct(int $count) {}
        public static function fromConfig(array $config) {}
        /**
         * @inheritDoc
         */
        public function getDataProviderKeys() : array {}
        /**
         * @inheritDoc
         */
        public function canMatch() : bool {}
/** @var VisitedPagesCounterService $counter */
        public function match(/** @var VisitedPagesCounterService $counter */
VisitorInfo $visitorInfo) : bool {}
        public function postMatch(VisitorInfo $visitorInfo, EventDispatcherInterface $eventDispatcher) {}
        public function preMatch(VisitorInfo $visitorInfo, EventDispatcherInterface $eventDispatcher) {}
    }

    class Browser extends \pimcore\targeting\condition\abstractvariablecondition implements \pimcore\targeting\dataproviderdependentinterface {
        /**
         * @var null|string
         */
        private $browser;

        public function __construct(string $browser = null) {}
        public static function fromConfig(array $config) {}
        /**
         * @inheritDoc
         */
        public function getDataProviderKeys() : array {}
        /**
         * @inheritDoc
         */
        public function canMatch() : bool {}
        public function match(VisitorInfo $visitorInfo) : bool {}
    }

    class GeoPoint extends \pimcore\targeting\condition\abstractvariablecondition implements \pimcore\targeting\dataproviderdependentinterface {
        /**
         * @var float
         */
        private $latitude;
        /**
         * @var float
         */
        private $longitude;
        /**
         * @var int
         */
        private $radius;

        public function __construct(float $latitude = null, float $longitude = null, int $radius = null) {}
        public static function fromConfig(array $config) {}
        /**
         * @inheritDoc
         */
        public function getDataProviderKeys() : array {}
        /**
         * @inheritDoc
         */
        public function canMatch() : bool {}
/** @var GeoLocationModel $location */
        public function match(/** @var GeoLocationModel $location */
VisitorInfo $visitorInfo) : bool {}
        private function calculateDistance(float $latA, float $longA, float $latB, float $longB) : float {}
    }

    class ReferringSite extends \pimcore\targeting\condition\abstractvariablecondition implements \pimcore\targeting\condition\conditioninterface {
        /**
         * @var string|null
         */
        private $pattern;

        public function __construct(string $pattern = null) {}
        public static function fromConfig(array $config) {}
        /**
         * @inheritDoc
         */
        public function canMatch() : bool {}
        public function match(VisitorInfo $visitorInfo) : bool {}
    }


    interface VariableConditionInterface {
        /**
         * Returns variables which are evaluated in the "Session with Variables"
         * rule scope. This is expected to return the variables which were fetched
         * in the last evaluation run. Each condition is a dedicated instance and
         * can return the variables which were resolved during matching.
         *
         * It's important to store/return these variables in a deterministic way (e.g. same
         * array key order) as the hash of their serialized contents is compared against
         * a stored hash to determine if the rule actions need to be evaluated.
         *
         * @return array
         */
        function getMatchedVariables() : array ;
    }

    interface ConditionInterface {
        static function fromConfig(array $config) ;
        /**
         * Determines if the condition is able to match. E.g. if a country condition
         * does not define a value (= all countries), it does not need to query the
         * data provider for the country name as it would match everything. Returning
         * false here will set the match result implicitely to false.
         *
         * @return bool
         */
        function canMatch() : bool ;
        function match(VisitorInfo $visitorInfo) : bool ;
    }

    interface EventDispatchingConditionInterface {
        function preMatch(VisitorInfo $visitorInfo, EventDispatcherInterface $eventDispatcher) ;
        function postMatch(VisitorInfo $visitorInfo, EventDispatcherInterface $eventDispatcher) ;
    }

}

namespace Pimcore\Targeting\Condition\Piwik {
    class VisitedPageBefore implements \pimcore\targeting\condition\conditioninterface, \pimcore\targeting\dataproviderdependentinterface {
        /**
         * @var string|null
         */
        private $pattern;

        public function __construct(string $pattern = null) {}
        public static function fromConfig(array $config) {}
        /**
         * @inheritDoc
         */
        public function getDataProviderKeys() : array {}
        /**
         * @inheritDoc
         */
        public function canMatch() : bool {}
        public function match(VisitorInfo $visitorInfo) : bool {}
    }

}

namespace Pimcore\Targeting\Model {
    class TargetGroupAssignment {
        /**
         * @var TargetGroup
         */
        private $targetGroup;
        /**
         * @var int
         */
        private $count;

        public function __construct(TargetGroup $targetGroup, int $count = 1) {}
        public function getTargetGroup() : TargetGroup {}
        public function getCount() : int {}
        public function setCount(int $count) {}
        public function inc(int $amount = 1) {}
    }

    class GeoLocation {
        /**
         * @var float
         */
        private $latitude;
        /**
         * @var float
         */
        private $longitude;
        /**
         * @var float|null
         */
        private $altitude;

        public function __construct(float $latitude, float $longitude, float $altitude = null) {}
        public static function build($latitude, $longitude, $altitude = null) : self {}
        /**
         * @return float
         */
        public function getLatitude() : float {}
        /**
         * @return float
         */
        public function getLongitude() : float {}
        /**
         * @return float|null
         */
        public function getAltitude() {}
    }

    class VisitorInfo implements \iteratoraggregate {
        const VISITOR_ID_COOKIE_NAME = '_pc_vis';
        const SESSION_ID_COOKIE_NAME = '_pc_ses';
        const ACTION_SCOPE_RESPONSE = 'response';

        /**
         * @var Request
         */
        private $request;
        /**
         * @var string|null
         */
        private $visitorId;
        /**
         * @var string|null
         */
        private $sessionId;
        /**
         * Matched targeting rules
         *
         * @var Rule[]
         */
        private $matchingTargetingRules;
        /**
         * Assigned target groups with count
         *
         * @var TargetGroupAssignment[]
         */
        private $targetGroupAssignments;
        /**
         * Target group assignments sorted by count
         *
         * @var TargetGroupAssignment[]
         */
        private $sortedTargetGroupAssignments;
        /**
         * Plain list of assigned target groups
         *
         * @var TargetGroup[]
         */
        private $targetGroups;
        /**
         * @var array
         */
        private $data;
        /**
         * @var array
         */
        private $actions;
        /**
         * List of frontend data providers which are expected to provide data
         *
         * @var array
         */
        private $frontendDataProviders;
        /**
         * @var Response
         */
        private $response;

        public function __construct(Request $request, string $visitorId = null, string $sessionId = null) {}
        public static function fromRequest(Request $request) : self {}
        public function getRequest() : Request {}
        public function hasVisitorId() : bool {}
        /**
         * @return string|null
         */
        public function getVisitorId() {}
        public function hasSessionId() : bool {}
        /**
         * @return string|null
         */
        public function getSessionId() {}
        /**
         * @return Rule[]
         */
        public function getMatchingTargetingRules() : array {}
        public function setMatchingTargetingRules(array $targetingRules = [ ]) {}
        public function addMatchingTargetingRule(Rule $targetingRule) {}
        /**
         * Returns target group assignments ordered by assignment count
         *
         * @return TargetGroupAssignment[]
         */
        public function getTargetGroupAssignments() : array {}
        public function hasTargetGroupAssignment(TargetGroup $targetGroup) : bool {}
        public function getTargetGroupAssignment(TargetGroup $targetGroup) : TargetGroupAssignment {}
        public function assignTargetGroup(TargetGroup $targetGroup, int $count = 1, bool $overwrite = false) {}
        public function clearAssignedTargetGroup(TargetGroup $targetGroup) {}
        /**
         * Returns assigned target groups ordered by assignment count
         *
         * @return TargetGroup[]
         */
        public function getAssignedTargetGroups() : array {}
        public function getFrontendDataProviders() : array {}
        public function setFrontendDataProviders(array $providers) {}
        public function addFrontendDataProvider(string $key) {}
        public function hasResponse() : bool {}
        /**
         * @return Response|null
         */
        public function getResponse() {}
        public function setResponse(Response $response) {}
        public function getData() : array {}
        public function setData(array $data) {}
        public function getIterator() {}
        public function has($key) : bool {}
        public function get($key, $default = null) {}
        public function set($key, $value) {}
        public function addAction(array $action) {}
        public function getActions() : array {}
        public function hasActions() : bool {}
    }

}

namespace Pimcore\Targeting\ActionHandler {
    class DelegatingActionHandler implements \pimcore\targeting\actionhandler\actionhandlerinterface {
        /**
         * @var ContainerInterface
         */
        private $actionHandlers;
        /**
         * @var DataLoaderInterface
         */
        private $dataLoader;

        public function __construct(ContainerInterface $actionHandlers, DataLoaderInterface $dataLoader) {}
/** @var string $type */
        public function apply(/** @var string $type */
VisitorInfo $visitorInfo, /** @var string $type */
array $action, /** @var string $type */
Rule $rule = null) {}
        public function hasActionHandler(string $type) : bool {}
        public function getActionHandler(string $type) : ActionHandlerInterface {}
    }

    class AssignTargetGroup implements \pimcore\targeting\actionhandler\actionhandlerinterface {
        const STORAGE_KEY = 'tg';

        /**
         * @var ConditionMatcherInterface
         */
        private $conditionMatcher;
        /**
         * @var TargetingStorageInterface
         */
        private $storage;

        public function __construct(ConditionMatcherInterface $conditionMatcher, TargetingStorageInterface $storage) {}
        public function apply(VisitorInfo $visitorInfo, array $action, Rule $rule = null) {}
        public function reset(VisitorInfo $visitorInfo) {}
        public function loadStoredAssignments(VisitorInfo $visitorInfo) {}
        protected function storeAssignments(VisitorInfo $visitorInfo, TargetGroup $targetGroup, int $weight) : int {}
        protected function deleteAssignments(VisitorInfo $visitorInfo) : bool {}
        protected function assignToVisitor(VisitorInfo $visitorInfo, TargetGroup $targetGroup, int $count) {}
    }

    class CodeSnippet implements \pimcore\targeting\actionhandler\actionhandlerinterface, \pimcore\targeting\actionhandler\responsetransformingactionhandlerinterface {
        /**
         * @var CodeInjector
         */
        private $codeInjector;

        public function __construct(CodeInjector $codeInjector) {}
        public function apply(VisitorInfo $visitorInfo, array $action, Rule $rule = null) {}
        public function transformResponse(VisitorInfo $visitorInfo, Response $response, array $actions) {}
    }

    class Redirect implements \pimcore\targeting\actionhandler\actionhandlerinterface {
        public function apply(VisitorInfo $visitorInfo, array $action, Rule $rule = null) {}
        private function addUrlParam(string $url, string $param, $value) : string {}
    }


    interface ResponseTransformingActionHandlerInterface {
        function transformResponse(VisitorInfo $visitorInfo, Response $response, array $actions) ;
    }

    interface ActionHandlerInterface {
        function apply(VisitorInfo $visitorInfo, array $action, Rule $rule = null) ;
    }

}

namespace Pimcore\Targeting\Maintenance {
    class TargetingStorageTask implements \pimcore\maintenance\taskinterface {
        /**
         * @var TargetingStorageInterface
         */
        private $targetingStorage;

        public function __construct(TargetingStorageInterface $targetingStorage) {}
        public function execute() {}
    }

}

namespace Pimcore\Targeting\Service {
    /**
     * Makes sure a page visit is counted only once per request.
     */
    class VisitedPagesCounter {
        const STORAGE_KEY = 'pgc';

        /**
         * @var TargetingStorageInterface
         */
        private $targetingStorage;
        /**
         * @var bool
         */
        private $incremented;

        public function __construct(TargetingStorageInterface $targetingStorage) {}
        public function getCount(VisitorInfo $visitorInfo, string $scope = TargetingStorageInterface::SCOPE_VISITOR) : int {}
        public function increment(VisitorInfo $visitorInfo, string $scope = TargetingStorageInterface::SCOPE_VISITOR, bool $force = false) {}
    }

}

namespace Pimcore\Targeting\ConditionMatcher {
    class ExpressionBuilder {
        /**
         * @var array
         */
        private $parts;
        /**
         * @var array
         */
        private $values;
        /**
         * @var int
         */
        private $valueIndex;

        public function getExpression() : string {}
        public function getValues() : array {}
        public function addCondition(array $config, bool $result) {}
        private function normalizeOperator(string $operator = null) : string {}
    }

}

namespace Pimcore\Targeting\Debug {
    class OverrideHandler {
        /**
         * @var FormFactoryInterface
         */
        private $formFactory;
        /**
         * @var iterable|OverrideHandlerInterface[]
         */
        private $overrideHandlers;

        public function __construct(FormFactoryInterface $formFactory, $overrideHandlers) {}
/** @var FormInterface $form */
        public function getForm(/** @var FormInterface $form */
Request $request) : FormInterface {}
        protected function buildForm(Request $request) : FormInterface {}
        public function handleRequest(Request $request) {}
        public function handleForm(FormInterface $form, Request $request) {}
    }

    class TargetingDataCollector {
    use \pimcore\debug\traits\stopwatchtrait;

        /**
         * @var TargetingStorageInterface
         */
        private $targetingStorage;
        /**
         * @var DocumentTargetingConfigurator
         */
        private $targetingConfigurator;
        /**
         * @var Stopwatch|null
         */
        private $stopwatch;
        /**
         * @var array
         */
        private $filteredVisitorInfoDataObjecKeys;

        public function __construct(TargetingStorageInterface $targetingStorage, DocumentTargetingConfigurator $targetingConfigurator) {}
        public function collectVisitorInfo(VisitorInfo $visitorInfo) : array {}
        public function getFilteredVisitorInfoDataObjecKeys() : array {}
        public function setFilteredVisitorInfoDataObjecKeys(array $filteredVisitorInfoDataObjecKeys) {}
        protected function filterVisitorInfoData(array $data) : array {}
        public function collectStorage(VisitorInfo $visitorInfo) : array {}
        public function collectMatchedRules(VisitorInfo $visitorInfo) : array {}
        public function collectTargetGroups(VisitorInfo $visitorInfo) : array {}
        public function collectDocumentTargetGroup(Document $document = null) {}
        /** @var TargetGroup $targetGroup */
        public function collectDocumentTargetGroupMapping() : array {}
    }

}

namespace Pimcore\Targeting\Debug\Form {
    class DeviceType extends \symfony\component\form\abstracttype {
        public function buildForm(FormBuilderInterface $builder, array $options) {}
    }

    class LocationType extends \symfony\component\form\abstracttype {
        public function buildForm(FormBuilderInterface $builder, array $options) {}
    }

}

namespace Pimcore\Targeting\Debug\Util {
    class OverrideAttributeResolver {
        public static function setOverrideValue(Request $request, string $key, $value) {}
        public static function getOverrideValue(Request $request, string $key, $default = null) {}
    }

}

namespace Pimcore\Targeting\Debug\Override {
    class LocationOverrideHandler implements \pimcore\targeting\overridehandlerinterface {
        public function buildOverrideForm(FormBuilderInterface $form, Request $request) {}
        public function overrideFromRequest(array $overrides, Request $request) {}
    }

    class DocumentTargetingOverrideHandler implements \pimcore\targeting\overridehandlerinterface {
        /**
         * @var DocumentTargetingConfigurator
         */
        private $documentTargetingConfigurator;

        public function __construct(DocumentTargetingConfigurator $documentTargetingConfigurator) {}
        public function buildOverrideForm(FormBuilderInterface $form, Request $request) {}
        public function overrideFromRequest(array $overrides, Request $request) {}
    }

    class LanguageOverrideHandler implements \pimcore\targeting\overridehandlerinterface {
        public function buildOverrideForm(FormBuilderInterface $form, Request $request) {}
        public function overrideFromRequest(array $overrides, Request $request) {}
    }

    class DeviceOverrideHandler implements \pimcore\targeting\overridehandlerinterface {
        public function buildOverrideForm(FormBuilderInterface $form, Request $request) {}
        public function overrideFromRequest(array $overrides, Request $request) {}
    }

}

namespace Pimcore\Targeting\EventListener {
    class PiwikVisitorIdListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @var TargetingListener
         */
        private $targetingListener;

        public function __construct(TargetingListener $targetingListener) {}
        public static function getSubscribedEvents() : array {}
        public function onPiwikTrackingData(TrackingDataEvent $event) {}
    }

    class VisitedPagesCountListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @var VisitedPagesCounter
         */
        private $visitedPagesCounter;
        /**
         * @var bool
         */
        private $recordPageCount;

        public function __construct(VisitedPagesCounter $visitedPagesCounter) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onVisitedPagesCountMatch() {}
        public function onPostResolveVisitorInfo(TargetingEvent $event) {}
    }

    class ToolbarListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        /**
         * @var VisitorInfoStorageInterface
         */
        private $visitorInfoStorage;
        /**
         * @var DocumentResolver
         */
        private $documentResolver;
        /**
         * @var TargetingDataCollector
         */
        private $targetingDataCollector;
        /**
         * @var OverrideHandler
         */
        private $overrideHandler;
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;
        /**
         * @var EngineInterface
         */
        private $templatingEngine;
        /**
         * @var CodeInjector
         */
        private $codeInjector;

        public function __construct(VisitorInfoStorageInterface $visitorInfoStorage, DocumentResolver $documentResolver, TargetingDataCollector $targetingDataCollector, OverrideHandler $overrideHandler, EventDispatcherInterface $eventDispatcher, EngineInterface $templatingEngine, CodeInjector $codeInjector) {}
        public static function getSubscribedEvents() {}
        public function onPreResolve(TargetingEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
        private function requestCanDebug(Request $request) : bool {}
        private function collectTemplateData(VisitorInfo $visitorInfo, Document $document = null) {}
        private function injectToolbar(Response $response, array $data) {}
    }

    /**
     * Handles target groups configured on the document settings panel. If a document
     * has configured target groups, the assign_target_group will be manually called
     * for that target group before starting to match other conditions.
     */
    class DocumentTargetGroupListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @var DocumentResolver
         */
        private $documentResolver;
        /**
         * @var ActionHandlerInterface|DelegatingActionHandler
         */
        private $actionHandler;
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;

        public function __construct(DocumentResolver $documentResolver, ActionHandlerInterface $actionHandler, EventDispatcherInterface $eventDispatcher) {}
        public static function getSubscribedEvents() {}
        public function onVisitorInfoResolve(TargetingEvent $event) {}
        private function assignDocumentTargetGroups(Document $document, VisitorInfo $visitorInfo) {}
    }

    class TargetingListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\enabledtrait, \pimcore\bundle\corebundle\eventlistener\traits\responseinjectiontrait, \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait, \pimcore\debug\traits\stopwatchtrait;

        /**
         * @var VisitorInfoResolver
         */
        private $visitorInfoResolver;
        /**
         * @var DelegatingActionHandler|ActionHandlerInterface
         */
        private $actionHandler;
        /**
         * @var VisitorInfoStorageInterface
         */
        private $visitorInfoStorage;
        /**
         * @var RequestHelper
         */
        private $requestHelper;
        /**
         * @var TargetingCodeGenerator
         */
        private $codeGenerator;

        public function __construct(VisitorInfoResolver $visitorInfoResolver, ActionHandlerInterface $actionHandler, VisitorInfoStorageInterface $visitorInfoStorage, RequestHelper $requestHelper, TargetingCodeGenerator $codeGenerator) {}
        public static function getSubscribedEvents() {}
        public function onKernelRequest(GetResponseEvent $event) {}
/** @var AssignTargetGroup $assignTargetGroupHandler */
        public function onPreResolve(/** @var AssignTargetGroup $assignTargetGroupHandler */
TargetingEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
        private function injectTargetingCode(Response $response, VisitorInfo $visitorInfo) {}
        private function handleResponseActions(VisitorInfo $visitorInfo, Response $response) {}
        private function getResponseActions(VisitorInfo $visitorInfo) : array {}
        private function appliesPersonalization(VisitorInfo $visitorInfo) : bool {}
    }

    /**
     * Removes cookie storage cookies from cached response (only from the response object, not
     * from the client's browser).
     */
    class FullPageCacheCookieCleanupListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        public static function getSubscribedEvents() {}
/** @var Cookie $cookie */
        public function onPrepareFullPageCacheResponse(/** @var Cookie $cookie */
PrepareResponseEvent $event) {}
    }

}

namespace Pimcore\Targeting\Session {
    class SessionConfigurator implements \pimcore\session\sessionconfiguratorinterface, \symfony\component\eventdispatcher\eventsubscriberinterface {
        const TARGETING_BAG_VISITOR = 'pimcore_targeting_visitor';
        const TARGETING_BAG_SESSION = 'pimcore_targeting_session';

        public static function getSubscribedEvents() {}
        public function configure(SessionInterface $session) {}
        public function configureIgnoredSessionKeys(IgnoredSessionKeysEvent $event) {}
/** @var Cookie $cookie */
        public function prepareFullPageCacheResponse(/** @var Cookie $cookie */
PrepareResponseEvent $event) {}
    }

}

namespace Pimcore\Mail\Plugins {
    class RedirectingPlugin extends \swift_plugins_redirectingplugin {
        public function __construct($recipient, array $whitelist = [ ]) {}
        public function beforeSendPerformed(\Swift_Events_SendEvent $evt) {}
        public function sendPerformed(\Swift_Events_SendEvent $evt) {}
        protected function appendDebugInformation(Mail $message) {}
        protected function setSenderAndReceiversParams($message) {}
        protected function removeDebugInformation(Mail $message) {}
    }

}

namespace Pimcore\Google {
    class Webmastertools {
        /**
         * @var array
         */
        static public $stack;

        public static function isConfigured(Site $site = null) {}
        public static function getSiteConfig($site = null) {}
    }

    class Api {
        const ANALYTICS_API_URL = 'https://www.googleapis.com/analytics/v3/';

        /**
         * @return string
         */
        public static function getPrivateKeyPath() {}
        /**
         * @return mixed
         */
        public static function getConfig() {}
        public static function isConfigured($type = 'service') {}
        /**
         * @return bool
         */
        public static function isServiceConfigured() {}
        /**
         * @return bool
         */
        public static function isSimpleConfigured() {}
        public static function getClient($type = 'service') {}
        public static function getServiceClient($scope = null) {}
        /**
         * @return \Google_Client
         */
        public static function getSimpleClient() {}
        /**
         * @return array
         */
        public static function getAnalyticsDimensions() {}
        /**
         * @return array
         */
        public static function getAnalyticsMetrics() {}
        /**
         * @return mixed
         *
         * @throws \Exception
         * @throws \Exception
         */
        public static function getAnalyticsMetadata() {}
        protected static function getAnalyticsMetadataByType($type) {}
    }

    class Cse implements \zend\paginator\adapteraggregateinterface, \iterator, \zend\paginator\adapter\adapterinterface {
        /**
         * @var Item[]
         */
        public $results;
        /**
         * @var int
         */
        public $total;
        /**
         * @var int
         */
        public $offset;
        /**
         * @var int
         */
        public $perPage;
        /**
         * @var array
         */
        public $config;
        /**
         * @var string
         */
        public $query;
        /**
         * @var array
         */
        public $raw;
        /**
         * @var array
         */
        public $facets;

        public static function search($query, $offset = 0, $perPage = 10, array $config = [ ], $facet = null) {}
        public function load() {}
        public function __construct($googleResponse = null) {}
        public function readGoogleResponse(\Google_Service_Customsearch_Search $googleResponse) {}
        public function setOffset($offset) {}
        /**
         * @return int
         */
        public function getOffset() {}
        public function setRaw($raw) {}
        /**
         * @return array
         */
        public function getRaw() {}
        public function setTotal($total) {}
        /**
         * @return int
         */
        public function getTotal() {}
        public function setPerPage($perPage) {}
        /**
         * @return int
         */
        public function getPerPage() {}
        public function setConfig($config) {}
        /**
         * @return array
         */
        public function getConfig() {}
        public function setQuery($query) {}
        /**
         * @return string
         */
        public function getQuery() {}
        public function setResults($results) {}
        public function getResults($retry = true) {}
        public function setFacets($facets) {}
        /**
         * @return array
         */
        public function getFacets() {}
        /**
         * @return int
         */
        public function count() {}
        public function getItems($offset, $itemCountPerPage) {}
        /**
         * @return self
         */
        public function getPaginatorAdapter() {}
        /**
         * Methods for Iterator
         */
        public function rewind() {}
        /**
         * @return mixed
         */
        public function current() {}
        /**
         * @return mixed
         */
        public function key() {}
        /**
         * @return mixed
         */
        public function next() {}
        /**
         * @return bool
         */
        public function valid() {}
    }

}

namespace Pimcore\Google\Cse {
    class Item {
        /**
         * @var \Google_Service_Customsearch_Result
         */
        public $raw;
        /**
         * @var string
         */
        public $title;
        /**
         * @var string
         */
        public $htmlTitle;
        /**
         * @var string
         */
        public $link;
        /**
         * @var string
         */
        public $displayLink;
        /**
         * @var string
         */
        public $snippet;
        /**
         * @var string
         */
        public $htmlSnippet;
        /**
         * @var string
         */
        public $formattedUrl;
        /**
         * @var string
         */
        public $htmlFormattedUrl;
        /**
         * @var Model\Asset\Image|string|null
         */
        public $image;
        /**
         * @var Model\Document|null
         */
        public $document;
        /**
         * @var string
         */
        public $type;

        public function __construct(\Google_Service_Customsearch_Result $data) {}
        public function setValues(\Google_Service_Customsearch_Result $data) {}
        public function setValue($key, $value) {}
        public function setDisplayLink($displayLink) {}
        /**
         * @return string
         */
        public function getDisplayLink() {}
        public function setDocument($document) {}
        /**
         * @return Model\Document|null
         */
        public function getDocument() {}
        public function setFormattedUrl($formattedUrl) {}
        /**
         * @return string
         */
        public function getFormattedUrl() {}
        public function setHtmlFormattedUrl($htmlFormattedUrl) {}
        /**
         * @return string
         */
        public function getHtmlFormattedUrl() {}
        public function setHtmlSnippet($htmlSnippet) {}
        /**
         * @return string
         */
        public function getHtmlSnippet() {}
        public function setHtmlTitle($htmlTitle) {}
        /**
         * @return string
         */
        public function getHtmlTitle() {}
        public function setImage($image) {}
        /**
         * @return Model\Asset\Image|string|null
         */
        public function getImage() {}
        public function setLink($link) {}
        /**
         * @return string
         */
        public function getLink() {}
        public function setRaw(\Google_Service_Customsearch_Result $raw) {}
        /**
         * @return \Google_Service_Customsearch_Result
         */
        public function getRaw() {}
        public function setSnippet($snippet) {}
        /**
         * @return string
         */
        public function getSnippet() {}
        public function setTitle($title) {}
        /**
         * @return string
         */
        public function getTitle() {}
        public function setType($type) {}
        /**
         * @return string
         */
        public function getType() {}
    }

}

namespace Pimcore\Composer {
    class PackageInfo {
        /**
         * @var array
         */
        private $installedPackages;

        public function getInstalledPackages($type = null) : array {}
        /**
         * @return array
         */
        private function readInstalledPackages() : array {}
        private function readComposerFile(string $path) {}
    }

}

namespace Pimcore\Navigation {
    class Container implements \countable, \recursiveiterator {
        /**
         * Contains sub pages
         *
         * @var Page[]
         */
        protected $_pages;
        /**
         * An index that contains the order in which to iterate pages
         *
         * @var array
         */
        protected $_index;
        /**
         * Whether index is dirty and needs to be re-arranged
         *
         * @var bool
         */
        protected $_dirtyIndex;

        /**
         * Sorts the page index according to page order
         *
         * @return void
         */
        protected function _sort() {}
        /**
         * Notifies container that the order of pages are updated
         *
         * @return void
         */
        public function notifyOrderUpdated() {}
        public function addPage($page) {}
        public function addPages($pages) {}
        public function setPages(array $pages) {}
        /**
         * Returns pages in the container
         *
         * @return Page[]
         */
        public function getPages() {}
/** @var Page $childPage */
        public function removePage(/** @var Page $childPage */
$page, /** @var Page $childPage */
$recursive = false) {}
        /**
         * Removes all pages in container
         *
         * @return Container  fluent interface, returns self
         */
        public function removePages() {}
        public function hasPage(Page $page, $recursive = false) {}
        /**
         * Returns true if container contains any pages
         *
         * @return bool  whether container has any pages
         */
        public function hasPages() {}
        /**
         * Returns true if container contains any visible page
         *
         * @return bool whether container has any visible page
         */
        public function hasVisiblePages() {}
        public function findOneBy($property, $value, $useRegex = false) {}
        public function findAllBy($property, $value, $useRegex = false) {}
        public function findBy($property, $value, $all = false, $useRegex = false) {}
        public function __call($method, $arguments) {}
        /**
         * Returns an array representation of all pages in container
         *
         * @return Page[]
         */
        public function toArray() {}
        /**
         * Returns current page
         *
         * Implements RecursiveIterator interface.
         *
         * @return Page       current page or null
         *
         * @throws \Exception  if the index is invalid
         */
        public function current() {}
        /**
         * Returns hash code of current page
         *
         * Implements RecursiveIterator interface.
         *
         * @return string  hash code of current page
         */
        public function key() {}
        /**
         * Moves index pointer to next page in the container
         *
         * Implements RecursiveIterator interface.
         *
         * @return void
         */
        public function next() {}
        /**
         * Sets index pointer to first page in the container
         *
         * Implements RecursiveIterator interface.
         *
         * @return void
         */
        public function rewind() {}
        /**
         * Checks if container index is valid
         *
         * Implements RecursiveIterator interface.
         *
         * @return bool
         */
        public function valid() {}
        /**
         * Proxy to hasPages()
         *
         * Implements RecursiveIterator interface.
         *
         * @return bool  whether container has any pages
         */
        public function hasChildren() {}
        /**
         * Returns the child container.
         *
         * Implements RecursiveIterator interface.
         *
         * @return Page|null
         */
        public function getChildren() {}
        /**
         * Returns number of pages in container
         *
         * Implements Countable interface.
         *
         * @return int  number of pages in the container
         */
        public function count() {}
    }

    class Builder {
        /**
         * @var RequestHelper
         */
        private $requestHelper;
        /**
         * @var string
         */
        protected $htmlMenuIdPrefix;
        /**
         * @var string
         */
        protected $pageClass;

        public function __construct(RequestHelper $requestHelper, string $pageClass = null) {}
/** @var Page|Page\Document $page */
        public function getNavigation(/** @var Page|Page\Document $page */
$activeDocument, /** @var Page|Page\Document $page */
$navigationRootDocument = null, /** @var Page|Page\Document $page */
$htmlMenuIdPrefix = null, /** @var Page|Page\Document $page */
$pageCallback = null, /** @var Page|Page\Document $page */
$cache = true) {}
        protected function addActiveCssClasses(Page $page, $isActive = false) {}
        public function setPageClass(string $pageClass) {}
        /**
         * Returns the name of the pageclass
         *
         * @return String
         */
        public function getPageClass() {}
        protected function getChildren(Document $parentDocument) : array {}
/** @var DocumentPage $page */
        protected function buildNextLevel(/** @var DocumentPage $page */
$parentDocument, /** @var DocumentPage $page */
$isRoot = false, /** @var DocumentPage $page */
$pageCallback = null, /** @var DocumentPage $page */
$parents = [ ]) {}
    }

    abstract class Page extends \pimcore\navigation\container {
        /**
         * Page label
         *
         * @var string|null
         */
        protected $_label;
        /**
         * Fragment identifier (anchor identifier)
         *
         * The fragment identifier (anchor identifier) pointing to an anchor within
         * a resource that is subordinate to another, primary resource.
         * The fragment identifier introduced by a hash mark "#".
         * Example: http://www.example.org/foo.html#bar ("bar" is the fragment identifier)
         *
         * @link http://www.w3.org/TR/html401/intro/intro.html#fragment-uri
         *
         * @var string|null
         */
        protected $_fragment;
        /**
         * Page id
         *
         * @var string|null
         */
        protected $_id;
        /**
         * Style class for this page (CSS)
         *
         * @var string|null
         */
        protected $_class;
        /**
         * A more descriptive title for this page
         *
         * @var string|null
         */
        protected $_title;
        /**
         * This page's target
         *
         * @var string|null
         */
        protected $_target;
        /**
         * Accessibility key character
         *
         * This attribute assigns an access key to an element. An access key is a
         * single character from the document character set.
         *
         * @link http://www.w3.org/TR/html401/interact/forms.html#access-keys
         *
         * @var string|null
         */
        protected $_accesskey;
        /**
         * Forward links to other pages
         *
         * @link http://www.w3.org/TR/html4/struct/links.html#h-12.3.1
         *
         * @var array
         */
        protected $_rel;
        /**
         * Reverse links to other pages
         *
         * @link http://www.w3.org/TR/html4/struct/links.html#h-12.3.1
         *
         * @var array
         */
        protected $_rev;
        /**
         * Page order used by parent container
         *
         * @var int|null
         */
        protected $_order;
        /**
         * Whether this page should be considered active
         *
         * @var bool
         */
        protected $_active;
        /**
         * Whether this page should be considered visible
         *
         * @var bool
         */
        protected $_visible;
        /**
         * Parent container
         *
         * @var Container|null
         */
        protected $_parent;
        /**
         * Custom page properties, used by __set(), __get() and __isset()
         *
         * @var array
         */
        protected $_properties;
        /**
         * Custom HTML attributes
         *
         * @var array
         */
        protected $_customHtmlAttribs;
        /**
         * The type of page to use when it wasn't set
         *
         * @var string
         */
        static protected $_defaultPageType;

        public static function factory($options) {}
        public function __construct($options = null) {}
        /**
         * Initializes page (used by subclasses)
         *
         * @return void
         */
        protected function _init() {}
        public function setOptions(array $options) {}
        public function setLabel($label) {}
        /**
         * Returns page label
         *
         * @return string  page label or null
         */
        public function getLabel() {}
        public function setFragment($fragment) {}
        /**
         * Returns fragment identifier
         *
         * @return string|null  fragment identifier
         */
        public function getFragment() {}
        public function setId($id = null) {}
        /**
         * Returns page id
         *
         * @return string|null  page id or null
         */
        public function getId() {}
        public function setClass($class = null) {}
        /**
         * Returns page class (CSS)
         *
         * @return string|null  page's CSS class or null
         */
        public function getClass() {}
        public function setTitle($title = null) {}
        /**
         * Returns page title
         *
         * @return string|null  page title or null
         */
        public function getTitle() {}
        public function setTarget($target = null) {}
        /**
         * Returns page target
         *
         * @return string|null  page target or null
         */
        public function getTarget() {}
        public function setAccesskey($character = null) {}
        /**
         * Returns page access key
         *
         * @return string|null  page access key or null
         */
        public function getAccesskey() {}
        public function setRel($relations = null) {}
        public function getRel($relation = null) {}
        public function setRev($relations = null) {}
        public function getRev($relation = null) {}
        public function setCustomHtmlAttrib($name, $value) {}
        public function getCustomHtmlAttrib($name) {}
        public function setCustomHtmlAttribs(array $attribs) {}
        /**
         * Returns all custom HTML attributes as an array
         *
         * @return array    an array containing custom HTML attributes
         */
        public function getCustomHtmlAttribs() {}
        public function removeCustomHtmlAttrib($name) {}
        /**
         * Clear all custom HTML attributes
         *
         * @return Page fluent interface, returns self
         */
        public function clearCustomHtmlAttribs() {}
        public function setOrder($order = null) {}
        /**
         * Returns page order used in parent container
         *
         * @return int|null  page order or null
         */
        public function getOrder() {}
        public function setActive($active = true) {}
        public function isActive($recursive = false) {}
        public function getActive($recursive = false) {}
        public function setVisible($visible = true) {}
        public function isVisible($recursive = false) {}
        public function getVisible($recursive = false) {}
        public function setParent(Container $parent = null) {}
        /**
         * Returns parent container
         *
         * @return Container|null  parent container or null
         */
        public function getParent() {}
        public function set($property, $value) {}
        public function get($property) {}
        public function __set($name, $value) {}
        public function __get($name) {}
        public function __isset($name) {}
        public function __unset($name) {}
        /**
         * Returns page label
         *
         * Magic overload for enabling <code>echo $page</code>.
         *
         * @return string  page label
         */
        public function __toString() {}
        public function addRel($relation, $value) {}
        public function addRev($relation, $value) {}
        public function removeRel($relation) {}
        public function removeRev($relation) {}
        /**
         * Returns an array containing the defined forward relations
         *
         * @return array  defined forward relations
         */
        public function getDefinedRel() {}
        /**
         * Returns an array containing the defined reverse relations
         *
         * @return array  defined reverse relations
         */
        public function getDefinedRev() {}
        /**
         * Returns custom properties as an array
         *
         * @return array  an array containing custom properties
         */
        public function getCustomProperties() {}
        /**
         * Returns a hash code value for the page
         *
         * @return string  a hash code value for this page
         */
        public function hashCode() {}
        /**
         * Returns an array representation of the page
         *
         * @return array  associative array containing all page properties
         */
        public function toArray() {}
        protected static function _normalizePropertyName($property) {}
        public static function setDefaultPageType($type = null) {}
        public static function getDefaultPageType() {}
        /**
         * Returns href for this page
         *
         * @return string  the page's href
         */
        abstract public function getHref() ;
    }

}

namespace Pimcore\Navigation\Page {
    class Document extends \pimcore\navigation\page\url {
        /**
         * @var string
         */
        protected $_accesskey;
        /**
         * @var string
         */
        protected $_tabindex;
        /**
         * @var string
         */
        protected $_relation;
        /**
         * @var int
         */
        protected $_documentId;
        /**
         * @var string
         */
        protected $documentType;
        /**
         * @var string
         */
        protected $realFullPath;
        /**
         * @var array
         */
        protected $customSettings;

        public function setTabindex($tabindex) {}
        /**
         * @return string
         */
        public function getTabindex() {}
        public function setAccesskey($character = null) {}
        /**
         * @return string
         */
        public function getAccesskey() {}
        public function setRelation($relation) {}
        /**
         * @return string
         */
        public function getRelation() {}
        public function setDocument($document) {}
        /**
         * @return Model\Document
         */
        public function getDocument() {}
        /**
         * @return int
         */
        public function getDocumentId() {}
        public function setDocumentId($documentId) {}
        /**
         * @return string
         */
        public function getDocumentType() {}
        public function setDocumentType($documentType) {}
        /**
         * @return string
         */
        public function getRealFullPath() {}
        public function setRealFullPath($realFullPath) {}
        public function setCustomSetting($name, $value) {}
        public function getCustomSetting($name) {}
    }

    class Url extends \pimcore\navigation\page {
        /**
         * Page URI
         *
         * @var string|null
         */
        protected $_uri;

        public function setUri($uri) {}
        /**
         * Returns URI
         *
         * @return string
         */
        public function getUri() {}
        /**
         * Returns href for this page
         *
         * @return string
         */
        public function getHref() {}
        /**
         * Returns an array representation of the page
         *
         * @return array
         */
        public function toArray() {}
    }

}

namespace Pimcore\Navigation\Renderer {
    abstract class AbstractRenderer implements \pimcore\navigation\renderer\rendererinterface {
        /**
         * @var EngineInterface
         */
        protected $templatingEngine;
        /**
         * The minimum depth a page must have to be included when rendering
         *
         * @var int
         */
        protected $_minDepth;
        /**
         * The maximum depth a page can have to be included when rendering
         *
         * @var int
         */
        protected $_maxDepth;
        /**
         * Indentation string
         *
         * @var string
         */
        protected $_indent;
        /**
         * Prefix for IDs when they are normalized
         *
         * @var string|null
         */
        protected $_prefixForId;
        /**
         * Skip current prefix for IDs when they are normalized (flag)
         *
         * @var bool
         */
        protected $_skipPrefixForId;
        /**
         * Wheter invisible items should be rendered by this helper
         *
         * @var bool
         */
        protected $_renderInvisible;

        public function __construct(EngineInterface $templatingEngine) {}
        public function setMinDepth($minDepth = null) {}
        /**
         * @return int
         */
        public function getMinDepth() {}
        public function setMaxDepth($maxDepth = null) {}
        /**
         * @return int
         */
        public function getMaxDepth() {}
        public function setIndent($indent) {}
        /**
         * @return string
         */
        public function getIndent() {}
        /**
         * @return string
         */
        public function getEOL() {}
        public function setPrefixForId($prefix) {}
        /**
         * @return null|string
         */
        public function getPrefixForId() {}
        public function skipPrefixForId($flag = true) {}
        /**
         * @return bool
         */
        public function getRenderInvisible() {}
        public function setRenderInvisible(bool $renderInvisible = true) {}
        public function findActive(Container $container, $minDepth = null, $maxDepth = -1) {}
        public function htmlify(Page $page) {}
        public function accept(Page $page, $recursive = true) {}
        protected function _getWhitespace($indent) {}
        protected function _htmlAttribs($attribs) {}
        protected function _normalizeId($value) {}
    }

    class Breadcrumbs extends \pimcore\navigation\renderer\abstractrenderer {
        /**
         * Breadcrumbs separator string
         *
         * @var string
         */
        protected $_separator;
        /**
         * The minimum depth a page must have to be included when rendering
         *
         * @var int
         */
        protected $_minDepth;
        /**
         * Whether last page in breadcrumb should be hyperlinked
         *
         * @var bool
         */
        protected $_linkLast;
        /**
         * Partial view script to use for rendering menu
         *
         * @var string|array
         */
        protected $_template;

        public function setSeparator($separator) {}
        /**
         * Returns breadcrumb separator
         *
         * @return string  breadcrumb separator
         */
        public function getSeparator() {}
        public function setLinkLast($linkLast) {}
        /**
         * Returns whether last page in breadcrumbs should be hyperlinked
         *
         * @return bool  whether last page in breadcrumbs should be hyperlinked
         */
        public function getLinkLast() {}
        /**
         * @return array|string
         */
        public function getTemplate() {}
        public function setTemplate($template) {}
        public function setPartial($partial) {}
        /**
         * Alias of getTemplate()
         *
         * @return string|array|null
         */
        public function getPartial() {}
/** @var Page $active */
        public function renderStraight(/** @var Page $active */
Container $container) {}
/** @var Page $active */
        public function renderTemplate(/** @var Page $active */
Container $container, /** @var Page $active */
string $partial = null) {}
        public function renderPartial(Container $container, string $partial = null) {}
        public function render(Container $container) {}
    }

    class Menu extends \pimcore\navigation\renderer\abstractrenderer {
        /**
         * CSS class to use for the ul element
         *
         * @var string
         */
        protected $_ulClass;
        /**
         * Unique identifier (id) for the ul element
         *
         * @var string
         */
        protected $_ulId;
        /**
         * CSS class to use for the active elements
         *
         * @var string
         */
        protected $_activeClass;
        /**
         * CSS class to use for the parent li element
         *
         * @var string
         */
        protected $_parentClass;
        /**
         * Whether parent li elements should be rendered with parent class
         *
         * @var bool
         */
        protected $_renderParentClass;
        /**
         * Whether only active branch should be rendered
         *
         * @var bool
         */
        protected $_onlyActiveBranch;
        /**
         * Whether parents should be rendered when only rendering active branch
         *
         * @var bool
         */
        protected $_renderParents;
        /**
         * Partial view script to use for rendering menu
         *
         * @var string|array
         */
        protected $_template;
        /**
         * Expand all sibling nodes of active branch nodes
         *
         * @var bool
         */
        protected $_expandSiblingNodesOfActiveBranch;
        /**
         * Adds CSS class from page to li element
         *
         * @var bool
         */
        protected $_addPageClassToLi;
        /**
         * Inner indentation string
         *
         * @var string
         */
        protected $_innerIndent;

        public function setUlClass($ulClass) {}
        /**
         * Returns CSS class to use for the first 'ul' element when rendering
         *
         * @return string  CSS class
         */
        public function getUlClass() {}
        public function setUlId($ulId) {}
        /**
         * Returns unique identifier (id) to use for the first 'ul' element when
         * rendering
         *
         * @return string|null  Unique identifier (id); Default is 'null'
         */
        public function getUlId() {}
        public function setActiveClass($activeClass) {}
        /**
         * Returns CSS class to use for the active elements when rendering
         *
         * @return string  CSS class
         */
        public function getActiveClass() {}
        public function setParentClass($parentClass) {}
        /**
         * Returns CSS class to use for the parent lie elements when rendering
         *
         * @return string CSS class
         */
        public function getParentClass() {}
        public function setRenderParentClass($flag = true) {}
        /**
         * Returns flag indicating whether parent class should be rendered to the li
         * element
         *
         * @return bool  whether parent class should be rendered
         */
        public function getRenderParentClass() {}
        public function setOnlyActiveBranch($flag = true) {}
        /**
         * Returns a flag indicating whether only active branch should be rendered
         *
         * By default, this value is false, meaning the entire menu will be
         * be rendered.
         *
         * @return bool  whether only active branch should be rendered
         */
        public function getOnlyActiveBranch() {}
        public function setExpandSiblingNodesOfActiveBranch($flag = true) {}
        /**
         * Returns a flag indicating whether to expand all sibling nodes of the active branch
         *
         * By default, this value is false, meaning the entire menu will be
         * be rendered.
         *
         * @return bool  whether siblings of nodes in the active branch should be expanded
         */
        public function getExpandSiblingNodesOfActiveBranch() {}
        public function setRenderParents($flag = true) {}
        /**
         * Returns flag indicating whether parents should be rendered when rendering
         * only the active branch
         *
         * By default, this value is true.
         *
         * @return bool  whether parents should be rendered
         */
        public function getRenderParents() {}
        /**
         * @return array|string
         */
        public function getTemplate() {}
        public function setTemplate($template) {}
        public function setPartial($partial) {}
        /**
         * Alias of getTemplate()
         *
         * @return array|string
         */
        public function getPartial() {}
        public function addPageClassToLi($flag = true) {}
        /**
         * Returns a flag indicating whether the CSS class from page to be added to
         * li element
         *
         * @return bool
         */
        public function getAddPageClassToLi() {}
        public function setInnerIndent($indent) {}
        /**
         * Returns inner indentation (format output is respected)
         *
         * @return string       indentation string or an empty string
         */
        public function getInnerIndent() {}
        public function htmlify(Page $page) {}
        protected function _normalizeOptions(array $options = [ ]) {}
/** @var Page $subPage */
        protected function _renderDeepestMenu(/** @var Page $subPage */
Container $container, /** @var Page $subPage */
$ulClass, /** @var Page $subPage */
$indent, /** @var Page $subPage */
$innerIndent, /** @var Page $subPage */
$minDepth, /** @var Page $subPage */
$maxDepth, /** @var Page $subPage */
$ulId, /** @var Page $subPage */
$addPageClassToLi, /** @var Page $subPage */
$activeClass, /** @var Page $subPage */
$parentClass, /** @var Page $subPage */
$renderParentClass) {}
        protected function _renderMenu(Container $container, $ulClasses, $indent, $innerIndent, $minDepth, $maxDepth, $onlyActive, $expandSibs, $ulId, $addPageClassToLi, $activeClass, $parentClass, $renderParentClass) {}
        public function renderMenu(Container $container, array $options = [ ]) {}
        public function renderSubMenu(Container $container, $ulClass = null, $indent = null, $ulId = null, $addPageClassToLi = false, $innerIndent = null) {}
        public function renderTemplate(Container $container, $partial = null) {}
        public function renderPartial(Container $container, $partial = null) {}
        public function render(Container $container) {}
    }


    interface RendererInterface {
        /**
         * @return bool
         */
        function getRenderInvisible() ;
        function setRenderInvisible(bool $renderInvisible = true) ;
        function render(Container $container) ;
    }

}

namespace Pimcore\Sitemap {
    /**
     * A simple absolute URL generator accepting a path and generating absolute URLs
     * for the current request context. Parts of the URL (e.g. host or scheme) can be
     * influenced by passing them as options.
     */
    class UrlGenerator implements \pimcore\sitemap\urlgeneratorinterface {
        /**
         * @var RequestContext
         */
        private $requestContext;
        /**
         * @var OptionsResolver
         */
        private $optionsResolver;

        public function __construct(RequestContext $requestContext) {}
        protected function configureOptions(OptionsResolver $options) {}
        protected function resolveOptions(array $options) : array {}
        public function generateUrl(string $path, array $options = [ ]) {}
    }


    interface GeneratorInterface {
        function populate(UrlContainerInterface $urlContainer, string $section = null) ;
    }

    interface UrlGeneratorInterface {
        function generateUrl(string $path, array $options = [ ]) ;
    }

}

namespace Pimcore\Sitemap\Element {
    /**
     * Basic generator for all kinds of elements supporting pluggable filters (= exclude elements) and processors (= enrich
     * generated URL).
     */
    abstract class AbstractElementGenerator implements \pimcore\sitemap\generatorinterface {
        /**
         * @var FilterInterface[]
         */
        private $filters;
        /**
         * @var ProcessorInterface[]
         */
        private $processors;

        public function __construct(array $filters = [ ], array $processors = [ ]) {}
        public function addFilter(FilterInterface $filter) {}
        /**
         * @return FilterInterface[]
         */
        public function getFilters() : array {}
        public function addProcessor(ProcessorInterface $processor) {}
        /**
         * @return ProcessorInterface[]
         */
        public function getProcessors() : array {}
        protected function canBeAdded(AbstractElement $element, GeneratorContextInterface $context) : bool {}
        protected function handlesChildren(AbstractElement $element, GeneratorContextInterface $context) : bool {}
        protected function process(Url $url, AbstractElement $element, GeneratorContextInterface $context) {}
    }

    class GeneratorContext implements \pimcore\sitemap\element\generatorcontextinterface {
        /**
         * @var UrlContainerInterface
         */
        private $urlContainer;
        /**
         * @var string|null
         */
        private $section;
        /**
         * @var array
         */
        private $parameters;

        public function __construct(UrlContainerInterface $urlContainer, string $section = null, array $parameters = [ ]) {}
        public function getUrlContainer() : UrlContainerInterface {}
        /**
         * @return string|null
         */
        public function getSection() {}
        public function all() : array {}
        public function keys() : array {}
        public function get($key, $default = null) {}
        public function has($key) : bool {}
        public function getIterator() : \Iterator {}
        public function count() : int {}
    }


    interface FilterInterface {
        function canBeAdded(AbstractElement $element, GeneratorContextInterface $context) : bool ;
        function handlesChildren(AbstractElement $element, GeneratorContextInterface $context) : bool ;
    }

    /**
     * Context which is passed to every filter/processor
     */
    interface GeneratorContextInterface extends \countable {
        function getUrlContainer() : UrlContainerInterface ;
        /**
         * @return string|null
         */
        function getSection() ;
        function all() : array ;
        function keys() : array ;
        function get($key, $default = null) ;
        function has($key) : bool ;
    }

    interface ProcessorInterface {
        function process(Url $url, AbstractElement $element, GeneratorContextInterface $context) ;
    }

}

namespace Pimcore\Sitemap\Element\Processor {
    /**
     * Adds change frequency and priority entries based on document properties.
     */
    class PropertiesProcessor implements \pimcore\sitemap\element\processorinterface {
        const PROPERTY_PRIORITY = 'sitemaps_priority';
        const PROPERTY_CHANGE_FREQUENCY = 'sitemaps_changefreq';

        public function process(Url $url, AbstractElement $element, GeneratorContextInterface $context) {}
    }

    /**
     * Adds modification date from element modification date.
     */
    class ModificationDateProcessor implements \pimcore\sitemap\element\processorinterface {
        public function process(Url $url, AbstractElement $element, GeneratorContextInterface $context) {}
    }

}

namespace Pimcore\Sitemap\Element\Filter {
    class PublishedFilter implements \pimcore\sitemap\element\filterinterface {
        public function canBeAdded(AbstractElement $element, GeneratorContextInterface $context) : bool {}
        public function handlesChildren(AbstractElement $element, GeneratorContextInterface $context) : bool {}
    }

    /**
     * Filters element based on the sitemaps_exclude and sitemaps_exclude_children properties.
     */
    class PropertiesFilter implements \pimcore\sitemap\element\filterinterface {
        const PROPERTY_EXCLUDE = 'sitemaps_exclude';
        const PROPERTY_EXCLUDE_CHILDREN = 'sitemaps_exclude_children';

        public function canBeAdded(AbstractElement $element, GeneratorContextInterface $context) : bool {}
        public function handlesChildren(AbstractElement $element, GeneratorContextInterface $context) : bool {}
        private function getBoolProperty(AbstractElement $document, string $property) : bool {}
    }

}

namespace Pimcore\Sitemap\Document {
    class DocumentTreeGenerator extends \pimcore\sitemap\element\abstractelementgenerator {
        /**
         * @var DocumentUrlGeneratorInterface
         */
        private $urlGenerator;
        /**
         * @var array
         */
        protected $options;
        /**
         * @var int
         */
        private $currentBatchCount;

        public function __construct(DocumentUrlGeneratorInterface $urlGenerator, array $filters = [ ], array $processors = [ ], array $options = [ ]) {}
        protected function configureOptions(OptionsResolver $options) {}
/** @var Site[] $sites */
        public function populate(/** @var Site[] $sites */
UrlContainerInterface $urlContainer, /** @var Site[] $sites */
string $section = null) {}
        private function populateCollection(UrlContainerInterface $urlContainer, Document $rootDocument, string $section, Site $site = null) {}
        private function createUrl(Document $document, DocumentGeneratorContext $context) {}
        private function visit(Document $document, DocumentGeneratorContext $context) : \Generator {}
    }

    class DocumentGeneratorContext extends \pimcore\sitemap\element\generatorcontext {
        public function __construct(UrlContainerInterface $urlContainer, string $section = null, Site $site = null, array $parameters = [ ]) {}
        public function hasSite() : bool {}
        /**
         * @return Site|null
         */
        public function getSite() {}
    }

    /**
     * URL generator specific to documents with site support.
     */
    class DocumentUrlGenerator implements \pimcore\sitemap\document\documenturlgeneratorinterface {
        /**
         * @var UrlGeneratorInterface
         */
        private $urlGenerator;

        public function __construct(UrlGeneratorInterface $urlGenerator) {}
        public function generateUrl(string $path, array $options = [ ]) {}
        public function generateDocumentUrl(Document $document, Site $site = null, array $options = [ ]) : string {}
        protected function prepareOptions(array $options, Site $site = null) : array {}
        protected function hostForSite(Site $site) {}
    }


    interface DocumentUrlGeneratorInterface extends \pimcore\sitemap\urlgeneratorinterface {
        function generateDocumentUrl(Document $document, Site $site = null, array $options = [ ]) : string ;
    }

}

namespace Pimcore\Sitemap\Document\Filter {
    /**
     * Filters document if it is a site root, but doesn't match the current site. This used to exclude
     * sites from the default section.
     */
    class SiteRootFilter implements \pimcore\sitemap\element\filterinterface {
        /**
         * @var array
         */
        private $siteRoots;

        public function canBeAdded(AbstractElement $element, GeneratorContextInterface $context) : bool {}
        public function handlesChildren(AbstractElement $element, GeneratorContextInterface $context) : bool {}
        private function isExcludedSiteRoot(Document $document, Site $site = null) : bool {}
    }

    class DocumentTypeFilter implements \pimcore\sitemap\element\filterinterface {
        /**
         * @var array
         */
        private $documentTypes;
        /**
         * @var array
         */
        private $containerTypes;

        public function __construct(array $documentTypes = null, array $containerTypes = null) {}
        public function canBeAdded(AbstractElement $element, GeneratorContextInterface $context) : bool {}
        public function handlesChildren(AbstractElement $element, GeneratorContextInterface $context) : bool {}
    }

}

namespace Pimcore\Sitemap\EventListener {
    class SitemapGeneratorListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @var \Iterator|GeneratorInterface[]
         */
        private $generators;

        public function __construct($generators) {}
        public static function getSubscribedEvents() {}
        public function onPopulateSitemap(SitemapPopulateEvent $event) {}
    }

}

namespace Pimcore\Document {
    class DocumentStack {
        /**
         * @var Document[]
         */
        private $documents;
        /**
         * @var string
         */
        private $hash;

        public function push(Document $document) {}
        /**
         * @return Document|null
         */
        public function pop() {}
        /**
         * @return Document|null
         */
        public function getCurrentDocument() {}
        /**
         * @return Document|null
         */
        public function getMasterDocument() {}
        public function findOneBy(callable $function) {}
        /**
         * @return string
         */
        public function getHash() : string {}
        private function regenerateHash() : void {}
    }

    abstract class Adapter {
        /**
         * @var array
         */
        protected $tmpFiles;

        protected function preparePath($path) {}
        protected function removeTmpFiles() {}
        public function __destruct() {}
    }

}

namespace Pimcore\Document\Renderer {
    class DocumentRenderer implements \pimcore\document\renderer\documentrendererinterface {
        /**
         * @var RequestHelper
         */
        private $requestHelper;
        /**
         * @var ActionRenderer
         */
        private $actionRenderer;
        /**
         * @var FragmentRendererInterface
         */
        private $fragmentRenderer;
        /**
         * @var DocumentRouteHandler
         */
        private $documentRouteHandler;
        /**
         * @var DocumentTargetingConfigurator
         */
        private $targetingConfigurator;
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;
        /**
         * @var LocaleService
         */
        private $localeService;

        public function __construct(RequestHelper $requestHelper, ActionRenderer $actionRenderer, FragmentRendererInterface $fragmentRenderer, DocumentRouteHandler $documentRouteHandler, DocumentTargetingConfigurator $targetingConfigurator, EventDispatcherInterface $eventDispatcher, LocaleService $localeService) {}
        public function setContainerService(ContainerService $containerService) {}
        public function render(Document\PageSnippet $document, array $attributes = [ ], array $query = [ ], array $options = [ ]) : string {}
    }


    interface DocumentRendererInterface {
        function render(Document\PageSnippet $document, array $attributes = [ ], array $query = [ ], array $options = [ ]) : string ;
    }

}

namespace Pimcore\Document\Adapter {
    class LibreOffice extends \pimcore\document\adapter\ghostscript {
        /**
         * @var string
         */
        protected $path;

        /**
         * @return bool
         */
        public function isAvailable() {}
        public function isFileTypeSupported($fileType) {}
        /**
         * @return mixed
         *
         * @throws \Exception
         */
        public static function getLibreOfficeCli() {}
        public function load($path) {}
        public function getPdf($path = null) {}
        public function getText($page = null, $path = null) {}
    }

    class Ghostscript extends \pimcore\document\adapter {
        /**
         * @var string
         */
        protected $path;

        /**
         * @return bool
         */
        public function isAvailable() {}
        public function isFileTypeSupported($fileType) {}
        /**
         * @return mixed
         *
         * @throws \Exception
         */
        public static function getGhostscriptCli() {}
        /**
         * @return mixed
         *
         * @throws \Exception
         */
        public static function getPdftotextCli() {}
        public function load($path) {}
        public function getPdf($path = null) {}
        /**
         * @return string
         *
         * @throws \Exception
         */
        public function getPageCount() {}
        public function saveImage($path, $page = 1, $resolution = 200) {}
        public function getText($page = null, $path = null) {}
    }

}

namespace Pimcore\Document\Newsletter {
    class DefaultAddressSourceAdapterFactory implements \pimcore\document\newsletter\addresssourceadapterfactoryinterface {
        /**
         * @var string
         */
        private $className;

        public function __construct($className) {}
        public function create($params) {}
    }

    class SendingParamContainer {
        /**
         * @var string
         */
        protected $email;
        /**
         * @var array
         */
        protected $params;

        public function __construct($email, array $params = null) {}
        /**
         * @return string
         */
        public function getEmail() {}
        public function setEmail($email) {}
        /**
         * @return array
         */
        public function getParams() {}
        public function setParams($params) {}
    }

    class ReportAddressSourceAdapterFactory implements \pimcore\document\newsletter\addresssourceadapterfactoryinterface {
        /**
         * @var ServiceLocator
         */
        private $reportAdapterServiceLocator;

        public function __construct(ServiceLocator $reportAdapterServiceLocator) {}
/** @var CustomReportAdapterFactoryInterface $adapterFactory */
        public function create(/** @var CustomReportAdapterFactoryInterface $adapterFactory */
$params) {}
    }


    interface AddressSourceAdapterFactoryInterface {
        function create($params) ;
    }

    interface AddressSourceAdapterInterface {
        /**
         * returns array of email addresses for batch sending
         *
         * @return SendingParamContainer[]
         */
        function getMailAddressesForBatchSending() ;
        function getParamsForTestSending($emailAddress) ;
        /**
         * returns total number of newsletter recipients
         *
         * @return int
         */
        function getTotalRecordCount() ;
        function getParamsForSingleSending($limit, $offset) ;
    }

}

namespace Pimcore\Document\Newsletter\AddressSourceAdapter {
    class ReportAdapter implements \pimcore\document\newsletter\addresssourceadapterinterface {
        /**
         * @var string
         */
        protected $emailFieldName;
        /**
         * @var CustomReportAdapterInterface
         */
        protected $reportAdapter;
        /**
         * @var string[]
         */
        protected $emailAddresses;
        /**
         * @var int
         */
        protected $elementsTotal;
        /**
         * @var Listing
         */
        protected $list;

        public function __construct($emailFieldName, CustomReportAdapterInterface $reportAdapter) {}
        /**
         * @return Listing
         */
        protected function getListing() {}
        /**
         * returns array of email addresses for batch sending
         *
         * @return SendingParamContainer[]
         */
        public function getMailAddressesForBatchSending() {}
        public function getParamsForTestSending($emailAddress) {}
        /**
         * returns total number of newsletter recipients
         *
         * @return int
         */
        public function getTotalRecordCount() {}
        public function getParamsForSingleSending($limit, $offset) {}
    }

    class DefaultAdapter implements \pimcore\document\newsletter\addresssourceadapterinterface {
        /**
         * @var string
         */
        protected $class;
        /**
         * @var string
         */
        protected $condition;
        /**
         * @var int[]
         */
        protected $targetGroups;
        /**
         * @var int
         */
        protected $elementsTotal;
        /**
         * @var Listing
         */
        protected $list;

        public function __construct($params) {}
        /**
         * @return Listing
         */
        protected function getListing() {}
        protected function addTargetGroupConditions(ClassDefinition $class, array $conditions) : array {}
        /**
         * returns array of email addresses for batch sending
         *
         * @return SendingParamContainer[]
         */
        public function getMailAddressesForBatchSending() {}
        public function getParamsForTestSending($emailAddress) {}
        /**
         * returns total number of newsletter recipients
         *
         * @return int
         */
        public function getTotalRecordCount() {}
        public function getParamsForSingleSending($limit, $offset) {}
    }

    class CsvList implements \pimcore\document\newsletter\addresssourceadapterinterface {
        /**
         * @var string[]
         */
        protected $emailAddresses;

        public function __construct($params) {}
        /**
         * returns array of email addresses for batch sending
         *
         * @return SendingParamContainer[]
         */
        public function getMailAddressesForBatchSending() {}
        public function getParamsForTestSending($emailAddress) {}
        /**
         * returns total number of newsletter recipients
         *
         * @return int
         */
        public function getTotalRecordCount() {}
        public function getParamsForSingleSending($limit, $offset) {}
    }

}

namespace Pimcore\Document\Tag {
    class UsageRecorderSubscriber implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @var array
         */
        protected $recordedTagNames;

        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() : array {}
        public function onBuildTagName(TagNameEvent $event) {}
        /**
         * @return array
         */
        public function getRecordedTagNames() : array {}
        public function setRecordedTagNames(array $recordedTagNames) : void {}
    }

    class TagHandler implements \pimcore\document\tag\taghandlerinterface, \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        public const ATTRIBUTE_AREABRICK_INFO = '_pimcore_areabrick_info';

        /**
         * @var AreabrickManagerInterface
         */
        protected $brickManager;
        /**
         * @var EngineInterface
         */
        protected $templating;
        /**
         * @var BundleLocatorInterface
         */
        protected $bundleLocator;
        /**
         * @var WebPathResolver
         */
        protected $webPathResolver;
        /**
         * @var ActionRenderer
         */
        protected $actionRenderer;
        /**
         * @var RequestHelper
         */
        protected $requestHelper;
        /**
         * @var TranslatorInterface
         */
        protected $translator;
        /**
         * @var ResponseStack
         */
        protected $responseStack;
        /**
         * @var array
         */
        protected $brickTemplateCache;

        public function __construct(AreabrickManagerInterface $brickManager, EngineInterface $templating, BundleLocatorInterface $bundleLocator, WebPathResolver $webPathResolver, ActionRenderer $actionRenderer, RequestHelper $requestHelper, TranslatorInterface $translator, ResponseStack $responseStack) {}
        public function supports($view) {}
        public function isBrickEnabled(Tag $tag, $brick) {}
/** @var ViewModel $view */
        public function getAvailableAreablockAreas(/** @var ViewModel $view */
Tag\Areablock $tag, /** @var ViewModel $view */
array $options) {}
/** @var ViewModelInterface $view */
        public function renderAreaFrontend(/** @var ViewModelInterface $view */
Info $info) {}
        protected function handleBrickActionResult($result) {}
        protected function resolveBrickTemplate(AreabrickInterface $brick, $type) {}
        protected function buildBrickTemplateReference(TemplateAreabrickInterface $brick, $type) {}
        public function renderAction($view, $controller, $action, $parent = null, array $attributes = [ ], array $query = [ ], array $options = [ ]) {}
    }

    class DelegatingTagHandler implements \pimcore\document\tag\taghandlerinterface {
        /**
         * @var TagHandlerInterface[]
         */
        protected $handlers;

        public function addHandler(TagHandlerInterface $handler) {}
        public function getHandlerForView($view) {}
        public function getHandlerForTag(Tag $tag) {}
        public function supports($view) {}
        public function isBrickEnabled(Tag $tag, $brick) {}
        public function getAvailableAreablockAreas(Tag\Areablock $tag, array $options) {}
        public function renderAreaFrontend(Info $info) {}
        public function renderAction($view, $controller, $action, $parent = null, array $attributes = [ ], array $query = [ ], array $options = [ ]) {}
    }

    class TagUsageResolver {
        /**
         * @var UsageRecorderSubscriber
         */
        protected $subscriber;
        protected $dispatcher;
        protected $renderer;

        public function __construct(EventDispatcherInterface $eventDispatcher, DocumentRenderer $documentRenderer) {}
        public function getUsedTagnames(Document\PageSnippet $document) {}
        protected function registerEventSubscriber() {}
        protected function unregisterEventSubscriber() {}
    }


    interface TagHandlerInterface {
        function supports($view) ;
        function isBrickEnabled(Tag $tag, $brick) ;
        function getAvailableAreablockAreas(Tag\Areablock $tag, array $options) ;
        function renderAreaFrontend(Info $info) ;
        function renderAction($view, $controller, $action, $parent = null, array $attributes = [ ], array $query = [ ], array $options = [ ]) ;
    }

}

namespace Pimcore\Document\Tag\NamingStrategy {
    final class LegacyNamingStrategy extends \pimcore\document\tag\namingstrategy\abstractnamingstrategy {
        const STRATEGY_NAME = 'legacy';

        /**
         * @inheritDoc
         */
        public function getName() : string {}
        protected function buildHierarchicalName(string $name, array $blocks, array $indexes) : string {}
        public function buildChildElementTagName(string $name, string $type, array $parentBlockNames, int $index) : string {}
    }

    final class NestedNamingStrategy extends \pimcore\document\tag\namingstrategy\abstractnamingstrategy {
        const STRATEGY_NAME = 'nested';

        /**
         * @inheritDoc
         */
        public function getName() : string {}
        protected function buildHierarchicalName(string $name, array $blocks, array $indexes) : string {}
        public function buildChildElementTagName(string $name, string $type, array $parentBlockNames, int $index) : string {}
    }

    abstract class AbstractNamingStrategy implements \pimcore\document\tag\namingstrategy\namingstrategyinterface {
        public function buildTagName(string $name, string $type, BlockState $blockState, string $targetGroupElementName = null) : string {}
        abstract protected function buildHierarchicalName(string $name, array $blocks, array $indexes) : string ;
    }


    interface NamingStrategyInterface {
        /**
         * Get the name of the naming strategy (used in frontend)
         *
         * @return string
         */
        function getName() : string ;
        function buildTagName(string $name, string $type, BlockState $blockState, string $targetGroupElementName = null) : string ;
        function buildChildElementTagName(string $name, string $type, array $parentBlockNames, int $index) : string ;
    }

}

namespace Pimcore\Document\Tag\NamingStrategy\Exception {
    class TagNameException extends \runtimeexception {}

}

namespace Pimcore\Document\Tag\NamingStrategy\Migration {
    class AnalyzeMigrationStrategy extends \pimcore\document\tag\namingstrategy\migration\abstractmigrationstrategy {
        /**
         * @var Connection
         */
        private $db;

        public function __construct(Connection $db) {}
        public function getName() : string {}
        public function getStepDescription() : string {}
/** @var Document\PageSnippet $document */
        public function getNameMapping(/** @var Document\PageSnippet $document */
\Generator $documents, /** @var Document\PageSnippet $document */
CacheInterface $cache) : array {}
        private function processDocument(Document\PageSnippet $document, ConflictResolverInterface $conflictResolver) : array {}
        private function addDocumentElements(ElementTree $tree, Document\PageSnippet $document, bool $inherited = false) : array {}
    }

    abstract class AbstractMigrationStrategy {
        /**
         * @var PimcoreStyle
         */
        protected $io;
        /**
         * @var NamingStrategyInterface
         */
        protected $namingStrategy;
        /**
         * @var bool
         */
        protected $initialized;

        public function initialize(PimcoreStyle $io, NamingStrategyInterface $namingStrategy) {}
        protected function initializeEnvironment() {}
        abstract public function getName() : string ;
        abstract public function getStepDescription() : string ;
        abstract public function getNameMapping(\Generator $documents, CacheInterface $cache) : array ;
        protected function removeMappingForErroredDocuments(array $mapping, array $errors) : array {}
        protected function showMappingErrors(array $errors, string $title, string $description) {}
    }

    class RenderMigrationStrategy extends \pimcore\document\tag\namingstrategy\migration\abstractmigrationstrategy {
        /**
         * @var EventDispatcherInterface
         */
        private $dispatcher;
        /**
         * @var RequestStack
         */
        private $requestStack;
        /**
         * @var EditmodeResolver
         */
        private $editmodeResolver;
        /**
         * @var UserLoader
         */
        private $userLoader;
        /**
         * @var AdminSessionBagConfigurator
         */
        private $adminSessionConfigurator;
        /**
         * @var DocumentRouteHandler
         */
        private $documentRouteHandler;
        /**
         * @var MigrationSubscriber
         */
        private $subscriber;

        public function __construct(EventDispatcherInterface $dispatcher, RequestStack $requestStack, EditmodeResolver $editmodeResolver, UserLoader $userLoader, AdminSessionBagConfigurator $adminSessionConfigurator, DocumentRouteHandler $documentRouteHandler) {}
        public function getName() : string {}
        public function getStepDescription() : string {}
        protected function initializeEnvironment() {}
/** @var User $user */
        private function initializeUser(/** @var User $user */
InputInterface $input) {}
        private function initializeAdminMode() {}
        /**
         * Sets admin session to a mock array session to make sure any session related functionality works
         */
        private function initializeSession() {}
        public function getNameMapping(\Generator $documents, CacheInterface $cache) : array {}
        private function askRunConfirmation() : bool {}
    }

    final class MappingError {
        /**
         * @var int
         */
        private $documentId;
        /**
         * @var string
         */
        private $documentPath;
        /**
         * @var \Throwable
         */
        private $exception;

        public function __construct(Document $document, \Throwable $exception) {}
        /**
         * @return int
         */
        public function getDocumentId() : int {}
        /**
         * @return string
         */
        public function getDocumentPath() : string {}
        /**
         * @return \Throwable
         */
        public function getException() : \Throwable {}
    }

}

namespace Pimcore\Document\Tag\NamingStrategy\Migration\Render {
    /**
     * This listener is not intended to be always registered on the dispatcher, but instead
     * is added manually when needed in the MigrateTagNamingStrategy CLI command. The listener
     * collects all rendered tag names and creates a matching new tag name mapping which can
     * be used to perform tag name migrations after rendering a document.
     */
    class MigrationSubscriber implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * The new naming strategy to use
         *
         * @var NamingStrategyInterface
         */
        private $namingStrategy;
        /**
         * @var array
         */
        private $nameMapping;

        public function __construct(NamingStrategyInterface $namingStrategy) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() : array {}
        public function onBuildTagName(TagNameEvent $event) {}
        private function buildMappedBlockState(BlockState $blockState, array $mapping) : BlockState {}
        /**
         * Returns the mapping result
         *
         * @return array
         */
        public function getNameMapping() : array {}
        public function setNameMapping(array $nameMapping) {}
    }

}

namespace Pimcore\Document\Tag\NamingStrategy\Migration\Analyze {
    final class ElementTree {
        /**
         * @var Document\PageSnippet
         */
        private $document;
        /**
         * @var ConflictResolverInterface
         */
        private $conflictResolver;
        /**
         * Map of elements by name => type
         *
         * @var array
         */
        private $map;
        /**
         * Element data indexed by name
         *
         * @var array
         */
        private $data;
        /**
         * @var array
         */
        private $inheritedElements;
        /**
         * @var AbstractElement[]
         */
        private $elements;
        /**
         * @var BuildEditableException[]
         */
        private $ignoredElements;
        /**
         * @var bool
         */
        private $processed;
        /**
         * @var array
         */
        private $blockTypes;

        public function __construct(Document\PageSnippet $document, ConflictResolverInterface $conflictResolver) {}
        public function add(string $name, string $type, $data, bool $inherited = false) {}
        /**
         * @return AbstractElement[]
         */
        public function getElements() : array {}
        public function getElement(string $name) : AbstractElement {}
        /**
         * @return BuildEditableException[]
         */
        public function getIgnoredElements() : array {}
        private function reset() {}
        private function process() {}
        private function buildEditables(array $blocks) : array {}
/** @var Editable[] $editables */
        private function buildEditable(/** @var Editable[] $editables */
string $name, /** @var Editable[] $editables */
array $blocks) : Editable {}
        private function buildBlocks(array $blockNames, array $parentCandidates) : array {}
        private function buildBlockHierarchy(array $blockNames, array $parentCandidates, array $blocks) : array {}
        private function findBlockParentCandidates(array $blockNames) : array {}
        private function reduceBlockParentCandidates(array $parentCandidates) : array {}
        private function buildDirectParents(array $parentCandidates) : array {}
        private function buildBlock(string $blockName, AbstractBlock $parent = null) : AbstractBlock {}
        /**
         * Builds a list of names for all block elements
         *
         * @return array
         */
        private function getBlockNames() : array {}
        private function getBlocksSortedByLevel(array $blocks) : array {}
        private function isBlock(string $type) : bool {}
        public static function buildNameMatchingPattern(string $identifier) : string {}
        public static function escapeRegexString(string $string) : string {}
    }

    class ConflictResolver implements \pimcore\document\tag\namingstrategy\migration\analyze\conflictresolverinterface {
        /**
         * @var PimcoreStyle
         */
        private $io;
        /**
         * @var NamingStrategyInterface
         */
        private $namingStrategy;

        public function __construct(PimcoreStyle $io, NamingStrategyInterface $namingStrategy) {}
        public function resolveBuildFailed(Document\PageSnippet $document, BuildEditableException $exception) : BuildEditableException {}
/** @var AbstractBlock $block */
        public function resolveBlockConflict(/** @var AbstractBlock $block */
Document\PageSnippet $document, /** @var AbstractBlock $block */
BuildEditableException $exception, /** @var AbstractBlock $block */
array $blocks) : AbstractBlock {}
/** @var Editable $editable */
        public function resolveEditableConflict(/** @var Editable $editable */
Document\PageSnippet $document, /** @var Editable $editable */
BuildEditableException $exception, /** @var Editable $editable */
array $editables) : Editable {}
        private function resolveConflict(string $type, Document\PageSnippet $document, BuildEditableException $exception, array $elements) : AbstractElement {}
        private function showErrorInfo(Document\PageSnippet $document, BuildEditableException $exception, $message = null) {}
        private function dumpData($data) {}
        private function buildChoices(array $editables) : array {}
        private function getParentNames(AbstractElement $element) : array {}
    }


    interface ConflictResolverInterface {
        function resolveBuildFailed(Document\PageSnippet $document, BuildEditableException $exception) : BuildEditableException ;
        function resolveBlockConflict(Document\PageSnippet $document, BuildEditableException $exception, array $blocks) : AbstractBlock ;
        function resolveEditableConflict(Document\PageSnippet $document, BuildEditableException $exception, array $editables) : Editable ;
    }

}

namespace Pimcore\Document\Tag\NamingStrategy\Migration\Analyze\Element {
    final class Editable extends \pimcore\document\tag\namingstrategy\migration\analyze\element\abstractelement {}

    /**
     * Represents all document editables (blocks + other editables)
     */
    abstract class AbstractElement {
        /**
         * @var string
         */
        private $name;
        /**
         * @var string
         */
        private $realName;
        /**
         * @var string
         */
        private $type;
        /**
         * @var mixed
         */
        private $data;
        /**
         * @var int|null
         */
        private $index;
        /**
         * @var AbstractBlock|null
         */
        private $parent;
        /**
         * @var AbstractBlock[]
         */
        private $parents;

        public function __construct(string $name, string $type, $data = null, AbstractBlock $parent = null) {}
        public function getName() : string {}
        public function getRealName() : string {}
        public function getType() : string {}
        public function getData() {}
        /**
         * @return int|null
         */
        public function getIndex() {}
        /**
         * @return AbstractBlock|null
         */
        public function getParent() {}
        /**
         * @return AbstractBlock[]
         */
        public function getParents() : array {}
        public function getLevel() : int {}
        public function getBlockState() : BlockState {}
        public function getNameForStrategy(NamingStrategyInterface $strategy) : string {}
/** @var int $index */
        private function setParent(/** @var int $index */
AbstractBlock $parent = null) {}
        private function buildParentList(AbstractBlock $parent) : array {}
    }

    final class Areablock extends \pimcore\document\tag\namingstrategy\migration\analyze\element\abstractblock {
        protected function resolveChildIndexes($data = null) : array {}
    }

    final class Block extends \pimcore\document\tag\namingstrategy\migration\analyze\element\abstractblock {
        protected function resolveChildIndexes($data = null) : array {}
    }

    /**
     * Represents a block element (block, areablock)
     */
    abstract class AbstractBlock extends \pimcore\document\tag\namingstrategy\migration\analyze\element\abstractelement {
        /**
         * @var int[]
         */
        private $childIndexes;

        public function __construct(string $name, string $type, $data = null, AbstractBlock $parent = null) {}
        abstract protected function resolveChildIndexes($data = null) : array ;
        /**
         * Get available indexes
         *
         * @return array
         */
        public function getChildIndexes() {}
        public function hasChildIndex(int $index) {}
        /**
         * Build a regex match string for all parents
         *
         * @return string
         */
        public function getEditableMatchString() : string {}
    }

}

namespace Pimcore\Document\Tag\NamingStrategy\Migration\Analyze\Exception {
    class LogicException extends \logicexception {}

    class BuildEditableException extends \runtimeexception {
        /**
         * @var string
         */
        private $name;
        /**
         * @var string
         */
        private $type;
        /**
         * @var \LogicException[]
         */
        private $errors;
        /**
         * @var mixed
         */
        private $elementData;
        /**
         * @var bool
         */
        private $ignoreElement;

        public static function create(string $name, string $type, string $message, array $errors, $elementData = null, self $previous = null) : self {}
        public static function fromPrevious(self $previous, string $message = null) : self {}
        public function setName(string $name) {}
        /**
         * @return string
         */
        public function getName() : string {}
        public function setType(string $type) {}
        /**
         * @return string
         */
        public function getType() : string {}
        public function setErrors(array $errors) {}
        /**
         * @return \LogicException[]
         */
        public function getErrors() : array {}
        /**
         * @return mixed
         */
        public function getElementData() {}
        public function setElementData($elementData) {}
        /**
         * @return bool
         */
        public function getIgnoreElement() : bool {}
        public function setIgnoreElement(bool $ignoreElement) {}
    }

}

namespace Pimcore\Document\Tag\NamingStrategy\Migration\Exception {
    class NameMappingException extends \runtimeexception {
        /**
         * @var bool
         */
        private $showMessage;

        public function __construct(string $message, int $code = 1, \Throwable $previous = null) {}
        public function setShowMessage(bool $showMessage) {}
        public function getShowMessage() : bool {}
    }

}

namespace Pimcore\Document\Tag\Exception {
    class NotFoundException extends \runtimeexception {}

}

namespace Pimcore\Document\Tag\Block {
    /**
     * Keeps track of the current block nesting level and index (will be used from
     * editables to build their hierarchical tag name).
     *
     * On sub requests, a new BlockState is added to the state stack which is valid
     * for the sub request.
     */
    final class BlockState implements \jsonserializable {
        /**
         * @var BlockName[]
         */
        private $blocks;
        /**
         * @var int[]
         */
        private $indexes;

        /**
         * @return BlockName[]
         */
        public function getBlocks() : array {}
        public function hasBlocks() : bool {}
        public function pushBlock(BlockName $block) {}
        public function popBlock() : BlockName {}
        public function clearBlocks() {}
        /**
         * @return int[]
         */
        public function getIndexes() : array {}
        public function hasIndexes() : bool {}
        public function pushIndex(int $index) {}
        public function popIndex() : int {}
        public function clearIndexes() {}
        /**
         * @inheritDoc
         */
        public function jsonSerialize() {}
    }

    /**
     * Simple value object containing both name and real name of
     * a block.
     */
    final class BlockName implements \jsonserializable {
        /**
         * @var string
         */
        private $name;
        /**
         * @var string
         */
        private $realName;

        public function __construct(string $name, string $realName) {}
        public static function createFromNames(string $name, string $realName) : BlockName {}
        public static function createFromTag(Tag $tag) : BlockName {}
        /**
         * @return string
         */
        public function getName() : string {}
        /**
         * @return string
         */
        public function getRealName() : string {}
        /**
         * @inheritDoc
         */
        public function jsonSerialize() {}
    }

    /**
     * Handles block state (current block level, current block index). This is the
     * data which previously was handled in Registry pimcore_tag_block_current and
     * pimcore_tag_block_numeration.
     */
    final class BlockStateStack implements \countable {
        /**
         * @var BlockState[]
         */
        private $states;

        public function __construct() {}
        public function push(BlockState $blockState = null) {}
        /**
         * Removes current state from the stack
         *
         * @return BlockState
         */
        public function pop() : BlockState {}
        /**
         * Returns current state
         *
         * @return BlockState
         */
        public function getCurrentState() : BlockState {}
        public function count() : int {}
    }

}

namespace Pimcore\Templating {
    /**
     * Symfony PHP engine with pimcore additions:
     *
     *  - property access - $this->variable and $this->helper()
     *  - helper brokers integrate other view helpers (ZF) on __call
     *  - tag integration
     *
     * Defined in \Pimcore\Templating\HelperBroker\HelperShortcuts
     *
     * @method string getLocale()
     * @method Request getRequest()
     * @method SlotsHelper slots()
     * @method string path($name, $parameters = array(), $relative = false)
     * @method string url($name, $parameters = array(), $schemeRelative = false)
     * @method string t($key, $parameters = [], $domain = null, $locale = null)
     *
     * Symfony core helpers
     * @method ActionsHelper actions()
     * @method AssetsHelper assets()
     * @method CodeHelper code()
     * @method FormHelper form()
     * @method RequestHelper request()
     * @method RouterHelper router()
     * @method SecurityHelper security()
     * @method SessionHelper session()
     * @method StopwatchHelper stopwatch()
     * @method TranslatorHelper translator()
     *
     * Pimcore helpers
     * @method string action($action, $controller, $module, array $params = [])
     * @method Cache cache($name, $lifetime = null, $force = false)
     * @method DeviceDetector device($default = null)
     * @method array getAllParams()
     * @method array breachAttackRandomContent()
     * @method mixed getParam($key, $default = null)
     * @method Glossary glossary()
     * @method Container placeholder($placeholderName)
     * @method HeadLink headLink(array $attributes = null, $placement = Container::APPEND)
     * @method HeadMeta headMeta($content = null, $keyValue = null, $keyType = 'name', $modifiers = array(), $placement = Container::APPEND)
     * @method HeadScript headScript($mode = HeadScript::FILE, $spec = null, $placement = 'APPEND', array $attrs = array(), $type = 'text/javascript')
     * @method HeadStyle headStyle($content = null, $placement = 'APPEND', $attributes = array())
     * @method HeadTitle headTitle($title = null, $setType = null)
     * @method string inc($include, array $params = [], $cacheEnabled = true, $editmode = null)
     * @method InlineScript inlineScript($mode = HeadScript::FILE, $spec = null, $placement = 'APPEND', array $attrs = array(), $type = 'text/javascript')
     * @method WebLink webLink()
     * @method Navigation navigation()
     * @method Config|mixed websiteConfig($key = null, $default = null)
     * @method string pimcoreUrl(array $urlOptions = [], $name = null, $reset = false, $encode = true, $relative = false)
     * @method string translate($key, $parameters = [], $domain = null, $locale = null)
     *
     * Pimcore editables
     * @method Tag\Area area($name, $options = [])
     * @method Tag\Areablock areablock($name, $options = [])
     * @method Tag\Block block($name, $options = [])
     * @method Tag\Checkbox checkbox($name, $options = [])
     * @method Tag\Date date($name, $options = [])
     * @method Tag\Embed embed($name, $options = [])
     * @method Tag\Relation relation($name, $options = [])
     * @method Tag\Image image($name, $options = [])
     * @method Tag\Input input($name, $options = [])
     * @method Tag\Link link($name, $options = [])
     * @method Tag\Relations relations($name, $options = [])
     * @method Tag\Multiselect multiselect($name, $options = [])
     * @method Tag\Numeric numeric($name, $options = [])
     * @method Tag\Pdf pdf($name, $options = [])
     * @method Tag\Renderlet renderlet($name, $options = [])
     * @method Tag\Select select($name, $options = [])
     * @method Tag\Snippet snippet($name, $options = [])
     * @method Tag\Table table($name, $options = [])
     * @method Tag\Textarea textarea($name, $options = [])
     * @method Tag\Video video($name, $options = [])
     * @method Tag\Wysiwyg wysiwyg($name, $options = [])
     * @method Tag\Scheduledblock scheduledblock($name, $options = [])
     *
     * @property Document $document
     * @property bool $editmode
     * @property GlobalVariables $app
     */
    class PhpEngine extends \symfony\bundle\frameworkbundle\templating\phpengine {
        const PARAM_NO_PARENT = '_no_parent';

        /**
         * @var HelperBrokerInterface[]
         */
        protected $helperBrokers;
        /**
         * @var ViewModelInterface[]
         */
        protected $viewModels;

        public function addHelperBroker(HelperBrokerInterface $helperBroker) {}
        protected function evaluate(Storage $template, array $parameters = [ ]) {}
        public function template($name, array $parameters = [ ]) {}
        /**
         * Get the current view model
         *
         * @return ViewModelInterface
         */
        public function getViewModel() {}
        public function getViewParameter($name, $default = null) {}
        public function __get($name) {}
        public function __isset($name) {}
        public function __set($name, $value) {}
        public function __call($method, $arguments) {}
    }

    class GlobalVariables extends \symfony\bundle\frameworkbundle\templating\globalvariables {
        /**
         * @return ContainerInterface
         */
        public function getContainer() {}
    }

    /**
     * Times the time spent to render a template. This is the same class as the core TimedPhpEngine, but extends our custom
     * PHP engine.
     */
    class TimedPhpEngine extends \pimcore\templating\phpengine {
        /**
         * @var Stopwatch
         */
        protected $stopwatch;

        public function __construct(TemplateNameParserInterface $parser, ContainerInterface $container, LoaderInterface $loader, Stopwatch $stopwatch, GlobalVariables $globals = null) {}
/** @var TemplateReference $name */
        public function render(/** @var TemplateReference $name */
$name, /** @var TemplateReference $name */
array $parameters = [ ]) {}
    }

}

namespace Pimcore\Templating\Vars {
    interface TemplateVarsProviderInterface {
        function addTemplateVars(Request $request, array $templateVars) ;
    }

}

namespace Pimcore\Templating\Renderer {
    class IncludeRenderer {
        /**
         * @var ActionRenderer
         */
        protected $actionRenderer;
        /**
         * @var DocumentTargetingConfigurator
         */
        private $targetingConfigurator;

        public function __construct(ActionRenderer $actionRenderer, DocumentTargetingConfigurator $targetingConfigurator) {}
        public function render($include, array $params = [ ], $editmode = false, $cacheEnabled = true) {}
        protected function renderAction(PageSnippet $include, $params) {}
        protected function modifyEditmodeContent(PageSnippet $include, $content) {}
    }

    class ActionRenderer {
        /**
         * @var ActionsHelper
         */
        protected $actionsHelper;
        /**
         * @var ConfigNormalizer
         */
        protected $configNormalizer;

        public function __construct(ActionsHelper $actionsHelper, ConfigNormalizer $configNormalizer) {}
        public function render($uri, array $options = [ ]) {}
        public function createControllerReference($bundle, $controller, $action, array $attributes = [ ], array $query = [ ]) {}
        public function createDocumentReference(Document\PageSnippet $document, array $attributes = [ ], array $query = [ ]) {}
        public function addDocumentAttributes(Document\PageSnippet $document, array $attributes = [ ], string $context = PimcoreContextResolver::CONTEXT_DEFAULT) {}
    }

    class TagRenderer implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * @var TagLoaderInterface
         */
        protected $tagLoader;
        /**
         * @var EditmodeResolver
         */
        protected $editmodeResolver;

        public function __construct(TagLoaderInterface $tagLoader, EditmodeResolver $editmodeResolver) {}
        public function tagExists($type) {}
        public function getTag(PageSnippet $document, $type, $inputName, array $options = [ ], bool $editmode = null) {}
        public function render(PageSnippet $document, $type, $inputName, array $options = [ ], bool $editmode = null) {}
    }

}

namespace Pimcore\Templating\HelperBroker {
    /**
     * Shortcuts available as $this->method() on the engine
     */
    class HelperShortcuts implements \pimcore\templating\helperbroker\helperbrokerinterface {
        /**
         * @var RequestHelper
         */
        protected $requestHelper;
        /**
         * Supported methods
         *
         * @var array
         */
        protected $shortcuts;

        public function __construct(RequestHelper $requestHelper) {}
        public function supports(PhpEngine $engine, $method) {}
        public function helper(PhpEngine $engine, $method, array $arguments) {}
        /**
         * @return string
         */
        protected function getLocale() {}
        /**
         * @return Request
         */
        protected function getRequest() {}
/** @var RouterHelper $helper */
        protected function url(/** @var RouterHelper $helper */
PhpEngine $engine, /** @var RouterHelper $helper */
array $arguments) {}
/** @var RouterHelper $helper */
        protected function path(/** @var RouterHelper $helper */
PhpEngine $engine, /** @var RouterHelper $helper */
array $arguments) {}
/** @var Translate $helper */
        protected function t(/** @var Translate $helper */
PhpEngine $engine, /** @var Translate $helper */
array $arguments) {}
    }

    class DocumentTag implements \pimcore\templating\helperbroker\helperbrokerinterface {
        /**
         * @var TagRenderer
         */
        protected $tagRenderer;

        public function __construct(TagRenderer $tagRenderer) {}
        public function supports(PhpEngine $engine, $method) {}
        public function helper(PhpEngine $engine, $method, array $arguments) {}
    }

    class DocumentMethod implements \pimcore\templating\helperbroker\helperbrokerinterface {
        public function supports(PhpEngine $engine, $method) {}
        public function helper(PhpEngine $engine, $method, array $arguments) {}
    }

    class TemplatingHelper implements \pimcore\templating\helperbroker\helperbrokerinterface {
        public function supports(PhpEngine $engine, $method) {}
        public function helper(PhpEngine $engine, $method, array $arguments) {}
    }


    interface HelperBrokerInterface {
        function supports(PhpEngine $engine, $method) ;
        function helper(PhpEngine $engine, $method, array $arguments) ;
    }

}

namespace Pimcore\Templating\Model {
    class ViewModel implements \pimcore\templating\model\viewmodelinterface {
        /**
         * @var ParameterBag
         */
        protected $parameters;

        public function __construct(array $parameters = [ ]) {}
        public function initialize(array $parameters = [ ]) {}
        /**
         * @return ParameterBag
         */
        public function getParameters() {}
        /**
         * @return array
         */
        public function getAllParameters() {}
        public function get($key, $default = null) {}
        public function has($key) {}
        public function __get($name) {}
        public function __set($name, $value) {}
        public function __isset($name) {}
        /**
         * @return \ArrayIterator
         */
        public function getIterator() {}
        /**
         * @return int
         */
        public function count() {}
        public function offsetExists($offset) {}
        public function offsetGet($offset) {}
        public function offsetSet($offset, $value) {}
        public function offsetUnset($offset) {}
        /**
         * @inheritDoc
         */
        public function jsonSerialize() {}
    }


    interface ViewModelInterface extends \countable {
        /**
         * @return ParameterBag
         */
        function getParameters() ;
        function get($key, $default = null) ;
        function has($key) ;
    }

}

namespace Pimcore\Templating\Helper {
    class InlineScript extends \pimcore\templating\helper\headscript {
        /**
         * Registry key for placeholder
         *
         * @var string
         */
        protected $_regKey;

    }

    class GetParam extends \symfony\component\templating\helper\helper {
        /**
         * @var RequestHelper
         */
        protected $requestHelper;

        public function __construct(RequestHelper $requestHelper) {}
        /**
         * @inheritDoc
         */
        public function getName() {}
        public function __invoke($name, $default = null) {}
    }

    /**
     * HeadLink
     *
     * @see        http://www.w3.org/TR/xhtml1/dtds.html
     *
     * @method $this appendAlternate($href, $type, $title, $extras)
     * @method $this appendStylesheet($href, $media = 'screen', $conditionalStylesheet = false, array $extras = array())
     * @method $this offsetSetAlternate($index, $href, $type, $title, $extras)
     * @method $this offsetSetStylesheet($index, $href, $media = 'screen', $conditionalStylesheet = false, array $extras = array())
     * @method $this prependAlternate($href, $type, $title, $extras)
     * @method $this prependStylesheet($href, $media = 'screen', $conditionalStylesheet = false, array $extras = array())
     * @method $this setAlternate($href, $type, $title, $extras)
     * @method $this setStylesheet($href, $media = 'screen', $conditionalStylesheet = false, array $extras = array())
     */
    class HeadLink extends \pimcore\templating\helper\placeholder\cachebusteraware {
    use \pimcore\templating\helper\traits\weblinkstrait;

        /**
         * $_validAttributes
         *
         * @var array
         */
        protected $_itemKeys;
        /**
         * @var string registry key
         */
        protected $_regKey;
        /**
         * Default attributes for generated WebLinks (HTTP/2 push).
         *
         * @var array
         */
        protected $webLinkAttributes;

        public function __construct(ContainerService $containerService, WebLink $webLinkHelper) {}
        /**
         * @inheritDoc
         */
        public function getName() {}
        public function __invoke(array $attributes = null, $placement = Container::APPEND) {}
        public function __call($method, $args) {}
        protected function _isValid($value) {}
        public function append($value) {}
        public function offsetSet($index, $value) {}
        public function prepend($value) {}
        public function set($value) {}
        public function itemToString(\stdClass $item) {}
        public function toString($indent = null) {}
        /**
         * prepares entries with cache buster prefix
         */
        protected function prepareEntries() {}
        public function createData(array $attributes) {}
        public function createDataStylesheet(array $args) {}
        protected function _isDuplicateStylesheet($uri) {}
        public function createDataAlternate(array $args) {}
        protected function _applyExtras($attributes) {}
    }

    class HeadTitle extends \pimcore\templating\helper\placeholder\abstracthelper {
        /**
         * Registry key for placeholder
         *
         * @var string
         */
        protected $_regKey;
        /**
         * Default title rendering order (i.e. order in which each title attached)
         *
         * @var string
         */
        protected $_defaultAttachOrder;

        /**
         * @inheritDoc
         */
        public function getName() {}
        public function __invoke($title = null, $setType = null) {}
        public function setDefaultAttachOrder($setType) {}
        /**
         * Get the default attach order, if any.
         *
         * @return mixed
         */
        public function getDefaultAttachOrder() {}
        public function toString($indent = null, $locale = null) {}
        /**
         * Get container content without indentation, prefix or postfix
         *
         * @return string
         */
        public function getRawContent() {}
    }

    class PimcoreUrl extends \symfony\component\templating\helper\helper {
        /**
         * @var UrlGeneratorInterface
         */
        protected $generator;
        /**
         * @var RequestHelper
         */
        protected $requestHelper;

        public function __construct(UrlGeneratorInterface $generator, RequestHelper $requestHelper) {}
        public function __invoke(array $urlOptions = [ ], $name = null, $reset = false, $encode = true, $relative = false) {}
/** @var Concrete $object */
        protected function generateUrl(/** @var Concrete $object */
$name = null, /** @var Concrete $object */
$parameters = [ ], /** @var Concrete $object */
$referenceType = UrlGeneratorInterface::ABSOLUTE_PATH, /** @var Concrete $object */
$encode = true) {}
        /**
         * Tries to get the current route name from current or master request
         *
         * @return string|null
         */
        protected function getCurrentRoute() {}
        /**
         * Returns the canonical name of this helper.
         *
         * @return string The canonical name
         */
        public function getName() {}
    }

    class Action extends \symfony\component\templating\helper\helper {
        /**
         * @var ActionRenderer
         */
        protected $actionRenderer;
        /**
         * @var DocumentTargetingConfigurator
         */
        private $targetingConfigurator;
        /**
         * @var array
         */
        private $routingDefaults;

        public function __construct(ActionRenderer $actionRenderer, DocumentTargetingConfigurator $targetingConfigurator) {}
        public function setRoutingDefaults(array $routingDefaults) {}
        /**
         * @inheritDoc
         */
        public function getName() {}
        public function __invoke($action, $controller, $module = null, array $attributes = [ ], array $query = [ ], array $options = [ ]) {}
    }

    class WebsiteConfig extends \symfony\component\templating\helper\helper {
        /**
         * @var RequestHelper
         */
        protected $requestHelper;

        public function __construct(RequestHelper $requestHelper) {}
        public function getName() {}
        public function __invoke($key = null, $default = null) {}
    }

    class GetAllParams extends \symfony\component\templating\helper\helper {
        /**
         * @var RequestHelper
         */
        protected $requestHelper;

        public function __construct(RequestHelper $requestHelper) {}
        /**
         * @inheritDoc
         */
        public function getName() {}
        /**
         * @return array
         */
        public function __invoke() {}
    }

    class Cache extends \symfony\component\templating\helper\helper {
        /**
         * @var string
         */
        protected $key;
        /**
         * @var bool[]
         */
        protected $captureEnabled;
        /**
         * @var bool
         */
        protected $force;
        /**
         * @var int
         */
        protected $lifetime;
        /**
         * @var EditmodeResolver
         */
        protected $editmodeResolver;

        public function __construct(EditmodeResolver $editmodeResolver) {}
        /**
         * @inheritDoc
         */
        public function getName() {}
        public function __invoke($name, $lifetime = null, $force = false) {}
        /**
         * @return bool
         */
        public function start() {}
        /**
         *  @return void
         */
        public function end() {}
        /**
         *  @return void
         */
        public function stop() {}
        protected function outputContent($content, string $key, bool $isLoadedFromCache) {}
        protected function saveContentToCache($content, string $key, array $tags) {}
    }

    /**
     * @method $this appendHttpEquiv($keyValue, $content, $conditionalHttpEquiv=[])
     * @method $this appendName($keyValue, $content, $conditionalName=[])
     * @method $this appendProperty($property, $content, $modifiers=[])
     * @method $this offsetSetHttpEquiv($index, $keyValue, $content, $conditionalHttpEquiv=[])
     * @method $this offsetSetName($index, $keyValue, $content, $conditionalName=[])
     * @method $this offsetSetProperty($index, $property, $content, $modifiers=[])
     * @method $this prependHttpEquiv($keyValue, $content, $conditionalHttpEquiv=[])
     * @method $this prependName($keyValue, $content, $conditionalName=[])
     * @method $this prependProperty($property, $content, $modifiers=[])
     * @method $this setHttpEquiv($keyValue, $content, $modifiers=[])
     * @method $this setName($keyValue, $content, $modifiers=[])
     * @method $this setProperty($property, $content, $modifiers=[])
     */
    class HeadMeta extends \pimcore\templating\helper\placeholder\abstracthelper {
    use \pimcore\templating\helper\traits\textutilstrait;

        /**
         * Types of attributes
         *
         * @var array
         */
        protected $_typeKeys;
        protected $_requiredKeys;
        protected $_modifierKeys;
        protected $rawItems;
        /**
         * @var string registry key
         */
        protected $_regKey;

        public function __construct(ContainerService $containerService) {}
        /**
         * @inheritDoc
         */
        public function getName() {}
        public function __invoke($content = null, $keyValue = null, $keyType = 'name', $modifiers = [ ], $placement = Container::APPEND) {}
        protected function _normalizeType($type) {}
        public function getItem($type, $keyValue) {}
        public function __call($method, $args) {}
        protected function _isValid($item) {}
        public function append($value) {}
        public function offsetSet($index, $value) {}
        public function offsetUnset($index) {}
        public function prepend($value) {}
        public function set($value) {}
        public function itemToString(\stdClass $item) {}
        public function toString($indent = null) {}
        public function createData($type, $typeValue, $content, array $modifiers) {}
        public function addRaw($html) {}
        /**
         * @return array
         */
        public function getRaw() {}
        public function setDescription($string, $length = null, $suffix = '') {}
    }

    /**
     * @method $this appendFile($src, $type = 'text/javascript', array $attrs = array())
     * @method $this appendScript($script, $type = 'text/javascript', array $attrs = array())
     * @method $this offsetSetFile($index, $src, $type = 'text/javascript', array $attrs = array())
     * @method $this offsetSetScript($index, $script, $type = 'text/javascript', array $attrs = array())
     * @method $this prependFile($src, $type = 'text/javascript', array $attrs = array())
     * @method $this prependScript($script, $type = 'text/javascript', array $attrs = array())
     * @method $this setFile($src, $type = 'text/javascript', array $attrs = array())
     * @method $this setScript($script, $type = 'text/javascript', array $attrs = array())
     */
    class HeadScript extends \pimcore\templating\helper\placeholder\cachebusteraware {
    use \pimcore\templating\helper\traits\weblinkstrait;

        const SCRIPT = 'SCRIPT';
        const FILE = 'FILE';

        /**
         * Registry key for placeholder
         *
         * @var string
         */
        protected $_regKey;
        /**
         * Are arbitrary attributes allowed?
         *
         * @var bool
         */
        protected $_arbitraryAttributes;
        protected $_captureLock;
        protected $_captureScriptType;
        protected $_captureScriptAttrs;
        protected $_captureType;
        /**
         * Optional allowed attributes for script tag
         *
         * @var array
         */
        protected $_optionalAttributes;
        /**
         * Required attributes for script tag
         *
         * @var string
         */
        protected $_requiredAttributes;
        /**
         * Whether or not to format scripts using CDATA; used only if doctype
         * helper is not accessible
         *
         * @var bool
         */
        public $useCdata;
        /**
         * Default attributes for generated WebLinks (HTTP/2 push).
         *
         * @var array
         */
        protected $webLinkAttributes;

        public function __construct(ContainerService $containerService, WebLink $webLinkHelper) {}
        /**
         * @inheritDoc
         */
        public function getName() {}
        public function __invoke($mode = self::FILE, $spec = null, $placement = 'APPEND', array $attrs = [ ], $type = 'text/javascript') {}
        public function captureStart($captureType = Container::APPEND, $type = 'text/javascript', $attrs = [ ]) {}
        /**
         * End capture action and store
         *
         * @return void
         */
        public function captureEnd() {}
        public function __call($method, $args) {}
        protected function _isDuplicate($file) {}
        protected function _isValid($value) {}
        public function append($value) {}
        public function prepend($value) {}
        public function set($value) {}
        public function offsetSet($index, $value) {}
        public function setAllowArbitraryAttributes($flag) {}
        /**
         * Are arbitrary attributes allowed?
         *
         * @return bool
         */
        public function arbitraryAttributesAllowed() {}
        public function itemToString($item, $indent, $escapeStart, $escapeEnd) {}
        public function toString($indent = null) {}
        protected function prepareEntries() {}
        public function createData($type, array $attributes, $content = null) {}
    }

    class Translate extends \symfony\component\templating\helper\helper {
        /**
         * @var TranslatorInterface
         */
        protected $translator;
        /**
         * @var string
         */
        protected $domain;

        public function __construct(TranslatorInterface $translator) {}
        /**
         * Returns the canonical name of this helper.
         *
         * @return string The canonical name
         */
        public function getName() {}
        public function __invoke($key, $parameters = [ ], $domain = null, $locale = null) {}
        public function setDomain($domain) {}
    }

    /**
     * Helper for passing data between otherwise segregated Views. It's called
     * Placeholder to make its typical usage obvious, but can be used just as easily
     * for non-Placeholder things. That said, the support for this is only
     * guaranteed to effect subsequently rendered templates, and of course Layouts.
     */
    class Placeholder extends \pimcore\templating\helper\placeholder\abstracthelper {
        /**
         * Registry key under which container registers itself
         *
         * @var string
         */
        protected $_regKey;
        /**
         * @var Container[]
         */
        protected $containers;

        public function getName() {}
        public function __invoke($containerName = null) {}
    }

    class Inc extends \symfony\component\templating\helper\helper {
        /**
         * @var IncludeRenderer
         */
        protected $includeRenderer;
        /**
         * @var EditmodeResolver
         */
        protected $editmodeResolver;

        public function __construct(IncludeRenderer $includeRenderer, EditmodeResolver $editmodeResolver) {}
        /**
         * @inheritDoc
         */
        public function getName() {}
        public function __invoke($include, array $params = [ ], $cacheEnabled = true, $editmode = null) {}
    }

    class Device extends \symfony\component\templating\helper\helper {
        public function __invoke($default = null) {}
        /**
         * Returns the canonical name of this helper.
         *
         * @return string The canonical name
         */
        public function getName() {}
    }

    class Glossary extends \symfony\component\templating\helper\helper {
        /**
         * @var \Pimcore\Tool\Glossary\Processor
         */
        private $glossaryProcessor;

        public function __construct(Processor $glossaryProcessor) {}
        /**
         * @inheritDoc
         */
        public function getName() {}
        public function start() {}
        public function stop(array $options = [ ]) {}
    }

    /**
     * @method $this appendStyle($content, array $attributes = array())
     * @method $this offsetSetStyle($index, $content, array $attributes = array())
     * @method $this prependStyle($content, array $attributes = array())
     * @method $this setStyle($content, array $attributes = array())
     */
    class HeadStyle extends \pimcore\templating\helper\placeholder\abstracthelper {
        /**
         * Registry key for placeholder
         *
         * @var string
         */
        protected $_regKey;
        /**
         * Allowed optional attributes
         *
         * @var array
         */
        protected $_optionalAttributes;
        /**
         * Allowed media types
         *
         * @var array
         */
        protected $_mediaTypes;
        /**
         * Capture type and/or attributes (used for hinting during capture)
         *
         * @var string
         */
        protected $_captureAttrs;
        /**
         * Capture lock
         *
         * @var bool
         */
        protected $_captureLock;
        /**
         * Capture type (append, prepend, set)
         *
         * @var string
         */
        protected $_captureType;

        public function __construct(ContainerService $containerService) {}
        /**
         * @inheritDoc
         */
        public function getName() {}
        public function __invoke($content = null, $placement = 'APPEND', $attributes = [ ]) {}
        public function __call($method, $args) {}
        protected function _isValid($value) {}
        public function append($value) {}
        public function offsetSet($index, $value) {}
        public function prepend($value) {}
        public function set($value) {}
        public function captureStart($type = Container::APPEND, $attrs = null) {}
        /**
         * End capture action and store
         *
         * @return void
         */
        public function captureEnd() {}
        public function itemToString(\stdClass $item, $indent) {}
        public function toString($indent = null) {}
        public function createData($content, array $attributes) {}
    }

    class Exception extends \runtimeexception {}

    class WebLink extends \symfony\component\templating\helper\helper {
        /**
         * @var WebLinkExtension
         */
        private $webLinkExtension;

        public function __construct(WebLinkExtension $webLinkExtension) {}
        public function getName() {}
        public function link($uri, $rel, array $attributes = [ ]) {}
        public function preload($uri, array $attributes = [ ]) {}
        public function dnsPrefetch($uri, array $attributes = [ ]) {}
        public function preconnect($uri, array $attributes = [ ]) {}
        public function prefetch($uri, array $attributes = [ ]) {}
        public function prerender($uri, array $attributes = [ ]) {}
    }

    class BreachAttackRandomContent extends \symfony\component\templating\helper\helper {
        /**
         * @inheritDoc
         */
        public function getName() {}
        /**
         * @return string
         */
        public function __invoke() {}
    }

    /**
     * @method MenuRenderer menu()
     * @method Breadcrumbs breadcrumbs()
     */
    class Navigation extends \symfony\component\templating\helper\helper {
        /**
         * @var Builder
         */
        private $builder;
        /**
         * @var ContainerInterface
         */
        private $rendererLocator;

        public function __construct(Builder $builder, ContainerInterface $rendererLocator) {}
        /**
         * @inheritDoc
         */
        public function getName() {}
        public function buildNavigation(Document $activeDocument, Document $navigationRootDocument = null, string $htmlMenuPrefix = null, callable $pageCallback = null, $cache = true) : Container {}
        public function getRenderer(string $alias) : RendererInterface {}
        public function render(Container $container, string $rendererName = 'menu', string $renderMethod = 'render', $rendererArguments) {}
        public function __call($method, array $arguments = [ ]) : RendererInterface {}
    }


    interface TemplatingEngineAwareHelperInterface {
        function setTemplatingEngine(PhpEngine $engine) ;
    }

}

namespace Pimcore\Templating\Helper\Traits {
    trait WebLinksTrait {
        /**
         * @var WebLink
         */
        protected $webLinkHelper;
        /**
         * Whether to use WebLinks (HTTP/2 push) for every item. Can be
         * overridden on an item level.
         *
         * @var bool
         */
        protected $webLinksEnabled;
        public function webLinksEnabled(bool $enabled = null) {}
        public function enableWebLinks() : self {}
        public function getWebLinkAttributes() : array {}
        public function setWebLinkAttributes(array $webLinkAttributes) {}
        protected function handleWebLink(\stdClass $item, string $source, array $itemAttributes) {}
    }

    trait TemplatingEngineAwareHelperTrait {
        /**
         * @var PhpEngine
         */
        protected $templatingEngine;
        public function setTemplatingEngine(PhpEngine $engine) {}
    }

    trait TextUtilsTrait {
        public function normalizeString($string, $length = null, $suffix = '') {}
        public function getStringAsOneLine($string) {}
        public function truncateString($string, $length) {}
    }

}

namespace Pimcore\Templating\Helper\Navigation\Exception {
    class RendererNotFoundException extends \invalidargumentexception {
        public static function create(string $name) : self {}
    }

    class InvalidRendererException extends \logicexception {
        public static function create(string $name, $renderer) : self {}
    }

}

namespace Pimcore\Templating\Helper\Placeholder {
    class Container extends \arrayobject {
        const PREPEND = 'PREPEND';
        const SET = 'SET';
        const APPEND = 'APPEND';

        /**
         * What text to prefix the placeholder with when rendering
         *
         * @var string
         */
        protected $_prefix;
        /**
         * What text to append the placeholder with when rendering
         *
         * @var string
         */
        protected $_postfix;
        /**
         * What string to use between individual items in the placeholder when rendering
         *
         * @var string
         */
        protected $_separator;
        /**
         * What string to use as the indentation of output, this will typically be spaces. Eg: '    '
         *
         * @var string
         */
        protected $_indent;
        /**
         * Whether or not we're already capturing for this given container
         *
         * @var bool
         */
        protected $_captureLock;
        /**
         * What type of capture (overwrite (set), append, prepend) to use
         *
         * @var string
         */
        protected $_captureType;
        /**
         * Key to which to capture content
         *
         * @var string
         */
        protected $_captureKey;

        public function set($value) {}
        public function prepend($value) {}
        /**
         * Retrieve container value
         *
         * If single element registered, returns that element; otherwise,
         * serializes to array.
         *
         * @return mixed
         */
        public function getValue() {}
        public function setPrefix($prefix) {}
        /**
         * Retrieve prefix
         *
         * @return string
         */
        public function getPrefix() {}
        public function setPostfix($postfix) {}
        /**
         * Retrieve postfix
         *
         * @return string
         */
        public function getPostfix() {}
        public function setSeparator($separator) {}
        /**
         * Retrieve separator
         *
         * @return string
         */
        public function getSeparator() {}
        public function setIndent($indent) {}
        /**
         * Retrieve indentation
         *
         * @return string
         */
        public function getIndent() {}
        public function getWhitespace($indent) {}
        public function captureStart($type = self::APPEND, $key = null) {}
        /**
         * End content capture
         *
         * @return void
         */
        public function captureEnd() {}
        /**
         * Get keys
         *
         * @return array
         */
        public function getKeys() {}
        /**
         * Next Index
         *
         * as defined by the PHP manual
         *
         * @return int
         */
        public function nextIndex() {}
        public function toString($indent = null) {}
        /**
         * Serialize object to string
         *
         * @return string
         */
        public function __toString() {}
    }

    /**
     * Registry for placeholder containers
     */
    class ContainerService {
        /**
         * @var int
         */
        private $currentIndex;
        /**
         * Placeholder containers
         *
         * @var array
         */
        protected $_items;

        public function __construct() {}
        public function pushIndex() {}
        public function popIndex() {}
        public function createContainer($key, array $value = [ ]) {}
        public function getContainer($key) {}
        public function containerExists($key) {}
        public function setContainer($key, Container $container) {}
        public function deleteContainer($key) {}
    }

    /**
     * @method void set(mixed $value)
     * @method void prepend(mixed $value)
     * @method void append(mixed $value)
     * @method Container setPrefix(string $prefix)
     * @method string getPrefix()
     * @method Container setPostfix(string $postfix)
     * @method string getPostfix()
     * @method Container setSeparator(string $separator)
     * @method string getSeparator()
     * @method Container setIndent(string|int $intent)
     * @method string|int getIndent()
     * @method string getWhitespace(string|int $indent)
     * @method void captureStart($type = Container::APPEND, $key = null)
     * @method void captureEnd()
     */
    abstract class AbstractHelper extends \symfony\component\templating\helper\helper implements \countable, \arrayaccess, \iteratoraggregate {
        /**
         * @var ContainerService
         */
        protected $containerService;
        /**
         * @var Container
         */
        protected $_container;
        /**
         * Registry key under which container registers itself
         *
         * @var string
         */
        protected $_regKey;
        /**
         * Flag whether to automatically escape output, must also be
         * enforced in the child class if __toString/toString is overwritten
         *
         * @var bool
         */
        protected $_autoEscape;

        public function __construct(ContainerService $containerService) {}
        public function setAutoEscape($autoEscape = true) {}
        /**
         * Return whether autoEscaping is enabled or disabled
         *
         * return bool
         */
        public function getAutoEscape() {}
        protected function _escape($string) {}
        public function setContainer(Container $container) {}
        /**
         * Retrieve placeholder container
         *
         * @return Container
         */
        public function getContainer() {}
        public function __set($key, $value) {}
        public function __get($key) {}
        public function __isset($key) {}
        public function __unset($key) {}
        public function __call($method, $args) {}
        /**
         * String representation
         *
         * @return string
         */
        public function toString() {}
        /**
         * Cast to string representation
         *
         * @return string
         */
        public function __toString() {}
        /**
         * Countable
         *
         * @return int
         */
        public function count() {}
        public function offsetExists($offset) {}
        public function offsetGet($offset) {}
        public function offsetSet($offset, $value) {}
        public function offsetUnset($offset) {}
        /**
         * IteratorAggregate: get Iterator
         *
         * @return \Iterator
         */
        public function getIterator() {}
    }

    /**
     * Class CacheBusterAware
     *
     * adds cache buster functionality to placeholder helper
     */
    abstract class CacheBusterAware extends \pimcore\templating\helper\placeholder\abstracthelper {
        /**
         * @var bool
         */
        protected $cacheBuster;

        /**
         * prepares entries with cache buster prefix
         */
        abstract protected function prepareEntries() ;
        /**
         * @return bool
         */
        public function isCacheBuster() {}
        public function setCacheBuster($cacheBuster) {}
    }

}

namespace Pimcore\Image {
    abstract class Adapter {
        /**
         * @var int
         */
        protected $width;
        /**
         * @var int
         */
        protected $height;
        /**
         * @var bool
         */
        protected $reinitializing;
        /**
         * @var array
         */
        protected $tmpFiles;
        /**
         * @var bool
         */
        protected $modified;
        /**
         * @var bool
         */
        protected $isAlphaPossible;
        /**
         * @var bool
         */
        protected $preserveColor;
        /**
         * @var bool
         */
        protected $preserveMetaData;
        /**
         * @var string
         */
        protected $sourceImageFormat;
        /**
         * @var mixed
         */
        protected $resource;

        public function setHeight($height) {}
        /**
         * @return int
         */
        public function getHeight() {}
        public function setWidth($width) {}
        /**
         * @return int
         */
        public function getWidth() {}
        /**
         * @todo: duplication found? (pimcore/lib/Pimcore/Document/Adapter.php::removeTmpFiles)
         */
        protected function removeTmpFiles() {}
        public function colorhex2colorarray($colorhex) {}
        public function resize($width, $height) {}
        public function scaleByWidth($width, $forceResize = false) {}
        public function scaleByHeight($height, $forceResize = false) {}
        public function contain($width, $height, $forceResize = false) {}
        public function cover($width, $height, $orientation = 'center', $forceResize = false) {}
        public function frame($width, $height, $forceResize = false) {}
        public function trim($tolerance) {}
        public function rotate($angle) {}
        public function crop($x, $y, $width, $height) {}
        public function setBackgroundColor($color) {}
        public function setBackgroundImage($image) {}
        public function roundCorners($width, $height) {}
        public function addOverlay($image, $x = 0, $y = 0, $alpha = 100, $composite = 'COMPOSITE_DEFAULT', $origin = 'top-left') {}
        public function addOverlayFit($image, $composite = 'COMPOSITE_DEFAULT') {}
        public function applyMask($image) {}
        public function cropPercent($width, $height, $x, $y) {}
        /**
         * @return self
         */
        public function grayscale() {}
        /**
         * @return self
         */
        public function sepia() {}
        /**
         * @return self
         */
        public function sharpen() {}
        public function mirror($mode) {}
        public function gaussianBlur($radius = 0, $sigma = 1) {}
        public function brightnessSaturation($brightness = 100, $saturation = 100, $hue = 100) {}
        abstract public function load($imagePath, $options = [ ]) ;
        abstract public function save($path, $format = null, $quality = null) ;
        /**
         * @abstract
         */
        abstract protected function destroy() ;
        /**
         * @return string
         */
        abstract public function getContentOptimizedFormat() ;
        abstract public function supportsFormat(string $format, bool $force = false) ;
        public function preModify() {}
        public function postModify() {}
        protected function reinitializeImage() {}
        public function __destruct() {}
        /**
         * @return bool
         */
        public function isVectorGraphic() {}
        /**
         * @return array
         */
        public function getVectorRasterDimensions() {}
        public function setColorspace($type = 'RGB') {}
        public function setModified($modified) {}
        /**
         * @return bool
         */
        public function getModified() {}
        public function setIsAlphaPossible($value) {}
        /**
         * @return bool
         */
        public function isPreserveColor() {}
        public function setPreserveColor($preserveColor) {}
        /**
         * @return bool
         */
        public function isPreserveMetaData() {}
        public function setPreserveMetaData($preserveMetaData) {}
        /**
         * @return mixed
         */
        public function getResource() {}
    }

    class Optimizer implements \pimcore\image\imageoptimizerinterface {
        /**
         * @var OptimizerInterface[]
         */
        private $optimizers;

        public function optimizeImage($path) {}
        public function registerOptimizer(OptimizerInterface $optimizer) {}
        private function createOutputImage($type = null) : string {}
        public static function optimize($path) {}
    }

    class HtmlToImage {
        /**
         * @return bool
         */
        public static function isSupported() {}
        /**
         * @return bool
         */
        public static function getWkhtmltoimageBinary() {}
        public static function convert($url, $outputFile, $screenWidth = 1200, $format = 'png') {}
    }


    interface ImageOptimizerInterface {
        function optimizeImage($path) ;
        function registerOptimizer(OptimizerInterface $optimizer) ;
    }

}

namespace Pimcore\Image\Optimizer {
    final class ZopflipngOptimizer extends \pimcore\image\optimizer\abstractcommandoptimizer {
        /**
         * @var MimeTypeGuesserInterface
         */
        private $mimeTypeGuesser;

        public function __construct() {}
        /**
         * {@inheritdoc}
         */
        protected function getExecutable() : string {}
        protected function getCommand(string $executable, string $input, string $output) : string {}
        public function supports(string $input) : bool {}
    }

    final class CjpegOptimizer extends \pimcore\image\optimizer\abstractcommandoptimizer {
        /**
         * @var MimeTypeGuesserInterface
         */
        private $mimeTypeGuesser;

        public function __construct() {}
        /**
         * {@inheritdoc}
         */
        protected function getExecutable() : string {}
        protected function getCommand(string $executable, string $input, string $output) : string {}
        public function supports(string $input) : bool {}
    }

    final class PngOutOptimizer extends \pimcore\image\optimizer\abstractcommandoptimizer {
        /**
         * @var MimeTypeGuesserInterface
         */
        private $mimeTypeGuesser;

        public function __construct() {}
        /**
         * {@inheritdoc}
         */
        protected function getExecutable() : string {}
        protected function getCommand(string $executable, string $input, string $output) : string {}
        public function supports(string $input) : bool {}
    }

    final class AdvancedPngOptimizer extends \pimcore\image\optimizer\abstractcommandoptimizer {
        /**
         * @var MimeTypeGuesserInterface
         */
        private $mimeTypeGuesser;

        public function __construct() {}
        /**
         * {@inheritdoc}
         */
        protected function getExecutable() : string {}
        protected function getCommand(string $executable, string $input, string $output) : string {}
        public function supports(string $input) : bool {}
    }

    final class JpegoptimOptimizer extends \pimcore\image\optimizer\abstractcommandoptimizer {
        /**
         * @var MimeTypeGuesserInterface
         */
        private $mimeTypeGuesser;

        public function __construct() {}
        /**
         * {@inheritdoc}
         */
        protected function getExecutable() : string {}
        protected function getCommand(string $executable, string $input, string $output) : string {}
        public function supports(string $input) : bool {}
    }

    abstract class AbstractCommandOptimizer implements \pimcore\image\optimizer\optimizerinterface {
        public function optimizeImage(string $input, string $output) : string {}
        /**
         * @return string
         */
        abstract protected function getExecutable() : string ;
        abstract protected function getCommand(string $executable, string $input, string $output) : string ;
    }

    final class PngCrushOptimizer extends \pimcore\image\optimizer\abstractcommandoptimizer {
        /**
         * @var MimeTypeGuesserInterface
         */
        private $mimeTypeGuesser;

        public function __construct() {}
        /**
         * {@inheritdoc}
         */
        protected function getExecutable() : string {}
        protected function getCommand(string $executable, string $input, string $output) : string {}
        public function supports(string $input) : bool {}
    }


    interface OptimizerInterface {
        function optimizeImage(string $input, string $output) : string ;
        function supports(string $input) : bool ;
    }

}

namespace Pimcore\Image\Adapter {
    class GD extends \pimcore\image\adapter {
        /**
         * @var string
         */
        protected $path;
        /**
         * contains imageresource
         *
         * @var mixed
         */
        protected $resource;
        static protected $supportedFormatsCache;

        public function load($imagePath, $options = [ ]) {}
        /**
         * @return string
         */
        public function getContentOptimizedFormat() {}
        public function save($path, $format = null, $quality = null) {}
        /**
         * @return bool
         */
        protected function hasAlphaChannel() {}
        protected function destroy() {}
        protected function createImage($width, $height) {}
        public function resize($width, $height) {}
        public function crop($x, $y, $width, $height) {}
        public function frame($width, $height, $forceResize = false) {}
        public function setBackgroundColor($color) {}
        public function setBackgroundImage($image, $mode = null) {}
        /**
         * @return self
         */
        public function grayscale() {}
        /**
         * @return self
         */
        public function sepia() {}
        public function addOverlay($image, $x = 0, $y = 0, $alpha = 100, $composite = 'COMPOSITE_DEFAULT', $origin = 'top-left') {}
        public function mirror($mode) {}
        public function rotate($angle) {}
        public function supportsFormat(string $format, bool $force = false) {}
    }

    class Imagick extends \pimcore\image\adapter {
        /**
         * @var string
         */
        static protected $RGBColorProfile;
        /**
         * @var string
         */
        static protected $CMYKColorProfile;
        /**
         * @var \Imagick
         */
        protected $resource;
        /**
         * @var string
         */
        protected $imagePath;
        static protected $supportedFormatsCache;

        public function load($imagePath, $options = [ ]) {}
        /**
         * @return string
         */
        public function getContentOptimizedFormat() {}
        public function save($path, $format = null, $quality = null) {}
        /**
         * @return  void
         */
        protected function destroy() {}
        /**
         * @return bool
         */
        protected function hasAlphaChannel() {}
        /**
         * @return $this
         */
        public function setColorspaceToRGB() {}
        public static function setCMYKColorProfile($CMYKColorProfile) {}
        /**
         * @return string
         */
        public static function getCMYKColorProfile() {}
        public static function setRGBColorProfile($RGBColorProfile) {}
        /**
         * @return string
         */
        public static function getRGBColorProfile() {}
        public function resize($width, $height) {}
        public function crop($x, $y, $width, $height) {}
        public function frame($width, $height, $forceResize = false) {}
        public function trim($tolerance) {}
        public function setBackgroundColor($color) {}
        protected function createImage($width, $height, $color = 'transparent') {}
        public function rotate($angle) {}
        public function roundCorners($width, $height) {}
        protected function internalRoundCorners($width, $height) {}
        public function setBackgroundImage($image, $mode = null) {}
        public function addOverlay($image, $x = 0, $y = 0, $alpha = 100, $composite = 'COMPOSITE_DEFAULT', $origin = 'top-left') {}
        public function addOverlayFit($image, $composite = 'COMPOSITE_DEFAULT') {}
        public function applyMask($image) {}
        /**
         * @return self
         */
        public function grayscale() {}
        /**
         * @return self
         */
        public function sepia() {}
        public function sharpen($radius = 0, $sigma = 1, $amount = 1, $threshold = 0.05) {}
        public function gaussianBlur($radius = 0, $sigma = 1) {}
        public function brightnessSaturation($brightness = 100, $saturation = 100, $hue = 100) {}
        public function mirror($mode) {}
        public function isVectorGraphic($imagePath = null) {}
        /**
         * @return array
         */
        public function getDimensions() {}
        /**
         * @return array|null
         */
        public function getVectorFormatEmbeddedRasterDimensions() {}
        /**
         * @return array
         */
        public function getVectorRasterDimensions() {}
        public function supportsFormat(string $format, bool $force = false) {}
        protected function checkFormatSupport(string $format) : bool {}
    }

}

namespace Pimcore\Storage\Redis {
    class ConnectionFactory {
        const DEFAULT_CONNECT_RETRIES = 1;
        const DEFAULT_CONNECT_TIMEOUT = 2.5;

        public static function createConnection(array $options = [ ]) {}
        public static function configureOptions(OptionsResolver $resolver) {}
        /**
         * @return array
         */
        public static function getDefaultOptions() {}
        private function __construct() {}
        private function __clone() {}
    }

}

namespace Pimcore\Controller {
    abstract class Controller extends \symfony\bundle\frameworkbundle\controller\controller {}

    /**
     * @property ViewModel $view
     * @property Document|Document\PageSnippet $document
     * @property bool $editmode
     */
    abstract class FrontendController extends \pimcore\controller\controller implements \pimcore\controller\eventedcontrollerinterface, \pimcore\controller\templatecontrollerinterface {
    use \pimcore\controller\traits\templatecontrollertrait;

        public function __get($name) {}
        public function __set($name, $value) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
        protected function enableViewAutoRender(Request $request = null, $engine = 'php') {}
        protected function disableViewAutoRender(Request $request = null) {}
        protected function addResponseHeader(string $key, $values, bool $replace = false, Request $request = null) {}
        public function getDocumentTag($type, $inputName, array $options = [ ], Document\PageSnippet $document = null) {}
        public function renderTemplate($view, array $parameters = [ ], Response $response = null) {}
    }


    interface EventedControllerInterface {
        function onKernelController(FilterControllerEvent $event) ;
        function onKernelResponse(FilterResponseEvent $event) ;
    }

    interface TemplateControllerInterface {
    const ATTRIBUTE_TEMPLATE_CONTROLLER = '_template_controller';
    const ATTRIBUTE_AUTO_RENDER = '_template_controller_auto_render';
    const ATTRIBUTE_AUTO_RENDER_ENGINE = '_template_controller_auto_render_engine';
        function setViewAutoRender(Request $request, bool $autoRender, string $engine = null) ;
    }

}

namespace Pimcore\Controller\Configuration {
    /**
     * Allows to set HTTP headers on the response via annotation. The annotation will
     * be processed by ResponseHeaderListener which will set the HTTP headers on the
     * response.
     *
     * See ResponseHeaderBag for documentation on the fields.
     *
     * @Annotation
     */
    class ResponseHeader extends \sensio\bundle\frameworkextrabundle\configuration\configurationannotation {
        /**
         * @var string
         */
        protected $key;
        /**
         * @var string|array
         */
        protected $values;
        /**
         * @var bool
         */
        protected $replace;

        public function __construct(array $data) {}
        /**
         * @inheritDoc
         */
        public function getAliasName() : string {}
        /**
         * @inheritDoc
         */
        public function allowArray() : bool {}
        /**
         * @return string
         */
        public function getKey() : string {}
        public function setKey(string $key) {}
        /**
         * @return array|string
         */
        public function getValues() {}
        public function setValues($values) {}
        /**
         * @return bool
         */
        public function getReplace() : bool {}
        public function setReplace(bool $replace) {}
    }

    /**
     * Same annotation as Template, but defaults to the php engine
     *
     * @Annotation
     */
    class TemplatePhp extends \sensio\bundle\frameworkextrabundle\configuration\template {
        /**
         * The template engine used when a specific template isn't specified.
         *
         * @var string
         */
        protected $engine;

    }

}

namespace Pimcore\Controller\Traits {
    trait ElementEditLockHelperTrait {
        protected function getEditLockResponse(string $id, string $type) {}
    }

    trait TemplateControllerTrait {
        public function setViewAutoRender(Request $request, bool $autoRender, string $engine = null) {}
    }

}

namespace Pimcore\Controller\Config {
    /**
     * Provides bundle/controller/action/template selection options which can be
     * used to configure controller + template for documents or static routes.
     */
    class ControllerDataProvider {
        /**
         * @var KernelInterface
         */
        private $kernel;
        /**
         * id -> class mapping array of controllers defined as services
         *
         * @var array
         */
        private $serviceControllers;
        /**
         * @var array
         */
        private $bundles;
        /**
         * @var array
         */
        private $bundleControllers;
        /**
         * @var \ReflectionClass[]
         */
        protected $reflectors;
        /**
         * @var array
         */
        private $templates;
        /**
         * @var array
         */
        private $templateNamePatterns;

        public function __construct(KernelInterface $kernel, array $serviceControllers) {}
        /**
         * Returns all eligible bundles
         *
         * @return BundleInterface[]
         */
        public function getBundles() : array {}
        private function getBundle(string $name) {}
/** @var \ReflectionClass $controllerReflector */
        public function getControllers(/** @var \ReflectionClass $controllerReflector */
string $bundleName = null, /** @var \ReflectionClass $controllerReflector */
string $defaultBundleName = null) : array {}
        public function getActions(string $controller, string $bundleName = null) : array {}
        /**
         * Builds a list of all available templates in bundles and in app/Resources/views
         *
         * @return array
         */
        public function getTemplates() : array {}
        private function findTemplates(string $path, string $bundleName = null) : array {}
        private function getControllerReflector(string $controller, string $bundleName = null) {}
        private function isServiceController(string $controller) : bool {}
        private function findBundleControllers(BundleInterface $bundle) : array {}
        protected function isValidController(string $controller, string $bundle = null) {}
        protected function isValidBundle(BundleInterface $bundle) : bool {}
        protected function isValidNamespace(string $namespace) : bool {}
        protected function isInBundle(string $className, BundleInterface $bundle) : bool {}
        protected function getReflector($object) : \ReflectionClass {}
    }

    /**
     * This service exists as integration point between legacy module/controller/action <-> new bundle/controller/action and
     * to handle default bundle/controller/action in case it is not configured.
     *
     * Most of the normalizations here could be removed when we do not need to support legacy ZF1 notations (e.g. DB was
     * fully migrated).
     *
     * TODO use a config switch to enable/disable ZF1 compatibility
     */
    class ConfigNormalizer {
        /**
         * @var KernelInterface
         */
        private $kernel;
        /**
         * @var array
         */
        private $routingDefaults;
        /**
         * @var array
         */
        private $bundleCache;

        public function __construct(KernelInterface $kernel) {}
        public function setRoutingDefaults(array $routingDefaults) {}
        public function formatControllerReference(string $bundle = null, string $controller = null, string $action = null) : string {}
        public function normalizeBundleName(string $bundle = null) : string {}
        public function normalizeControllerName(string $controller = null) : string {}
        public function normalizeActionName(string $action = null) : string {}
        public function normalizeTemplateName(string $template = null) {}
    }

}

namespace Pimcore\Controller\ArgumentValueResolver {
    class EditmodeValueResolver implements \symfony\component\httpkernel\controller\argumentvalueresolverinterface {
        /**
         * @var EditmodeResolver
         */
        private $editmodeResolver;

        public function __construct(EditmodeResolver $editmodeResolver) {}
        public function supports(Request $request, ArgumentMetadata $argument) : bool {}
        public function resolve(Request $request, ArgumentMetadata $argument) {}
    }

    class ViewModelValueResolver implements \symfony\component\httpkernel\controller\argumentvalueresolverinterface {
        /**
         * @var ViewModelResolver
         */
        protected $viewModelResolver;

        public function __construct(ViewModelResolver $viewModelResolver) {}
        public function supports(Request $request, ArgumentMetadata $argument) {}
        public function resolve(Request $request, ArgumentMetadata $argument) {}
    }

    /**
     * Adds support for type hinting controller actions against `Document $document` and getting the current document.
     */
    class DocumentValueResolver implements \symfony\component\httpkernel\controller\argumentvalueresolverinterface {
        /**
         * @var DocumentResolver
         */
        protected $documentResolver;

        public function __construct(DocumentResolver $documentResolver) {}
        public function supports(Request $request, ArgumentMetadata $argument) {}
        public function resolve(Request $request, ArgumentMetadata $argument) {}
    }

    class TemplateVarsValueResolver implements \symfony\component\httpkernel\controller\argumentvalueresolverinterface {
        /**
         * @var TemplateVarsResolver
         */
        protected $templateVarsResolver;

        public function __construct(TemplateVarsResolver $templateVarsResolver) {}
        public function supports(Request $request, ArgumentMetadata $argument) {}
        public function resolve(Request $request, ArgumentMetadata $argument) {}
    }

    class WebsiteConfigValueResolver implements \symfony\component\httpkernel\controller\argumentvalueresolverinterface {
        public function supports(Request $request, ArgumentMetadata $argument) {}
        public function resolve(Request $request, ArgumentMetadata $argument) {}
    }

}

namespace Pimcore\Loader\ImplementationLoader {
    /**
     * Loads implementations from a fixed name => className map
     */
    class ClassMapLoader extends \pimcore\loader\implementationloader\abstractclassnameloader {
        /**
         * @var array
         */
        protected $classMap;

        public function __construct(array $classMap = [ ]) {}
        public function supports(string $name) : bool {}
        public function getClassMap() : array {}
        protected function getClassName(string $name) {}
        private function normalizeName(string $name) : string {}
    }

    /**
     * Iterates an array of namespace prefixes and tries to load classes by namespace.
     */
    class PrefixLoader extends \pimcore\loader\implementationloader\abstractclassnameloader {
        /**
         * @var array
         */
        private $prefixes;
        /**
         * @var array
         */
        private $cache;

        public function __construct(array $prefixes = [ ]) {}
        private function setPrefixes(array $prefixes) {}
        public function supports(string $name) : bool {}
        protected function getClassName(string $name) {}
        private function findClassName(string $name) {}
        protected function buildClassName(string $prefix, string $name) : string {}
        protected function normalizeName(string $name) : string {}
    }

    abstract class AbstractClassNameLoader implements \pimcore\loader\implementationloader\loaderinterface, \pimcore\loader\implementationloader\classnameloaderinterface {
        abstract protected function getClassName(string $name) ;
        public function build(string $name, array $params = [ ]) {}
        public function supportsClassName(string $name) : bool {}
        public function getClassNameFor(string $name) : string {}
    }

    /**
     * Core implementation loader delegating to a list of registered loaders
     */
    class ImplementationLoader implements \pimcore\loader\implementationloader\classnameloaderinterface, \pimcore\loader\implementationloader\loaderinterface {
        /**
         * @var LoaderInterface[]
         */
        protected $loaders;
        /**
         * @var array
         */
        private $loaderCache;

        public function __construct(array $loaders = [ ]) {}
        private function setLoaders(array $loaders) {}
        public function addLoader(LoaderInterface $loader) {}
/** @var LoaderInterface $loader */
        private function getLoader(/** @var LoaderInterface $loader */
string $name) {}
        public function supports(string $name) : bool {}
        public function build(string $name, array $params = [ ]) {}
        public function supportsClassName(string $name) : bool {}
        public function getClassNameFor(string $name) : string {}
    }


    interface LoaderInterface {
        function supports(string $name) : bool ;
        function build(string $name, array $params = [ ]) ;
    }

    interface ClassNameLoaderInterface {
        function supportsClassName(string $name) : bool ;
        function getClassNameFor(string $name) : string ;
    }

}

namespace Pimcore\Loader\ImplementationLoader\Exception {
    class InvalidArgumentException extends \invalidargumentexception {}

    class UnsupportedException extends \runtimeexception {}

}

namespace Pimcore\Http {
    class RequestHelper {
        const ATTRIBUTE_FRONTEND_REQUEST = '_pimcore_frontend_request';

        /**
         * @var RequestStack
         */
        protected $requestStack;

        public function __construct(RequestStack $requestStack) {}
        public function hasCurrentRequest() : bool {}
        public function getCurrentRequest() : Request {}
        public function getRequest(Request $request = null) {}
        public function hasMasterRequest() : bool {}
        public function getMasterRequest() : Request {}
        public function isFrontendRequest(Request $request = null) : bool {}
        protected function detectFrontendRequest(Request $request) : bool {}
        public function isFrontendRequestByAdmin(Request $request = null) : bool {}
        public function getAnonymizedClientIp(Request $request = null) {}
        public function anonymizeIp(string $ip) {}
    }

    class RequestMatcherFactory {
        public function buildRequestMatchers(array $entries) {}
        public function buildRequestMatcher(array $entry) {}
    }

    class ResponseHelper {
        public function disableCache(Response $response, $force = false) {}
        public function isHtmlResponse(Response $response) : bool {}
    }

    /**
     * This stack can be used to collect responses to be sent from parts which cannot
     * directly influence the request-response cycle (e.g. templating parts). For example
     * this is used to read responses from an areabrick's action() method which is pushed
     * to this stack.
     *
     * The ResponseStackListener takes care of sending back the response set on this stack.
     */
    class ResponseStack {
        /**
         * @var Response[]
         */
        private $responses;

        public function push(Response $response) {}
        public function hasResponses() : bool {}
        /**
         * @return Response[]
         */
        public function getResponses() : array {}
        public function pop() : Response {}
        public function getLastResponse() : Response {}
    }

    class ClientFactory {
        public function createClient(array $config = [ ]) {}
        /**
         * @deprecated Use the ClientFactory service instead of the static method
         */
        public static function createHttpClient() {}
    }

}

namespace Pimcore\Http\Context {
    class PimcoreContextGuesser {
        /**
         * @var array
         */
        private $routes;
        /**
         * @var RequestMatcherInterface[]
         */
        private $matchers;
        /**
         * @var RequestMatcherFactory
         */
        private $requestMatcherFactory;

        public function __construct(RequestMatcherFactory $factory) {}
        public function addContextRoutes(string $context, array $routes) {}
/** @var RequestMatcherInterface[] $matchers */
        public function guess(/** @var RequestMatcherInterface[] $matchers */
Request $request, /** @var RequestMatcherInterface[] $matchers */
string $default) : string {}
        /**
         * Get request matchers to query admin pimcore context from
         *
         * @return RequestMatcherInterface[]
         */
        private function getMatchers() : array {}
    }

}

namespace Pimcore\Http\Response {
    class CodeInjector {
        const POSITION_END = 'end';
        const REPLACE = 'replace';
        const SELECTOR_HEAD = 'head';
        const POSITION_BEGINNING = 'beginning';
        const SELECTOR_BODY = 'body';

        static private $presetSelectors;
        static private $validPositions;
        /**
         * @var ResponseHelper
         */
        private $responseHelper;

        public function __construct(ResponseHelper $responseHelper) {}
        public function inject(Response $response, string $code, string $selector = self::SELECTOR_BODY, string $position = self::POSITION_END) {}
        public function injectIntoHtml(string $html, string $code, string $selector, string $position, string $charset = 'UTF-8') : string {}
        private function injectIntoPresetSelector(string $html, string $code, string $selector, string $position) : string {}
        private function injectIntoDomSelector(string $html, string $code, string $selector, string $position, string $charset) : string {}
    }

}

namespace Pimcore\Http\Request\Resolver {
    class DocumentResolver extends \pimcore\http\request\resolver\abstractrequestresolver implements \pimcore\templating\vars\templatevarsproviderinterface {
        public function getDocument(Request $request = null) {}
        public function setDocument(Request $request, Document $document) {}
        public function addTemplateVars(Request $request, array $templateVars) {}
    }

    class SiteResolver extends \pimcore\http\request\resolver\abstractrequestresolver {
        const ATTRIBUTE_SITE = '_site';
        const ATTRIBUTE_SITE_PATH = '_site_path';

        public function setSite(Request $request, Site $site) {}
        public function getSite(Request $request = null) {}
        public function setSitePath(Request $request, $path) {}
        public function getSitePath(Request $request = null) {}
        public function isSiteRequest(Request $request = null) {}
    }

    class ViewModelResolver extends \pimcore\http\request\resolver\abstractrequestresolver {
        const ATTRIBUTE_VIEW_MODEL = '_view_model';

        /**
         * @var TemplateVarsResolver
         */
        protected $templateVarsResolver;

        public function __construct(RequestStack $requestStack, TemplateVarsResolver $templateVarsResolver) {}
        public function getViewModel(Request $request = null, $create = true) {}
        public function createViewModel(Request $request = null) {}
        public function setViewModel(Request $request, ViewModelInterface $viewModel) {}
    }

    class TemplateResolver extends \pimcore\http\request\resolver\abstractrequestresolver {
        /**
         * @var ConfigNormalizer
         */
        protected $configNormalizer;

        public function __construct(RequestStack $requestStack, ConfigNormalizer $configNormalizer) {}
        public function getTemplate(Request $request = null) {}
        public function setTemplate(Request $request, $template) {}
    }

    /**
     * Gets/sets and guesses pimcore context (admin, default) from request. The guessing is implemented in PimcoreContextGuesser
     * and matches the request against a list of paths and routes which are exposed via config.
     */
    class PimcoreContextResolver extends \pimcore\http\request\resolver\abstractrequestresolver {
        const ATTRIBUTE_PIMCORE_CONTEXT = '_pimcore_context';
        const CONTEXT_ADMIN = 'admin';
        const CONTEXT_DEFAULT = 'default';
        const CONTEXT_WEBSERVICE = 'webservice';

        /**
         * @var PimcoreContextGuesser
         */
        protected $guesser;

        public function __construct(RequestStack $requestStack, PimcoreContextGuesser $guesser) {}
        public function getPimcoreContext(Request $request = null) {}
        public function setPimcoreContext(Request $request, string $context) {}
        public function matchesPimcoreContext(Request $request, $context) : bool {}
    }

    class TemplateVarsResolver extends \pimcore\http\request\resolver\abstractrequestresolver {
        /**
         * @var TemplateVarsProviderInterface[]
         */
        protected $providers;

        public function __construct(RequestStack $requestStack, array $providers = [ ]) {}
        public function addProvider(TemplateVarsProviderInterface $provider) {}
        public function getTemplateVars(Request $request = null) {}
    }

    abstract class AbstractRequestResolver {
        /**
         * @var RequestStack
         */
        protected $requestStack;

        public function __construct(RequestStack $requestStack) {}
        /**
         * @return Request
         */
        protected function getCurrentRequest() {}
        /**
         * @return Request
         */
        protected function getMasterRequest() {}
    }

    class EditmodeResolver extends \pimcore\http\request\resolver\abstractrequestresolver implements \pimcore\templating\vars\templatevarsproviderinterface, \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        const ATTRIBUTE_EDITMODE = '_editmode';

        /**
         * @var UserLoader
         */
        protected $userLoader;
        /**
         * @var RequestHelper
         */
        protected $requestHelper;
        /**
         * @var bool
         */
        private $forceEditmode;

        public function __construct(RequestStack $requestStack, UserLoader $userLoader, RequestHelper $requestHelper) {}
        public function setForceEditmode(bool $forceEditmode) {}
        public function isEditmode(Request $request = null) {}
        public function addTemplateVars(Request $request, array $templateVars) {}
    }

    class ResponseHeaderResolver extends \pimcore\http\request\resolver\abstractrequestresolver {
        const ATTRIBUTE_RESPONSE_HEADER = '_response_header';

        public function getResponseHeaders(Request $request = null) : array {}
        public function addResponseHeader(Request $request, string $key, $values, bool $replace = false) {}
    }

    /**
     * Gets/sets the timestamp for which output should be delivered. Default is current timestamp, but timestamp
     * might be set to a date in future for preview purposes
     */
    class OutputTimestampResolver extends \pimcore\http\request\resolver\abstractrequestresolver {
        const ATTRIBUTE_PIMCORE_OUTPUT_TIMESTAMP = '_pimcore_output_timestamp';

        /**
         * @var bool
         */
        protected $timestampWasQueried;

        public function __construct(RequestStack $requestStack) {}
        /**
         * Gets timestamp for with the output should be rendered to
         *
         * @return string|null
         */
        public function getOutputTimestamp() {}
        public function setOutputTimestamp(int $timestamp) {}
        /**
         * Returns if timestamp was queried during request at least once
         *
         * @return bool
         */
        public function timestampWasQueried() {}
    }

}

namespace Pimcore\Http\Exception {
    class ResponseException extends \exception {
        /**
         * @var Response
         */
        protected $response;

        public function __construct(Response $response, \Exception $previous = null) {}
        /**
         * @return Response
         */
        public function getResponse() {}
    }

}

namespace Pimcore\Workflow {
    class WorkflowConfig {
        /**
         * @var string
         */
        private $name;
        /**
         * @var array
         */
        private $workflowConfigArray;

        public function __construct(string $name, array $workflowConfigArray) {}
        public function getName() : string {}
        public function getLabel() : string {}
        public function getPriority() : int {}
        public function getType() : string {}
        /**
         * @return array
         */
        public function getWorkflowConfigArray() : array {}
    }

    class Service {
        public static function createNoteData($fc, $value) {}
/**
 * @var \Pimcore\Model\DataObject\ClassDefinition\Data $tag
 */
        public static function getDataFromEditmode(/**
 * @var \Pimcore\Model\DataObject\ClassDefinition\Data $tag
 */
$data, /**
 * @var \Pimcore\Model\DataObject\ClassDefinition\Data $tag
 */
$pimcoreTagName) {}
/**
 * @var \DateTime $date
 */
        public static function createActionNote(/**
 * @var \DateTime $date
 */
$element, /**
 * @var \DateTime $date
 */
$type, /**
 * @var \DateTime $date
 */
$title, /**
 * @var \DateTime $date
 */
$description, /**
 * @var \DateTime $date
 */
$noteData, /**
 * @var \DateTime $date
 */
$user = null) {}
    }

    class ExpressionService {
        /**
         * @var ExpressionLanguage
         */
        private $expressionLanguage;
        /**
         * @var TokenStorageInterface
         */
        private $tokenStorage;
        /**
         * @var AuthorizationCheckerInterface
         */
        private $authenticationChecker;
        /**
         * @var AuthenticationTrustResolverInterface
         */
        private $trustResolver;
        /**
         * @var RoleHierarchyInterface
         */
        private $roleHierarchy;
        /**
         * @var ValidatorInterface
         */
        private $validator;

        public function __construct(ExpressionLanguage $expressionLanguage, TokenStorageInterface $tokenStorage, AuthorizationCheckerInterface $authenticationChecker, AuthenticationTrustResolverInterface $trustResolver, RoleHierarchyInterface $roleHierarchy = null, ValidatorInterface $validator = null) {}
        public function evaluateExpression(Workflow $workflow, $subject, string $expression) {}
        private function getVariables(Workflow $workflow, $subject) {}
    }

    class GlobalAction implements \pimcore\workflow\notes\notesawareinterface {
    use \pimcore\workflow\notes\notesawaretrait;

        /**
         * @var string
         */
        private $name;
        /**
         * @var array
         */
        private $options;
        /**
         * @var ExpressionService
         */
        private $expressionService;
        /** @var string */
        private $workflowName;

        public function __construct(string $name, array $options, ExpressionService $expressionService, string $workflowName) {}
        /**
         * @return string
         */
        public function getName() : string {}
        /**
         * @return string
         */
        public function getLabel() : string {}
        public function getIconClass() : string {}
        /**
         * @return string|int|false
         */
        public function getObjectLayout() {}
        /**
         * @return array
         */
        public function getTos() : array {}
        /**
         * @return null|string
         */
        public function getGuard() : ?string {}
        public function isGuardValid(Workflow $workflow, $subject) : bool {}
        public function getWorkflowName() : string {}
    }

    class Manager {
        /**
         * @var Registry
         */
        private $workflowRegistry;
        /**
         * @var NotesSubscriber
         */
        private $notesSubscriber;
        /**
         * @var ExpressionService
         */
        private $expressionService;
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;
        /**
         * @var PlaceConfig[][]
         */
        private $placeConfigs;
        /**
         * @var GlobalAction[][]
         */
        private $globalActions;
        /**
         * @var WorkflowConfig[]
         */
        private $workflows;

        public function __construct(Registry $workflowRegistry, NotesSubscriber $notesSubscriber, ExpressionService $expressionService, EventDispatcherInterface $eventDispatcher) {}
        public function addPlaceConfig(string $workflowName, string $place, array $placeConfig) {}
        public function addGlobalAction(string $workflowName, string $action, array $actionConfig) {}
        public function getGlobalActions(string $workflowName) : array {}
        public function getGlobalAction(string $workflowName, string $globalAction) : ?GlobalAction {}
        public function getPlaceConfig(string $workflowName, string $place) : ?PlaceConfig {}
        public function getOrderedPlaceConfigs(Workflow $workflow, Marking $marking = null) : array {}
        public function getPlaceConfigsByWorkflowName(string $workflowName) {}
        public function registerWorkflow(string $workflowName, array $options = [ ]) {}
        /**
         * @return string[]
         */
        public function getAllWorkflows() : array {}
        public function getWorkflowConfig(string $workflowName) : WorkflowConfig {}
        public function getAllWorkflowsForSubject($subject) : array {}
        public function getWorkflowIfExists($subject, string $workflowName) : ?Workflow {}
        public function getWorkflowByName(string $workflowName) : Workflow {}
        public function applyWithAdditionalData(Workflow $workflow, $subject, string $transition, array $additionalData, $saveSubject = false) {}
        public function applyGlobalAction(Workflow $workflow, $subject, string $globalAction, array $additionalData, $saveSubject = false) {}
        public function getTransitionByName(string $workflowName, string $transitionName) : ?\Symfony\Component\Workflow\Transition {}
    }

    class Transition extends \symfony\component\workflow\transition implements \pimcore\workflow\notification\notificationinterface, \pimcore\workflow\notes\notesawareinterface {
    use \pimcore\workflow\notification\notificationtrait, \pimcore\workflow\notes\notesawaretrait;

        private $options;

        public function __construct($name, $froms, $tos, $options = [ ]) {}
        public function getOptions() {}
        public function getLabel() : string {}
        public function getIconClass() : string {}
        /**
         * @return string|int|false
         */
        public function getObjectLayout() {}
        public function getChangePublishedState() : string {}
    }

    class ActionsButtonService {
        /**
         * @var Manager
         */
        private $workflowManager;

        public function __construct(Manager $workflowManager) {}
/**
 * @var Transition $transition
 */
        public function getAllowedTransitions(/**
 * @var Transition $transition
 */
Workflow $workflow, /**
 * @var Transition $transition
 */
AbstractElement $element) {}
        public function getGlobalActions(Workflow $workflow, AbstractElement $element) {}
        private function enrichNotes(AbstractObject $object, array $notes) {}
    }

}

namespace Pimcore\Workflow\Notification {
    class AbstractNotificationService {
        protected function getNoteInfo($id) : string {}
/**
 * @var User $user
 */
        protected function getNotificationUsersByName(/**
 * @var User $user
 */
$users, /**
 * @var User $user
 */
$roles, /**
 * @var User $user
 */
$includeAllUsers = false) : array {}
    }

    class PimcoreNotificationService extends \pimcore\workflow\notification\abstractnotificationservice {
        /**
         * @var NotificationService
         */
        protected $notificationService;
        /**
         * @var TranslatorInterface
         */
        protected $translator;

        public function __construct(NotificationService $notificationService, TranslatorInterface $translator) {}
        public function sendPimcoreNotification(array $users, array $roles, Workflow $workflow, string $subjectType, AbstractElement $subject, string $action) {}
    }

    class NotificationEmailService extends \pimcore\workflow\notification\abstractnotificationservice {
        const MAIL_PATH_LANGUAGE_PLACEHOLDER = '%_locale%';

        /**
         * @var EngineInterface $templatingEngine
         */
        private $templatingEngine;
        /**
         * @var RouterInterface
         */
        private $router;
        /**
         * @var TranslatorInterface
         */
        protected $translator;

        public function __construct(EngineInterface $templatingEngine, RouterInterface $router, TranslatorInterface $translator) {}
        public function sendWorkflowEmailNotification(array $users, array $roles, Workflow $workflow, string $subjectType, AbstractElement $subject, string $action, string $mailType, string $mailPath) {}
        protected function sendPimcoreDocumentMail(array $recipients, string $subjectType, AbstractElement $subject, Workflow $workflow, string $action, string $language, string $mailPath, string $deeplink) {}
        protected function sendTemplateMail(array $recipients, string $subjectType, AbstractElement $subject, Workflow $workflow, string $action, string $language, string $mailPath, string $deeplink) {}
        protected function getHtmlBody(string $subjectType, AbstractElement $subject, Workflow $workflow, string $action, string $language, string $mailPath, string $deeplink) : string {}
        protected function getNotificationEmailParameters(string $subjectType, AbstractElement $subject, Workflow $workflow, string $action, string $deeplink, string $language) : array {}
    }


    interface NotificationInterface {
        function getNotificationSettings() : array ;
    }


    trait NotificationTrait {
        public function getNotifyUsers() : array {}
        public function getNotifyRoles() : array {}
        public function getNotificationSettings() : array {}
    }

}

namespace Pimcore\Workflow\SupportStrategy {
    /**
     * @author Andreas Kleemann <akleemann@inviqa.com>
     */
    class ExpressionSupportStrategy implements \symfony\component\workflow\supportstrategy\supportstrategyinterface {
        /**
         * @var ExpressionService
         */
        private $expressionService;
        /**
         * @var string|string[]
         */
        private $className;
        /**
         * @var string
         */
        private $expression;

        public function __construct(ExpressionService $expressionService, $className, string $expression) {}
        public function supports(Workflow $workflow, $subject) {}
        private function supportsClass($subject) {}
        /**
         * @return string
         */
        public function getClassName() {}
    }

}

namespace Pimcore\Workflow\Notes {
    interface NotesAwareInterface {
        function getNotes() : ?array ;
        function getNotesCommentRequired() : bool ;
        function getNotesCommentEnabled() : bool ;
        function getNotesCommentSetterFn() : ?string ;
        function getNotesType() : string ;
        function getNotesTitle() : string ;
        function getNotesAdditionalFields() : array ;
    }


    /**
     * @method getLabel()
     *
     * @property array $options
     */
    trait NotesAwareTrait {
        public function getNotes() : ?array {}
        public function getNotesCommentRequired() : bool {}
        public function getNotesCommentEnabled() : bool {}
        public function getNotesCommentSetterFn() : ?string {}
        public function getNotesType() : string {}
        public function getNotesTitle() : string {}
        public function getNotesAdditionalFields() : array {}
    }

}

namespace Pimcore\Workflow\MarkingStore {
    class DataObjectSplittedStateMarkingStore implements \symfony\component\workflow\markingstore\markingstoreinterface {
        const ALLOWED_PLACE_FIELD_TYPES = ['input', 'select', 'multiselect'];

        /**
         * @var string
         */
        private $workflowName;
        /**
         * @var string
         */
        private $stateMapping;
        /**
         * @var PropertyAccessorInterface
         */
        private $propertyAccessor;
        /**
         * @var Manager
         */
        private $workflowManager;

        public function __construct(string $workflowName, array $places, array $stateMapping, PropertyAccessorInterface $propertyAccessor, Manager $workflowManager) {}
        public function getMarking($subject) {}
        public function setMarking($subject, Marking $marking) {}
        public function getMappedPlaces(string $fieldName) {}
        private function setProperty(Concrete $subject, $property, $places) {}
        private function checkIfSubjectIsValid($subject) : Concrete {}
        private function validateStateMapping(array $places, array $stateMapping) {}
    }

    class StateTableMarkingStore implements \symfony\component\workflow\markingstore\markingstoreinterface {
        /**
         * @var string
         */
        private $workflowName;

        public function __construct(string $workflowName) {}
        public function getMarking($subject) {}
        public function setMarking($subject, Marking $marking) {}
        /**
         * @return string
         */
        public function getProperty() {}
        private function checkIfSubjectIsValid($subject) : ElementInterface {}
    }

    class DataObjectMultipleStateMarkingStore extends \symfony\component\workflow\markingstore\multiplestatemarkingstore {
        private $property;
        private $propertyAccessor;

        public function __construct($property = 'marking', PropertyAccessorInterface $propertyAccessor = null) {}
        public function getMarking($subject) {}
        public function setMarking($subject, Marking $marking) {}
        private function checkIfSubjectIsValid($subject) : Concrete {}
    }

}

namespace Pimcore\Workflow\Place {
    class OptionsProvider implements \pimcore\model\dataobject\classdefinition\dynamicoptionsprovider\selectoptionsproviderinterface {
        /**
         * @var Manager
         */
        private $workflowManager;
        /**
         * @var TranslatorInterface
         */
        private $translator;

        public function __construct(Manager $workflowManager, TranslatorInterface $translator) {}
        public function getOptions($context, $fieldDefinition) {}
        protected function generatePlaceLabel(PlaceConfig $placeConfig) : string {}
        public function hasStaticOptions($context, $fieldDefinition) {}
        public function getDefaultValue($context, $fieldDefinition) {}
    }

    class PlaceConfig {
        /**
         * @var string
         */
        private $place;
        /**
         * @var array
         */
        private $placeConfigArray;
        /**
         * @var ExpressionService
         */
        private $expressionService;
        /** @var string */
        private $workflowName;

        public function __construct(string $place, array $placeConfigArray, ExpressionService $expressionService, string $workflowName) {}
        public function getLabel() : string {}
        public function getTitle() : string {}
        public function getColor() : string {}
        public function getColorInverted() : bool {}
        public function getBackgroundColor() : string {}
        public function getFontColor() : string {}
        public function getBorderColor() : string {}
        public function isVisibleInHeader() : bool {}
        public function getObjectLayout(Workflow $workflow, $subject) : ?string {}
        public function getPlace() : string {}
        public function getWorkflowName() : string {}
        /**
         * @return array
         */
        public function getPlaceConfigArray() : array {}
        public function getPermissions(Workflow $workflow, $subject) : array {}
        public function getUserPermissions(Workflow $workflow, $subject) : array {}
    }

    class StatusInfo {
        /**
         * @var Manager
         */
        private $workflowManager;
        /**
         * @var EngineInterface $templatingEngine
         */
        private $templatingEngine;
        /**
         * @var TranslatorInterface
         */
        private $translator;

        public function __construct(Manager $workflowManager, EngineInterface $templatingEngine, TranslatorInterface $translator) {}
        public function getToolbarHtml($subject) : string {}
        public function getAllPalacesHtml($subject, string $workflowName = null) : string {}
        public function getAllPlacesForCsv($subject, string $workflowName = null) : string {}
        private function getAllPlaces($subject, bool $visibleInHeaderOnly = false, string $workflowName = null) : array {}
        protected function filterPlaces(array $places) : array {}
    }

}

namespace Pimcore\Workflow\EventSubscriber {
    class ChangePublishedStateSubscriber implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        const NO_CHANGE = 'no_change';
        const FORCE_UNPUBLISHED = 'force_unpublished';
        const FORCE_PUBLISHED = 'force_published';

/** @var Document|Concrete $subject */
        public function onWorkflowCompleted(/** @var Document|Concrete $subject */
Event $event) {}
        private function checkEvent(Event $event) : bool {}
        public static function getSubscribedEvents() {}
    }

    class NotesSubscriber implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        const ADDITIONAL_DATA_NOTES_ADDITIONAL_FIELDS = 'additional';
        const ADDITIONAL_DATA_NOTES_COMMENT = 'notes';

        /**
         * @var TranslatorInterface
         */
        private $translator;
        /**
         * @var bool
         */
        private $enabled;
        /**
         * @var array
         */
        private $additionalData;

        public function __construct(TranslatorInterface $translator) {}
/**
 * @var AbstractElement $subject
 * @var Transition $transition
 */
        public function onWorkflowEnter(/**
 * @var AbstractElement $subject
 * @var Transition $transition
 */
Event $event) {}
/**
 * @var AbstractElement $subject
 * @var Transition $transition
 */
        public function onWorkflowCompleted(/**
 * @var AbstractElement $subject
 * @var Transition $transition
 */
Event $event) {}
        public function onPreGlobalAction(GlobalActionEvent $event) {}
        public function onPostGlobalAction(GlobalActionEvent $event) {}
        private function handleNotesPreWorkflow(Workflow\Notes\NotesAwareInterface $notesAware, AbstractElement $subject) {}
/**
 * Additional Field example
 * [
            'name' => 'dateLastContacted',
            'fieldType' => 'date',
            'label' => 'Date of Conversation',
            'required' => true,
            'setterFn' => ''
            ]
 */
        private function handleNotesPostWorkflow(/**
 * Additional Field example
 * [
            'name' => 'dateLastContacted',
            'fieldType' => 'date',
            'label' => 'Date of Conversation',
            'required' => true,
            'setterFn' => ''
            ]
 */
Workflow\Notes\NotesAwareInterface $notesAware, /**
 * Additional Field example
 * [
            'name' => 'dateLastContacted',
            'fieldType' => 'date',
            'label' => 'Date of Conversation',
            'required' => true,
            'setterFn' => ''
            ]
 */
AbstractElement $subject) {}
        private function checkEvent(Event $event) : bool {}
        private function checkGlobalActionEvent(GlobalActionEvent $event) : bool {}
        /**
         * @return bool
         */
        public function isEnabled() : bool {}
        public function setEnabled(bool $enabled) : void {}
        /**
         * @return array|null
         */
        public function getAdditionalData() : ?array {}
        public function setAdditionalData(array $additionalData = [ ]) : void {}
        private function getAdditionalDataForField(array $fieldConfig) {}
        private function getNotesComment() : string {}
        private function getAdditionalFields() : array {}
        public static function getSubscribedEvents() {}
    }

    class NotificationSubscriber implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        const MAIL_TYPE_TEMPLATE = 'template';
        const NOTIFICATION_CHANNEL_MAIL = 'mail';
        const MAIL_TYPE_DOCUMENT = 'pimcore_document';
        const DEFAULT_MAIL_TEMPLATE_PATH = '@PimcoreCore/Workflow/NotificationEmail/notificationEmail.html.twig';
        const NOTIFICATION_CHANNEL_PIMCORE_NOTIFICATION = 'pimcore_notification';

        /**
         * @var NotificationEmailService
         */
        protected $mailService;
        /**
         * @var Workflow\Notification\PimcoreNotificationService
         */
        protected $pimcoreNotificationService;
        /**
         * @var TranslatorInterface
         */
        protected $translator;
        /**
         * @var bool
         */
        protected $enabled;
        /**
         * @var Workflow\ExpressionService
         */
        protected $expressionService;
        /**
         * @var Workflow\Manager
         */
        protected $workflowManager;

        public function __construct(NotificationEmailService $mailService, Workflow\Notification\PimcoreNotificationService $pimcoreNotificationService, TranslatorInterface $translator, Workflow\ExpressionService $expressionService, Workflow\Manager $workflowManager) {}
/**
 * @var AbstractElement $subject
 * @var Transition $transition
 */
        public function onWorkflowCompleted(/**
 * @var AbstractElement $subject
 * @var Transition $transition
 */
Event $event) {}
        private function handleNotifyPostWorkflowEmail(Transition $transition, \Symfony\Component\Workflow\Workflow $workflow, AbstractElement $subject, string $mailType, string $mailPath, array $notifyUsers, array $notifyRoles) {}
        private function handleNotifyPostWorkflowPimcoreNotification(Transition $transition, \Symfony\Component\Workflow\Workflow $workflow, AbstractElement $subject, array $notifyUsers, array $notifyRoles) {}
        private function checkEvent(Event $event) : bool {}
        /**
         * @return bool
         */
        public function isEnabled() : bool {}
        public function setEnabled(bool $enabled) : void {}
        public static function getSubscribedEvents() {}
    }

}

namespace Pimcore\Workflow\Dumper {
    /**
     * GraphvizDumper dumps a workflow as a graphviz file.
     *
     * You can convert the generated dot file with the dot utility (http://www.graphviz.org/):
     *
     *   dot -Tpng workflow.dot > workflow.png
     *
     * @author Fabien Potencier <fabien@symfony.com>
     * @author Grégoire Pineau <lyrixx@lyrixx.info>
     */
    class GraphvizDumper implements \symfony\component\workflow\dumper\dumperinterface {
        static protected $defaultOptions;
        /**
         * @var Manager
         */
        private $workflowManager;

        public function __construct(Manager $workflowManager) {}
        public function dump(Definition $definition, Marking $marking = null, array $options = [ ]) {}
        protected function findPlaces(Definition $definition, Marking $marking = null, string $workflowName = '') {}
        protected function findTransitions(Definition $definition) {}
        protected function addPlaces(array $places) {}
        protected function addTransitions(array $transitions) {}
        protected function findEdges(Definition $definition) {}
        protected function addEdges(array $edges) {}
        protected function startDot(array $options) {}
        /**
         * @internal
         */
        protected function endDot() {}
        protected function dotize($id) {}
        private function addAttributes(array $attributes) {}
        private function addOptions(array $options) {}
    }

    class StateMachineGraphvizDumper extends \pimcore\workflow\dumper\graphvizdumper {
        public function dump(Definition $definition, Marking $marking = null, array $options = [ ]) {}
        protected function findEdges(Definition $definition) {}
        protected function addEdges(array $edges) {}
    }

}

namespace Pimcore\Model\Dao {
    abstract class PhpArrayTable implements \pimcore\model\dao\daointerface {
    use \pimcore\model\dao\daotrait;

        /**
         * @var PhpArrayFileTable
         */
        protected $db;

        public function configure() {}
        protected function setFile($name) {}
    }

    abstract class AbstractDao implements \pimcore\model\dao\daointerface {
    use \pimcore\model\dao\daotrait;

        const CACHEKEY = 'system_resource_columns_';

        /**
         * @var \Pimcore\Db\ConnectionInterface
         */
        public $db;

        public function configure() {}
        public function beginTransaction() {}
        public function commit() {}
        public function rollBack() {}
        public function getValidTableColumns($table, $cache = true) {}
        public function resetValidTableColumnsCache($table) {}
    }


    interface DaoInterface {
        function setModel($model) ;
        function configure() ;
    }


    trait DaoTrait {
        /**
         * @var \Pimcore\Model\AbstractModel
         */
        protected $model;
        public function setModel($model) {}
        protected function assignVariablesToModel($data) {}
    }

}

namespace Pimcore\Model\Document\Tag\Loader {
    class PrefixLoader extends \pimcore\loader\implementationloader\prefixloader {
        protected function normalizeName(string $name) : string {}
    }

    class TagLoader extends \pimcore\loader\implementationloader\implementationloader implements \pimcore\model\document\tag\loader\tagloaderinterface {
        public function build(string $name, array $params = [ ]) : Tag {}
    }


    interface TagLoaderInterface extends \pimcore\loader\implementationloader\loaderinterface {
        function build(string $name, array $params = [ ]) : Tag ;
    }

}

namespace Pimcore\Model\DataObject\ClassDefinition\Loader {
    class DataLoader extends \pimcore\loader\implementationloader\implementationloader implements \pimcore\model\dataobject\classdefinition\loader\dataloaderinterface {
        public function build(string $name, array $params = [ ]) : Data {}
    }

    class LayoutLoader extends \pimcore\loader\implementationloader\implementationloader implements \pimcore\model\dataobject\classdefinition\loader\layoutloaderinterface {
        public function build(string $name, array $params = [ ]) : Layout {}
    }


    interface LayoutLoaderInterface extends \pimcore\loader\implementationloader\loaderinterface {
        function build(string $name, array $params = [ ]) : Layout ;
    }

    interface DataLoaderInterface extends \pimcore\loader\implementationloader\loaderinterface {
        function build(string $name, array $params = [ ]) : Data ;
    }

}

namespace Pimcore\Model\Listing {
    /**
     * Class AbstractListing
     *
     * @package Pimcore\Model\Listing
     *
     * @method \Pimcore\Db\ZendCompatibility\QueryBuilder getQuery()
     */
    abstract class AbstractListing extends \pimcore\model\abstractmodel implements \iterator {
        /**
         * @var string|array
         */
        protected $order;
        /**
         * @var array
         */
        protected $orderKey;
        /**
         * @var int
         */
        protected $limit;
        /**
         * @var int
         */
        protected $offset;
        /**
         * @var string
         */
        protected $condition;
        /**
         * @var array
         */
        protected $conditionVariables;
        /**
         * @var array
         */
        protected $conditionVariablesFromSetCondition;
        /**
         * @var string
         */
        protected $groupBy;
        /**
         * @var array
         */
        protected $validOrders;
        /**
         * @var array
         */
        protected $conditionParams;
        /**
         * @var array
         */
        protected $conditionVariableTypes;
        /**
         * @var array|null
         */
        protected $data;

        /**
         * @return array
         */
        public function getConditionVariableTypes() : array {}
        public function setConditionVariableTypes(array $conditionVariableTypes) : void {}
        public function isValidOrderKey($key) {}
        /**
         * @return int
         */
        public function getLimit() {}
        /**
         * @return int
         */
        public function getOffset() {}
        /**
         * @return array|string
         */
        public function getOrder() {}
        public function setLimit($limit) {}
        public function setOffset($offset) {}
        public function setOrder($order) {}
        /**
         * @return array
         */
        public function getOrderKey() {}
        public function setOrderKey($orderKey, $quote = true) {}
        public function addConditionParam($key, $value = null, $concatenator = 'AND') {}
        /**
         * @return array
         */
        public function getConditionParams() {}
        /**
         * @return $this
         */
        public function resetConditionParams() {}
        /**
         * @return string
         */
        public function getCondition() {}
        public function setCondition($condition, $conditionVariables = null) {}
        /**
         * @return string
         */
        public function getGroupBy() {}
        /**
         * @return array
         */
        public function getValidOrders() {}
        public function setGroupBy($groupBy, $qoute = true) {}
        public function setValidOrders($validOrders) {}
        public function quote($value, $type = null) {}
        public function setConditionVariables($conditionVariables) {}
        /**
         * @return array
         */
        public function getConditionVariables() {}
        public function setConditionVariablesFromSetCondition($conditionVariables) {}
        /**
         * @return array
         */
        public function getConditionVariablesFromSetCondition() {}
        /**
         * @return array
         */
        public function getData() {}
        public function setData(?array $data) : self {}
        /**
         * @return mixed
         */
        public function current() {}
        /**
         * @return mixed
         */
        public function key() {}
        /**
         * @return mixed|null
         */
        public function next() {}
        /**
         * @return bool
         */
        public function valid() {}
        public function rewind() {}
    }

    /**
     * Class AbstractListing
     *
     * @package Pimcore\Model\Listing
     *
     * @method \Pimcore\Db\ZendCompatibility\QueryBuilder getQuery()
     */
    abstract class JsonListing extends \pimcore\model\abstractmodel {
        /**
         * @var mixed
         */
        protected $filter;
        /**
         * @var mixed
         */
        protected $order;

        /**
         * @return mixed
         */
        public function getFilter() {}
        public function setFilter($filter) {}
        /**
         * @return mixed
         */
        public function getOrder() {}
        public function setOrder($order) {}
    }

}

namespace Pimcore\Model\Listing\Dao {
    abstract class AbstractDao extends \pimcore\model\dao\abstractdao {
        /**
         * @var Model\DataObject\Listing
         */
        protected $model;

        /**
         * @return string
         */
        protected function getOrder() {}
        /**
         * @return string
         */
        protected function getGroupBy() {}
        /**
         * @return string
         */
        protected function getOffsetLimit() {}
        /**
         * @return string
         */
        protected function getCondition() {}
        protected function addOrder(QueryBuilder $select) {}
        protected function addGroupBy(QueryBuilder $select) {}
        protected function addLimit(QueryBuilder $select) {}
        protected function addConditions(QueryBuilder $select) {}
    }

}

namespace Pimcore\Model\Factory {
    class FallbackBuilder extends \pimcore\loader\implementationloader\abstractclassnameloader {
        public function supports(string $name) : bool {}
        protected function getClassName(string $name) {}
    }

}

namespace Pimcore\Db {
    class Connection extends \doctrine\dbal\connection implements \pimcore\db\connectioninterface {
    use \pimcore\db\pimcoreextensionstrait;
}

    class PhpArrayFileTable {
        /**
         * @var array
         */
        static protected $tables;
        /**
         * @var string
         */
        protected $filePath;
        /**
         * @var array
         */
        protected $data;
        /**
         * @var int
         */
        protected $lastInsertId;

        public static function get($filePath) {}
        public function __construct($filePath = null) {}
        public function setFilePath($filePath) {}
        public function insertOrUpdate($data, $id = null) {}
        public function delete($id) {}
        public function getById($id) {}
        public function fetchAll($filter = null, $order = null) {}
        /**
         * @return int
         */
        public function getNextId() {}
        /**
         * @return int
         */
        public function getLastInsertId() {}
        public function truncate() {}
        protected function load() {}
        protected function save() {}
    }


    interface ConnectionInterface extends \doctrine\dbal\driver\connection {
        function executeQuery($query, array $params = [ ], $types = [ ], QueryCacheProfile $qcp = null) ;
        function executeUpdate($query, array $params = [ ], array $types = [ ]) ;
        function executeCacheQuery($query, $params, $types, QueryCacheProfile $qcp) ;
        function update($tableExpression, array $data, array $identifier, array $types = [ ]) ;
        function insert($tableExpression, array $data, array $types = [ ]) ;
        function deleteWhere($table, $where = '') ;
        function updateWhere($table, array $data, $where = '') ;
        function fetchRow($sql, $params = [ ], $types = [ ]) ;
        function fetchCol($sql, $params = [ ], $types = [ ]) ;
        function fetchOne($sql, $params = [ ], $types = [ ]) ;
        function fetchPairs($sql, array $params = [ ], $types = [ ]) ;
        function insertOrUpdate($table, array $data) ;
        function quoteIdentifier($str) ;
        function quoteInto($text, $value, $type = null, $count = null) ;
        function quoteColumnAs($ident, $alias) ;
        function quoteTableAs($ident, $alias = null) ;
        /**
         * @return ZendDbCompatibleQueryBuilder
         */
        function select() ;
        function limit($sql, $count, $offset = 0) ;
        function queryIgnoreError($sql, $exclusions = [ ]) ;
        function setAutoQuoteIdentifiers($autoQuoteIdentifiers) ;
        function fetchAssoc($statement, array $params = [ ], array $types = [ ]) ;
        function fetchArray($statement, array $params = [ ], array $types = [ ]) ;
        function fetchColumn($statement, array $params = [ ], $column = 0, array $types = [ ]) ;
        function delete($tableExpression, array $identifier, array $types = [ ]) ;
        function fetchAll($sql, array $params = [ ], $types = [ ]) ;
        /**
         * @return QueryBuilder
         */
        function createQueryBuilder() ;
        /**
         * @return void
         */
        function close() ;
    }


    /**
     * @property \Doctrine\DBAL\Driver\Connection $_conn
     */
    trait PimcoreExtensionsTrait {
        /**
         * Specifies whether the connection automatically quotes identifiers.
         * If true, the methods insert(), update() apply identifier quoting automatically.
         * If false, developer must quote identifiers themselves by calling quoteIdentifier().
         *
         * @var bool
         */
        protected $autoQuoteIdentifiers;
        /**
         * @see \Doctrine\DBAL\Connection::connect
         */
        public function connect() {}
        public function query($params) {}
        public function executeQuery($query, array $params = [ ], $types = [ ], QueryCacheProfile $qcp = null) {}
        public function executeUpdate($query, array $params = [ ], array $types = [ ]) {}
        public function executeCacheQuery($query, $params, $types, QueryCacheProfile $qcp) {}
        private function normalizeQuery($query, array $params = [ ], $onlyQuery = false) {}
        public function update($tableExpression, array $data, array $identifier, array $types = [ ]) {}
        public function insert($tableExpression, array $data, array $types = [ ]) {}
        public function deleteWhere($table, $where = '') {}
        public function updateWhere($table, array $data, $where = '') {}
        public function fetchRow($sql, $params = [ ], $types = [ ]) {}
        public function fetchCol($sql, $params = [ ], $types = [ ]) {}
        public function fetchOne($sql, $params = [ ], $types = [ ]) {}
        public function fetchPairs($sql, array $params = [ ], $types = [ ]) {}
        public function insertOrUpdate($table, array $data) {}
        public function quoteIdentifier($str) {}
        public function quoteInto($text, $value, $type = null, $count = null) {}
        public function quoteColumnAs($ident, $alias) {}
        public function quoteTableAs($ident, $alias = null) {}
        protected function _quoteIdentifierAs($ident, $alias = null, $auto = false, $as = ' AS ') {}
        protected function _quoteIdentifier($value, $auto = false) {}
        /**
         * Returns a ZF1 compatible query builder
         * To use the standard Doctrine QueryBuilder, please use $dbal->createQueryBuilder() instead
         *
         * @return ZendDbCompatibleQueryBuilder
         */
        public function select() {}
        public function limit($sql, $count, $offset = 0) {}
        public function queryIgnoreError($sql, $exclusions = [ ]) {}
        protected function prepareParams($params) {}
        protected function quoteDataIdentifiers($data) {}
        public function setAutoQuoteIdentifiers($autoQuoteIdentifiers) {}
    }

}

namespace Pimcore\Db\ZendCompatibility {
    class Expression {
        /**
         * Storage for the SQL expression.
         *
         * @var string
         */
        protected $_expression;

        public function __construct($expression) {}
        /**
         * @return string The string of the SQL expression stored in this object.
         */
        public function __toString() {}
    }

    class QueryBuilder {
        const SQL_FOR_UPDATE = 'FOR UPDATE';
        const SQL_HAVING = 'HAVING';
        const SQL_AS = 'AS';
        const SQL_AND = 'AND';
        const SQL_DISTINCT = 'DISTINCT';
        const SQL_WHERE = 'WHERE';
        const SQL_ORDER_BY = 'ORDER BY';
        const SQL_GROUP_BY = 'GROUP BY';
        const SQL_UNION = 'UNION';
        const SQL_SELECT = 'SELECT';
        const SQL_FROM = 'FROM';
        const SQL_UNION_ALL = 'UNION ALL';
        const CROSS_JOIN = 'cross join';
        const FULL_JOIN = 'full join';
        const SQL_WILDCARD = '*';
        const NATURAL_JOIN = 'natural join';
        const REGEX_COLUMN_EXPR = '/^([\w]*\s*\(([^\(\)]|(?1))*\))$/';
        const REGEX_COLUMN_EXPR_ORDER = '/^([\w]+\s*\(([^\(\)]|(?1))*\))$/';
        const REGEX_COLUMN_EXPR_GROUP = '/^([\w]+\s*\(([^\(\)]|(?1))*\))$/';
        const REGEX_SQL_COMMENTS = '@
    (([\'"]).*?[^\\\]\2) # $1 : Skip single & double quoted expressions
    |(                   # $3 : Match comments
        (?:\#|--).*?$    # - Single line comments
        |                # - Multi line (nested) comments
         /\*             #   . comment open marker
            (?: [^/*]    #   . non comment-marker characters
                |/(?!\*) #   . ! not a comment open
                |\*(?!/) #   . ! not a comment close
                |(?R)    #   . recursive case
            )*           #   . repeat eventually
        \*\/             #   . comment close marker
    )\s*                 # Trim after comments
    |(?<=;)\s+           # Trim after semi-colon
    @msx';
        const SQL_OR = 'OR';
        const SQL_ON = 'ON';
        const SQL_ASC = 'ASC';
        const SQL_DESC = 'DESC';
        const LEFT_JOIN = 'left join';
        const RIGHT_JOIN = 'right join';
        const FOR_UPDATE = 'forupdate';
        const INNER_JOIN = 'inner join';
        const LIMIT_COUNT = 'limitcount';
        const LIMIT_OFFSET = 'limitoffset';
        const HAVING = 'having';
        const ORDER = 'order';
        const WHERE = 'where';
        const GROUP = 'group';
        const FROM = 'from';
        const UNION = 'union';
        const DISTINCT = 'distinct';
        const COLUMNS = 'columns';

        /**
         * @var ConnectionInterface
         */
        protected $_adapter;
        /**
         * The initial values for the $_parts array.
         * NOTE: It is important for the 'FOR_UPDATE' part to be last to ensure
         * meximum compatibility with database adapters.
         *
         * @var array
         */
        static protected $_partsInit;
        /**
         * Specify legal join types.
         *
         * @var array
         */
        static protected $_joinTypes;
        /**
         * Specify legal union types.
         *
         * @var array
         */
        static protected $_unionTypes;
        /**
         * The component parts of a SELECT statement.
         * Initialized to the $_partsInit array in the constructor.
         *
         * @var array
         */
        protected $_parts;
        /**
         * Tracks which columns are being select from each table and join.
         *
         * @var array
         */
        protected $_tableCols;
        /**
         * The query parameters.
         *
         * @var array
         */
        protected $params;
        /**
         * The parameter type map of this query.
         *
         * @var array
         */
        protected $paramTypes;

        public function __construct(ConnectionInterface $adapter) {}
        public function setParameter($key, $value, $type = null) {}
        public function setParameters(array $params, array $types = [ ]) {}
        /**
         * Gets all defined query parameters for the query being constructed indexed by parameter index or name.
         *
         * @return array The currently defined query parameters indexed by parameter index or name.
         */
        public function getParameters() {}
        public function getParameter($key) {}
        /**
         * Gets all defined query parameter types for the query being constructed indexed by parameter index or name.
         *
         * @return array The currently defined query parameter types indexed by parameter index or name.
         */
        public function getParameterTypes() {}
        public function getParameterType($key) {}
        /**
         * Get bind variables
         *
         * @return array
         */
        public function getBind() {}
        public function bind($bind) {}
        public function distinct($flag = true) {}
        public function from($name, $cols = '*', $schema = null) {}
        public function columns($cols = '*', $correlationName = null) {}
        public function union($select = [ ], $type = self::SQL_UNION) {}
        public function join($name, $cond, $cols = self::SQL_WILDCARD, $schema = null) {}
        public function joinInner($name, $cond, $cols = self::SQL_WILDCARD, $schema = null) {}
        public function joinLeft($name, $cond, $cols = self::SQL_WILDCARD, $schema = null) {}
        public function joinRight($name, $cond, $cols = self::SQL_WILDCARD, $schema = null) {}
        public function joinFull($name, $cond, $cols = self::SQL_WILDCARD, $schema = null) {}
        public function joinCross($name, $cols = self::SQL_WILDCARD, $schema = null) {}
        public function joinNatural($name, $cols = self::SQL_WILDCARD, $schema = null) {}
        public function where($cond, $value = null, $type = null) {}
        public function orWhere($cond, $value = null, $type = null) {}
        public function group($spec) {}
        public function having($cond, $value = null, $type = null) {}
        public function orHaving($cond, $value = null, $type = null) {}
        public function order($spec) {}
        public function limit($count = null, $offset = null) {}
        public function limitPage($page, $rowCount) {}
        public function forUpdate($flag = true) {}
        public function getPart($part) {}
        public function query($fetchMode = null, $bind = [ ]) {}
        /**
         * Executes this query using the bound parameters and their types.
         *
         * Uses {@see Connection::executeQuery}
         *
         * @return \Doctrine\DBAL\Driver\Statement|int
         */
        public function execute() {}
        /**
         * Converts this object to an SQL SELECT string.
         *
         * @return string|null This object as a SELECT string. (or null if a string cannot be produced.)
         */
        public function assemble() {}
        public function reset($part = null) {}
        /**
         * @return ConnectionInterface
         */
        public function getAdapter() {}
        protected function _join($type, $name, $cond, $cols, $schema = null) {}
        public function _joinUsing($type, $name, $cond, $cols = '*', $schema = null) {}
        private function _uniqueCorrelation($name) {}
        protected function _tableCols($correlationName, $cols, $afterCorrelationName = null) {}
        protected function _where($condition, $value = null, $type = null, $bool = true) {}
        /**
         * @return array
         */
        protected function _getDummyTable() {}
        protected function _getQuotedSchema($schema = null) {}
        protected function _getQuotedTable($tableName, $correlationName = null) {}
        protected function _renderDistinct($sql) {}
        protected function _renderColumns($sql) {}
        protected function _renderFrom($sql) {}
        protected function _renderUnion($sql) {}
        protected function _renderWhere($sql) {}
        protected function _renderGroup($sql) {}
        protected function _renderHaving($sql) {}
        protected function _renderOrder($sql) {}
        protected function _renderLimitoffset($sql) {}
        protected function _renderForupdate($sql) {}
        /**
         * Gets an ExpressionBuilder used for object-oriented construction of query expressions.
         * This producer method is intended for convenient inline usage. Example:
         *
         * <code>
         *     $qb = $conn->select()
         *         ->where($qb->expr()->eq('u.id', 1));
         * </code>
         *
         * For more complex expression construction, consider storing the expression
         * builder object in a local variable.
         *
         * @return \Doctrine\DBAL\Query\Expression\ExpressionBuilder
         */
        public function expr() {}
/**
 * Recognize methods for Has-Many cases:
 * findParent<Class>()
 * findParent<Class>By<Rule>()
 * Use the non-greedy pattern repeat modifier e.g. \w+?
 */
        public function __call(/**
 * Recognize methods for Has-Many cases:
 * findParent<Class>()
 * findParent<Class>By<Rule>()
 * Use the non-greedy pattern repeat modifier e.g. \w+?
 */
$method, /**
 * Recognize methods for Has-Many cases:
 * findParent<Class>()
 * findParent<Class>By<Rule>()
 * Use the non-greedy pattern repeat modifier e.g. \w+?
 */
array $args) {}
        /**
         * Gets the complete SQL string formed by the current specifications of this QueryBuilder.
         *
         * <code>
         *     $qb = $conn->select()
         *         ->from(['u' => 'users'])
         *         ->columns('*')
         *         ->where('u.id = :user_id');
         *
         *     echo $qb->getSQL(); // SELECT u.* FROM users u WHERE u.id = :user_id
         * </code>
         *
         * @return string The SQL query string.
         */
        public function getSQL() {}
        /**
         * Implements magic method.
         *
         * @return string This object as a SELECT string.
         */
        public function __toString() {}
        public function __sleep() {}
    }

}

namespace Pimcore\Db\ZendCompatibility\QueryBuilder {
    class PaginationAdapter implements \zend\paginator\adapter\adapterinterface {
        const ROW_COUNT_COLUMN = 'zend_compability_paginator_row_count';

        /**
         * The COUNT query
         *
         * @var QueryBuilder
         */
        protected $_countSelect;
        /**
         * Database query
         *
         * @var QueryBuilder
         */
        protected $_select;
        /**
         * Total item count
         *
         * @var int
         */
        protected $_rowCount;
        /**
         * Identifies this adapter for caching purposes.  This value will remain constant for
         * the entire life of this adapter regardless of how many different pages are queried.
         *
         * @var string
         */
        protected $_cacheIdentifier;

        public function __construct(QueryBuilder $select) {}
        /**
         * Returns the cache identifier.
         *
         * @return string
         */
        public function getCacheIdentifier() {}
        public function setRowCount($rowCount) {}
        public function getItems($offset, $itemCountPerPage) {}
        /**
         * Returns the total number of rows in the result set.
         *
         * @return int
         */
        public function count() {}
        /**
         * Get the COUNT select object for the provided query
         *
         * TODO: Have a look at queries that have both GROUP BY and DISTINCT specified.
         * In that use-case I'm expecting problems when either GROUP BY or DISTINCT
         * has one column.
         *
         * @return QueryBuilder
         */
        public function getCountSelect() {}
    }

}

namespace Pimcore\Log {
    class Maintenance {
        public function httpErrorLogCleanup() {}
        public function cleanupLogFiles() {}
        public function checkErrorLogsDb() {}
        public function archiveLogEntries() {}
    }

    class ApplicationLogger implements \psr\log\loggerinterface {
        /**
         * @var null
         */
        protected $component;
        /**
         * @var null
         */
        protected $fileObject;
        /**
         * @var null
         */
        protected $relatedObject;
        /**
         * @var string
         */
        protected $relatedObjectType;
        /**
         * @var array
         */
        protected $loggers;
        /**
         * @var array
         */
        static protected $instances;

        public static function getInstance($component = 'default', $initDbHandler = false) {}
        public function addWriter($writer) {}
        public function setComponent($component) {}
        public function setFileObject($fileObject) {}
        public function setRelatedObject($relatedObject) {}
        public function log($level, $message, array $context = [ ]) {}
        /**
         * Resolve logging source
         *
         * @return string
         */
        protected function resolveLoggingSource() {}
        public function emergency($message, array $context = [ ]) {}
        public function critical($message, array $context = [ ]) {}
        public function error($message, array $context = [ ]) {}
        public function alert($message, array $context = [ ]) {}
        public function warning($message, array $context = [ ]) {}
        public function notice($message, array $context = [ ]) {}
        public function info($message, array $context = [ ]) {}
        public function debug($message, array $context = [ ]) {}
        protected function handleLog($level, $message, $params) {}
        public function logException($message, $exceptionObject, $priority = 'alert', $relatedObject = null, $component = null) {}
        public static function logExceptionObject(LoggerInterface $logger, string $message, \Throwable $exception, $level = Logger::ALERT, $relatedObject = null, array $context = [ ]) {}
        private static function createExceptionFileObject(\Throwable $exceptionObject) {}
    }

    class Simple {
        public static function log($name, $message) {}
    }

    class FileObject {
        /**
         * @var string
         */
        protected $filename;
        /**
         * @var string
         */
        protected $data;

        public function __construct($data, $filename = null) {}
        /**
         * @return string
         */
        public function getSystemPath() {}
        /**
         * @return string
         */
        public function getFilename() {}
        /**
         * @return string
         */
        public function getData() {}
    }

}

namespace Pimcore\Log\Handler {
    class Mail extends \monolog\handler\mailhandler {
        /**
         * @var null
         */
        protected $address;

        public function __construct($address, $level = Logger::DEBUG, $bubble = true) {}
        public function send($content, array $records) {}
    }

    class ApplicationLoggerDb extends \monolog\handler\abstractprocessinghandler {
        const TABLE_NAME = 'application_logs';
        const TABLE_ARCHIVE_PREFIX = 'application_logs_archive';

        /**
         * @var Db\ConnectionInterface
         */
        private $db;

        public function __construct(Db\ConnectionInterface $db, $level = 'debug', $bubble = true) {}
        public function write(array $record) {}
        /**
         * @static
         *
         * @return string[]
         */
        public static function getComponents() {}
        /**
         * @static
         *
         * @return string[]
         */
        public static function getPriorities() {}
    }

}

namespace Pimcore\Log\Processor {
    /**
     * Make sure you add this processor when using the ApplicationLoggerDb handler as is
     * prepares data to be written by the handler. This replicates the functionalty implemented
     * in ApplicationLogger, but makes it available when using the ApplicationLoggerDb handler
     * in a pure PSR-3 handler context configured as monolog channel handler instead of
     * the ApplicationLogger class.
     */
    class ApplicationLoggerProcessor {
        public function __invoke(array $record) : array {}
        private function processFileObject(array $record) : array {}
        private function processRelatedObject(array $record) : array {}
        private function processLoggingSource(array $record) : array {}
        private function normalizeFilename($filename) {}
    }

}

namespace Pimcore\Placeholder {
    abstract class AbstractPlaceholder {
        /**
         * The placeholder string e.g "%Object(object_id,{"method" : "getName"})"
         *
         * @var string
         */
        protected $placeholderString;
        /**
         * The placeholder key passed to determine the dynamic parameter
         *
         * @var string
         */
        protected $placeholderKey;
        /**
         * The config object passed from the placeholder
         * If no config object was passed a empty \Pimcore\Config\Config is passed
         *
         * @var \Pimcore\Config\Config
         */
        protected $placeholderConfig;
        /**
         * The passed Document Object
         *
         * @var Document | null
         */
        protected $document;
        /**
         * All dynamic parameters which are passed to the Placeholder
         *
         * @var array
         */
        protected $params;
        /**
         * The Content as string
         *
         * @var string
         */
        protected $contentString;
        /**
         * @var string
         */
        protected $locale;

        public function setPlaceholderString($string) {}
        /**
         * @return string
         */
        public function getPlaceholderString() {}
        public function setPlaceholderKey($key) {}
        /**
         * Returns the Placehodler key
         *
         * @return string
         */
        public function getPlaceholderKey() {}
        public function setPlaceholderConfig(\Pimcore\Config\Config $config) {}
        /**
         * Returns the Placeholder config object
         *
         * @return \Pimcore\Config\Config
         */
        public function getPlaceholderConfig() {}
        public function setParams($params) {}
        /**
         * Returns the Parameters ob the Placeholder object
         *
         * @return array
         */
        public function getParams() {}
        public function getParam($key) {}
        public function setContentString($contentString) {}
        /**
         * returns the full content string
         *
         * @return null|string
         */
        public function getContentString() {}
        /**
         * Returns the the value of the current Placeholder parameter
         *
         * @return mixed
         */
        public function getValue() {}
        public function setDocument($document) {}
        /**
         * Returns the Document
         *
         * @return Document|null
         */
        public function getDocument() {}
        /**
         * Returns the current locale
         *
         * @return string
         */
        public function getLocale() {}
        public function setLocale($locale = null) {}
        /**
         * Returns the current language
         *
         * @return string
         */
        public function getLanguage() {}
        /**
         * Will be used as replacement if the passed parameter is empty
         *
         * @return string
         */
        public function getEmptyValue() {}
        /**
         * Has to return an appropriate value for a test replacement
         *
         * @abstract
         *
         * @return string
         */
        abstract public function getTestValue() ;
        /**
         * Has to return the placeholder with the corresponding value
         *
         * @abstract
         *
         * @return string
         */
        abstract public function getReplacement() ;
    }

    class DataObject extends \pimcore\placeholder\abstractplaceholder {
        /**
         * Returns a value for test replacement
         *
         * @return string
         */
        public function getTestValue() {}
        /**
         * Gets a object by it's id and replaces the placeholder width the value form the called "method"
         *
         * example: %Object(object_id,{"method" : "getId"});
         *
         * @return string
         */
        public function getReplacement() {}
    }

    class Text extends \pimcore\placeholder\abstractplaceholder {
        /**
         * Returns a value for test replacement
         *
         * @return string
         */
        public function getTestValue() {}
        /**
         * Replaces the Placeholder with the passed value
         *
         * @return mixed
         */
        public function getReplacement() {}
    }

}

namespace Pimcore\DataObject\GridColumnConfig {
    class Service {
        /**
         * @var ContainerInterface
         */
        private $operatorFactories;
        /**
         * @var ContainerInterface
         */
        private $valueFactories;

        public function __construct(ContainerInterface $operatorFactories, ContainerInterface $valueFactories) {}
        public function buildOutputDataConfig(array $jsonConfigs, $context = null) : array {}
        private function doBuildConfig(array $jsonConfigs, array $config, $context = null) : array {}
/** @var OperatorFactoryInterface $factory */
        private function buildOperator(/** @var OperatorFactoryInterface $factory */
string $name, /** @var OperatorFactoryInterface $factory */
\stdClass $configElement, /** @var OperatorFactoryInterface $factory */
$context = null) : OperatorInterface {}
/** @var ValueFactoryInterface $factory */
        private function buildValue(/** @var ValueFactoryInterface $factory */
string $name, /** @var ValueFactoryInterface $factory */
\stdClass $configElement, /** @var ValueFactoryInterface $factory */
$context = null) : ValueInterface {}
    }

    abstract class AbstractConfigElement implements \pimcore\dataobject\gridcolumnconfig\configelementinterface {}

    class ResultContainer {
        public $label;
        public $value;
        public $isEmpty;

        public function getLabel() {}
        public function setLabel($label) {}
        public function getValue() {}
        public function setValue($value) {}
        public function getIsEmpty() {}
        public function setIsEmpty($isEmpty) {}
    }


    interface ConfigElementInterface {
        /**
         * @return string
         */
        function getLabel() ;
        function getLabeledValue($element) ;
    }

}

namespace Pimcore\DataObject\GridColumnConfig\Value {
    abstract class AbstractValue implements \pimcore\dataobject\gridcolumnconfig\value\valueinterface {
        /**
         * @var string
         */
        protected $attribute;
        /**
         * @var string
         */
        protected $label;
        /**
         * @var mixed
         */
        protected $context;

        public function __construct($config, $context = null) {}
        public function getLabel() {}
    }

    class Objects extends \pimcore\dataobject\gridcolumnconfig\value\abstractvalue {
        private function getValue($element) {}
        public function getLabeledValue($element) {}
    }

    class Href extends \pimcore\dataobject\gridcolumnconfig\value\abstractvalue {
        private function getValue($element) {}
        public function getLabeledValue($element) {}
    }

    class DefaultValue extends \pimcore\dataobject\gridcolumnconfig\value\abstractvalue {
        private function getValueForObject($object, $key, $brickType = null, $brickKey = null, $fieldDefinition = null) {}
        private function getDefaultValue($value) {}
/** @var Concrete $element */
        public function getLabeledValue(/** @var Concrete $element */
$element) {}
    }


    interface ValueInterface extends \pimcore\dataobject\gridcolumnconfig\configelementinterface {}

}

namespace Pimcore\DataObject\GridColumnConfig\Value\Factory {
    class DefaultValueFactory implements \pimcore\dataobject\gridcolumnconfig\value\factory\valuefactoryinterface {
        /**
         * @var string
         */
        private $className;

        public function __construct(string $className) {}
        public function build(\stdClass $configElement, $context = null) : ValueInterface {}
    }


    interface ValueFactoryInterface {
        function build(\stdClass $configElement, $context = null) : ValueInterface ;
    }

}

namespace Pimcore\DataObject\GridColumnConfig\Operator {
    class Boolean extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $skipNull;
        private $operator;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
        /**
         * @return mixed
         */
        public function getSkipNull() {}
        public function setSkipNull($skipNull) {}
        /**
         * @return mixed
         */
        public function getOperator() {}
        public function setOperator($operator) {}
    }

    class AbstractRenderer extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        public function getLabeledValue($element) {}
    }

    class AssetMetadataGetter extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $metaField;
        private $locale;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
        public function getMetadata($value) {}
        /**
         * @return mixed
         */
        public function getMetaField() {}
        public function setMetaField($metaField) {}
        public function setLocale($locale) {}
        /**
         * @return mixed
         */
        public function getLocale() {}
    }

    class HotspotimageRenderer extends \pimcore\dataobject\gridcolumnconfig\operator\abstractrenderer {
        public $renderer;

    }

    class Concatenator extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $glue;
        private $forceValue;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
    }

    class FieldCollectionGetter extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $attr;
        private $idx;
        private $colAttr;

        public function __construct(\stdClass $config, $context = null) {}
/** @var Fieldcollection $fc */
        public function getLabeledValue(/** @var Fieldcollection $fc */
$element) {}
    }

    class LocaleSwitcher extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        /**
         * @var LocaleServiceInterface
         */
        private $localeService;
        /**
         * @var string
         */
        private $locale;

        public function __construct(LocaleServiceInterface $localeService, \stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
    }

    class JSON extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        /**
         * @var string
         */
        private $mode;

        public function __construct(\stdClass $config, $context = null) {}
/** @var string $childValue */
        public function getLabeledValue(/** @var string $childValue */
$element) {}
    }

    class ImageRenderer extends \pimcore\dataobject\gridcolumnconfig\operator\abstractrenderer {
        public $renderer;

    }

    class PHPCode extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        /**
         * @var \stdClass
         */
        private $config;
        /**
         * @var string
         */
        private $phpClass;
        /**
         * @var OperatorInterface
         */
        private $instance;

        public function __construct(\stdClass $config, $context = null) {}
        public function getPhpClass() : string {}
        public function setPhpClass(string $phpClass) {}
        public function getLabel() {}
        public function getLabeledValue($element) {}
        private function getInstance() : OperatorInterface {}
        private function buildInstance() : OperatorInterface {}
    }

    class CaseConverter extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $capitalization;

        public function __construct(\stdClass $config, $context = null) {}
/** @var string $childValue */
        public function getLabeledValue(/** @var string $childValue */
$element) {}
    }

    class Arithmetic extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $skipNull;
        private $operator;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
        /**
         * @return mixed
         */
        public function getSkipNull() {}
        public function setSkipNull($skipNull) {}
        /**
         * @return mixed
         */
        public function getOperator() {}
        public function setOperator($operator) {}
    }

    class Anonymizer extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        /**
         * @var string
         */
        private $mode;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
    }

    class Substring extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $start;
        private $length;
        private $ellipses;

        public function __construct(\stdClass $config, $context = null) {}
/** @var string $childValue */
        public function getLabeledValue(/** @var string $childValue */
$element) {}
        /**
         * @return mixed
         */
        public function getStart() {}
        public function setStart($start) {}
        /**
         * @return mixed
         */
        public function getLength() {}
        public function setLength($length) {}
        /**
         * @return mixed
         */
        public function getEllipses() {}
        public function setEllipses($ellipses) {}
    }

    class BooleanFormatter extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $yesValue;
        private $noValue;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
        /**
         * @return mixed
         */
        public function getYesValue() {}
        public function setYesValue($yesValue) {}
        /**
         * @return mixed
         */
        public function getNoValue() {}
        public function setNoValue($noValue) {}
    }

    class StringReplace extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $search;
        private $replace;
        private $insensitive;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
        public function replace($value) {}
        /**
         * @return mixed
         */
        public function getSearch() {}
        public function setSearch($search) {}
        /**
         * @return mixed
         */
        public function getReplace() {}
        public function setReplace($replace) {}
        /**
         * @return mixed
         */
        public function getInsensitive() {}
        public function setInsensitive($insensitive) {}
    }

    class ElementCounter extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $countEmpty;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
        /**
         * @return mixed
         */
        public function getCountEmpty() {}
        public function setCountEmpty($countEmpty) {}
    }

    class RequiredBy extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $elementType;
        private $onlyCount;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
        /**
         * @return mixed
         */
        public function getElementType() {}
        public function setElementType($elementType) {}
        /**
         * @return mixed
         */
        public function getOnlyCount() {}
        public function setOnlyCount($onlyCount) {}
    }

    class GeopointRenderer extends \pimcore\dataobject\gridcolumnconfig\operator\abstractrenderer {
        public $renderer;

    }

    class ObjectBrickGetter extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $brickAttr;
        private $brickType;
        private $attr;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
    }

    class IsEqual extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $capitalization;
        private $skipNull;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
        /**
         * @return mixed
         */
        public function getSkipNull() {}
        public function setSkipNull($skipNull) {}
    }

    class Merge extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $flatten;
        private $unique;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
        /**
         * @return mixed
         */
        public function getFlatten() {}
        public function setFlatten($flatten) {}
        /**
         * @return mixed
         */
        public function getUnique() {}
        public function setUnique($unique) {}
    }

    class CharCounter extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        public function getLabeledValue($element) {}
    }

    class DateFormatter extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        /**
         * @var string|null
         */
        private $format;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
        public function format($theValue) {}
    }

    class WorkflowState extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        /**
         * @var StatusInfo
         */
        private $statusInfo;

        public function getLabeledValue($element) {}
        public function setWorkflowStatusInfo(StatusInfo $statusInfo) {}
    }

    class ObjectFieldGetter extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $attribute;
        private $forwardAttribute;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
    }

    abstract class AbstractOperator implements \pimcore\dataobject\gridcolumnconfig\operator\operatorinterface {
        /**
         * @var string
         */
        protected $label;
        /**
         * @var mixed
         */
        protected $context;
        /**
         * @var ConfigElementInterface[]
         */
        protected $childs;

        public function __construct(\stdClass $config, $context = null) {}
        /**
         * @return ConfigElementInterface[]
         */
        public function getChilds() {}
        /**
         * @return bool
         */
        public function expandLocales() {}
        public function getContext() {}
        public function setContext($context) {}
        public function getLabel() {}
        public function setLabel($label) {}
    }

    class LFExpander extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        /**
         * @var LocaleServiceInterface
         */
        private $localeService;
        private $locales;
        private $asArray;
        private $prefix;

        public function __construct(LocaleServiceInterface $localeService, \stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
        /**
         * @return mixed
         */
        public function getPrefix() {}
        public function setPrefix($prefix) {}
        /**
         * @return bool
         */
        public function expandLocales() {}
        /**
         * @return string[]
         */
        public function getValidLanguages() {}
        /**
         * @return mixed
         */
        public function getAsArray() {}
        public function setAsArray($asArray) {}
    }

    class StringContains extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $search;
        private $insensitive;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
        public function contains($value) {}
        /**
         * @return mixed
         */
        public function getSearch() {}
        public function setSearch($search) {}
        /**
         * @return mixed
         */
        public function getInsensitive() {}
        public function setInsensitive($insensitive) {}
    }

    class TranslateValue extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        /**
         * @var TranslatorInterface
         */
        private $translator;
        private $prefix;
        private $locale;

        public function __construct(TranslatorInterface $translator, \stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
        /**
         * @return mixed
         */
        public function getPrefix() {}
        public function setPrefix($prefix) {}
    }

    class PHP extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $mode;

        public function __construct(\stdClass $config, $context = null) {}
/** @var string $childValue */
        public function getLabeledValue(/** @var string $childValue */
$element) {}
    }

    class AnyGetter extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $attribute;
        private $param1;
        private $isArrayType;
        private $forwardAttribute;
        private $forwardParam1;
        private $returnLastResult;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
        /**
         * @return mixed
         */
        public function getAttribute() {}
        public function setAttribute($attribute) {}
        /**
         * @return mixed
         */
        public function getParam1() {}
        public function setParam1($param1) {}
        /**
         * @return mixed
         */
        public function getForwardAttribute() {}
        public function setForwardAttribute($forwardAttribute) {}
        /**
         * @return mixed
         */
        public function getForwardParam1() {}
        public function setForwardParam1($forwardParam1) {}
        /**
         * @return mixed
         */
        public function getisArrayType() {}
        public function setIsArrayType($isArrayType) {}
        /**
         * @return mixed
         */
        public function getReturnLastResult() {}
        public function setReturnLastResult($returnLastResult) {}
    }

    class Base64 extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        /**
         * @var string
         */
        private $mode;

        public function __construct(\stdClass $config, $context = null) {}
/** @var string $childValue */
        public function getLabeledValue(/** @var string $childValue */
$element) {}
    }

    class PropertyGetter extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $propertyName;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
        /**
         * @return mixed
         */
        public function getPropertyName() {}
        public function setPropertyName($propertyName) {}
    }

    class Text extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        private $textValue;

        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($element) {}
    }

    class Iterator extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        public function __construct(\stdClass $config, $context = null) {}
        public function getLabeledValue($elements) {}
    }

    class Trimmer extends \pimcore\dataobject\gridcolumnconfig\operator\abstractoperator {
        const LEFT = 1;
        const RIGHT = 2;
        const BOTH = 3;

        private $trim;

        public function __construct(\stdClass $config, $context = null) {}
/** @var string $childValue */
        public function getLabeledValue(/** @var string $childValue */
$element) {}
    }


    interface OperatorInterface extends \pimcore\dataobject\gridcolumnconfig\configelementinterface {}

}

namespace Pimcore\DataObject\GridColumnConfig\Operator\Factory {
    class DefaultOperatorFactory implements \pimcore\dataobject\gridcolumnconfig\operator\factory\operatorfactoryinterface {
        /**
         * @var string
         */
        private $className;

        public function __construct(string $className) {}
        public function build(\stdClass $configElement, $context = null) : OperatorInterface {}
    }

    class LocaleSwitcherFactory implements \pimcore\dataobject\gridcolumnconfig\operator\factory\operatorfactoryinterface {
        /**
         * @var LocaleServiceInterface
         */
        private $localeService;

        public function __construct(LocaleServiceInterface $localeService) {}
        public function build(\stdClass $configElement, $context = null) : OperatorInterface {}
    }

    class LFExpanderFactory implements \pimcore\dataobject\gridcolumnconfig\operator\factory\operatorfactoryinterface {
        /**
         * @var LocaleServiceInterface
         */
        private $localeService;

        public function __construct(LocaleServiceInterface $localeService) {}
        public function build(\stdClass $configElement, $context = null) : OperatorInterface {}
    }

    class TranslateValueFactory implements \pimcore\dataobject\gridcolumnconfig\operator\factory\operatorfactoryinterface {
        /**
         * @var TranslatorInterface
         */
        private $translator;

        public function __construct(TranslatorInterface $translator) {}
        public function build(\stdClass $configElement, $context = null) : OperatorInterface {}
    }

    class WorkflowStateFactory implements \pimcore\dataobject\gridcolumnconfig\operator\factory\operatorfactoryinterface {
        /**
         * @var StatusInfo
         */
        private $workflowStatusInfo;

        public function __construct(StatusInfo $workflowStatusInfo) {}
        public function build(\stdClass $configElement, $context = null) : OperatorInterface {}
    }


    interface OperatorFactoryInterface {
        function build(\stdClass $configElement, $context = null) : OperatorInterface ;
    }

}

namespace Pimcore\DataObject\Consent {
    class Service {
        public function insertConsentNote(AbstractObject $object, string $fieldname, string $consentContent, array $metaData = [ ]) : Note {}
        public function insertRevokeNote(AbstractObject $object, string $fieldname) : Note {}
        public function giveConsent(AbstractObject $object, string $fieldname, string $consentContent, array $metaData = [ ]) : Note {}
        public function revokeConsent(AbstractObject $object, string $fieldname) : Note {}
    }

}

namespace Pimcore\DataObject\Import {
    class Service {
        const FORBIDDEN_KEYS = ['id', 'fullpath', 'filename', 'published', 'creationDate', 'modificationDate', 'key'];

        /**
         * @var Db\ConnectionInterface
         */
        private $db;
        /**
         * @var ContainerInterface
         */
        private $resolvers;
        /**
         * @var ContainerInterface
         */
        private $operatorFactories;
        /**
         * @var ContainerInterface
         */
        private $valueFactories;

        public function __construct(Db\ConnectionInterface $db, ContainerInterface $resolvers, ContainerInterface $operatorFactories, ContainerInterface $valueFactories) {}
/** @var ResolverInterface $resolver */
        public function getResolver(/** @var ResolverInterface $resolver */
string $name) : ResolverInterface {}
        public function buildInputDataConfig(array $jsonConfigs, $context = null) : array {}
        private function doBuildConfig(array $jsonConfigs, array $config, $context = null) : array {}
/** @var OperatorFactoryInterface $factory */
        private function buildOperator(/** @var OperatorFactoryInterface $factory */
string $name, /** @var OperatorFactoryInterface $factory */
\stdClass $configElement, /** @var OperatorFactoryInterface $factory */
$context = null) : OperatorInterface {}
/** @var ValueFactoryInterface $factory */
        private function buildValue(/** @var ValueFactoryInterface $factory */
string $name, /** @var ValueFactoryInterface $factory */
\stdClass $configElement, /** @var ValueFactoryInterface $factory */
$context = null) : ValueInterface {}
        public function getSharedImportConfigs($user, $classId) {}
        public function getMyOwnImportConfigs($user, $classId) {}
        public function createFromExportConfig($gridConfig) {}
        public function getImportColumn($class, $exportColumn) {}
    }

}

namespace Pimcore\DataObject\Import\ColumnConfig {
    abstract class AbstractConfigElement implements \pimcore\dataobject\import\columnconfig\configelementinterface {
        /**
         * @var string
         */
        protected $attribute;
        /**
         * @var string
         */
        protected $label;
        /**
         * @var mixed|null
         */
        protected $context;

        public function __construct(\stdClass $config, $context = null) {}
        /**
         * @return string
         */
        public function getLabel() {}
        /**
         * @return mixed|null
         */
        public function getContext() {}
        public function setContext($context = null) {}
    }


    interface ConfigElementInterface {
        function process($element, $target, array $rowData, $colIndex, array $context = [ ]) ;
    }

}

namespace Pimcore\DataObject\Import\ColumnConfig\Value {
    class DefaultValue extends \pimcore\dataobject\import\columnconfig\abstractconfigelement implements \pimcore\dataobject\import\columnconfig\value\valueinterface {
        /**
         * @var string
         */
        private $mode;
        /**
         * @var bool
         */
        private $doNotOverwrite;
        /**
         * @var bool
         */
        private $skipEmptyValues;

        public function __construct(\stdClass $config, $context = null) {}
/** @var ClassDefinition\Data\Localizedfields $lfDef */
        public function process(/** @var ClassDefinition\Data\Localizedfields $lfDef */
$element, /** @var ClassDefinition\Data\Localizedfields $lfDef */
$target, /** @var ClassDefinition\Data\Localizedfields $lfDef */
array $rowData, /** @var ClassDefinition\Data\Localizedfields $lfDef */
$colIndex, /** @var ClassDefinition\Data\Localizedfields $lfDef */
array $context = [ ]) {}
    }


    interface ValueInterface extends \pimcore\dataobject\import\columnconfig\configelementinterface {}

}

namespace Pimcore\DataObject\Import\ColumnConfig\Value\Factory {
    class DefaultValueFactory implements \pimcore\dataobject\import\columnconfig\value\factory\valuefactoryinterface {
        /**
         * @var string
         */
        private $className;

        public function __construct(string $className) {}
        public function build(\stdClass $configElement, $context = null) : ValueInterface {}
    }


    interface ValueFactoryInterface {
        function build(\stdClass $configElement, $context = null) : ValueInterface ;
    }

}

namespace Pimcore\DataObject\Import\ColumnConfig\Operator {
    class Unserialize extends \pimcore\dataobject\import\columnconfig\operator\abstractoperator {
/** @var AbstractConfigElement $child */
        public function process(/** @var AbstractConfigElement $child */
$element, /** @var AbstractConfigElement $child */
$target, /** @var AbstractConfigElement $child */
array $rowData, /** @var AbstractConfigElement $child */
$colIndex, /** @var AbstractConfigElement $child */
array $context = [ ]) {}
    }

    class LocaleSwitcher extends \pimcore\dataobject\import\columnconfig\operator\abstractoperator {
        /**
         * @var LocaleServiceInterface
         */
        private $localeService;
        /**
         * @var string
         */
        private $locale;

        public function __construct(LocaleServiceInterface $localeService, \stdClass $config, $context = null) {}
/** @var AbstractConfigElement $child */
        public function process(/** @var AbstractConfigElement $child */
$element, /** @var AbstractConfigElement $child */
$target, /** @var AbstractConfigElement $child */
array $rowData, /** @var AbstractConfigElement $child */
$colIndex, /** @var AbstractConfigElement $child */
array $context = [ ]) {}
    }

    class Splitter extends \pimcore\dataobject\import\columnconfig\operator\abstractoperator {
        /**
         * @var string
         */
        private $glue;

        public function __construct(\stdClass $config, $context = null) {}
/** @var AbstractConfigElement $child */
        public function process(/** @var AbstractConfigElement $child */
$element, /** @var AbstractConfigElement $child */
$target, /** @var AbstractConfigElement $child */
array $rowData, /** @var AbstractConfigElement $child */
$colIndex, /** @var AbstractConfigElement $child */
array $context = [ ]) {}
    }

    class PHPCode extends \pimcore\dataobject\import\columnconfig\operator\abstractoperator {
        /**
         * @var \stdClass
         */
        protected $config;
        /**
         * @var string
         */
        protected $phpClass;
        /**
         * @var string
         */
        protected $additionalData;
        /**
         * @var OperatorInterface
         */
        private $instance;

        public function __construct(\stdClass $config, $context = null) {}
        /**
         * @return string
         */
        public function getPhpClass() : string {}
        public function setPhpClass(string $phpClass) {}
        /**
         * @return string
         */
        public function getAdditionalData() : string {}
        public function setAdditionalData(string $additionalData) : void {}
        public function process($element, $target, array $rowData, $colIndex, array $context = [ ]) {}
        /**
         * @return OperatorInterface
         *
         * @throws \Exception
         */
        private function buildInstance() : OperatorInterface {}
    }

    class Published extends \pimcore\dataobject\import\columnconfig\operator\abstractoperator {
        public function process($element, $target, array $rowData, $colIndex, array $context = [ ]) {}
    }

    class ObjectBrickSetter extends \pimcore\dataobject\import\columnconfig\operator\abstractoperator {
        /**
         * @var FactoryInterface
         */
        private $modelFactory;
        /**
         * @var string
         */
        private $attr;
        /**
         * @var string
         */
        private $brickType;
        /**
         * @var string
         */
        private $mode;

        public function __construct(FactoryInterface $modelFactory, \stdClass $config, $context = null) {}
/** @var AbstractConfigElement $child */
        public function process(/** @var AbstractConfigElement $child */
$element, /** @var AbstractConfigElement $child */
$target, /** @var AbstractConfigElement $child */
array $rowData, /** @var AbstractConfigElement $child */
$colIndex, /** @var AbstractConfigElement $child */
array $context = [ ]) {}
    }

    abstract class AbstractOperator extends \pimcore\dataobject\import\columnconfig\abstractconfigelement implements \pimcore\dataobject\import\columnconfig\operator\operatorinterface {
        /**
         * @var ConfigElementInterface[]
         */
        protected $childs;

        public function __construct(\stdClass $config, $context = null) {}
        /**
         * @return ConfigElementInterface[]
         */
        public function getChilds() : array {}
    }

    class Base64 extends \pimcore\dataobject\import\columnconfig\operator\abstractoperator {
        /**
         * @var string
         */
        private $mode;

        public function __construct(\stdClass $config, $context = null) {}
/** @var AbstractConfigElement $child */
        public function process(/** @var AbstractConfigElement $child */
$element, /** @var AbstractConfigElement $child */
$target, /** @var AbstractConfigElement $child */
array $rowData, /** @var AbstractConfigElement $child */
$colIndex, /** @var AbstractConfigElement $child */
array $context = [ ]) {}
    }

    class Iterator extends \pimcore\dataobject\import\columnconfig\operator\abstractoperator {
/** @var AbstractConfigElement $child */
        public function process(/** @var AbstractConfigElement $child */
$element, /** @var AbstractConfigElement $child */
$target, /** @var AbstractConfigElement $child */
array $rowData, /** @var AbstractConfigElement $child */
$colIndex, /** @var AbstractConfigElement $child */
array $context = [ ]) {}
    }


    interface OperatorInterface extends \pimcore\dataobject\import\columnconfig\configelementinterface {}

}

namespace Pimcore\DataObject\Import\ColumnConfig\Operator\Factory {
    class DefaultOperatorFactory implements \pimcore\dataobject\import\columnconfig\operator\factory\operatorfactoryinterface {
        /**
         * @var string
         */
        private $className;

        public function __construct(string $className) {}
        public function build(\stdClass $configElement, $context = null) : OperatorInterface {}
    }

    class LocaleSwitcherFactory implements \pimcore\dataobject\import\columnconfig\operator\factory\operatorfactoryinterface {
        /**
         * @var LocaleServiceInterface
         */
        private $localeService;

        public function __construct(LocaleServiceInterface $localeService) {}
        public function build(\stdClass $configElement, $context = null) : OperatorInterface {}
    }

    class ObjectBrickSetterFactory implements \pimcore\dataobject\import\columnconfig\operator\factory\operatorfactoryinterface {
        /**
         * @var FactoryInterface
         */
        private $modelFactory;

        public function __construct(FactoryInterface $modelFactory) {}
        public function build(\stdClass $configElement, $context = null) : OperatorInterface {}
    }


    interface OperatorFactoryInterface {
        function build(\stdClass $configElement, $context = null) : OperatorInterface ;
    }

}

namespace Pimcore\DataObject\Import\Resolver {
    class Fullpath extends \pimcore\dataobject\import\resolver\abstractresolver {
        /**
         * @var FactoryInterface
         */
        private $modelFactory;

        public function __construct(FactoryInterface $modelFactory) {}
        public function resolve(\stdClass $config, int $parentId, array $rowData) {}
    }

    class Code extends \pimcore\dataobject\import\resolver\abstractresolver {
        /**
         * @var LocaleServiceInterface
         */
        private $localeService;

        public function __construct(LocaleServiceInterface $localeService) {}
/** @var ResolverInterface $resolverImplementation */
        public function resolve(/** @var ResolverInterface $resolverImplementation */
\stdClass $config, /** @var ResolverInterface $resolverImplementation */
int $parentId, /** @var ResolverInterface $resolverImplementation */
array $rowData) {}
    }

    class Filename extends \pimcore\dataobject\import\resolver\abstractresolver {
        /**
         * @var FactoryInterface
         */
        private $modelFactory;

        public function __construct(FactoryInterface $modelFactory) {}
        public function resolve(\stdClass $config, int $parentId, array $rowData) {}
        private function getAlternativeObject(string $prefix, string $intendedPath, ElementInterface $parent, string $className) {}
    }

    abstract class AbstractResolver implements \pimcore\dataobject\import\resolver\resolverinterface {
        protected function getIdColumn(\stdClass $config) {}
        protected function setObjectType($config, $object, $rowData) {}
    }

    class GetBy extends \pimcore\dataobject\import\resolver\abstractresolver {
        /**
         * @var FactoryInterface
         */
        private $modelFactory;

        public function __construct(FactoryInterface $modelFactory) {}
/** @var ElementInterface|Concrete|Document|Asset $object */
        public function resolve(/** @var ElementInterface|Concrete|Document|Asset $object */
\stdClass $config, /** @var ElementInterface|Concrete|Document|Asset $object */
int $parentId, /** @var ElementInterface|Concrete|Document|Asset $object */
array $rowData) {}
    }

    class Id extends \pimcore\dataobject\import\resolver\abstractresolver {
        public function resolve(\stdClass $config, int $parentId, array $rowData) {}
    }


    interface ResolverInterface {
        function resolve(\stdClass $config, int $parentId, array $rowData) ;
    }

}

namespace Pimcore\Maintenance {
    final class Executor implements \pimcore\maintenance\executorinterface {
        /**
         * @var array
         */
        private $tasks;
        /**
         * @var string
         */
        private $pidFileName;
        /**
         * @var LoggerInterface
         */
        private $logger;

        public function __construct(string $pidFileName, LoggerInterface $logger) {}
/**
 * @var TaskInterface $task
 */
        public function executeMaintenance(/**
 * @var TaskInterface $task
 */
array $validJobs = [ ], /**
 * @var TaskInterface $task
 */
array $excludedJobs = [ ], /**
 * @var TaskInterface $task
 */
bool $force = false) {}
        /**
         * {@inheritdoc}
         */
        public function getTaskNames() {}
        /**
         * {@inheritdoc}
         */
        public function setLastExecution() {}
        /**
         * {@inheritdoc}
         */
        public function getLastExecution() {}
        public function registerTask($name, TaskInterface $task) {}
    }


    interface ExecutorInterface {
        function executeMaintenance(array $validJobs = [ ], array $excludedJobs = [ ], bool $force = false) ;
        function registerTask($name, TaskInterface $task) ;
        /**
         * @return array
         */
        function getTaskNames() ;
        /**
         * @return int
         */
        function getLastExecution() ;
        function setLastExecution() ;
    }

    interface TaskInterface {
        /**
         * Execute the Task
         */
        function execute() ;
    }

}

namespace Pimcore\Maintenance\Tasks {
    final class LogMailMaintenanceTask implements \pimcore\maintenance\taskinterface {
        /**
         * @var Db\ConnectionInterface
         */
        private $db;

        public function __construct(Db\ConnectionInterface $db) {}
        /**
         * {@inheritdoc}
         */
        public function execute() {}
    }

    final class CacheCleanupTask implements \pimcore\maintenance\taskinterface {
        /**
         * @var CoreHandlerInterface
         */
        private $cacheHandler;
        /**
         * @var LoggerInterface
         */
        private $logger;

        public function __construct(CoreHandlerInterface $cacheHandler, LoggerInterface $logger) {}
        /**
         * {@inheritdoc}
         */
        public function execute() {}
    }

    final class AssetDocumentConversionTask implements \pimcore\maintenance\taskinterface {
        /**
         * @var LoggerInterface
         */
        private $logger;

        public function __construct(LoggerInterface $logger) {}
        /**
         * {@inheritdoc}
         */
        public function execute() {}
    }

    final class CheckErrorLogsDbTask implements \pimcore\maintenance\taskinterface {
        /**
         * @var ConnectionInterface
         */
        private $db;

        public function __construct(ConnectionInterface $db) {}
        /**
         * {@inheritdoc}
         */
        public function execute() {}
    }

    final class LogCleanupTask implements \pimcore\maintenance\taskinterface {
        /**
         * {@inheritdoc}
         */
        public function execute() {}
    }

    final class VersionsCleanupTask implements \pimcore\maintenance\taskinterface {
        /**
         * @var LoggerInterface
         */
        private $logger;

        public function __construct(LoggerInterface $logger) {}
        /**
         * {@inheritdoc}
         */
        public function execute() {}
    }

    final class TmpStoreCleanupTask implements \pimcore\maintenance\taskinterface {
        /**
         * @var ConnectionInterface
         */
        private $db;

        public function __construct(ConnectionInterface $db) {}
        /**
         * {@inheritdoc}
         */
        public function execute() {}
    }

    final class TagsExpireTask implements \pimcore\maintenance\taskinterface {
        /**
         * @var LoggerInterface
         */
        private $logger;

        public function __construct(LoggerInterface $logger) {}
        /**
         * {@inheritdoc}
         */
        public function execute() {}
    }

    final class HousekeepingTask implements \pimcore\maintenance\taskinterface {
        /**
         * @var int
         */
        protected $tmpFileTime;
        /**
         * @var int
         */
        protected $profilerTime;

        public function __construct(int $tmpFileTime, int $profilerTime) {}
        /**
         * {@inheritdoc}
         */
        public function execute() {}
/**
 * @var \SplFileInfo $file
 */
        protected function deleteFilesInFolderOlderThanSeconds(/**
 * @var \SplFileInfo $file
 */
$folder, /**
 * @var \SplFileInfo $file
 */
$seconds) {}
    }

    final class VersionsCompressTask implements \pimcore\maintenance\taskinterface {
        /**
         * @var LoggerInterface
         */
        private $logger;

        public function __construct(LoggerInterface $logger) {}
        /**
         * {@inheritdoc}
         */
        public function execute() {}
    }

    final class SanitizeElementsTask implements \pimcore\maintenance\taskinterface {
        /**
         * @var LoggerInterface
         */
        private $logger;

        public function __construct(LoggerInterface $logger) {}
        /**
         * {@inheritdoc}
         */
        public function execute() {}
/** @var Version $latestVersion */
        protected function performSanityCheck(/** @var Version $latestVersion */
ElementInterface $element) {}
    }

    final class ScheduledTasksTask implements \pimcore\maintenance\taskinterface {
        /**
         * @var LoggerInterface
         */
        private $logger;

        public function __construct(LoggerInterface $logger) {}
        /**
         * {@inheritdoc}
         */
        public function execute() {}
    }

    final class RedirectCleanupTask implements \pimcore\maintenance\taskinterface {
        /**
         * {@inheritdoc}
         */
        public function execute() {}
    }

    final class DbCleanupBrokenViewsTask implements \pimcore\maintenance\taskinterface {
        /**
         * @var Db\ConnectionInterface
         */
        private $db;
        /**
         * @var LoggerInterface
         */
        private $logger;

        public function __construct(Db\ConnectionInterface $db, LoggerInterface $logger) {}
        /**
         * {@inheritdoc}
         */
        public function execute() {}
    }

    final class LogArchiveTask implements \pimcore\maintenance\taskinterface {
        /**
         * @var Db\ConnectionInterface
         */
        private $db;

        public function __construct(Db\ConnectionInterface $db) {}
        /**
         * {@inheritdoc}
         */
        public function execute() {}
    }

    final class ImageOptimizeTask implements \pimcore\maintenance\taskinterface {
        /**
         * @var ImageOptimizerInterface
         */
        private $optimizer;
        /**
         * @var LoggerInterface
         */
        private $logger;

        public function __construct(ImageOptimizerInterface $optimizer, LoggerInterface $logger) {}
        /**
         * {@inheritdoc}
         */
        public function execute() {}
    }

    final class LogErrorCleanupTask implements \pimcore\maintenance\taskinterface {
        /**
         * @var Db\ConnectionInterface
         */
        private $db;

        public function __construct(Db\ConnectionInterface $db) {}
        /**
         * {@inheritdoc}
         */
        public function execute() {}
    }

}

namespace Pimcore\Routing {
    class DocumentRoute extends \symfony\component\routing\route implements \symfony\cmf\component\routing\routeobjectinterface {
        /**
         * @var Document
         */
        protected $document;

        /**
         * @return Document
         */
        public function getDocument() {}
        public function setDocument($document) {}
        /**
         * Get the content document this route entry stands for. If non-null,
         * the ControllerClassMapper uses it to identify a controller and
         * the content is passed to the controller.
         *
         * If there is no specific content for this url (i.e. its an "application"
         * page), may return null.
         *
         * @return object the document or entity this route entry points to
         */
        public function getContent() {}
        /**
         * Get the route name.
         *
         * Normal symfony routes do not know their name, the name is only known
         * from the route collection. In the CMF, it is possible to use route
         * documents outside of collections, and thus useful to have routes provide
         * their name.
         *
         * There are no limitations to allowed characters in the name.
         *
         * @return string|null the route name or null to use the default name
         *                     (e.g. from route collection if known)
         */
        public function getRouteKey() {}
    }

    class RouteReference implements \pimcore\routing\routereferenceinterface {
        /**
         * @var string
         */
        protected $route;
        /**
         * @var array
         */
        protected $parameters;
        /**
         * @var int
         */
        protected $type;

        public function __construct($route, array $parameters = [ ], $type = UrlGeneratorInterface::ABSOLUTE_PATH) {}
        /**
         * @inheritDoc
         */
        public function getRoute() {}
        /**
         * @inheritDoc
         */
        public function getParameters() {}
        /**
         * @inheritDoc
         */
        public function getType() {}
    }

    class RedirectHandler implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * @var RequestHelper
         */
        private $requestHelper;
        /**
         * @var SiteResolver
         */
        private $siteResolver;
        /**
         * @var Redirect[]
         */
        private $redirects;

        public function __construct(RequestHelper $requestHelper, SiteResolver $siteResolver) {}
        public function checkForRedirect(Request $request, $override = false) {}
        private function matchRedirect(Redirect $redirect, Request $request, RedirectUrlPartResolver $partResolver, Config\Config $config, Site $sourceSite = null) {}
        /**
         * @return Redirect[]
         */
        private function getRedirects() {}
        private function getFilteredRedirects($override = false) {}
    }

    class DynamicRouteProvider implements \symfony\cmf\component\routing\routeproviderinterface {
        /**
         * @var SiteResolver
         */
        protected $siteResolver;
        /**
         * @var DynamicRouteHandlerInterface[]
         */
        protected $handlers;

        public function __construct(SiteResolver $siteResolver, array $handlers = [ ]) {}
        public function addHandler(DynamicRouteHandlerInterface $handler) {}
        public function getRouteCollectionForRequest(Request $request) {}
        public function getRouteByName($name) {}
        public function getRoutesByNames($names) {}
    }


    interface RouteReferenceInterface {
        /**
         * Get route name
         *
         * @return string
         */
        function getRoute() ;
        /**
         * Get parameters to use when generating the route
         *
         * @return array
         */
        function getParameters() ;
        /**
         * Get route type - directly passed to URL generator
         *
         * @see UrlGeneratorInterface
         *
         * @return int
         */
        function getType() ;
    }

}

namespace Pimcore\Routing\Dynamic {
    class DocumentRouteHandler implements \pimcore\routing\dynamic\dynamicroutehandlerinterface {
        /**
         * @var Document\Service
         */
        private $documentService;
        /**
         * @var SiteResolver
         */
        private $siteResolver;
        /**
         * @var RequestHelper
         */
        private $requestHelper;
        /**
         * @var ConfigNormalizer
         */
        private $configNormalizer;
        /**
         * Determines if unpublished documents should be matched, even when not in admin mode. This
         * is mainly needed for maintencance jobs/scripts.
         *
         * @var bool
         */
        private $forceHandleUnpublishedDocuments;
        /**
         * @var array
         */
        private $directRouteDocumentTypes;

        public function __construct(Document\Service $documentService, SiteResolver $siteResolver, RequestHelper $requestHelper, ConfigNormalizer $configNormalizer) {}
        public function setForceHandleUnpublishedDocuments(bool $handle) {}
        /**
         * @return array
         */
        public function getDirectRouteDocumentTypes() {}
        public function addDirectRouteDocumentType($type) {}
        public function getRouteByName(string $name) {}
        public function matchRequest(RouteCollection $collection, DynamicRequestContext $context) {}
/** @var Document\Link $document */
        public function buildRouteForDocument(/** @var Document\Link $document */
Document $document, /** @var Document\Link $document */
DynamicRequestContext $context = null) {}
        private function handleLinkDocument(Document\Link $document, DocumentRoute $route) {}
        private function handleDirectRouteDocument(Document\PageSnippet $document, DocumentRoute $route, DynamicRequestContext $context = null) {}
        private function handleDirectRouteRedirect(Document\PageSnippet $document, DocumentRoute $route, DynamicRequestContext $context = null) {}
        private function buildRouteForPageSnippetDocument(Document\PageSnippet $document, DocumentRoute $route) {}
        private function isDirectRouteDocument($document) {}
    }

    /**
     * Value object containing properties needed while matching document routes.
     */
    class DynamicRequestContext {
        /**
         * @var Request
         */
        private $request;
        /**
         * @var string
         */
        private $path;
        /**
         * @var string
         */
        private $originalPath;

        public function __construct(Request $request, string $path, string $originalPath) {}
        /**
         * @return Request
         */
        public function getRequest() : Request {}
        public function setRequest(Request $request) {}
        /**
         * @return string
         */
        public function getPath() : string {}
        public function setPath(string $path) {}
        /**
         * @return string
         */
        public function getOriginalPath() : string {}
        public function setOriginalPath(string $originalPath) {}
    }


    interface DynamicRouteHandlerInterface {
        function getRouteByName(string $name) ;
        function matchRequest(RouteCollection $collection, DynamicRequestContext $context) ;
    }

}

namespace Pimcore\Routing\Loader {
    class BundleRoutingLoader extends \symfony\component\config\loader\loader {
        /**
         * @var BundleConfigLocator
         */
        private $locator;

        public function __construct(BundleConfigLocator $locator) {}
        public function load($resource, $type = null) {}
        public function supports($resource, $type = null) {}
    }

    /**
     * Normalizes autogenerated admin routes to pimcore_admin_ and pimcore_api_ prefixes
     */
    class AnnotatedRouteControllerLoader extends \symfony\bundle\frameworkbundle\routing\annotatedroutecontrollerloader {
        protected function getDefaultRouteName(\ReflectionClass $class, \ReflectionMethod $method) {}
    }

}

namespace Pimcore\Routing\Redirect {
    class RedirectUrlPartResolver {
        /**
         * @var Request
         */
        private $request;
        /**
         * @var array
         */
        private $parts;

        public function __construct(Request $request) {}
        public function getRequestUriPart(string $type) : string {}
    }

    class Csv {
        /**
         * @var array
         */
        private $columns;
        /**
         * @var ArrayNormalizer
         */
        private $importNormalizer;
        /**
         * @var OptionsResolver
         */
        private $importResolver;

/** @var Redirect $redirect */
        public function createExportWriter(/** @var Redirect $redirect */
Redirect\Listing $list) : Writer {}
/** @var Reader $reader */
        public function import(/** @var Reader $reader */
string $filename) : array {}
        private function preprocessImportData(array $record) : array {}
        private function processImportData(array $data, array $stats) {}
        private function getImportNormalizer() : ArrayNormalizer {}
        private function getImportResolver() : OptionsResolver {}
    }

}

namespace Pimcore\Routing\Staticroute {
    /**
     * A custom router implementation handling pimcore static routes.
     */
    class Router implements \symfony\component\routing\routerinterface, \symfony\cmf\component\routing\versatilegeneratorinterface, \symfony\component\routing\matcher\requestmatcherinterface, \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * @var RequestContext
         */
        protected $context;
        /**
         * @var ConfigNormalizer
         */
        protected $configNormalizer;
        /**
         * @var Staticroute[]
         */
        protected $staticRoutes;
        /**
         * @var array
         */
        protected $supportedNames;
        /**
         * Params which are treated as _locale if no _locale attribute is set
         *
         * @var array
         */
        protected $localeParams;

        public function __construct(RequestContext $context, ConfigNormalizer $configNormalizer) {}
        public function setContext(RequestContext $context) {}
        /**
         * @inheritDoc
         */
        public function getContext() {}
        public function getLocaleParams() : array {}
        public function setLocaleParams(array $localeParams) {}
        public function supports($name) {}
        /**
         * @inheritDoc
         */
        public function getRouteCollection() {}
        public function getRouteDebugMessage($name, array $parameters = [ ]) {}
        public function generate($name, $parameters = [ ], $referenceType = self::ABSOLUTE_PATH) {}
        public function matchRequest(Request $request) {}
        public function match($pathinfo) {}
        protected function doMatch($pathinfo) {}
        protected function processRouteParams(array $routeParams) {}
        /**
         * @return Staticroute[]
         */
        protected function getStaticRoutes() {}
        /**
         * @return array
         */
        protected function getSupportedNames() {}
    }

}

namespace Pimcore\Twig\Extension {
    class NavigationExtension extends \twig\extension\abstractextension {
        /**
         * @var Navigation
         */
        private $navigationHelper;

        public function __construct(Navigation $navigationHelper) {}
        public function getFunctions() : array {}
        public function buildNavigation(Document $activeDocument, Document $navigationRootDocument = null, string $htmlMenuPrefix = null, $cache = true) : Container {}
        public function getRenderer(string $alias) : RendererInterface {}
        public function render(Container $container, string $rendererName = 'menu', string $renderMethod = null, $rendererArguments) {}
    }

    class DumpExtension extends \twig\extension\abstractextension {
        public function getFunctions() {}
        public function dump($value) {}
    }

    class GlossaryExtension extends \twig\extension\abstractextension {
        /**
         * @var Glossary
         */
        private $glossaryHelper;

        public function __construct(Glossary $glossaryHelper) {}
        /**
         * @return Glossary
         */
        public function getGlossaryHelper() : Glossary {}
        public function getTokenParsers() : array {}
    }

    class DocumentTagExtension extends \twig\extension\abstractextension {
        /**
         * @var TagRenderer
         */
        protected $tagRenderer;

        public function __construct(TagRenderer $tagRenderer) {}
        /**
         * {@inheritdoc}
         */
        public function getFunctions() {}
        public function renderTag($context, $name, $inputName, array $options = [ ]) {}
        public function getBlockIterator(BlockInterface $block) : \Generator {}
    }

    /**
     * Simple helpers that do not need a dedicated extension
     */
    class HelpersExtension extends \twig\extension\abstractextension {
        public function getTests() {}
    }

    class SubrequestExtension extends \twig\extension\abstractextension {
        /**
         * @var Inc
         */
        protected $incHelper;
        /**
         * @var Action
         */
        protected $actionHelper;

        public function __construct(Inc $incHelper, Action $actionHelper) {}
        /**
         * {@inheritdoc}
         */
        public function getFunctions() {}
    }

    /**
     * Delegates calls to PHP templating helpers. Use this only with templating helpers which do not rely
     * on PHP rendering!
     */
    class TemplatingHelperExtension extends \twig\extension\abstractextension {
        /**
         * @var PhpEngine
         */
        private $phpEngine;

        public function __construct(PhpEngine $phpEngine) {}
        public function getFunctions() : array {}
        public function callHelper(string $helperName, array $arguments = [ ]) {}
    }

    class AssetCompressExtension extends \twig\extension\abstractextension {
        public function getTokenParsers() : array {}
    }

    class PimcoreObjectExtension extends \twig\extension\abstractextension {
        public function getFunctions() {}
    }

    class WebsiteConfigExtension extends \twig\extension\abstractextension {
        public function getFunctions() {}
        public function getWebsiteConfig($key = null, $default = null, $language = null) {}
    }

}

namespace Pimcore\Twig\TokenParser {
    class GlossaryTokenParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        /**
         * @inheritDoc
         */
        public function getTag() : string {}
    }

    /**
     * The spaceless tag only removes spaces between HTML elements. This removes all newlines in a block and is suited
     * for a simple minification of CSS/JS assets.
     */
    class AssetCompressParser extends \twig\tokenparser\abstracttokenparser {
        public function parse(Token $token) {}
        public function decideAssetCompressEnd(Token $token) {}
        public function getTag() {}
    }

}

namespace Pimcore\Twig\Node {
    class AssetCompressNode extends \twig\node\node {
        public function __construct(Node $body, $lineno, $tag = 'pimcoreassetcompress') {}
        public function compile(Compiler $compiler) {}
    }

    class GlossaryNode extends \twig\node\node {
        public function compile(Compiler $compiler) {}
    }

}

namespace Pimcore\Helper {
    class Dashboard {
        /**
         * @var User
         */
        protected $user;
        /**
         * @var array
         */
        protected $dashboards;

        public function __construct(User $user) {}
        /**
         * @return User
         */
        public function getUser() {}
        /**
         * @return string
         */
        protected function getConfigDir() {}
        /**
         * @return string
         */
        protected function getConfigFile() {}
        /**
         * @return array|mixed
         */
        protected function loadFile() {}
        /**
         * @return array|mixed
         */
        public function getAllDashboards() {}
        public function getDashboard($key = 'welcome') {}
        public function saveDashboard($key, $configuration = null) {}
        public function deleteDashboard($key) {}
        /**
         * @return array
         */
        public function getDisabledPortlets() {}
    }

    /**
     * Formats json strings used for php < 5.4 because the json_encode doesn't
     * supports the flags JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE
     * in these versions
     *
     * @author Konstantin Kudryashiv <ever.zet@gmail.com>
     * @author Jordi Boggiano <j.boggiano@seld.be>
     */
    class JsonFormatter {
        public static function format($json, $unescapeUnicode, $unescapeSlashes) {}
    }

    class Mail {
        public static function getDebugInformation($type, MailClient $mail) {}
        /**
         * Return the basic css styles for the html debug information
         *
         * @static
         *
         * @return string
         */
        public static function getDebugInformationCssStyle() {}
        protected static function formatDebugReceivers(array $receivers) {}
        public static function logEmail(MailClient $mail, $recipients) {}
        public static function setAbsolutePaths($string, $document = null, $hostUrl = null) {}
        public static function embedAndModifyCss($string, $document = null) {}
        public static function normalizeCssContent($content, array $fileInfo) {}
        public static function getNormalizedFileInfo($path, $document = null) {}
        public static function parseEmailAddressField($emailString) {}
    }

    class LongRunningHelper {
    use \psr\log\loggerawaretrait;

        protected $connectionRegistry;
        protected $pimcoreRuntimeCacheProtectedItems;
        protected $monologHandlers;

        public function __construct(ConnectionRegistry $connectionRegistry) {}
        public function cleanUp($options = [ ]) {}
        protected function cleanupDoctrine() {}
        protected function triggerPhpGarbageCollector() {}
        protected function cleanupPimcoreRuntimeCache($options = [ ]) {}
        public function addPimcoreRuntimeCacheProtectedItems(array $items) {}
        public function removePimcoreRuntimeCacheProtectedItems(array $items) {}
        public function cleanupMonolog() {}
        public function addMonologHandler(HandlerInterface $handler) {}
        protected function resolveOptions(string $method, array $options) {}
    }

    class ContrastColor {
        public static function getContrastColor($hexColor) {}
    }

    class RobotsTxt {
        /**
         * @var null
         */
        private $_domain;
        /**
         * @var array
         */
        private $_rules;

        public function __construct($domain) {}
        public function isUrlBlocked($url, $userAgent = '*') {}
        private function _makeRules($robotsTxt) {}
        private function _getRegExByPath($path) {}
    }

    class ImageChart {
        /**
         * @var string
         */
        static public $serviceUrl;

        public static function lineSmall($data, $parameters = '') {}
    }

}

namespace Pimcore\DependencyInjection {
    class ConfigMerger {
        public function merge(array $first, array $second) : array {}
    }

    /**
     * Service locator exposing all of its services as collection
     */
    class CollectionServiceLocator extends \symfony\component\dependencyinjection\servicelocator implements \iteratoraggregate {
        /**
         * @var array
         */
        private $ids;

        public function __construct($factories) {}
        public function all() : array {}
        public function getIterator() {}
    }

    class ServiceCollection implements \iteratoraggregate {
        /**
         * @var ContainerInterface
         */
        private $container;
        /**
         * @var array
         */
        private $ids;

        public function __construct(ContainerInterface $container, array $ids) {}
        public function getIterator() {}
    }

}

namespace Pimcore\Exception {
    class MissingDependencyException extends \runtimeexception {}

    class ImageOptimizationFailedException extends \runtimeexception {}

}

namespace Pimcore\Event {
    final class SystemEvents {
        const MAINTENANCE_MODE_SCHEDULE_LOGIN = 'pimcore.system.maintenance_mode.schedule_login';
        const MAINTENANCE_MODE_ACTIVATE = 'pimcore.system.maintenance_mode.activate';
        const MAINTENANCE_MODE_DEACTIVATE = 'pimcore.system.maintenance_mode.deactivate';
        const SHUTDOWN = 'pimcore.system.shutdown';
        const CONSOLE_INIT = 'pimcore.system.console.init';
        const CACHE_CLEAR_TEMPORARY_FILES = 'pimcore.system.cache.clearTemporaryFiles';
        const SERVICE_PRE_GET_VALID_KEY = 'pimcore.system.service.preGetValidKey';
        const CACHE_CLEAR = 'pimcore.system.cache.clear';
        const MAINTENANCE_MODE_UNSCHEDULE_LOGIN = 'pimcore.system.maintenance_mode.unschedule_login';
        const CACHE_CLEAR_FULLPAGE_CACHE = 'pimcore.system.cache.clearFullpageCache';

    }

    /**
     * @deprecated
     */
    final class WebserviceEvents {
        const BEFORE_LIST_LOAD = 'pimcore.webservice.before.list.load';

    }

    final class DataObjectClassDefinitionEvents {
        const PRE_UPDATE = 'pimcore.class.preUpdate';
        const POST_ADD = 'pimcore.class.postAdd';
        const PRE_ADD = 'pimcore.class.preAdd';
        const POST_DELETE = 'pimcore.class.postDelete';
        const PRE_DELETE = 'pimcore.class.preDelete';
        const POST_UPDATE = 'pimcore.class.postUpdate';

    }

    final class CoreCacheEvents {
        const ENABLE = 'pimcore.cache.core.enable';
        const INIT = 'pimcore.cache.core.init';
        const DISABLE = 'pimcore.cache.core.disable';
        const PURGE = 'pimcore.cache.core.purge';

    }

    final class TestEvents {
        const KERNEL_BOOTED = 'pimcore.test.kernel.booted';

    }

    final class MailEvents {
        const PRE_SEND = 'pimcore.mail.preSend';

    }

    final class ElementEvents {
        const POST_ADD = 'pimcore.element.note.postAdd';

    }

    final class WorkflowEvents {
        const PRE_GLOBAL_ACTION = 'pimcore.workflow.preGlobalAction';
        const POST_GLOBAL_ACTION = 'pimcore.workflow.postGlobalAction';

    }

    final class TargetGroupEvents {
        const POST_UPDATE = 'pimcore.targetgroup.postUpdate';
        const POST_ADD = 'pimcore.targetgroup.postAdd';
        const POST_DELETE = 'pimcore.targetgroup.postDelete';

    }

    final class AssetEvents {
        const POST_ADD_FAILURE = 'pimcore.asset.postAddFailure';
        const PRE_ADD = 'pimcore.asset.preAdd';
        const POST_ADD = 'pimcore.asset.postAdd';
        const POST_UPDATE_FAILURE = 'pimcore.asset.postUpdateFailure';
        const DELETE_INFO = 'pimcore.asset.deleteInfo';
        const PRE_UPDATE = 'pimcore.asset.preUpdate';
        const POST_UPDATE = 'pimcore.asset.postUpdate';
        const POST_DELETE = 'pimcore.asset.postDelete';
        const POST_DELETE_FAILURE = 'pimcore.asset.postDeleteFailure';
        const PRE_DELETE = 'pimcore.asset.preDelete';
        const IMAGE_THUMBNAIL = 'pimcore.asset.image.thumbnail';
        const VIDEO_IMAGE_THUMBNAIL = 'pimcore.asset.video.image-thumbnail';
        const POST_COPY = 'pimcore.asset.postCopy';
        const DOCUMENT_IMAGE_THUMBNAIL = 'pimcore.asset.document.image-thumbnail';
        const RESOLVE_UPLOAD_TARGET = 'pimcore.asset.resolve-upload-target';

    }

    final class AdminEvents {
        const LOGIN_LOSTPASSWORD = 'pimcore.admin.login.lostpassword';
        const LOGIN_FAILED = 'pimcore.admin.login.failed';
        const LOGIN_CREDENTIALS = 'pimcore.admin.login.credentials';
        const SEARCH_LIST_BEFORE_FILTER_PREPARE = 'pimcore.admin.search.list.beforeFilterPrepare';
        const INDEX_SETTINGS = 'pimcore.admin.index.settings';
        const LOGIN_LOGOUT = 'pimcore.admin.login.logout';
        const OBJECT_LIST_BEFORE_FILTER_PREPARE = 'pimcore.admin.object.list.beforeFilterPrepare';
        const SEARCH_LIST_AFTER_LIST_LOAD = 'pimcore.admin.search.list.afterListLoad';
        const SEARCH_LIST_BEFORE_LIST_LOAD = 'pimcore.admin.search.list.beforeListLoad';
        const ASSET_LIST_BEFORE_FILTER_PREPARE = 'pimcore.admin.asset.list.beforeFilterPrepare';
        const OBJECT_LIST_AFTER_LIST_LOAD = 'pimcore.admin.object.list.afterListLoad';
        const OBJECT_LIST_BEFORE_LIST_LOAD = 'pimcore.admin.object.list.beforeListLoad';
        const ASSET_LIST_BEFORE_LIST_LOAD = 'pimcore.admin.asset.list.beforeListLoad';
        const ASSET_LIST_AFTER_LIST_LOAD = 'pimcore.admin.asset.list.afterListLoad';
        const DOCUMENT_LIST_BEFORE_FILTER_PREPARE = 'pimcore.admin.document.list.beforeFilterPrepare';
        const DOCUMENT_LIST_BEFORE_LIST_LOAD = 'pimcore.admin.document.list.beforeListLoad';
        const DOCUMENT_LIST_AFTER_LIST_LOAD = 'pimcore.admin.document.list.afterListLoad';
        const ASSET_GET_PRE_SEND_DATA = 'pimcore.admin.asset.get.preSendData';
        const ASSET_TREE_GET_CHILDREN_BY_ID_PRE_SEND_DATA = 'pimcore.admin.asset.treeGetChildsById.preSendData';
        const DOCUMENT_GET_PRE_SEND_DATA = 'pimcore.admin.document.get.preSendData';
        const DOCUMENT_TREE_GET_CHILDREN_BY_ID_PRE_SEND_DATA = 'pimcore.admin.document.treeGetChildsById.preSendData';
        const OBJECT_GET_PRE_SEND_DATA = 'pimcore.admin.dataobject.get.preSendData';
        const OBJECT_TREE_GET_CHILDREN_BY_ID_PRE_SEND_DATA = 'pimcore.admin.dataobject.treeGetChildsById.preSendData';
        const CLASS_FIELDCOLLECTION_LIST_PRE_SEND_DATA = 'pimcore.admin.class.fieldcollectionList.preSendData';
        const CLASS_OBJECT_ICONS_PRE_SEND_DATA = 'pimcore.admin.class.dataobject.preSendData';
        const QUICKSEARCH_LIST_BEFORE_LIST_LOAD = 'pimcore.admin.quickSearch.list.beforeListLoad';
        const CLASS_OBJECTBRICK_LIST_PRE_SEND_DATA = 'pimcore.admin.class.objectbrickList.preSendData';
        const QUICKSEARCH_LIST_AFTER_LIST_LOAD = 'pimcore.admin.quickSearch.list.afterListLoad';
        const RESOLVE_ELEMENT_ADMIN_STYLE = 'pimcore.admin.resolve.elementAdminStyle';
        const RESOLVE_ELEMENT = 'pimcore.admin.resolve.element';

    }

    final class UserRoleEvents {
        const PRE_DELETE = 'pimcore.user.preDelete';
        const POST_DELETE = 'pimcore.user.postDelete';
        const POST_UPDATE = 'pimcore.user.postUpdate';
        const POST_ADD = 'pimcore.user.postAdd';
        const PRE_UPDATE = 'pimcore.user.preUpdate';
        const PRE_ADD = 'pimcore.user.preAdd';

    }

    final class FullPageCacheEvents {
        const CACHE_RESPONSE = 'pimcore.cache.full_page.cache_response';
        const IGNORED_SESSION_KEYS = 'pimcore.cache.full_page.ignored_session_keys';
        const PREPARE_RESPONSE = 'pimcore.cache.full_page.prepare_response';

    }

    final class TargetingEvents {
        const POST_RULE_ACTIONS = 'pimcore.targeting.post_rule_actions';
        const BUILD_CONDITION = 'pimcore.targeting.build_condition';
        const ASSIGN_DOCUMENT_TARGET_GROUP = 'pimcore.targeting.assign_document_target_group';
        const VISITED_PAGES_COUNT_MATCH = 'pimcore.targeting.visited_pages_count_match';
        const RENDER_TOOLBAR = 'pimcore.targeting.render_toolbar';
        const TARGETING_CODE = 'pimcore.targeting.targeting_code';
        const PRE_RESOLVE = 'pimcore.targeting.pre_resolve';
        const PRE_RULE_ACTIONS = 'pimcore.targeting.pre_rule_actions';
        const POST_RESOLVE = 'pimcore.targeting.post_resolve';

    }

    final class DataObjectClassificationStoreEvents {
        const COLLECTION_CONFIG_POST_DELETE = 'pimcore.dataobject.classificationstore.collectionConfig.postDelete';
        const COLLECTION_CONFIG_PRE_DELETE = 'pimcore.dataobject.classificationstore.collectionConfig.preDelete';
        const COLLECTION_CONFIG_POST_UPDATE = 'pimcore.dataobject.classificationstore.collectionConfig.postUpdate';
        const COLLECTION_CONFIG_PRE_UPDATE = 'pimcore.dataobject.classificationstore.collectionConfig.preUpdate';
        const COLLECTION_CONFIG_POST_ADD = 'pimcore.dataobject.classificationstore.collectionConfig.postAdd';
        const COLLECTION_CONFIG_PRE_ADD = 'pimcore.dataobject.classificationstore.collectionConfig.preAdd';
        const GROUP_CONFIG_POST_UPDATE = 'pimcore.dataobject.classificationstore.groupConfig.postUpdate';
        const GROUP_CONFIG_PRE_DELETE = 'pimcore.dataobject.classificationstore.groupConfig.preDelete';
        const GROUP_CONFIG_POST_DELETE = 'pimcore.dataobject.classificationstore.groupConfig.postDelete';
        const GROUP_CONFIG_PRE_ADD = 'pimcore.dataobject.classificationstore.groupConfig.preAdd';
        const GROUP_CONFIG_POST_ADD = 'pimcore.dataobject.classificationstore.groupConfig.postAdd';
        const GROUP_CONFIG_PRE_UPDATE = 'pimcore.dataobject.classificationstore.groupConfig.preUpdate';
        const KEY_CONFIG_POST_UPDATE = 'pimcore.dataobject.classificationstore.keyConfig.postUpdate';
        const KEY_CONFIG_PRE_DELETE = 'pimcore.dataobject.classificationstore.keyConfig.preDelete';
        const KEY_CONFIG_POST_DELETE = 'pimcore.dataobject.classificationstore.keyConfig.postDelete';
        const STORE_CONFIG_PRE_ADD = 'pimcore.dataobject.classificationstore.storeConfig.preAdd';
        const KEY_CONFIG_PRE_ADD = 'pimcore.dataobject.classificationstore.keyConfig.preAdd';
        const KEY_CONFIG_POST_ADD = 'pimcore.dataobject.classificationstore.keyConfig.postAdd';
        const KEY_CONFIG_PRE_UPDATE = 'pimcore.dataobject.classificationstore.keyConfig.preUpdate';
        const STORE_CONFIG_PRE_DELETE = 'pimcore.dataobject.classificationstore.storeConfig.preDelete';
        const STORE_CONFIG_POST_DELETE = 'pimcore.dataobject.classificationstore.storeConfig.postDelete';
        const STORE_CONFIG_POST_ADD = 'pimcore.dataobject.classificationstore.storeConfig.postAdd';
        const STORE_CONFIG_POST_UPDATE = 'pimcore.dataobject.classificationstore.storeConfig.postUpdate';
        const STORE_CONFIG_PRE_UPDATE = 'pimcore.dataobject.classificationstore.storeConfig.preUpdate';

    }

    final class DataObjectImportEvents {
        const PRE_SAVE = 'pimcore.dataobject.import.preSave';
        const BEFORE_START = 'pimcore.dataobject.import.beforestart';
        const DONE = 'pimcore.dataobject.import.done';
        const PREVIEW = 'pimcore.dataobject.import.preview';
        const POST_SAVE = 'pimcore.dataobject.import.postSave';

    }

    final class FrontendEvents {
        const ASSET_VIDEO_THUMBNAIL = 'pimcore.frontend.path.asset.video.thumbnail';
        const ASSET_DOCUMENT_IMAGE_THUMBNAIL = 'pimcore.frontend.path.asset.document.image-thumbnail';
        const ASSET_PATH = 'pimcore.frontend.path.asset';
        const ASSET_IMAGE_THUMBNAIL = 'pimcore.frontend.path.asset.image.thumbnail';
        const ASSET_VIDEO_IMAGE_THUMBNAIL = 'pimcore.frontend.path.asset.video.image-thumbnail';
        const VIEW_HELPER_HEAD_SCRIPT = 'pimcore.frontend.view.helper.head-script';
        const DOCUMENT_PATH = 'pimcore.frontend.path.document';
        const STATICROUTE_PATH = 'pimcore.frontend.path.staticroute';
        const VIEW_HELPER_HEAD_LINK = 'pimcore.frontend.view.helper.head-link';

    }

    final class VersionEvents {
        const POST_SAVE = 'pimcore.version.postSave';
        const POST_DELETE = 'pimcore.version.postDelete';
        const PRE_DELETE = 'pimcore.version.preDelete';
        const PRE_SAVE = 'pimcore.version.preSave';

    }

    final class TranslationEvents {
        const PRE_SAVE = 'pimcore.translation.preSave';
        const PRE_DELETE = 'pimcore.translation.preDelete';
        const POST_SAVE = 'pimcore.translation.postSave';
        const POST_DELETE = 'pimcore.translation.postDelete';

    }

    final class SearchBackendEvents {
        const POST_SAVE = 'pimcore.search.backend.postSave';
        const PRE_SAVE = 'pimcore.search.backend.preSave';

    }

    final class RedirectEvents {
        const POST_DELETE = 'pimcore.redirect.postDelete';
        const POST_SAVE = 'pimcore.redirect.postSave';
        const PRE_DELETE = 'pimcore.redirect.preDelete';
        const PRE_SAVE = 'pimcore.redirect.preSave';

    }

    final class DataObjectEvents {
        const POST_COPY = 'pimcore.dataobject.postCopy';
        const POST_DELETE_FAILURE = 'pimcore.dataobject.postDeleteFailure';
        const POST_DELETE = 'pimcore.dataobject.postDelete';
        const PRE_DELETE = 'pimcore.dataobject.preDelete';
        const DELETE_INFO = 'pimcore.dataobject.deleteInfo';
        const POST_UPDATE_FAILURE = 'pimcore.dataobject.postUpdateFailure';
        const POST_UPDATE = 'pimcore.dataobject.postUpdate';
        const POST_ADD_FAILURE = 'pimcore.dataobject.postAddFailure';
        const PRE_UPDATE = 'pimcore.dataobject.preUpdate';
        const PRE_ADD = 'pimcore.dataobject.preAdd';
        const POST_ADD = 'pimcore.dataobject.postAdd';

    }

    final class DocumentEvents {
        const PRE_ADD = 'pimcore.document.preAdd';
        const POST_ADD = 'pimcore.document.postAdd';
        const POST_ADD_FAILURE = 'pimcore.document.postAddFailure';
        const PRE_UPDATE = 'pimcore.document.preUpdate';
        const POST_UPDATE = 'pimcore.document.postUpdate';
        const RENDERER_POST_RENDER = 'pimcore.document.renderer.post_render';
        const RENDERER_PRE_RENDER = 'pimcore.document.renderer.pre_render';
        const TAG_NAME = 'pimcore.document.tag.name';
        const POST_COPY = 'pimcore.document.postCopy';
        const PRINT_MODIFY_PROCESSING_CONFIG = 'pimcore.document.print.processor.modifyConfig';
        const PRINT_MODIFY_PROCESSING_OPTIONS = 'pimcore.document.print.processor.modifyProcessingOptions';
        const PRINT_POST_PDF_GENERATION = 'pimcore.document.print.postPdfGeneration';
        const PRINT_PRE_PDF_GENERATION = 'pimcore.document.print.prePdfGeneration';
        const POST_DELETE_FAILURE = 'pimcore.document.postDeleteFailure';
        const POST_DELETE = 'pimcore.document.postDelete';
        const PRE_DELETE = 'pimcore.document.preDelete';
        const DELETE_INFO = 'pimcore.document.deleteInfo';
        const POST_UPDATE_FAILURE = 'pimcore.document.postUpdateFailure';
        const NEWSLETTER_PRE_SEND = 'pimcore.document.newsletter.pre_send';
        const NEWSLETTER_POST_SEND = 'pimcore.document.newsletter.post_send';

    }

    final class DataObjectCustomLayoutEvents {
        const PRE_ADD = 'pimcore.dataobject.customLayout.preAdd';
        const PRE_UPDATE = 'pimcore.dataobject.customLayout.preUpdate';

    }

    final class BundleManagerEvents {
        const JS_PATHS = 'pimcore.bundle_manager.paths.js';
        const CSS_PATHS = 'pimcore.bundle_manager.paths.css';
        const EDITMODE_JS_PATHS = 'pimcore.bundle_manager.paths.editmode_js';
        const EDITMODE_CSS_PATHS = 'pimcore.bundle_manager.paths.editmode_css';

    }

}

namespace Pimcore\Event\BundleManager {
    class PathsEvent extends \symfony\component\eventdispatcher\event {
        protected $paths;

        public function __construct(array $paths = [ ]) {}
        /**
         * @return array
         */
        public function getPaths() : array {}
        public function setPaths(array $paths) {}
        public function addPaths(array $paths) {}
    }

}

namespace Pimcore\Event\Ecommerce {
    final class OrderAgentEvents {
        const POST_UPDATE_PAYMENT = 'pimcore.ecommerce.orderagent.postUpdatePayment';
        const PRE_UPDATE_PAYMENT = 'pimcore.ecommerce.orderagent.preUpdatePayment';
        const FINGERPRINT_GENERATED = 'pimcore.ecommerce.orderagent.fingerPrintGenerated';
        const POST_CANCEL_PAYMENT = 'pimcore.ecommerce.orderagent.postCancelPayment';
        const POST_INIT_PAYMENT = 'pimcore.ecommerce.orderagent.postInitPayment';
        const PRE_INIT_PAYMENT = 'pimcore.ecommerce.orderagent.preInitPayment';
        const PRE_CANCEL_PAYMENT = 'pimcore.ecommerce.orderagent.preCancelPayment';
        const POST_START_PAYMENT = 'pimcore.ecommerce.orderagent.postStartPayment';
        const PRE_START_PAYMENT = 'pimcore.ecommerce.orderagent.preStartPayment';

    }

    final class CheckoutManagerEvents {
        const INITIALIZE_STEP_STATE = 'pimcore.ecommerce.checkoutmanager.initializeStepState';
        const POST_COMMIT_STEP = 'pimcore.ecommerce.checkoutmanager.postCommitStep';
        const PRE_COMMIT_STEP = 'pimcore.ecommerce.checkoutmanager.preCommitStep';

    }

    final class OrderManagerEvents {
        const PRE_UPDATE_ORDER = 'pimcore.ecommerce.ordermanager.preUpdateOrder';
        const PRE_GET_OR_CREATE_ORDER_FROM_CART = 'pimcore.ecommerce.ordermanager.preGetOrCreateOrderFromCart';
        const BUILD_ORDER_ITEM_KEY = 'pimcore.ecommerce.ordermanager.buildOrderItemKey';
        const POST_UPDATE_ORDER = 'pimcore.ecommerce.ordermanager.postUpdateOrder';
        const POST_CREATE_ORDER_ITEM = 'pimcore.ecommerce.ordermanager.postCreateOrderItem';

    }

    final class CommitOrderProcessorEvents {
        const POST_COMMIT_ORDER = 'pimcore.ecommerce.commitorderprocessor.postCommitOrder';
        const SEND_CONFIRMATION_MAILS = 'pimcore.ecommerce.commitorderprocessor.sendConfirmationMails';
        const PRE_COMMIT_ORDER = 'pimcore.ecommerce.commitorderprocessor.preCommitOrder';
        const PRE_COMMIT_ORDER_PAYMENT = 'pimcore.ecommerce.commitorderprocessor.preCommitOrderPayment';
        const POST_COMMIT_ORDER_PAYMENT = 'pimcore.ecommerce.commitorderprocessor.postCommitOrderPayment';

    }

    final class IndexServiceEvents {
        const GENERAL_PREPROCESSING_ERROR = 'pimcore.ecommerce.indexservice.generalPreProcessingError';
        const ATTRIBUTE_PROCESSING_ERROR = 'pimcore.ecommerce.indexservice.preProcessAttributeError';

    }

}

namespace Pimcore\Event\Cache\Core {
    class ResultEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var bool
         */
        protected $result;

        public function __construct($result = true) {}
        /**
         * @return bool
         */
        public function getResult() {}
        public function setResult($result) {}
    }

}

namespace Pimcore\Event\Cache\FullPage {
    /**
     * Determines if a response can be cached.
     */
    class CacheResponseEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var Response
         */
        private $response;
        /**
         * @var bool
         */
        private $cache;

        public function __construct(Response $response, bool $cache) {}
        public function getResponse() : Response {}
        public function getCache() : bool {}
        public function setCache(bool $cache) {}
    }

    class PrepareResponseEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var Request
         */
        private $request;
        /**
         * @var Response
         */
        private $response;

        public function __construct(Request $request, Response $response) {}
        public function getRequest() : Request {}
        public function getResponse() : Response {}
    }

    class IgnoredSessionKeysEvent extends \symfony\component\eventdispatcher\event {
        /**
         * Session keys which will be ignored when determining
         * if the full page cache should be disabled due to
         * existing session data.
         *
         * @var array
         */
        private $keys;

        public function __construct(array $keys = [ ]) {}
        public function getKeys() : array {}
        public function setKeys(array $keys) {}
    }

}

namespace Pimcore\Event\Traits {
    /**
     * Trait ElementDeleteInfoEventTrait
     *
     * @package Pimcore\Event\Traits
     */
    trait ElementDeleteInfoEventTrait {
        /**
         * @var bool
         */
        protected $deletionAllowed;
        /**
         * @var string
         */
        protected $reason;
        /**
         * @return bool
         */
        public function getDeletionAllowed() : bool {}
        public function setDeletionAllowed(bool $deletionAllowed) : void {}
        /**
         * @return string
         */
        public function getReason() : string {}
        public function setReason(string $reason) : void {}
    }

    trait ArgumentsAwareTrait {
        /**
         * Array of arguments.
         *
         * @var array
         */
        protected $arguments;
        public function getArgument($key) {}
        public function setArgument($key, $value) {}
        /**
         * Getter for all arguments.
         *
         * @return array
         */
        public function getArguments() {}
        public function setArguments(array $args = [ ]) {}
        public function hasArgument($key) {}
    }

    trait RequestAwareTrait {
        /**
         * @var Request
         */
        protected $request;
        /**
         * @return Request
         */
        public function getRequest() {}
    }

    /**
     * Trait for all events handling responses. Taken from GetResponseEvent.
     */
    trait ResponseAwareTrait {
        /**
         * The response object.
         *
         * @var Response
         */
        protected $response;
        /**
         * Returns the response object.
         *
         * @return Response
         */
        public function getResponse() {}
/** @var Event $this */
        public function setResponse(/** @var Event $this */
Response $response) {}
        /**
         * Returns whether a response was set.
         *
         * @return bool Whether a response was set
         */
        public function hasResponse() {}
    }

}

namespace Pimcore\Event\Targeting {
    class OverrideEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var string
         */
        private $type;
        /**
         * @var array
         */
        private $data;

        public function __construct(string $type, array $data) {}
        public function getType() : string {}
        public function getData() : array {}
    }

    class TargetingEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var VisitorInfo
         */
        protected $visitorInfo;

        public function __construct(VisitorInfo $visitorInfo) {}
        public function getVisitorInfo() : VisitorInfo {}
        public function getRequest() : Request {}
    }

    class AssignDocumentTargetGroupEvent extends \pimcore\event\targeting\targetingevent {
        /**
         * @var Document
         */
        private $document;
        /**
         * @var TargetGroup
         */
        private $targetGroup;

        public function __construct(VisitorInfo $visitorInfo, Document $document, TargetGroup $targetGroup) {}
        public function getDocument() : Document {}
        public function getTargetGroup() : TargetGroup {}
    }

    class TargetingResolveVisitorInfoEvent extends \pimcore\event\targeting\targetingevent {
        public function setVisitorInfo(VisitorInfo $visitorInfo) {}
    }

    class RenderToolbarEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var string
         */
        private $template;
        /**
         * @var array
         */
        private $data;

        public function __construct(string $template, array $data) {}
        public function getTemplate() : string {}
        public function setTemplate(string $template) {}
        public function getData() : array {}
        public function setData(array $data) {}
    }

    class TargetingCodeEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var CodeBlock[]
         */
        private $blocks;
        /**
         * @var string
         */
        private $template;
        /**
         * @var array
         */
        private $data;

        public function __construct(string $template, array $blocks, array $data) {}
        public function getTemplate() : string {}
        public function setTemplate(string $template) {}
        /**
         * @return CodeBlock[]
         */
        public function getBlocks() : array {}
        public function getBlock(string $block) : CodeBlock {}
        public function getData() : array {}
        public function setData(array $data) {}
    }

    class BuildConditionEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var string
         */
        private $type;
        /**
         * @var string
         */
        private $class;
        /**
         * @var array
         */
        private $config;
        /**
         * @var ConditionInterface
         */
        private $condition;

        public function __construct(string $type, string $class, array $config) {}
        public function getType() : string {}
        public function getClass() : string {}
        public function getConfig() : array {}
        public function hasCondition() : bool {}
        /**
         * @return ConditionInterface|null
         */
        public function getCondition() {}
        public function setCondition(ConditionInterface $condition) {}
    }

    class TargetingRuleEvent extends \pimcore\event\targeting\targetingevent {
        /**
         * @var Rule
         */
        private $rule;

        public function __construct(VisitorInfo $visitorInfo, Rule $rule) {}
        public function getRule() : Rule {}
    }

}

namespace Pimcore\Event\Admin {
    class ElementAdminStyleEvent extends \symfony\component\eventdispatcher\event {
        const CONTEXT_EDITOR = 2;
        const CONTEXT_TREE = 1;

        /**
         * @var int
         */
        protected $context;
        /**
         * @var ElementInterface
         */
        protected $element;
        /**
         * @var AdminStyle
         */
        protected $adminStyle;

        public function __construct(ElementInterface $element, AdminStyle $adminStyle, $context = null) {}
        /**
         * @return ElementInterface
         */
        public function getElement() : ElementInterface {}
        public function setElement(ElementInterface $element) : void {}
        /**
         * @return AdminStyle
         */
        public function getAdminStyle() : AdminStyle {}
        public function setAdminStyle(AdminStyle $adminStyle) : void {}
        /**
         * Returns the context. CONTEXT_TREE or CONTEXT_EDITOR.
         *
         * @return null|int
         */
        public function getContext() {}
        public function setContext($context) : void {}
    }

    class IndexSettingsEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var ViewModel
         */
        private $settings;

        public function __construct(ViewModel $settings) {}
        public function getSettings() : ViewModel {}
    }

    final class ReportEvents {
        const SAVE_SETTINGS = 'pimcore.admin.reports.save_settings';

    }

}

namespace Pimcore\Event\Admin\Report {
    class SettingsEvent extends \symfony\component\eventdispatcher\event {
        private $settings;

        public function __construct($settings) {}
        public function getSettings() {}
        public function setSettings($settings) {}
    }

}

namespace Pimcore\Event\Admin\Login {
    class LostPasswordEvent extends \symfony\component\eventdispatcher\event {
    use \pimcore\event\traits\responseawaretrait;

        /**
         * @var User
         */
        protected $user;
        /**
         * @var string
         */
        protected $loginUrl;
        /**
         * @var bool
         */
        protected $sendMail;

        public function __construct(User $user, $loginUrl) {}
        /**
         * @return User
         */
        public function getUser() {}
        /**
         * @return string
         */
        public function getLoginUrl() {}
        /**
         * Determines if lost password mail should be sent
         *
         * @return bool
         */
        public function getSendMail() {}
        public function setSendMail($sendMail) {}
    }

    class LoginFailedEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var string
         */
        protected $credentials;
        /**
         * @var User
         */
        protected $user;

        public function __construct(array $credentials) {}
        /**
         * @return string
         */
        public function getCredentials() {}
        public function getCredential($name, $default = null) {}
        /**
         * @return User
         */
        public function getUser() {}
        public function setUser(User $user) {}
        /**
         * @return bool
         */
        public function hasUser() {}
    }

    class LoginCredentialsEvent extends \symfony\component\eventdispatcher\event {
    use \pimcore\event\traits\requestawaretrait;

        /**
         * @var array
         */
        protected $credentials;

        public function __construct(Request $request, array $credentials) {}
        /**
         * @return array
         */
        public function getCredentials() {}
        public function setCredentials(array $credentials) {}
    }

    class LogoutEvent extends \symfony\component\eventdispatcher\event {
    use \pimcore\event\traits\responseawaretrait, \pimcore\event\traits\requestawaretrait;

        /**
         * @var User
         */
        protected $user;

        public function __construct(Request $request, User $user) {}
        /**
         * @return User
         */
        public function getUser() {}
    }

}

namespace Pimcore\Event\Webservice {
    /**
     * @deprecated
     */
    class FilterEvent extends \symfony\component\eventdispatcher\event {
        /** @var Request */
        public $request;
        /** @var string */
        public $type;
        /** @var string */
        public $action;
        /** @var string */
        public $condition;
        /** @var bool */
        protected $conditionDirty;

        public function __construct($request, $type, $action, $condition) {}
        /**
         * @return Request
         */
        public function getRequest() {}
        public function setRequest($request) : void {}
        /**
         * @return string
         */
        public function getType() {}
        public function setType($type) : void {}
        /**
         * @return string
         */
        public function getAction() {}
        public function setAction($action) : void {}
        /**
         * @return string
         */
        public function getCondition() {}
        public function setCondition($condition) {}
        /**
         * @return bool
         */
        public function isConditionDirty() {}
    }

}

namespace Pimcore\Event\System {
    class ConsoleEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var Application
         */
        protected $application;

        public function __construct(Application $application) {}
        /**
         * @return Application
         */
        public function getApplication() {}
        public function setApplication($application) {}
    }

}

namespace Pimcore\Event\Workflow {
    class GlobalActionEvent extends \symfony\component\eventdispatcher\event {
    use \pimcore\event\traits\argumentsawaretrait;

        /**
         * @var Workflow
         */
        protected $workflow;
        /**
         * @var mixed
         */
        protected $subject;
        /**
         * @var GlobalAction
         */
        protected $globalAction;

        public function __construct(Workflow $workflow, $subject, GlobalAction $globalAction, array $arguments = [ ]) {}
        /**
         * @return Workflow
         */
        public function getWorkflow() {}
        public function getSubject() {}
        /**
         * @return GlobalAction
         */
        public function getGlobalAction() {}
    }

}

namespace Pimcore\Event\Model {
    class AssetEvent extends \symfony\component\eventdispatcher\event implements \pimcore\event\model\elementeventinterface {
    use \pimcore\event\traits\argumentsawaretrait;

        /**
         * @var Asset
         */
        protected $asset;

        public function __construct(Asset $asset, array $arguments = [ ]) {}
        /**
         * @return Asset
         */
        public function getAsset() {}
        public function setAsset($asset) {}
        /**
         * @return Asset
         */
        public function getElement() {}
    }

    class TranslationEvent extends \symfony\component\eventdispatcher\event implements \pimcore\event\model\elementeventinterface {
    use \pimcore\event\traits\argumentsawaretrait;

        /**
         * @var AbstractTranslation
         */
        protected $translation;

        public function __construct(AbstractTranslation $translation, array $arguments = [ ]) {}
        /**
         * @return AbstractTranslation
         */
        public function getTranslation() {}
        public function setTranslation(AbstractTranslation $translation) {}
        /**
         * @return AbstractTranslation
         */
        public function getElement() {}
    }

    class UserRoleEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var AbstractUser
         */
        protected $userRole;

        public function __construct(AbstractUser $userRole) {}
        /**
         * @return AbstractUser
         */
        public function getUserRole() {}
        public function setUserRole($userRole) {}
    }

    class ElementEvent extends \symfony\component\eventdispatcher\event implements \pimcore\event\model\elementeventinterface {
    use \pimcore\event\traits\argumentsawaretrait;

        /**
         * @var AbstractModel
         */
        protected $element;

        public function __construct(AbstractModel $element, array $arguments = [ ]) {}
        /**
         * @return AbstractModel
         */
        public function getElement() {}
        public function setElement($element) {}
    }

    /**
     * Class DataObjectDeleteInfoEvent
     *
     * @package Pimcore\Event\Model
     */
    class DataObjectDeleteInfoEvent extends \pimcore\event\model\dataobjectevent implements \pimcore\event\model\elementdeleteinfoeventinterface {
    use \pimcore\event\traits\elementdeleteinfoeventtrait;
}

    class ResolveElementEvent extends \symfony\component\eventdispatcher\event {
    use \pimcore\event\traits\argumentsawaretrait;

        /**
         * @var string
         */
        protected $id;
        /**
         * @var string
         */
        protected $type;

        public function __construct($type, $id, array $arguments = [ ]) {}
        /**
         * @return string
         */
        public function getId() : string {}
        public function setId(string $id) : void {}
        /**
         * @return string
         */
        public function getType() : string {}
        public function setType(string $type) : void {}
    }

    class SearchBackendEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var Data
         */
        protected $data;

        public function __construct(Data $data) {}
        /**
         * @return Data
         */
        public function getData() {}
        public function setData($data) {}
    }

    class DataObjectEvent extends \symfony\component\eventdispatcher\event implements \pimcore\event\model\elementeventinterface {
    use \pimcore\event\traits\argumentsawaretrait;

        /**
         * @var AbstractObject
         */
        protected $object;

        public function __construct(AbstractObject $object, array $arguments = [ ]) {}
        /**
         * @return AbstractObject
         */
        public function getObject() {}
        public function setObject($object) {}
        /**
         * @return AbstractObject
         */
        public function getElement() {}
    }

    /**
     * Class AssetDeleteInfoEvent
     *
     * @package Pimcore\Event\Model
     */
    class AssetDeleteInfoEvent extends \pimcore\event\model\assetevent implements \pimcore\event\model\elementdeleteinfoeventinterface {
    use \pimcore\event\traits\elementdeleteinfoeventtrait;
}

    class RedirectEvent extends \symfony\component\eventdispatcher\event {
    use \pimcore\event\traits\argumentsawaretrait;

        /**
         * @var Redirect
         */
        protected $redirect;

        public function __construct(Redirect $redirect, array $arguments = [ ]) {}
        /**
         * @return Redirect
         */
        public function getRedirect() : Redirect {}
        public function setRedirect(Redirect $redirect) : void {}
    }

    /**
     * Class DataObjectImportEvent
     *
     * @package Pimcore\Event\Model
     */
    class DataObjectImportEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var mixed
         */
        protected $config;
        /**
         * @var string
         */
        protected $originalFile;
        /**
         * @var Concrete
         */
        protected $object;
        /**
         * @var mixed
         */
        protected $rowData;
        /**
         * @var mixed
         */
        protected $additionalData;
        /**
         * @var mixed
         */
        protected $context;

        public function __construct($config, $originalFile) {}
        /**
         * @return mixed
         */
        public function getConfig() {}
        public function setConfig($config) {}
        /**
         * @return string
         */
        public function getOriginalFile() {}
        public function setOriginalFile($originalFile) {}
        /**
         * @return Concrete
         */
        public function getObject() : Concrete {}
        public function setObject(Concrete $object) {}
        /**
         * @return mixed
         */
        public function getRowData() {}
        public function setRowData($rowData) {}
        /**
         * @return mixed
         */
        public function getAdditionalData() {}
        public function setAdditionalData($additionalData) {}
        /**
         * @return mixed
         */
        public function getContext() {}
        public function setContext($context) {}
    }

    class PrintConfigEvent extends \symfony\component\eventdispatcher\event {
    use \pimcore\event\traits\argumentsawaretrait;

        /**
         * @var Processor
         */
        protected $processor;

        public function __construct(Processor $processor, array $arguments = [ ]) {}
        /**
         * @return Processor
         */
        public function getProcessor() {}
        public function setProcessor($processor) {}
    }

    class VersionEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var Version
         */
        protected $version;

        public function __construct(Version $version) {}
        /**
         * @return Version
         */
        public function getVersion() {}
        public function setVersion($version) {}
    }

    class MailEvent extends \symfony\component\eventdispatcher\event {
    use \pimcore\event\traits\argumentsawaretrait;

        /**
         * @var Mail
         */
        protected $mail;

        public function __construct(Mail $mail, array $arguments = [ ]) {}
        /**
         * @return Mail
         */
        public function getMail() {}
        public function setMail($mail) {}
    }

    /**
     * Class DocumentDeleteInfoEvent
     *
     * @package Pimcore\Event\Model
     */
    class DocumentDeleteInfoEvent extends \pimcore\event\model\documentevent implements \pimcore\event\model\elementdeleteinfoeventinterface {
    use \pimcore\event\traits\elementdeleteinfoeventtrait;
}

    class DocumentEvent extends \symfony\component\eventdispatcher\event implements \pimcore\event\model\elementeventinterface {
    use \pimcore\event\traits\argumentsawaretrait;

        /**
         * @var Document
         */
        protected $document;

        public function __construct(Document $document, array $arguments = [ ]) {}
        /**
         * @return Document
         */
        public function getDocument() {}
        public function setDocument($document) {}
        /**
         * @return Document
         */
        public function getElement() {}
    }

    class TargetGroupEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var TargetGroup
         */
        protected $targetGroup;
        protected $arguments;

        public function __construct(TargetGroup $targetGroup, array $arguments = [ ]) {}
        /**
         * @return TargetGroup
         */
        public function getTargetGroup() {}
        public function setTargetGroup($targetGroup) {}
        /**
         * @return TargetGroup
         */
        public function getElement() {}
    }


    interface ElementDeleteInfoEventInterface extends \pimcore\event\model\elementeventinterface {
        /**
         * @return bool
         */
        function getDeletionAllowed() : bool ;
        function setDeletionAllowed(bool $deletionAllowed) : void ;
        /**
         * @return string
         */
        function getReason() : string ;
        function setReason(string $reason) : void ;
    }

    interface ElementEventInterface {
        /**
         * @return ElementInterface
         */
        function getElement() ;
    }

}

namespace Pimcore\Event\Model\Ecommerce {
    class OrderManagerEvent extends \symfony\component\eventdispatcher\event {
    use \pimcore\event\traits\argumentsawaretrait;

        /**
         * @var CartInterface
         */
        protected $cart;
        /**
         * @var AbstractOrder
         */
        protected $order;
        /**
         * @var OrderManagerInterface
         */
        protected $orderManager;

        public function __construct(CartInterface $cart, ?AbstractOrder $order, OrderManagerInterface $orderManager, array $arguments = [ ]) {}
        /**
         * @return CartInterface
         */
        public function getCart() : CartInterface {}
        public function setCart(CartInterface $cart) : void {}
        /**
         * @return AbstractOrder|null
         */
        public function getOrder() : ?AbstractOrder {}
        public function setOrder(AbstractOrder $order) : void {}
        /**
         * @return OrderManagerInterface
         */
        public function getOrderManager() : OrderManagerInterface {}
        public function setOrderManager(OrderManagerInterface $orderManager) : void {}
    }

    class OrderManagerItemEvent extends \symfony\component\eventdispatcher\event {
    use \pimcore\event\traits\argumentsawaretrait;

        /**
         * @var CartItemInterface
         */
        protected $cartItem;
        protected $isGiftItem;
        /**
         * @var AbstractOrderItem
         */
        protected $orderItem;

        public function __construct(CartItemInterface $cartItem, bool $isGiftItem, ?AbstractOrderItem $orderItem, array $arguments = [ ]) {}
        /**
         * @return CartItemInterface
         */
        public function getCartItem() : CartItemInterface {}
        public function setCartItem(CartItemInterface $cartItem) : void {}
        /**
         * @return bool
         */
        public function isGiftItem() : bool {}
        public function setIsGiftItem(bool $isGiftItem) : void {}
        /**
         * @return AbstractOrderItem|null
         */
        public function getOrderItem() : ?AbstractOrderItem {}
        public function setOrderItem(AbstractOrderItem $orderItem) : void {}
    }

    class CheckoutManagerStepsEvent extends \symfony\component\eventdispatcher\event {
    use \pimcore\event\traits\argumentsawaretrait;

        /**
         * @var CheckoutStepInterface
         */
        protected $currentStep;
        /**
         * @var CheckoutManagerInterface
         */
        protected $checkoutManager;

        public function __construct(CheckoutManagerInterface $checkoutManager, ?CheckoutStepInterface $currentStep, array $arguments = [ ]) {}
        /**
         * @return CheckoutStepInterface|null
         */
        public function getCurrentStep() : ?CheckoutStepInterface {}
        public function setCurrentStep(?CheckoutStepInterface $currentStep) : void {}
        /**
         * @return CheckoutManagerInterface
         */
        public function getCheckoutManager() : CheckoutManagerInterface {}
        public function setCheckoutManager(CheckoutManagerInterface $checkoutManager) : void {}
    }

    class CommitOrderProcessorEvent extends \symfony\component\eventdispatcher\event {
    use \pimcore\event\traits\argumentsawaretrait;

        /**
         * @var CommitOrderProcessorInterface
         */
        protected $commitOrderProcessor;
        /**
         * @var AbstractOrder
         */
        protected $order;

        public function __construct(CommitOrderProcessorInterface $commitOrderProcessor, ?AbstractOrder $order, array $arguments = [ ]) {}
        /**
         * @return CommitOrderProcessorInterface
         */
        public function getCommitOrderProcessor() : CommitOrderProcessorInterface {}
        public function setCommitOrderProcessor(CommitOrderProcessorInterface $commitOrderProcessor) : void {}
        /**
         * @return AbstractOrder
         */
        public function getOrder() : ?AbstractOrder {}
        public function setOrder(AbstractOrder $order) : void {}
    }

    class OrderAgentEvent extends \symfony\component\eventdispatcher\event {
    use \pimcore\event\traits\argumentsawaretrait;

        /**
         * @var OrderAgentInterface
         */
        protected $orderAgent;

        public function __construct(OrderAgentInterface $orderAgent, array $arguments = [ ]) {}
        /**
         * @return OrderAgentInterface
         */
        public function getOrderAgent() : OrderAgentInterface {}
        public function setOrderAgent(OrderAgentInterface $orderAgent) : void {}
    }

    class SendConfirmationMailEvent extends \symfony\component\eventdispatcher\event {
    use \pimcore\event\traits\argumentsawaretrait;

        /**
         * @var CommitOrderProcessorInterface
         */
        protected $commitOrderProcessor;
        /**
         * @var AbstractOrder
         */
        protected $order;
        /**
         * @var string
         */
        protected $confirmationMailConfig;
        /**
         * @var bool
         */
        protected $skipDefaultBehaviour;

        public function __construct(CommitOrderProcessorInterface $commitOrderProcessor, AbstractOrder $order, string $confirmationMailConfig) {}
        /**
         * @return CommitOrderProcessorInterface
         */
        public function getCommitOrderProcessor() : CommitOrderProcessorInterface {}
        public function setCommitOrderProcessor(CommitOrderProcessorInterface $commitOrderProcessor) : void {}
        /**
         * @return AbstractOrder
         */
        public function getOrder() : AbstractOrder {}
        public function setOrder(AbstractOrder $order) : void {}
        /**
         * @return string
         */
        public function getConfirmationMailConfig() : string {}
        public function setConfirmationMailConfig(string $confirmationMailConfig) : void {}
        /**
         * @return bool
         */
        public function doSkipDefaultBehaviour() : bool {}
        public function setSkipDefaultBehaviour(bool $skipDefaultBehaviour) : void {}
    }

}

namespace Pimcore\Event\Model\Ecommerce\IndexService {
    class PreprocessErrorEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var \Throwable
         */
        protected $exception;
        /**
         * @var bool
         */
        protected $throwException;
        /**
         * @var int
         */
        protected $subObjectId;

        public function __construct(\Throwable $exception, bool $throwException = true, int $subObjectId = 0) {}
        /**
         * @return \Throwable
         */
        public function getException() : \Throwable {}
        public function setThrowException(bool $throwException) : void {}
        /**
         * @return bool
         */
        public function doThrowException() : bool {}
        /**
         * @return int
         */
        public function getSubObjectId() : int {}
        public function setSubObjectId(int $subObjectId) : void {}
    }

    class PreprocessAttributeErrorEvent extends \pimcore\event\model\ecommerce\indexservice\preprocesserrorevent {
        /**
         * @var Attribute
         */
        protected $attribute;
        /**
         * skip attribute is currently the default behavior.
         *
         * @var bool
         */
        protected $skipAttribute;

        public function __construct(Attribute $attribute, \Throwable $exception, bool $skipAttribute = true, bool $throwException = false) {}
        /**
         * @return Attribute
         */
        public function getAttribute() : Attribute {}
        /**
         * @return bool
         */
        public function doSkipAttribute() : bool {}
        public function setSkipAttribute(bool $skipAttribute) : PreprocessErrorEvent {}
    }

}

namespace Pimcore\Event\Model\Asset {
    class ResolveUploadTargetEvent extends \symfony\component\eventdispatcher\event {
    use \pimcore\event\traits\argumentsawaretrait;

        /**
         * @var string
         */
        protected $filename;
        /**
         * @var array
         */
        protected $context;
        /**
         * @var int
         */
        protected $parentId;

        public function __construct($parentId, string $filename, $context) {}
        /**
         * @return string
         */
        public function getFilename() : string {}
        public function setFilename(string $filename) : void {}
        /**
         * @return array
         */
        public function getContext() : array {}
        public function setContext(array $context) : void {}
        /**
         * @return mixed
         */
        public function getParentId() {}
        public function setParentId($parentId) : void {}
    }

}

namespace Pimcore\Event\Model\Document {
    class TagNameEvent extends \symfony\component\eventdispatcher\event {
        /**
         * Tag type (e.g. "input")
         *
         * @var string
         */
        private $type;
        /**
         * Tag name (e.g. "headline")
         *
         * @var string
         */
        private $inputName;
        /**
         * The current block state
         *
         * @var BlockState
         */
        private $blockState;
        /**
         * The built tag name
         *
         * @var string
         */
        private $tagName;
        /**
         * @var Document
         */
        private $document;

        public function __construct(string $type, string $inputName, BlockState $blockState, string $tagName, Document $document) {}
        /**
         * @return string
         */
        public function getType() : string {}
        /**
         * @return string
         */
        public function getInputName() : string {}
        /**
         * @return BlockState
         */
        public function getBlockState() : BlockState {}
        /**
         * @return Document
         */
        public function getDocument() : Document {}
        /**
         * @return string
         */
        public function getTagName() : string {}
        public function setTagName(string $tagName) {}
    }

}

namespace Pimcore\Event\Model\DataObject {
    class CustomLayoutEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var ClassDefinition\CustomLayout
         */
        protected $customLayout;

        public function __construct(ClassDefinition\CustomLayout $customLayout) {}
        /**
         * @return ClassDefinition\CustomLayout
         */
        public function getCustomLayout() {}
        public function setCustomLayout($customLayout) {}
    }

    class ClassDefinitionEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var ClassDefinition
         */
        protected $classDefinition;

        public function __construct(ClassDefinition $classDefinition) {}
        /**
         * @return ClassDefinition
         */
        public function getClassDefinition() {}
        public function setClassDefinition($classDefinition) {}
    }

}

namespace Pimcore\Event\Model\DataObject\ClassificationStore {
    class GroupConfigEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var GroupConfig
         */
        protected $groupConfig;

        public function __construct(GroupConfig $groupConfig) {}
        /**
         * @return GroupConfig
         */
        public function getGroupConfig() {}
        public function setGroupConfig($groupConfig) {}
    }

    class CollectionConfigEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var CollectionConfig
         */
        protected $collectionConfig;

        public function __construct(CollectionConfig $collectionConfig) {}
        /**
         * @return CollectionConfig
         */
        public function getCollectionConfig() {}
        public function setCollectionConfig($collectionConfig) {}
    }

    class KeyConfigEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var KeyConfig
         */
        protected $keyConfig;

        public function __construct(KeyConfig $keyConfig) {}
        /**
         * @return KeyConfig
         */
        public function getKeyConfig() {}
        public function setKeyConfig($keyConfig) {}
    }

    class StoreConfigEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var StoreConfig
         */
        protected $storeConfig;

        public function __construct(StoreConfig $storeConfig) {}
        /**
         * @return StoreConfig
         */
        public function getStoreConfig() {}
        public function setStoreConfig($storeConfig) {}
    }

}

namespace Pimcore\Event\Analytics {
    final class GoogleTagManagerEvents {
        const CODE_BODY = 'pimcore.analytics.google.tag_manager.code_body';
        const CODE_HEAD = 'pimcore.analytics.google.tag_manager.code_head';

    }

    final class GoogleAnalyticsEvents {
        const CODE_TRACKING_DATA = 'pimcore.tracking.google.code.tracking_data';

    }

    final class PiwikEvents {
        const GENERATE_REPORTS = 'pimcore.tracking.piwik.reports.generate';
        const CODE_TRACKING_DATA = 'pimcore.tracking.piwik.code.tracking_data';

    }

}

namespace Pimcore\Event\Analytics\Google\TagManager {
    class CodeEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var array
         */
        private $data;
        /**
         * @var CodeBlock[]
         */
        private $blocks;
        /**
         * @var string
         */
        private $template;

        public function __construct(array $data, array $blocks, string $template) {}
        public function getData() : array {}
        public function setData(array $data) {}
        /**
         * @return CodeBlock[]
         */
        public function getBlocks() : array {}
        public function getBlock(string $block) : CodeBlock {}
        public function getTemplate() : string {}
        public function setTemplate(string $template) {}
    }

}

namespace Pimcore\Web2Print {
    abstract class Processor {
        /**
         * @return PdfReactor8|WkHtmlToPdf
         *
         * @throws \Exception
         */
        public static function getInstance() {}
        public function preparePdfGeneration($documentId, $config) {}
        public function startPdfGeneration($documentId) {}
        abstract protected function buildPdf(Document\PrintAbstract $document, $config) ;
        protected function saveJobConfigObjectFile($jobConfig) {}
        protected function loadJobConfigObject($documentId) {}
        protected function getPrintDocument($documentId) {}
        public static function getJobConfigFile($processId) {}
        /**
         * @return array
         */
        abstract public function getProcessingOptions() ;
        protected function updateStatus($documentId, $status, $statusUpdate) {}
        public function getStatusUpdate($documentId) {}
        public function cancelGeneration($documentId) {}
        protected function processHtml($html, $params) {}
        abstract public function getPdfFromString($html, $params = [ ], $returnFilePath = false) ;
    }

}

namespace Pimcore\Web2Print\Processor {
    class PdfReactor8 extends \pimcore\web2print\processor {
        protected function getConfig($config) {}
        /**
         * @return \PDFreactor
         */
        protected function getClient() {}
        public function getPdfFromString($html, $params = [ ], $returnFilePath = false) {}
        protected function buildPdf(Document\PrintAbstract $document, $config) {}
        public function getProcessingOptions() {}
    }

    class WkHtmlToPdf extends \pimcore\web2print\processor {
        /**
         * @var string
         */
        private $wkhtmltopdfBin;
        /**
         * @var string
         */
        private $options;
        protected $config;

        public function __construct($wkhtmltopdfBin = null, $options = null) {}
        protected function buildPdf(Document\PrintAbstract $document, $config) {}
        /**
         * @return array
         */
        public function getProcessingOptions() {}
        public function setOptions($options) {}
        /**
         * @return string
         */
        public function getOptions() {}
        public function getPdfFromString($html, $params = [ ], $returnFilePath = false) {}
        protected function fromStringToFile($htmlString, $dstFile = null) {}
        protected function fromStringToStream($htmlString) {}
        protected function convert($srcUrl, $dstFile = null) {}
    }

}

namespace Pimcore\Localization {
    class LocaleService implements \pimcore\localization\localeserviceinterface {
        /**
         * @var string
         */
        protected $locale;
        /**
         * @var null|RequestStack
         */
        protected $requestStack;
        /**
         * @var Translator
         */
        protected $translator;

        public function __construct(RequestStack $requestStack = null, Translator $translator = null) {}
        public function isLocale($locale) {}
        /**
         * @return string
         */
        public function findLocale() {}
        /**
         * @return null|string
         */
        protected function getLocaleFromRequest() {}
        /**
         * @return array
         */
        public function getLocaleList() {}
        public function getDisplayRegions($locale = null) {}
        /**
         * @return string|null
         */
        public function getLocale() {}
        public function setLocale($locale) {}
        /**
         * @return bool
         */
        public function hasLocale() {}
    }

    /**
     * Formatting service for dates, times and numbers
     */
    class IntlFormatter {
        const DATE_SHORT = 'date_short';
        const DATE_LONG = 'date_long';
        const DATE_MEDIUM = 'date_medium';
        const DATETIME_MEDIUM = 'datetime_medium';
        const DATETIME_SHORT = 'datetime_short';
        const TIME_SHORT = 'time_short';
        const DATETIME_LONG = 'datetime_long';
        const TIME_LONG = 'time_long';
        const TIME_MEDIUM = 'time_medium';

        /**
         * @var string
         */
        protected $locale;
        /**
         * @var \IntlDateFormatter[]
         */
        protected $dateFormatters;
        /**
         * @var \NumberFormatter
         */
        protected $numberFormatter;
        /**
         * @var \NumberFormatter[]
         */
        protected $currencyFormatters;
        /**
         * ICU DecimalFormat definition per locale for currencies
         *
         * @var string[]
         */
        protected $currencyFormats;

        public function __construct(LocaleServiceInterface $locale) {}
        /**
         * @return string
         */
        public function getLocale() {}
        public function setLocale($locale) {}
        public function getCurrencyFormat($locale) {}
        public function setCurrencyFormat($locale, $currencyFormat) {}
        protected function buildDateTimeFormatters($format) {}
        public function formatDateTime($dateTime, $format = self::DATETIME_MEDIUM) {}
        public function formatNumber($value) {}
        public function formatCurrency($value, $currency, $pattern = 'default') {}
    }


    interface LocaleServiceInterface {
        function isLocale($locale) ;
        function findLocale() ;
        function getLocaleList() ;
        function getDisplayRegions($locale = null) ;
        function getLocale() ;
        function setLocale($locale) ;
        function hasLocale() ;
    }

}

namespace Pimcore\Tool {
    class ArrayUtils {
        public static function arrayMergeRecursiveDistinct(array $first, array $second) {}
    }

    class Cast {
        public static function castToClass($class, $object) {}
    }

    class Newsletter {
        public const SENDING_MODE_SINGLE = 'single';
        public const SENDING_MODE_BATCH = 'batch';

        /**
         * @var DataObject\ClassDefinition
         */
        protected $class;

        public static function prepareMail(Document\Newsletter $newsletterDocument, SendingParamContainer $sendingContainer = null, $hostUrl = null) : Mail {}
        public static function sendNewsletterDocumentBasedMail(Mail $mail, SendingParamContainer $sendingContainer) : void {}
        protected static function obfuscateEmail($email) {}
        public static function sendMail($newsletter, $object, $emailAddress = null, $hostUrl = null) : void {}
        public function __construct($classId = null) {}
        /**
         * @return string
         */
        protected function getClassName() : string {}
        public function checkParams($params) : bool {}
/** @var DataObject\Concrete $object */
        public function subscribe(/** @var DataObject\Concrete $object */
$params) {}
        public function sendConfirmationMail($object, $mailDocument, $params = [ ]) : void {}
/** @var DataObject\Concrete $object */
        public function getObjectByToken(/** @var DataObject\Concrete $object */
$token) : ?DataObject\Concrete {}
        public function confirm($token) : bool {}
        public function unsubscribeByToken($token) : bool {}
        public function unsubscribeByEmail($email) : bool {}
        public function unsubscribe(DataObject\AbstractObject $object) : bool {}
        public function addNoteOnObject($object, $title) : void {}
        public function isEmailExists($params) : bool {}
        public function setClass($class) : void {}
        /**
         * @return DataObject\ClassDefinition
         */
        public function getClass() : DataObject\ClassDefinition {}
        public static function to_domain_exists($email) : bool {}
    }

    /**
     * @deprecated
     */
    class StopWatch {
        /**
         * @var array
         */
        static protected $startTime;
        /**
         * @var array
         */
        static protected $laps;

        public static function start($component = 'default') {}
        public static function lap($label, $component = 'default') {}
        public static function getTime($html = false, $component = 'default') {}
        public static function display($html = false, $component = 'default') {}
        /**
         * @deprecated
         * @static
         *
         * @return float
         */
        public static function microtime_float() {}
    }

    class Authentication {
/** @var User $user */
        public static function authenticatePlaintext(/** @var User $user */
$username, /** @var User $user */
$password) {}
        public static function authenticateSession(Request $request = null) {}
        /**
         * @static
         *
         * @throws \Exception
         *
         * @return User
         */
        public static function authenticateHttpBasic() {}
        public static function authenticateToken($token, $adminRequired = false) {}
        public static function verifyPassword($user, $password) {}
        public static function isValidUser($user) {}
        public static function getPasswordHash($username, $plainTextPassword) {}
        public static function preparePlainTextPassword($username, $plainTextPassword) {}
        public static function generateToken($username) {}
        public static function tokenDecrypt($token) {}
    }

    class Archive {
        public static function createZip($sourceDir, $destinationFile, $excludeFilePattern = [ ], $options = [ ]) {}
        public static function createPhar($sourceDir, $destinationFile, $excludeFilePattern = [ ], $options = [ ]) {}
        protected static function prepareArchive($sourceDir, $destinationFile) {}
    }

    class ClassUtils {
        public static function getBaseName($class) : string {}
        public static function findClassName(\SplFileInfo $file) : string {}
    }

    class Session {
        /**
         * @var AdminSessionHandlerInterface
         */
        static private $handler;

        public static function getHandler() : AdminSessionHandlerInterface {}
        public static function setHandler(AdminSessionHandlerInterface $handler) {}
        public static function useSession($func, string $namespace = 'pimcore_admin') {}
        /**
         * @return string
         */
        public static function getSessionId() {}
        /**
         * @return string
         */
        public static function getSessionName() {}
        /**
         * @return bool
         */
        public static function invalidate() : bool {}
        /**
         * @return bool
         */
        public static function regenerateId() : bool {}
        public static function requestHasSessionId(Request $request, bool $checkRequestParams = false) : bool {}
        public static function getSessionIdFromRequest(Request $request, bool $checkRequestParams = false) {}
        public static function get(string $namespace = 'pimcore_admin') : AttributeBagInterface {}
        public static function getReadOnly(string $namespace = 'pimcore_admin') : AttributeBagInterface {}
        /**
         * Saves the session if it is the last admin session which was opene
         */
        public static function writeClose() {}
    }

    class DeviceDetector {
        /**
         * @var array
         */
        protected $validDeviceTypes;
        /**
         * @var null|string
         */
        protected $default;
        /**
         * @var bool
         */
        protected $isPhone;
        /**
         * @var bool
         */
        protected $isDesktop;
        /**
         * @var bool
         */
        protected $isTablet;
        /**
         * @var null|DeviceDetector
         */
        static protected $instance;
        /**
         * @var bool
         */
        protected $determinedDeviceType;
        /**
         * @var bool
         */
        protected $wasUsed;

        public static function getInstance($default = null) {}
        public function __construct($default = null) {}
        /**
         * @return bool
         */
        public function isDesktop() {}
        /**
         * @return bool
         */
        public function isTablet() {}
        /**
         * @return bool
         */
        public function isPhone() {}
        /**
         * @return bool
         */
        public function wasUsed() {}
        public function setWasUsed($wasUsed) {}
        public function setDeviceType(string $type) {}
        /**
         * @return string
         */
        public function getDevice() {}
        /**
         * @return string
         */
        public function __toString() {}
        protected function determineDeviceType() {}
    }

    class HtmlUtils {
        public static function assembleAttributeString(array $attributes, bool $omitNullValues = false) : string {}
    }

    class Requirements {
        /**
         * @return Check[]
         */
        public static function checkFilesystem() {}
        public static function checkMysql(ConnectionInterface $db) {}
        /**
         * @return Check[]
         */
        public static function checkExternalApplications() {}
        /**
         * @return Check[]
         */
        public static function checkPhp() {}
        protected static function rscandir($base = '', $data = [ ]) {}
    }

    class ArrayNormalizer {
        /**
         * @var callable[]
         */
        private $normalizers;

        public function normalize(array $array) : array {}
        public function addNormalizer($properties, callable $normalizer) {}
    }

    class Console {
        /**
         * @var string system environment
         */
        static private $systemEnvironment;
        /**
         * @var null|bool
         */
        static protected $timeoutKillAfterSupport;
        /**
         * @var array
         */
        static protected $executableCache;

        /**
         * @static
         *
         * @return string "windows" or "unix"
         */
        public static function getSystemEnvironment() {}
        public static function getExecutable($name, $throwException = false) {}
        protected static function setupComposer() {}
        protected static function checkPngout($executablePath) {}
        protected static function checkCjpeg($executablePath) {}
        protected static function checkComposite($process) {}
        protected static function checkConvert($executablePath) {}
        /**
         * @return mixed
         *
         * @throws \Exception
         */
        public static function getPhpCli() {}
        /**
         * @return bool|string
         */
        public static function getTimeoutBinary() {}
        protected static function buildPhpScriptCmd($script, $arguments) {}
        public static function runPhpScript($script, $arguments = '', $outputFile = null, $timeout = null) {}
        public static function runPhpScriptInBackground($script, $arguments = '', $outputFile = null) {}
        public static function exec($cmd, $outputFile = null, $timeout = null) {}
        public static function execInBackground($cmd, $outputFile = null) {}
/**
 * mod_php seems to lose the environment variables if we do not set them manually before the child process is started
 */
        protected static function execInBackgroundUnix(/**
 * mod_php seems to lose the environment variables if we do not set them manually before the child process is started
 */
$cmd, /**
 * mod_php seems to lose the environment variables if we do not set them manually before the child process is started
 */
$outputFile, /**
 * mod_php seems to lose the environment variables if we do not set them manually before the child process is started
 */
$useNohup = true) {}
        protected static function execInBackgroundWindows($cmd, $outputFile) {}
        public static function getOptions($onlyFullNotationArgs = false) {}
        public static function getOptionString($options, $concatenator = '=', $arrayConcatenator = ',') {}
        /**
         * @throws \Exception
         */
        public static function checkCliExecution() {}
    }

    /**
     * @deprecated
     *
     * Standard RestClient working with a Guzzle client
     */
    class RestClient extends \pimcore\tool\restclient\abstractrestclient {
        /**
         * @var Client
         */
        protected $client;

        public function __construct(Client $client, array $parameters = [ ], array $headers = [ ], array $options = [ ]) {}
        /**
         * @return Client
         */
        public function getClient() {}
        public function getResponse($method, $uri, array $parameters = [ ], array $files = [ ], array $server = [ ], $content = null) {}
        protected function prepareUri($uri) {}
    }

    class Transliteration {
        public static function toASCII($value, $language = null) {}
        private static function _transliterationProcess($string, $unknown = '?', $source_langcode = null) {}
        private static function _transliterationReplace($ord, $unknown = '?', $langcode = null) {}
    }

    class Mime {
        public static function detect($file, $filename = null) {}
    }

    class HybridAuth {
        /**
         * @throws \Exception
         */
        public static function init() {}
        /**
         * @return mixed|null
         *
         * @throws \Exception
         */
        public static function getConfiguration() {}
        /**
         * Initialize hybrid auth from configuration
         */
        public static function initializeHybridAuth() {}
        /**
         * @return \Hybrid_Auth
         */
        public static function getHybridAuth() {}
        public static function authenticate($provider, $params = null) {}
        public static function process() {}
    }

    /**
     * Runs the assets:install command with the settings configured in composer.json
     *
     * @package Pimcore\Tool
     */
    class AssetsInstaller {
        /**
         * @var \Closure
         */
        private $runCallback;
        /**
         * @var string
         */
        private $composerJsonSetting;

        public function install(array $options = [ ]) : Process {}
        public function buildProcess(array $options = [ ]) : Process {}
        public function resolveOptions(array $options = [ ]) {}
        public function setRunCallback(\Closure $runCallback = null) {}
        private function configureOptions(OptionsResolver $resolver) {}
        /**
         * @return string|null
         */
        private function readComposerJsonSetting() {}
    }

    class Serialize {
        /**
         * @var array
         */
        static protected $loopFilterProcessedObjects;

        public static function serialize($data) {}
        public static function unserialize($data) {}
        /**
         * Shortcut to access the admin serializer
         *
         * @return \Symfony\Component\Serializer\Serializer
         */
        public static function getAdminSerializer() {}
        public static function removeReferenceLoops($data) {}
        protected static function loopFilterCycles($element) {}
    }

    class Admin {
        public static function getLanguageFile($language) {}
        /**
         * finds installed languages
         *
         * @static
         *
         * @return array
         */
        public static function getLanguages() {}
        public static function getMinimizedScriptPath($scriptContent) {}
        public static function determineCsvDialect($file) {}
        /**
         * @static
         *
         * @return string
         */
        public static function getMaintenanceModeFile() {}
        public static function getMaintenanceModeScheduleLoginFile() {}
        public static function activateMaintenanceMode($sessionId) {}
        /**
         * @static
         */
        public static function deactivateMaintenanceMode() {}
        /**
         * @static
         *
         * @return bool
         */
        public static function isInMaintenanceMode() {}
        public static function isMaintenanceModeScheduledForLogin() : bool {}
        public static function scheduleMaintenanceModeOnLogin() {}
        public static function unscheduleMaintenanceModeOnLogin() {}
        /**
         * @static
         *
         * @return \Pimcore\Model\User|null
         */
        public static function getCurrentUser() {}
        /**
         * @return true if in EXT JS5 mode
         */
        public static function isExtJS6() {}
        public static function reorderWebsiteLanguages($user, $languages, $returnLanguageArray = false) {}
    }

    class Text {
        public static function removeLineBreaks($text = '') {}
        public static function wysiwygText($text, $params = [ ]) {}
        public static function replaceWysiwygTextRelationIds($idMapping, $text) {}
        public static function getElementsTagsInWysiwyg($text) {}
        public static function getElementsInWysiwyg($text) {}
        public static function getDependenciesOfWysiwygText($text) {}
        public static function getCacheTagsOfWysiwygText($text, $tags = [ ]) {}
        public static function convertToUTF8($text) {}
        public static function detectEncoding($text) {}
        public static function getStringAsOneLine($string) {}
        public static function cutStringRespectingWhitespace($string, $length) {}
    }

    class Frontend {
        static protected $clientWebpSupport;
        static protected $documentWebpSupport;

        /**
         * Returns the Website-Config
         *
         * @return \Pimcore\Config\Config
         *
         * @deprecated
         */
        public static function getWebsiteConfig() {}
        public static function getSiteKey(Site $site = null) {}
        public static function isDocumentInSite($site, $document) {}
        public static function isDocumentInCurrentSite($document) {}
        public static function getSiteForDocument($document) {}
        /**
         * @return array|bool
         */
        public static function isOutputCacheEnabled() {}
        /**
         * @return bool
         */
        public static function hasWebpSupport() {}
        /**
         * @return bool
         */
        protected static function hasClientWebpSupport() : bool {}
        /**
         * @return bool
         */
        private static function determineClientWebpSupport() : bool {}
        /**
         * @return bool
         */
        protected static function hasDocumentWebpSupport() : bool {}
    }

}

namespace Pimcore\Tool\Requirements {
    class Check implements \arrayaccess {
        const STATE_OK = 1;
        const STATE_WARNING = 2;
        const STATE_ERROR = 3;

        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $link;
        /**
         * @var string
         */
        public $state;
        /**
         * @var string
         */
        public $message;

        public function __construct(array $data = [ ]) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getLink() {}
        public function setLink($link) {}
        /**
         * @return string
         */
        public function getState() {}
        public function setState($state) {}
        /**
         * @return string
         */
        public function getMessage() {}
        public function setMessage($message) {}
        public function offsetExists($offset) {}
        public function offsetGet($offset) {}
        public function offsetSet($offset, $value) {}
        public function offsetUnset($offset) {}
    }

}

namespace Pimcore\Tool\Glossary {
    class Processor {
        /**
         * @var RequestHelper
         */
        private $requestHelper;
        /**
         * @var EditmodeResolver
         */
        private $editmodeResolver;
        /**
         * @var DocumentResolver
         */
        private $documentResolver;
        /**
         * @var array
         */
        private $blockedTags;

        public function __construct(RequestHelper $requestHelper, EditmodeResolver $editmodeResolver, DocumentResolver $documentResolver) {}
        public function process(string $content, array $options) : string {}
        /**
         * @return array
         */
        private function getData() : array {}
        private function prepareData(array $data) : array {}
    }

}

namespace Pimcore\Tool\RestClient {
    /**
     * @deprecated
     */
    abstract class AbstractRestClient implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * @var bool
         */
        protected $disableMappingExceptions;
        /**
         * @var bool
         */
        protected $enableProfiling;
        /**
         * @var object|null
         */
        protected $profilingInfo;
        /**
         * @var bool
         */
        protected $condense;
        /**
         * @var string
         */
        protected $basePath;
        /**
         * @var string
         */
        protected $scheme;
        /**
         * @var string
         */
        protected $host;
        /**
         * @var int
         */
        protected $port;
        /**
         * @var array
         */
        protected $defaultParameters;
        /**
         * @var array
         */
        protected $defaultHeaders;
        /**
         * @var RequestInterface
         */
        protected $lastRequest;
        /**
         * @var ResponseInterface
         */
        protected $lastResponse;

        public function __construct(array $parameters = [ ], array $headers = [ ], array $options = [ ]) {}
        /**
         * @return array
         */
        public function getDefaultParameters() {}
        public function setDefaultParameters(array $defaultParameters) {}
        /**
         * @return array
         */
        public function getDefaultHeaders() {}
        public function setDefaultHeaders(array $defaultHeaders) {}
        public function setValues(array $options = [ ]) {}
        public function setValue($key, $value) {}
        public function setDisableMappingExceptions($disableMappingExceptions) {}
        /**
         * @return bool
         */
        public function getDisableMappingExceptions() {}
        public function setCondense($condense) {}
        /**
         * @return bool
         */
        public function getCondense() {}
        public function setEnableProfiling($enableProfiling) {}
        /**
         * @return bool
         */
        public function getEnableProfiling() {}
        /**
         * @return object|null
         */
        public function getProfilingInfo() {}
        /**
         * @return string
         */
        public function getBasePath() {}
        public function setBasePath($basePath) {}
        public function setApiKey($apikey) {}
        /**
         * @return string|null
         */
        public function getApiKey() {}
        /**
         * @return string
         */
        public function getScheme() {}
        public function setScheme($scheme) {}
        /**
         * @return string
         */
        public function getHost() {}
        public function setHost($host) {}
        /**
         * @return int
         */
        public function getPort() {}
        public function setPort($port) {}
        abstract public function getResponse($method, $uri, array $parameters = [ ], array $files = [ ], array $server = [ ], $content = null) ;
        public function getJsonResponse($method, $uri, array $parameters = [ ], array $files = [ ], array $server = [ ], $content = null, $expectedStatus = 200) {}
        protected function parseJsonResponse(RequestInterface $request, ResponseInterface $response, $expectedStatus = 200) {}
        protected function prepareParameters(array $parameters = [ ]) {}
        protected function prepareHeaders(array $headers = [ ]) {}
        protected function buildRestParameters(array $parameters = [ ], $condition = null, $order = null, $orderKey = null, $offset = null, $limit = null, $groupBy = null, $objectClass = null) {}
        public function getObjectList($condition = null, $order = null, $orderKey = null, $offset = null, $limit = null, $groupBy = null, $decode = true, $objectClass = null) {}
        public function getAssetList($condition = null, $order = null, $orderKey = null, $offset = null, $limit = null, $groupBy = null, $decode = true) {}
        public function getDocumentList($condition = null, $order = null, $orderKey = null, $offset = null, $limit = null, $groupBy = null, $decode = true) {}
        public function getObjectById($id, $decode = true, $idMapper = null) {}
        public function getDocumentById($id, $decode = true, $idMapper = null) {}
/** @var Client $client */
        public function getAssetById(/** @var Client $client */
$id, /** @var Client $client */
$decode = true, /** @var Client $client */
$idMapper = null, /** @var Client $client */
$light = false, /** @var Client $client */
$thumbnail = null, /** @var Client $client */
$tolerant = false, /** @var Client $client */
$protocol = 'http://') {}
        public function createDocument(Document $document) {}
        public function createObjectConcrete(DataObject\AbstractObject $object) {}
        public function createAsset(Asset $asset) {}
        public function deleteObject($objectId) {}
        public function deleteAsset($assetId) {}
        public function deleteDocument($documentId) {}
        public function createObjectFolder(DataObject\Folder $objectFolder) {}
        public function createDocumentFolder(Document\Folder $documentFolder) {}
        public function createAssetFolder(Asset\Folder $assetFolder) {}
        public function getClassById($id, $decode = true) {}
        public function getObjectMetaById($id, $decode = true) {}
        public function getAssetCount($condition = null, $groupBy = null) {}
        public function getDocumentCount($condition = null, $groupBy = null) {}
        public function getObjectCount($condition = null, $groupBy = null, $objectClass = null) {}
        /**
         * Returns the current user
         *
         * @return mixed
         */
        public function getUser() {}
        /**
         * @return mixed|null|string
         *
         * @throws Exception
         */
        public function getFieldCollections() {}
        public function getFieldCollection($id) {}
        /**
         * Returns a list of defined classes
         *
         * @return mixed
         */
        public function getClasses() {}
        /**
         * Returns a list of defined object bricks
         *
         * @return mixed
         */
        public function getObjectBricks() {}
        public function getObjectBrick($id) {}
        /**
         * Returns the current server time
         *
         * @return mixed
         */
        public function getCurrentTime() {}
        /**
         * Returns a list of image thumbnail configurations.
         *
         * @return mixed
         */
        public function getImageThumbnails() {}
        public function getImageThumbnail($id) {}
        /**
         * Returns: server-info including pimcore version, current time and extension data.
         *
         * @return mixed
         */
        public function getServerInfo() {}
        private function map($wsData, $data) {}
        private function fillWebserviceData($class, $data) {}
        private function changeExtension($filename, $extension) {}
    }

    class Exception extends \exception {
        /**
         * @var RequestInterface
         */
        protected $request;
        /**
         * @var ResponseInterface
         */
        protected $response;

        public static function create($message, RequestInterface $request, ResponseInterface $response) {}
        /**
         * @return RequestInterface
         */
        public function getRequest() {}
        public function setRequest($request) {}
        /**
         * @return ResponseInterface
         */
        public function getResponse() {}
        public function setResponse($response) {}
    }

}

namespace Pimcore\Tool\Text {
    class Csv {
        public function detect($data) {}
        protected function guessLinefeed($data) {}
        protected function guessQuoteAndDelim($data) {}
        protected function guessDelim($data, $linefeed, $quotechar) {}
        protected function deviation($array) {}
    }

}

namespace Pimcore\Analytics {
    abstract class AbstractTracker implements \pimcore\analytics\trackerinterface {
        /**
         * @var SiteIdProvider
         */
        private $siteIdProvider;
        /**
         * @var CodeCollector
         */
        private $codeCollector;

        public function __construct(SiteIdProvider $siteIdProvider) {}
        public function generateCode(SiteId $siteId = null) {}
        abstract protected function buildCode(SiteId $siteId) ;
        public function addCodePart(string $code, string $block = null, bool $prepend = false, SiteId $siteId = null) {}
        /**
         * Lazy initialize the code collector
         *
         * @return CodeCollector
         */
        protected function getCodeCollector() : CodeCollector {}
        /**
         * Builds the code collector which allows to add additional content to
         * specific blocks.
         *
         * @return CodeCollector
         */
        abstract protected function buildCodeCollector() : CodeCollector ;
    }


    interface TrackerInterface {
        function generateCode(SiteId $siteId = null) ;
        function addCodePart(string $code, string $block = null, bool $prepend = false, SiteId $siteId = null) ;
    }

}

namespace Pimcore\Analytics\Google {
    class Tracker extends \pimcore\analytics\abstracttracker {
    use \psr\log\loggerawaretrait;

        const BLOCK_AFTER_TRACK = 'afterTrack';
        const BLOCK_AFTER_SCRIPT = 'afterScript';
        const BLOCK_AFTER_SCRIPT_TAG = 'afterScriptTag';
        const BLOCK_BEFORE_SCRIPT_TAG = 'beforeScriptTag';
        const BLOCK_BEFORE_SCRIPT = 'beforeScript';
        const BLOCK_BEFORE_INIT = 'beforeInit';
        const BLOCK_BEFORE_TRACK = 'beforeTrack';

        /**
         * @var SiteIdProvider
         */
        private $siteIdProvider;
        /**
         * @var ConfigProvider
         */
        private $configProvider;
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;
        /**
         * @var EngineInterface
         */
        private $templatingEngine;
        /**
         * @var string|null
         */
        private $defaultPath;
        /**
         * @var array
         */
        private $blocks;

        public function __construct(SiteIdProvider $siteIdProvider, ConfigProvider $configProvider, EventDispatcherInterface $eventDispatcher, EngineInterface $templatingEngine) {}
        public function getDefaultPath() {}
        public function setDefaultPath(string $defaultPath = null) {}
        protected function buildCodeCollector() : CodeCollector {}
        protected function buildCode(SiteId $siteId) {}
        public function generateCodeForSiteConfig(ConfigObject $siteConfig, SiteId $siteId = null) {}
        private function doBuildCode(SiteId $siteId, Config $config, ConfigObject $siteConfig) {}
        private function getTrackerConfigurationFromJson($configValue = null, array $defaultConfig = [ ]) : array {}
        private function buildCodeBlocks(SiteId $siteId, ConfigObject $siteConfig) : array {}
        private function buildBlockData(ConfigObject $siteConfig) : array {}
        private function renderTemplate(TrackingDataEvent $event) : string {}
    }

}

namespace Pimcore\Analytics\Google\Config {
    class Config {
        /**
         * @var ConfigObject
         */
        private $config;

        public function __construct(ConfigObject $config) {}
        public static function fromReportConfig(ConfigObject $reportConfig) : self {}
        public function getConfig() : ConfigObject {}
        public function isSiteConfigured(string $configKey) : bool {}
        public function getConfigForSite(string $configKey) {}
        public function getConfiguredSites() : array {}
        public function isReportingConfigured(string $configKey) : bool {}
        private function normalizeStringValue($value) {}
    }

    class ConfigProvider {
        /**
         * @var Config
         */
        private $config;
        /**
         * @var ConfigObject|null
         */
        private $configObject;

        public function __construct(ConfigObject $configObject = null) {}
        public function getConfig() : Config {}
        private function getConfigObject() : ConfigObject {}
        protected function loadDefaultConfigObject() : ConfigObject {}
    }

    class SiteConfigProvider {
        /**
         * @var SiteIdProvider
         */
        private $siteIdProvider;
        /**
         * @var ConfigProvider
         */
        private $configProvider;

        public function __construct(SiteIdProvider $siteIdProvider, ConfigProvider $configProvider) {}
        public function getSiteConfig(Site $site = null) {}
        public function isSiteReportingConfigured(Site $site = null) : bool {}
        private function getSiteId(Site $site = null) : SiteId {}
    }

}

namespace Pimcore\Analytics\Google\Event {
    class TrackingDataEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var Config
         */
        private $config;
        /**
         * @var SiteId
         */
        private $siteId;
        /**
         * @var array
         */
        private $data;
        /**
         * @var CodeBlock[]
         */
        private $blocks;
        /**
         * @var string
         */
        private $template;

        public function __construct(Config $config, SiteId $siteId, array $data, array $blocks, string $template) {}
        public function getConfig() : Config {}
        public function getSiteId() : SiteId {}
        public function getData() : array {}
        public function setData(array $data) {}
        /**
         * @return CodeBlock[]
         */
        public function getBlocks() : array {}
        public function getBlock(string $block) : CodeBlock {}
        public function getTemplate() : string {}
        public function setTemplate(string $template) {}
    }

}

namespace Pimcore\Analytics\GoogleTagManager\EventSubscriber {
    class TrackingCodeSubscriber implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\enabledtrait, \pimcore\bundle\corebundle\eventlistener\traits\responseinjectiontrait, \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait, \pimcore\bundle\corebundle\eventlistener\traits\previewrequesttrait;

        /** @var TrackingManager */
        protected $trackingManager;
        /** @var EngineInterface * */
        protected $templatingEngine;

        public function __construct(TrackingManager $trackingManager, EngineInterface $templatingEngine) {}
        public static function getSubscribedEvents() {}
        public function onCodeHead(CodeEvent $event) {}
    }

}

namespace Pimcore\Analytics\Code {
    /**
     * Collects additional code parts which should be added to specific blocks upon rendering. Code
     * parts can be added on a global level or restricted to a specific site.
     */
    class CodeCollector {
        const ACTION_PREPEND = 'prepend';
        const ACTION_APPEND = 'append';
        const CONFIG_KEY_GLOBAL = '__global';

        /**
         * @var string
         */
        private $defaultBlock;
        /**
         * @var array
         */
        private $validBlocks;
        /**
         * @var array
         */
        private $codeParts;
        /**
         * @var array
         */
        private $validActions;

        public function __construct(array $validBlocks, string $defaultBlock) {}
        public function addCodePart(string $code, string $block = null, string $action = self::ACTION_APPEND, SiteId $siteId = null) {}
        public function enrichCodeBlock(SiteId $siteId, CodeBlock $codeBlock, string $block) {}
        private function enrichBlock(string $configKey, CodeBlock $codeBlock, string $block) {}
    }

    /**
     * Represents a single template block. Parts are represented as array and concatenated
     * with newlines on render.
     */
    final class CodeBlock {
        /**
         * @var array
         */
        private $parts;

        public function __construct(array $parts = [ ]) {}
        public function setParts(array $parts) {}
        public function getParts() : array {}
        public function append($parts) {}
        public function prepend($parts) {}
        public function asString() : string {}
        public function __toString() {}
    }

}

namespace Pimcore\Analytics\SiteId {
    class SiteIdProvider {
        /**
         * @var SiteResolver
         */
        private $siteResolver;

        public function __construct(SiteResolver $siteResolver) {}
        public function getForRequest(Request $request = null) : SiteId {}
        public function getSiteId(string $configKey) : SiteId {}
/** @var Site\Listing|Site\Listing\Dao $sites */
        public function getSiteIds(/** @var Site\Listing|Site\Listing\Dao $sites */
bool $includeMainDomain = true) : array {}
    }

    /**
     * Represents an analytics site config key which is either just "default" without
     * an associated site or a combination of a site with its config key "site_<siteId>".
     */
    class SiteId {
        const CONFIG_KEY_MAIN_DOMAIN = 'default';

        /**
         * @var string
         */
        private $configKey;
        /**
         * @var Site|null
         */
        private $site;

        private function __construct(string $configKey, Site $site = null) {}
        public static function forMainDomain() : SiteId {}
        public static function forSite(Site $site) : SiteId {}
        public function getConfigKey() : string {}
        /**
         * @return Site|null
         */
        public function getSite() {}
        public function getTitle(TranslatorInterface $translator) : string {}
    }

}

namespace Pimcore\Analytics\Piwik {
    /**
     * Fetches and caches available widget data (stored by site ID and language) from the
     * Piwik API. This is used to show a list of widgets inside the Pimcore admin and to
     * generate iframe URLs to single widgets.
     */
    class WidgetBroker {
        /**
         * @var ConfigProvider
         */
        private $configProvider;
        /**
         * @var ApiClient
         */
        private $apiClient;
        /**
         * @var CoreHandlerInterface
         */
        private $cache;
        /**
         * @var UserLoader
         */
        private $userLoader;
        /**
         * @var LoggerInterface
         */
        private $logger;
        /**
         * @var array
         */
        private $options;
        /**
         * @var array
         */
        private $widgets;

        public function __construct(ConfigProvider $configProvider, ApiClient $apiClient, CoreHandlerInterface $cache, UserLoader $userLoader, LoggerInterface $logger, array $options = [ ]) {}
        protected function configureOptions(OptionsResolver $resolver) {}
        public function getWidgetReferences(string $configKey, string $locale = null) : array {}
        public function getWidgetConfig(string $widgetId, string $configKey, string $locale = null, array $urlParams = [ ]) : WidgetConfig {}
        public function getWidgetData(string $configKey, string $locale = null) : array {}
        private function loadConfig() : Config {}
        private function resolveLocale(string $locale = null) {}
        private function generateCacheKey(int $siteId, string $locale = null) {}
        private function loadWidgets(Config $config, string $configKey, string $locale = null) : array {}
        private function categorizeWidgets(array $data) : array {}
        private function flattenCategorizedWidgetTree(array $tree) : array {}
        private function loadFromApi(Config $config, string $configKey, string $locale = null) : array {}
        private function generateWidgetUrl(Config $config, string $configKey, array $widget, string $locale = null, array $urlParams = [ ]) : string {}
        private function generateTitle(array $widget) {}
    }

    class Tracker extends \pimcore\analytics\abstracttracker {
        const BLOCK_BEFORE_TRACK = 'beforeTrack';
        const BLOCK_TRACK = 'track';
        const BLOCK_AFTER_TRACK = 'afterTrack';
        const BLOCK_BEFORE_ASYNC = 'beforeAsync';
        const BLOCK_BEFORE_SCRIPT_TAG = 'beforeScriptTag';
        const BLOCK_BEFORE_SCRIPT = 'beforeScript';
        const BLOCK_AFTER_SCRIPT = 'afterScript';
        const BLOCK_AFTER_ASYNC = 'afterAsync';
        const BLOCK_AFTER_SCRIPT_TAG = 'afterScriptTag';

        /**
         * @var ConfigProvider
         */
        private $configProvider;
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;
        /**
         * @var EngineInterface
         */
        private $templatingEngine;
        /**
         * @var array
         */
        private $blocks;

        public function __construct(SiteIdProvider $siteIdProvider, ConfigProvider $configProvider, EventDispatcherInterface $eventDispatcher, EngineInterface $templatingEngine) {}
        protected function buildCodeCollector() : CodeCollector {}
        protected function buildCode(SiteId $siteId) {}
        private function renderTemplate(TrackingDataEvent $event) : string {}
        private function buildCodeBlocks(Config $config, SiteId $siteId) : array {}
        private function buildBlockData(ConfigObject $trackerConfig, Config $config, SiteId $siteId) : array {}
    }

    /**
     * Builds a list of all available Piwik reports which should be shown in reports panel. A ReportConfig references an
     * iframe URL with a title. Additional reports can be added by adding them in the GENERATE_REPORTS event.
     */
    class ReportBroker {
        /**
         * @var ConfigProvider
         */
        private $configProvider;
        /**
         * @var SiteIdProvider
         */
        private $siteIdProvider;
        /**
         * @var TranslatorInterface
         */
        private $translator;
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;
        /**
         * @var ReportConfig[]
         */
        private $reports;

        public function __construct(ConfigProvider $configProvider, SiteIdProvider $siteIdProvider, TranslatorInterface $translator, EventDispatcherInterface $eventDispatcher) {}
        /**
         * @return ReportConfig[]
         */
        public function getReports() : array {}
        public function getReport(string $id) : ReportConfig {}
        /** @var ReportConfig[] $reports */
        private function buildReports() : array {}
        private function generateAllWebsitesDashboardUrl(Config $config, string $configKey) : string {}
        private function generateSiteDashboardUrl(Config $config, string $configKey) : string {}
        private function generateDashboardUrl(Config $config, string $configKey, array $parameters) {}
    }

}

namespace Pimcore\Analytics\Piwik\Dto {
    final class WidgetConfig {
        /**
         * @var string
         */
        private $id;
        /**
         * @var string
         */
        private $name;
        /**
         * @var string
         */
        private $title;
        /**
         * @var string
         */
        private $url;
        /**
         * @var array
         */
        private $data;

        public function __construct(string $id, string $name, string $title, string $url, array $data) {}
        public function getId() : string {}
        public function getName() : string {}
        public function getTitle() : string {}
        public function getUrl() : string {}
        public function getData() : array {}
    }

    final class WidgetReference {
        /**
         * @var string
         */
        private $id;
        /**
         * @var string
         */
        private $title;

        public function __construct(string $id, string $title) {}
        public function getId() : string {}
        public function getTitle() : string {}
    }

    final class ReportConfig {
        /**
         * @var string
         */
        private $id;
        /**
         * @var string
         */
        private $title;
        /**
         * @var string
         */
        private $url;

        public function __construct(string $id, string $title, string $url) {}
        public function getId() : string {}
        public function getTitle() : string {}
        public function getUrl() : string {}
    }

}

namespace Pimcore\Analytics\Piwik\Config {
    class Config {
        /**
         * @var ConfigObject
         */
        private $config;

        public function __construct(ConfigObject $config) {}
        public static function fromReportConfig(ConfigObject $reportConfig) : self {}
        public function isConfigured() : bool {}
        public function getConfig() : ConfigObject {}
        public function isSiteConfigured(string $configKey) : bool {}
        public function getConfigForSite(string $configKey) {}
        public function getConfiguredSites() : array {}
        /**
         * @return string|null
         */
        public function getPiwikUrl() {}
        /**
         * @return string|null
         */
        public function getApiToken() {}
        /**
         * @return string|null
         */
        public function getReportToken() {}
        public function getApiClientOptions() : array {}
        public function getPiwikSiteId(string $configKey) {}
        public function isIframeIntegrationConfigured() : bool {}
        /**
         * @return null|string
         */
        public function getIframeUsername() {}
        /**
         * @return null|string
         */
        public function getIframePassword() {}
        public function generateIframeUrl(array $parameters = [ ]) : string {}
        private function normalizeStringValue($value) {}
        private function normalizePiwikSiteId(ConfigObject $config) {}
    }

    class ConfigProvider {
        /**
         * @var Config
         */
        private $config;
        /**
         * @var ConfigObject|null
         */
        private $configObject;

        public function __construct(ConfigObject $configObject = null) {}
        public function getConfig() : Config {}
        private function getConfigObject() : ConfigObject {}
        protected function loadDefaultConfigObject() : ConfigObject {}
    }

}

namespace Pimcore\Analytics\Piwik\Api {
    class VisitorClient {
        /**
         * @var ApiClient
         */
        private $apiClient;
        /**
         * @var Config
         */
        private $config;

        public function __construct(ApiClient $apiClient, Config $config) {}
        public function getVisitorProfile(int $piwikSiteId, string $visitorId) : array {}
        private function buildParameters(array $parameters) : array {}
    }

    /**
     * Exposes parts of the Piwik SitesManager API
     */
    class SitesManager {
        /**
         * @var Config
         */
        private $config;
        /**
         * @var ApiClient
         */
        private $apiClient;
        /**
         * @var ReportConfigWriter
         */
        private $configWriter;
        /**
         * @var TranslatorInterface
         */
        private $translator;

        public function __construct(ConfigProvider $configProvider, ApiClient $apiClient, ReportConfigWriter $configWriter, TranslatorInterface $translator) {}
        public function addSite(SiteId $siteId, array $params = [ ]) : int {}
        public function updateSite(SiteId $siteId, array $params = [ ]) : int {}
        public function getSiteFromId(int $piwikSiteId, array $params = [ ]) : array {}
        public function getSiteUrlsFromId(int $piwikSiteId, array $params = [ ]) : array {}
        private function buildParameters(array $parameters) : array {}
        private function buildSiteUrls(SiteId $siteId, array $urls = [ ]) : array {}
        private function getApiToken() : string {}
        private function savePiwikSiteId(SiteId $siteId, int $piwikSiteId) {}
    }

    class ApiClient {
        /**
         * @var ConfigProvider
         */
        private $configProvider;
        /**
         * @var ClientFactory
         */
        private $clientFactory;
        /**
         * @var SerializerInterface|DecoderInterface
         */
        private $serializer;
        /**
         * @var Client
         */
        private $client;

        public function __construct(ConfigProvider $configProvider, ClientFactory $clientFactory, SerializerInterface $serializer) {}
        public function get(array $query = [ ], array $options = [ ]) : array {}
        public function request(string $method, array $options = [ ]) : array {}
        private function requestRaw(string $method, array $options) : array {}
        private function getClient() : Client {}
        private function getBaseUri(Config $config) : string {}
    }

}

namespace Pimcore\Analytics\Piwik\Api\Exception {
    class ApiException extends \runtimeexception {
        /**
         * @var array|null
         */
        private $response;

        public function __construct($message = '', $code = 0, Throwable $previous = null) {}
        public static function fromResponse(string $message, array $response = null) : self {}
        /**
         * @return array|null
         */
        public function getResponse() {}
    }

}

namespace Pimcore\Analytics\Piwik\Event {
    class TrackingDataEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var Config
         */
        private $config;
        /**
         * @var SiteId
         */
        private $siteId;
        /**
         * @var array
         */
        private $data;
        /**
         * @var CodeBlock[]
         */
        private $blocks;
        /**
         * @var string
         */
        private $template;

        public function __construct(Config $config, SiteId $siteId, array $data, array $blocks, string $template) {}
        public function getConfig() : Config {}
        public function getSiteId() : SiteId {}
        public function getData() : array {}
        public function setData(array $data) {}
        /**
         * @return CodeBlock[]
         */
        public function getBlocks() : array {}
        public function getBlock(string $block) : CodeBlock {}
        public function getTemplate() : string {}
        public function setTemplate(string $template) {}
    }

    class ReportConfigEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var ReportConfig[]
         */
        private $reports;

        public function __construct(array $reports) {}
        /**
         * @return ReportConfig[]
         */
        public function getReports() : array {}
        public function setReports(array $reports) {}
        public function addReport(ReportConfig $report) {}
    }

}

namespace Pimcore\Analytics\Piwik\EventListener {
    class TrackingCodeListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\responseinjectiontrait, \pimcore\bundle\corebundle\eventlistener\traits\previewrequesttrait, \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        /**
         * @var Tracker
         */
        private $tracker;
        /**
         * @var bool
         */
        private $enabled;

        public function __construct(Tracker $tracker) {}
        public static function getSubscribedEvents() {}
        public function enable() {}
        public function disable() {}
        public function isEnabled() : bool {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    class IndexSettingsListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @var ConfigProvider
         */
        private $configProvider;
        /**
         * @var ReportBroker
         */
        private $reportBroker;
        /**
         * @var TokenStorageUserResolver
         */
        private $userResolver;

        public function __construct(ConfigProvider $configProvider, ReportBroker $reportBroker, TokenStorageUserResolver $tokenStorageUserResolver) {}
        public static function getSubscribedEvents() {}
        public function addIndexSettings(IndexSettingsEvent $event) {}
        private function addReportSettings(array $settings) : array {}
    }

    class CacheListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @var CoreHandlerInterface
         */
        private $cache;

        public function __construct(CoreHandlerInterface $cache) {}
        public static function getSubscribedEvents() {}
        public function onSaveSettings(SettingsEvent $event) {}
    }

}

namespace Pimcore\Process {
    class PartsBuilder {
        /**
         * @var array
         */
        private $arguments;
        /**
         * @var array
         */
        private $options;

        public function __construct(array $arguments = [ ], array $options = [ ]) {}
        public function addArguments(array $arguments) {}
        public function addArgument($argument) {}
        public function addOptions(array $options) {}
        public function addOption(string $option, $value = null) {}
        public function getParts() : array {}
    }

}

namespace Pimcore\Debug\Traits {
    /**
     * Simple integration into the profiler timeline by adding events to
     * the debug stopwatch. Usage:
     *
     *  - use this trait from a service
     *  - configure the service to use the debug stopwatch if available:
     *
     *         calls:
     *              - [setStopwatch, ['@?debug.stopwatch']]
     */
    trait StopwatchTrait {
        /**
         * @var Stopwatch
         */
        private $stopwatch;
        public function setStopwatch(Stopwatch $stopwatch = null) {}
        private function startStopwatch(string $name, string $category) {}
        private function stopStopwatch(string $name) {}
    }

}

namespace Pimcore\Console {
    /**
     * The console application
     */
    class Application extends \symfony\bundle\frameworkbundle\console\application {
        public function __construct(KernelInterface $kernel) {}
        /**
         * Gets the default input definition.
         *
         * @return InputDefinition An InputDefinition instance
         */
        protected function getDefaultInputDefinition() {}
    }

    /**
     * Helper class to use the Symfony\VarDumper component from CLI commands
     */
    class Dumper {
        const NEWLINE_AFTER = 2;
        const NEWLINE_BEFORE = 1;

        /**
         * @var ConsoleOutput
         */
        protected $output;
        /**
         * @var CliDumper
         */
        protected $cliDumper;
        /**
         * @var VarCloner
         */
        protected $varCloner;

        public function __construct(ConsoleOutput $output, CliDumper $cliDumper = null, VarCloner $varCloner = null) {}
        public function setCliDumper(CliDumper $cliDumper = null) {}
        public function setVarCloner(VarCloner $varCloner = null) {}
        public function dump($data, $flags = null) {}
    }

    /**
     * Base command class setting up some defaults (e.g. the ignore-maintenance-mode switch and the VarDumper component).
     *
     * @method Application getApplication()
     */
    abstract class AbstractCommand extends \symfony\component\console\command\command {
        /**
         * @var PimcoreStyle
         */
        protected $io;
        /**
         * @var InputInterface
         */
        protected $input;
        /**
         * @var ConsoleOutput
         */
        protected $output;
        /**
         * @var Dumper
         */
        protected $dumper;

        protected function initialize(InputInterface $input, OutputInterface $output) {}
        protected function dump($data, $flags = null) {}
        protected function dumpVerbose($data, $flags = null) {}
        protected function writeError($message) {}
    }

    /**
     * Implements a ConsoleOutput with configurable output. Useful when needing to catch both output
     * and error output in a buffered output.
     */
    class ConsoleOutputDecorator implements \symfony\component\console\output\consoleoutputinterface, \symfony\component\console\output\outputinterface {
        /**
         * @var OutputInterface
         */
        private $output;
        /**
         * @var OutputInterface
         */
        private $errorOutput;

        public function __construct(OutputInterface $output, OutputInterface $errorOutput) {}
        public function write($messages, $newline = false, $options = 0) {}
        public function writeln($messages, $options = 0) {}
        public function setVerbosity($level) {}
        public function getVerbosity() {}
        public function isQuiet() {}
        public function isVerbose() {}
        public function isVeryVerbose() {}
        public function isDebug() {}
        public function setDecorated($decorated) {}
        public function isDecorated() {}
        public function setFormatter(OutputFormatterInterface $formatter) {}
        public function getFormatter() {}
        public function getOutput() : OutputInterface {}
        public function getErrorOutput() {}
        public function setErrorOutput(OutputInterface $error) {}
    }


    trait CliTrait {
        /**
         * @return bool
         */
        public static function isCli() {}
    }

    trait ConsoleCommandPluginTrait {
    use \pimcore\console\clitrait{}

        /**
         * Handle system.console.init event and register console commands to the console application
         */
        public function initConsoleCommands() {}
/** @var Application $application */
        public function handleSystemConsoleInitEvent(/** @var Application $application */
ConsoleEvent $e) {}
        /**
         * Returns an array of commands to be added to the application.
         * To be implemented by plugin classes providing console commands.
         *
         * @return Command[]
         */
        abstract public function getConsoleCommands() ;
    }

}

namespace Pimcore\Console\Traits {
    trait DryRun {
/** @var Command $command */
        protected function configureDryRunOption(/** @var Command $command */
$description = null) {}
        /**
         * @return bool
         */
        protected function isDryRun() {}
        protected function prefixDryRun($message, $prefix = 'DRY-RUN') {}
        protected function dryRunMessage($message, $prefix = 'DRY-RUN') {}
    }

}

namespace Pimcore\Console\Style {
    class PimcoreStyle extends \symfony\component\console\style\symfonystyle {
        /**
         * @var InputInterface
         */
        private $input;
        /**
         * @var OutputInterface
         */
        private $output;

        public function __construct(InputInterface $input, OutputInterface $output) {}
        /**
         * @return InputInterface
         */
        public function getInput() : InputInterface {}
        /**
         * @return OutputInterface
         */
        public function getOutput() : OutputInterface {}
        public function simpleSection(string $message, string $underlineChar = '-', string $style = null) {}
    }

}

namespace Pimcore\Console\Log\Formatter {
    class ConsoleColorFormatter extends \monolog\formatter\lineformatter {
        /**
         * @var OutputFormatter
         */
        protected $outputFormatter;

        /**
         * Initialize and get console output formatter
         *
         * @return OutputFormatter
         */
        protected function getOutputFormatter() {}
        public function format(array $record) {}
    }

}

namespace Pimcore\Session {
    /**
     * Handles a collection of session configurators.
     */
    class SessionConfigurator implements \pimcore\session\sessionconfiguratorinterface {
        /**
         * @var SessionConfiguratorInterface[]
         */
        protected $configurators;

        public function addConfigurator(SessionConfiguratorInterface $configurator) {}
        public function setConfigurators(array $configurators) {}
        public function configure(SessionInterface $session) {}
    }


    interface SessionConfiguratorInterface {
        function configure(SessionInterface $session) ;
    }

}

namespace Pimcore\Session\Attribute {
    class LockableAttributeBag extends \symfony\component\httpfoundation\session\attribute\attributebag implements \pimcore\session\attribute\lockableattributebaginterface {
        /**
         * @var bool
         */
        protected $locked;

        /**
         * @inheritDoc
         */
        public function lock() {}
        /**
         * @inheritDoc
         */
        public function unlock() {}
        /**
         * @inheritDoc
         */
        public function isLocked() {}
        public function set($name, $value) {}
        public function replace(array $attributes) {}
        public function remove($name) {}
        /**
         * @inheritDoc
         */
        public function clear() {}
        /**
         * @throws AttributeBagLockedException
         *      if lock is set
         */
        protected function checkLock() {}
    }


    interface LockableAttributeBagInterface extends \symfony\component\httpfoundation\session\attribute\attributebaginterface {
        /**
         * Lock the attribute bag (disallow modifications)
         */
        function lock() ;
        /**
         * Unlock the attribute bag
         */
        function unlock() ;
        /**
         * Get lock status
         *
         * @return bool
         */
        function isLocked() ;
    }

}

namespace Pimcore\Session\Attribute\Exception {
    class AttributeBagLockedException extends \runtimeexception {}

}

namespace Pimcore\Bundle\InstallBundle {
    class PimcoreInstallBundle extends \symfony\component\httpkernel\bundle\bundle {}

    class InstallerKernel extends \symfony\component\httpkernel\kernel {
    use \symfony\bundle\frameworkbundle\kernel\microkerneltrait;

        /**
         * @var string
         */
        private $projectRoot;

        public function __construct(string $projectRoot, string $environment, bool $debug) {}
        /**
         * @inheritDoc
         */
        public function getProjectDir() {}
        /**
         * @inheritDoc
         */
        public function getRootDir() {}
        /**
         * {@inheritdoc}
         */
        public function getLogDir() {}
        /**
         * {@inheritdoc}
         */
        public function getCacheDir() {}
        /**
         * @inheritDoc
         */
        public function registerBundles() {}
        protected function configureContainer(ContainerBuilder $c, LoaderInterface $loader) {}
        protected function configureRoutes(RouteCollectionBuilder $routes) {}
    }

    class Installer {
        const EVENT_NAME_STEP = 'pimcore.installer.step';

        /**
         * @var LoggerInterface
         */
        private $logger;
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;
        /**
         * Predefined DB credentials from config
         *
         * @var array
         */
        private $dbCredentials;
        /**
         * @var PimcoreStyle
         */
        private $commandLineOutput;
        /**
         * When false, skips creating database structure during install
         *
         * @var bool
         */
        private $createDatabaseStructure;
        /**
         * When false, skips importing all database data during install
         *
         * @var bool
         */
        private $importDatabaseData;
        /**
         * When false, skips importing database data dump files (if available) during install
         * only imports needed base data
         *
         * @var bool
         */
        private $importDatabaseDataDump;
        /**
         * @var array
         */
        private $stepEvents;

        public function __construct(LoggerInterface $logger, EventDispatcherInterface $eventDispatcher) {}
        public function setDbCredentials(array $dbCredentials = [ ]) {}
        public function setCommandLineOutput(PimcoreStyle $commandLineOutput) {}
        public function setCreateDatabaseStructure(bool $createDatabaseStructure) : void {}
        public function setImportDatabaseData(bool $importDatabaseData) : void {}
        public function setImportDatabaseDataDump(bool $importDatabaseDataDump) : void {}
        public function needsDbCredentials() : bool {}
        public function checkPrerequisites(ConnectionInterface $db = null) : array {}
        public function formatPrerequisiteMessages(array $checks, array $filterStates = [Check::STATE_ERROR]) {}
        public function getStepEventCount() : int {}
        private function dispatchStepEvent(string $type, string $message = null) {}
/** @var Connection $db */
        public function install(/** @var Connection $db */
array $params) : array {}
        public function resolveDbConfig(array $params) : array {}
        private function runInstall(array $dbConfig, array $userCredentials) : array {}
/** @var \Pimcore\Migrations\MigrationManager $manager */
        private function markMigrationsAsDone(/** @var \Pimcore\Migrations\MigrationManager $manager */
KernelInterface $kernel) {}
        private function installClasses(KernelInterface $kernel) {}
        private function installCustomLayouts(KernelInterface $kernel) {}
        private function installAssets(KernelInterface $kernel) {}
        private function createConfigFiles(array $config) {}
        private function clearKernelCacheDir(KernelInterface $kernel) {}
        public function setupDatabase(array $userCredentials, array $errors = [ ]) : array {}
        /**
         * @return array
         */
        protected function getDataFiles() {}
/**
 * @var User $user
 */
        protected function createOrUpdateUser(/**
 * @var User $user
 */
$config = [ ]) {}
        public function insertDatabaseDump($file) {}
        protected function insertDatabaseContents() {}
    }

}

namespace Pimcore\Bundle\InstallBundle\Command {
    /**
     * @method Application getApplication()
     */
    class InstallCommand extends \symfony\component\console\command\command {
        /**
         * @var Installer
         */
        private $installer;
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;
        /**
         * @var PimcoreStyle
         */
        private $io;
        /**
         * @var array
         */
        private $options;

        public function __construct(Installer $installer, EventDispatcherInterface $eventDispatcher) {}
        private function getOptions() {}
        /**
         * @inheritDoc
         */
        protected function configure() {}
        protected function initialize(InputInterface $input, OutputInterface $output) {}
        protected function interact(InputInterface $input, OutputInterface $output) {}
        private function installerNeedsOption(array $config) : bool {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        private function writeInstallerOutputResults(BufferedOutput $output, BufferedOutput $errorOutput) {}
    }

}

namespace Pimcore\Bundle\InstallBundle\SystemConfig {
    class ConfigWriter {
        /**
         * @var array
         */
        private $defaultConfig;

        public function __construct(array $defaultConfig = null) {}
        public function writeSystemConfig() {}
        public function writeDbConfig(array $config = [ ]) {}
        public function writeDebugModeConfig($ip = '') {}
        public function generateParametersFile(string $secret = null) {}
    }

}

namespace Pimcore\Bundle\InstallBundle\DependencyInjection {
    class Configuration implements \symfony\component\config\definition\configurationinterface {
        public function getConfigTreeBuilder() : TreeBuilder {}
    }

    class PimcoreInstallExtension extends \symfony\component\httpkernel\dependencyinjection\configurableextension {
        protected function loadInternal(array $config, ContainerBuilder $container) {}
        private function configureInstaller(ContainerBuilder $container, array $config) {}
        private function normalizeDbCredentials(array $dbCredentials) : array {}
    }

}

namespace Pimcore\Bundle\InstallBundle\Event {
    class InstallerStepEvent extends \symfony\component\eventdispatcher\event {
        /**
         * @var string
         */
        private $type;
        /**
         * @var string
         */
        private $message;
        /**
         * @var int
         */
        private $step;
        /**
         * @var int
         */
        private $totalSteps;

        public function __construct(string $type, string $message, int $step, int $totalSteps) {}
        public function getType() : string {}
        public function getMessage() : string {}
        public function getStep() : int {}
        public function getTotalSteps() : int {}
    }

}

namespace Pimcore\Bundle\GeneratorBundle {
    class PimcoreGeneratorBundle extends \symfony\component\httpkernel\bundle\bundle {}

}

namespace Pimcore\Bundle\GeneratorBundle\Generator {
    /**
     * Generates a bundle.
     *
     * The following class is copied from \Sensio\Bundle\GeneratorBundle\Generator\BundleGenerator
     */
    class BaseBundleGenerator extends \pimcore\bundle\generatorbundle\generator\generator {
        public function generateBundle(Bundle $bundle) {}
    }

    /**
     * Generator is the base class for all generators.
     *
     * The following class is copied from \Sensio\Bundle\GeneratorBundle\Generator\Generator
     */
    class Generator {
        private $skeletonDirs;
        static private $output;

        public function setSkeletonDirs($skeletonDirs) {}
        protected function render($template, $parameters) {}
        /**
         * Gets the twig environment that will render skeletons.
         *
         * @return \Twig_Environment
         */
        protected function getTwigEnvironment() {}
        protected function renderFile($template, $target, $parameters) {}
        public static function mkdir($dir, $mode = 777, $recursive = true) {}
        public static function dump($filename, $content) {}
        private static function writeln($message) {}
        private static function relativizePath($absolutePath) {}
    }

    class BundleGenerator extends \pimcore\bundle\generatorbundle\generator\basebundlegenerator {
        public function generateBundle(Bundle $bundle) {}
    }

}

namespace Pimcore\Bundle\GeneratorBundle\Model {
    class Bundle extends \pimcore\bundle\generatorbundle\model\basebundle {
        public function shouldGenerateDependencyInjectionDirectory() {}
    }

    /**
     * Represents a bundle being built.
     *
     * The following class is copied from \Sensio\Bundle\GeneratorBundle\Model\Bundle
     */
    class BaseBundle {
        private $namespace;
        private $name;
        private $targetDirectory;
        private $configurationFormat;
        private $isShared;
        private $testsDirectory;

        public function __construct($namespace, $name, $targetDirectory, $configurationFormat, $isShared) {}
        public function getNamespace() {}
        public function getName() {}
        public function getConfigurationFormat() {}
        public function isShared() {}
        /**
         * Returns the directory where the bundle will be generated.
         *
         * @return string
         */
        public function getTargetDirectory() {}
        /**
         * Returns the name of the bundle without the Bundle suffix.
         *
         * @return string
         */
        public function getBasename() {}
        /**
         * Returns the dependency injection extension alias for this bundle.
         *
         * @return string
         */
        public function getExtensionAlias() {}
        /**
         * Should a DependencyInjection directory be generated for this bundle?
         *
         * @return bool
         */
        public function shouldGenerateDependencyInjectionDirectory() {}
        /**
         * What is the filename for the services.yml/xml file?
         *
         * @return string
         */
        public function getServicesConfigurationFilename() {}
        /**
         * What is the filename for the routing.yml/xml file?
         *
         * If false, no routing file will be generated
         *
         * @return string|bool
         */
        public function getRoutingConfigurationFilename() {}
        /**
         * Returns the class name of the Bundle class.
         *
         * @return string
         */
        public function getBundleClassName() {}
        public function setTestsDirectory($testsDirectory) {}
        public function getTestsDirectory() {}
    }

}

namespace Pimcore\Bundle\GeneratorBundle\Manipulator {
    /**
     * Changes the PHP code of a Kernel.
     *
     * The following class is copied from \Sensio\Bundle\GeneratorBundle\Manipulator\KernelManipulator
     */
    class KernelManipulator extends \pimcore\bundle\generatorbundle\manipulator\manipulator {
        protected $kernel;
        protected $reflected;

        public function __construct(KernelInterface $kernel) {}
        public function addBundle($bundle) {}
        public function getFilename() {}
    }

    /**
     * Changes the PHP code of a YAML services configuration file.
     *
     * The following class is copied from \Sensio\Bundle\GeneratorBundle\Manipulator\ConfigurationManipulator
     */
    class ConfigurationManipulator extends \pimcore\bundle\generatorbundle\manipulator\manipulator {
        private $file;

        public function __construct($file) {}
        public function addResource(Bundle $bundle) {}
        public function getImportCode(Bundle $bundle) {}
        private function findLastImportedPath($yamlContents) {}
    }

    /**
     * Changes the PHP code of a YAML routing file.
     *
     * The following class is copied from \Sensio\Bundle\GeneratorBundle\Manipulator\RoutingManipulator
     */
    class RoutingManipulator extends \pimcore\bundle\generatorbundle\manipulator\manipulator {
        private $file;

        public function __construct($file) {}
        public function addResource($bundle, $format, $prefix = '/', $path = 'routing') {}
        public function getImportedResourceYamlKey($bundle, $prefix) {}
        private static function getRouteNamePrefix($prefix) {}
    }

    /**
     * Changes the PHP code of a Kernel.
     *
     * The following class is copied from \Sensio\Bundle\GeneratorBundle\Manipulator\Manipulator
     */
    class Manipulator {
        protected $tokens;
        protected $line;

        protected function setCode(array $tokens, $line = 0) {}
        /**
         * Gets the next token.
         *
         * @return string|null
         */
        protected function next() {}
        protected function peek($nb = 1) {}
        protected function value($token) {}
    }

}

namespace Pimcore\Bundle\GeneratorBundle\Command {
    class GenerateBundleCommand extends \pimcore\bundle\generatorbundle\command\basegeneratebundlecommand {
        /**
         * @inheritDoc
         */
        protected function configure() {}
        protected function initialize(InputInterface $input, OutputInterface $output) {}
/** @var BundleGenerator $generator */
        protected function execute(/** @var BundleGenerator $generator */
InputInterface $input, /** @var BundleGenerator $generator */
OutputInterface $output) {}
    }

    /**
     * Validator functions.
     *
     * The following class is copied from \Sensio\Bundle\GeneratorBundle\Command\Validators
     */
    class Validators {
        public static function validateBundleNamespace($namespace, $requireVendorNamespace = true) {}
        public static function validateBundleName($bundle) {}
        public static function validateFormat($format) {}
        public static function getReservedWords() {}
    }

    /**
     * Generates bundles.
     *
     * The following class is copied from \Sensio\Bundle\GeneratorBundle\Command\GenerateBundleCommand
     */
    class BaseGenerateBundleCommand extends \pimcore\bundle\generatorbundle\command\basegeneratorcommand {
        /**
         * @see Command
         */
        protected function configure() {}
/** @var BundleGenerator $generator */
        protected function execute(/** @var BundleGenerator $generator */
InputInterface $input, /** @var BundleGenerator $generator */
OutputInterface $output) {}
        protected function interact(InputInterface $input, OutputInterface $output) {}
        protected function checkAutoloader(OutputInterface $output, Bundle $bundle) {}
        protected function updateKernel(OutputInterface $output, KernelInterface $kernel, Bundle $bundle) {}
        protected function updateRouting(OutputInterface $output, Bundle $bundle) {}
        protected function updateConfiguration(OutputInterface $output, Bundle $bundle) {}
        protected function createBundleObject(InputInterface $input) {}
        protected function createGenerator() {}
    }

    /**
     * Base class for generator commands.
     *
     * The following class is copied from \Sensio\Bundle\GeneratorBundle\Command\GeneratorCommand
     */
    abstract class BaseGeneratorCommand extends \symfony\bundle\frameworkbundle\command\containerawarecommand {
        /**
         * @var Generator
         */
        private $generator;

        abstract protected function createGenerator() ;
        protected function getGenerator(BundleInterface $bundle = null) {}
        protected function getSkeletonDirs(BundleInterface $bundle = null) {}
        protected function getQuestionHelper() {}
        protected function makePathRelative($absolutePath) {}
    }

}

namespace Pimcore\Bundle\GeneratorBundle\Command\Helper {
    class QuestionHelper extends \symfony\component\console\helper\questionhelper {
        public function writeGeneratorSummary(OutputInterface $output, $errors) {}
        public function getRunner(OutputInterface $output, $errors) {}
        public function getQuestion($question, $default, $sep = ':') {}
        public function writeSection(OutputInterface $output, $text, $style = 'bg=blue;fg=white') {}
    }

}

namespace Pimcore\Bundle\GeneratorBundle\DependencyInjection {
    class PimcoreGeneratorExtension extends \symfony\component\dependencyinjection\extension\extension {
        public function load(array $configs, ContainerBuilder $container) {}
    }

}

namespace Pimcore\Bundle\AdminBundle {
    class PimcoreAdminBundle extends \symfony\component\httpkernel\bundle\bundle {
/** @var SecurityExtension $extension */
        public function build(/** @var SecurityExtension $extension */
ContainerBuilder $container) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Serializer\Normalizer {
    class ReferenceLoopNormalizer implements \symfony\component\serializer\normalizer\normalizerinterface {
        public function normalize($object, $format = null, array $context = [ ]) {}
        public function supportsNormalization($data, $format = null) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Translation {
    class AdminUserTranslator implements \symfony\contracts\translation\translatorinterface {
        /**
         * @var TranslatorInterface
         */
        private $translator;
        /**
         * @var UserLoader
         */
        private $userLoader;

        public function __construct(TranslatorInterface $translator, UserLoader $userLoader) {}
        private function getUserLocale() {}
        public function trans($id, array $parameters = [ ], $domain = null, $locale = null) {}
        public function transChoice($id, $number, array $parameters = [ ], $domain = null, $locale = null) {}
        public function setLocale($locale) {}
        /**
         * @inheritDoc
         */
        public function getLocale() {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Security {
    class BruteforceProtectionHandler implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * @var RequestHelper
         */
        protected $requestHelper;
        /**
         * @var string
         */
        protected $logFile;

        public function __construct(RequestHelper $requestHelper, $logFile = null) {}
        public function checkProtection($username = null, Request $request = null) {}
        public function addEntry($username = null, Request $request = null) {}
        protected function normalizeUsername($username = null) {}
        /**
         * Get log entries as array
         *
         * @return array
         */
        protected function getLogEntries() {}
        protected function writeLogEntry($username, $ip) {}
        /**
         * Initialize and read the log file
         *
         * @return string
         */
        protected function readLogFile() {}
        protected function writeLogFile(array $entries) {}
    }

    /**
     * Handle logout. This was originally implemented as LogoutHandler, but wasn't triggered as the token was empty at call
     * time in LogoutListener::handle was called. As the logout success handler is always triggered it is now implemented as
     * success handler.
     *
     * TODO: investigate why the token is empty and change to LogoutHandler
     */
    class LogoutSuccessHandler implements \symfony\component\security\http\logout\logoutsuccesshandlerinterface, \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * @var TokenStorage
         */
        protected $tokenStorage;
        /**
         * @var RouterInterface
         */
        protected $router;
        /**
         * @var EventDispatcherInterface
         */
        protected $eventDispatcher;

        public function __construct(TokenStorageInterface $tokenStorage, RouterInterface $router, EventDispatcherInterface $eventDispatcher) {}
        public function onLogoutSuccess(Request $request) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Security\Encoder {
    /**
     * As pimcore needs the user information when encoding the password, every user gets his own encoder instance with a
     * user object. If user is no pimcore user, fall back to default implementation.
     *
     * @method User getUser()
     */
    class AdminPasswordEncoder extends \pimcore\security\encoder\abstractuserawarepasswordencoder {
        public function encodePassword($raw, $salt) {}
        public function isPasswordValid($encoded, $raw, $salt) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Security\User {
    /**
     * Loads user either from token storage (when inside admin firewall) or directly from session and keeps it in cache. This
     * is mainly needed from event listeners outside the admin firewall to access the user object without needing to open the
     * session multiple times.
     */
    class UserLoader {
        /**
         * @var UserModel
         */
        protected $user;
        /**
         * @var TokenStorageUserResolver
         */
        protected $userResolver;
        /**
         * @var RequestHelper
         */
        protected $requestHelper;

        public function __construct(TokenStorageUserResolver $userResolver, RequestHelper $requestHelper) {}
        /**
         * @return UserModel|null
         */
        public function getUser() {}
        public function setUser(UserModel $user) {}
        /**
         * @return UserModel|null
         */
        protected function loadUser() {}
    }

    class UserProvider implements \symfony\component\security\core\user\userproviderinterface {
/** @var PimcoreUser $pimcoreUser */
        public function loadUserByUsername(/** @var PimcoreUser $pimcoreUser */
$username) {}
/** @var PimcoreUser $refreshedPimcoreUser */
        public function refreshUser(/** @var PimcoreUser $refreshedPimcoreUser */
UserInterface $user) {}
        protected function buildUser(PimcoreUser $pimcoreUser) {}
        public function supportsClass($class) {}
    }

    /**
     * Proxy user to pimcore model and expose roles as ROLE_* array. If we can safely change the roles on the user model
     * this proxy can be removed and the UserInterface can directly be implemented on the model.
     */
    class User implements \scheb\twofactorbundle\model\google\twofactorinterface, \symfony\component\security\core\user\equatableinterface, \symfony\component\security\core\user\userinterface {
        /**
         * @var PimcoreUser
         */
        protected $user;

        public function __construct(PimcoreUser $user) {}
        /**
         * @return int
         */
        public function getId() {}
        /**
         * @inheritDoc
         */
        public function getUsername() {}
        /**
         * @return PimcoreUser
         */
        public function getUser() {}
        /**
         * @inheritDoc
         */
        public function getRoles() {}
        /**
         * @inheritDoc
         */
        public function getPassword() {}
        /**
         * @inheritDoc
         */
        public function getSalt() {}
        /**
         * @inheritDoc
         */
        public function eraseCredentials() {}
        public function isEqualTo(UserInterface $user) {}
        /**
         * Return true if the user should do two-factor authentication.
         *
         * @return bool
         */
        public function isGoogleAuthenticatorEnabled() : bool {}
        /**
         * Return the user name.
         *
         * @return string
         */
        public function getGoogleAuthenticatorUsername() : string {}
        /**
         * Return the Google Authenticator secret
         * When an empty string or null is returned, the Google authentication is disabled.
         *
         * @return string
         */
        public function getGoogleAuthenticatorSecret() : string {}
    }

    /**
     * Resolves the current pimcore user from the token storage.
     */
    class TokenStorageUserResolver {
        /**
         * @var TokenStorageInterface
         */
        protected $tokenStorage;

        public function __construct(TokenStorageInterface $tokenStorage) {}
        /**
         * @return User|null
         */
        public function getUser() {}
        /**
         * Taken and adapted from framework base controller.
         *
         * The proxy is the wrapping Pimcore\Bundle\AdminBundle\Security\User\User object implementing UserInterface.
         *
         * @return UserProxy|null
         */
        public function getUserProxy() {}
    }

    /**
     * We're calling the valid user check in pre and post auth as it is cheap and
     * we're also dealing with pre authenticated tokens.
     */
    class UserChecker extends \symfony\component\security\core\user\userchecker {
        public function checkPreAuth(UserInterface $user) {}
        public function checkPostAuth(UserInterface $user) {}
        private function checkValidUser(UserInterface $user) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Security\User\Exception {
    class InvalidUserException extends \symfony\component\security\core\exception\accountstatusexception {}

}

namespace Pimcore\Bundle\AdminBundle\Security\Firewall {
    /**
     * Checks if there's an existing admin session and stores its token on the security token storage.
     *
     * @package Pimcore\Bundle\AdminBundle\Security\Firewall
     */
    class PreAuthenticatedAdminSessionListener implements \symfony\component\security\http\firewall\listenerinterface {
        /**
         * @var TokenStorageInterface
         */
        private $tokenStorage;
        /**
         * @var AuthenticationManagerInterface
         */
        private $authenticationManager;
        /**
         * @var string
         */
        private $providerKey;

        public function __construct(TokenStorageInterface $tokenStorage, AuthenticationManagerInterface $authenticationManager, string $providerKey) {}
        public function handle(GetResponseEvent $event) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Security\Guard {
    /**
     * @deprecated
     */
    class WebserviceAuthenticator extends \symfony\component\security\guard\abstractguardauthenticator implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        public function supports(Request $request) {}
        public function start(Request $request, AuthenticationException $authException = null) {}
        public function getCredentials(Request $request) {}
        private function createAccessDeniedException(\Throwable $previous = null) {}
/** @var UserProxy|null $user */
        public function getUser(/** @var UserProxy|null $user */
$credentials, /** @var UserProxy|null $user */
UserProviderInterface $userProvider) {}
/** @var User[] $users */
        protected function loadUserForApiKey(/** @var User[] $users */
$apiKey) {}
        public function checkCredentials($credentials, UserInterface $user) {}
        public function onAuthenticationFailure(Request $request, AuthenticationException $exception) {}
        public function onAuthenticationSuccess(Request $request, TokenInterface $token, $providerKey) {}
        /**
         * @inheritDoc
         */
        public function supportsRememberMe() {}
    }

    class AdminAuthenticator extends \symfony\component\security\guard\abstractguardauthenticator implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * @var TokenStorageInterface
         */
        protected $tokenStorage;
        /**
         * @var RouterInterface
         */
        protected $router;
        /**
         * @var EventDispatcherInterface
         */
        protected $dispatcher;
        /**
         * @var TranslatorInterface
         */
        protected $translator;
        /**
         * @var HttpUtils
         */
        protected $httpUtils;
        /**
         * @var BruteforceProtectionHandler
         */
        protected $bruteforceProtectionHandler;
        /**
         * @var bool
         */
        protected $twoFactorRequired;

        public function __construct(TokenStorageInterface $tokenStorage, RouterInterface $router, EventDispatcherInterface $dispatcher, TranslatorInterface $translator, HttpUtils $httpUtils, BruteforceProtectionHandler $bruteforceProtectionHandler) {}
        public function supports(Request $request) {}
        public function start(Request $request, AuthenticationException $authException = null) {}
        public function getCredentials(Request $request) {}
        public function getUser($credentials, UserProviderInterface $userProvider) {}
        public function checkCredentials($credentials, UserInterface $user) {}
        public function onAuthenticationFailure(Request $request, AuthenticationException $exception) {}
/** @var UserModel $user */
        public function onAuthenticationSuccess(/** @var UserModel $user */
Request $request, /** @var UserModel $user */
TokenInterface $token, /** @var UserModel $user */
$providerKey) {}
        /**
         * @inheritDoc
         */
        public function supportsRememberMe() {}
        public function createAuthenticatedToken(UserInterface $user, $providerKey) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Security\Exception {
    class BruteforceProtectionException extends \symfony\component\httpkernel\exception\accessdeniedhttpexception {}

}

namespace Pimcore\Bundle\AdminBundle\Security\Authentication\Token {
    class PreAuthenticatedAdminToken extends \symfony\component\security\core\authentication\token\preauthenticatedtoken {}

    class TwoFactorRequiredToken extends \symfony\component\security\guard\token\postauthenticationguardtoken {}

}

namespace Pimcore\Bundle\AdminBundle\Security\Factory {
    class PreAuthenticatedAdminSessionFactory implements \symfony\bundle\securitybundle\dependencyinjection\security\factory\securityfactoryinterface {
        public function create(ContainerBuilder $container, $id, $config, $userProvider, $defaultEntryPoint) : array {}
        /**
         * @inheritDoc
         */
        public function getPosition() : string {}
        /**
         * @inheritDoc
         */
        public function getKey() : string {}
        public function addConfiguration(NodeDefinition $builder) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Controller {
    abstract class AdminController extends \pimcore\controller\controller implements \pimcore\bundle\adminbundle\controller\admincontrollerinterface {
        /**
         * @inheritDoc
         */
        public function needsSessionDoubleAuthenticationCheck() {}
        /**
         * @inheritDoc
         */
        public function needsStorageDoubleAuthenticationCheck() {}
        protected function getAdminUser($proxyUser = false) {}
        protected function checkPermission($permission) {}
        protected function createAccessDeniedHttpException(string $message = 'Access Denied.', \Throwable $previous = null, int $code = 0, array $headers = [ ]) : AccessDeniedHttpException {}
        protected function checkPermissionsHasOneOf(array $permissions) {}
        protected function checkActionPermission(FilterControllerEvent $event, string $permission, array $unrestrictedActions = [ ]) {}
/** @var SerializerInterface $serializer */
        protected function encodeJson(/** @var SerializerInterface $serializer */
$data, /** @var SerializerInterface $serializer */
array $context = [ ], /** @var SerializerInterface $serializer */
$options = JsonResponse::DEFAULT_ENCODING_OPTIONS, /** @var SerializerInterface $serializer */
bool $useAdminSerializer = true) {}
/** @var SerializerInterface|DecoderInterface $serializer */
        protected function decodeJson(/** @var SerializerInterface|DecoderInterface $serializer */
$json, /** @var SerializerInterface|DecoderInterface $serializer */
$associative = true, /** @var SerializerInterface|DecoderInterface $serializer */
array $context = [ ], /** @var SerializerInterface|DecoderInterface $serializer */
bool $useAdminSerializer = true) {}
        protected function adminJson($data, $status = 200, $headers = [ ], $context = [ ], bool $useAdminSerializer = true) {}
        public function trans($id, array $parameters = [ ], $domain = 'admin', $locale = null) {}
        public function checkCsrfToken(Request $request) {}
    }


    /**
     * Controllers implementing this interface will be double-checked for admin authentication.
     *
     * @see AdminAuthenticationDoubleCheckListener
     */
    interface DoubleAuthenticationControllerInterface {
        /**
         * Determines if session should be checked for a valid user in authentication double check
         *
         * @return bool
         */
        function needsSessionDoubleAuthenticationCheck() ;
        /**
         * Determines if token storage should be checked for a valid user in authentication double check
         *
         * @return bool
         */
        function needsStorageDoubleAuthenticationCheck() ;
    }

    /**
     * Tagging interface defining controller as admin controller.
     */
    interface AdminControllerInterface extends \pimcore\bundle\adminbundle\controller\doubleauthenticationcontrollerinterface {}

    /**
     * Tagging interface used to protect certain controllers from brute force attacks
     *
     * @see BruteforceProtectionListener
     */
    interface BruteforceProtectedControllerInterface {}

}

namespace Pimcore\Bundle\AdminBundle\Controller\Admin {
    class UserController extends \pimcore\bundle\adminbundle\controller\admincontroller implements \pimcore\controller\eventedcontrollerinterface {
        public function treeGetChildsByIdAction(Request $request) {}
        protected function getTreeNodeConfig($user) {}
        public function addAction(Request $request) {}
        protected function populateChildNodes($node, $currentList, $roleMode) {}
/** @var User $relatedUser */
        public function deleteAction(/** @var User $relatedUser */
Request $request) {}
        public function updateAction(Request $request) {}
/** @var User $user */
        public function getAction(/** @var User $user */
Request $request) {}
        public function getMinimalAction(Request $request) {}
        public function uploadCurrentUserImageAction(Request $request) {}
        public function updateCurrentUserAction(Request $request) {}
        public function getCurrentUserAction(Request $request) {}
        public function roleTreeGetChildsByIdAction(Request $request) {}
        protected function getRoleTreeNodeConfig($role) {}
        public function roleGetAction(Request $request) {}
        public function uploadImageAction(Request $request) {}
        public function renew2FaSecretAction(Request $request) {}
        public function disable2FaSecretAction(Request $request) {}
/**
 * @var User $user
 */
        public function reset2FaSecretAction(/**
 * @var User $user
 */
Request $request) {}
/** @var User $userObj */
        public function getImageAction(/** @var User $userObj */
Request $request) {}
/** @var User $user */
        public function getTokenLoginLinkAction(/** @var User $user */
Request $request) {}
        public function searchAction(Request $request) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
        public function getUsersForSharingAction(Request $request) {}
        public function getRolesForSharingAction(Request $request) {}
        public function getUsersAction(Request $request) {}
/** @var User\Role $role */
        public function getRolesAction(/** @var User\Role $role */
Request $request) {}
        public function getDefaultKeyBindingsAction(Request $request) {}
        public function invitationLinkAction(Request $request) {}
    }

    /**
     * @Route("/notification")
     */
    class NotificationController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function recipientsAction(UserService $service, Translator $translator) : JsonResponse {}
        public function sendAction(Request $request, NotificationService $service) : JsonResponse {}
        public function findAction(Request $request, NotificationService $service) : JsonResponse {}
        public function findAllAction(Request $request, NotificationService $service) : JsonResponse {}
        public function findLastUnreadAction(Request $request, NotificationService $service) : JsonResponse {}
        public function markAsReadAction(Request $request, NotificationService $service) : JsonResponse {}
        public function deleteAction(Request $request, NotificationService $service) : JsonResponse {}
        public function deleteAllAction(Request $request, NotificationService $service) : JsonResponse {}
    }

    /**
     * @Route("/workflow")
     */
    class WorkflowController extends \pimcore\bundle\adminbundle\controller\admincontroller implements \pimcore\controller\eventedcontrollerinterface {
        /**
         * @var Document|Asset|ConcreteObject $element
         */
        private $element;

/**
 * @var Transition $transition
 */
        public function getWorkflowFormAction(/**
 * @var Transition $transition
 */
Request $request, /**
 * @var Transition $transition
 */
Manager $workflowManager) {}
        public function submitWorkflowTransitionAction(Request $request, Registry $workflowRegistry, Manager $workflowManager) {}
        public function submitGlobalAction(Request $request, Registry $workflowRegistry, Manager $workflowManager) {}
        public function getWorkflowDetailsStore(Request $request, Manager $workflowManager, StatusInfo $placeStatusInfo, RouterInterface $router, ActionsButtonService $actionsButtonService) {}
        public function showGraph(Request $request, Manager $workflowManager) {}
        private function getWorkflowSvg(Workflow $workflow) {}
        protected function getLatestVersion($element) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    class LogController extends \pimcore\bundle\adminbundle\controller\admincontroller implements \pimcore\controller\eventedcontrollerinterface {
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
        public function showAction(Request $request, Db\ConnectionInterface $db) {}
        private function parseDateObject($date = null, $time = null) {}
        private function getPriorityName($priority) {}
        public function priorityJsonAction(Request $request) {}
        public function componentJsonAction(Request $request) {}
        public function showFileObjectAction(Request $request) {}
    }

    class LoginController extends \pimcore\bundle\adminbundle\controller\admincontroller implements \pimcore\bundle\adminbundle\controller\bruteforceprotectedcontrollerinterface, \pimcore\controller\eventedcontrollerinterface {
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
        public function loginAction(Request $request, CsrfProtectionListener $csrfProtectionListener) {}
        /**
         * @Route("/logout", name="pimcore_admin_logout")
         */
        public function logoutAction() {}
        /**
         * Dummy route used to check authentication
         *
         * @Route("/login/login", name="pimcore_admin_login_check")
         *
         * @see AdminAuthenticator for the security implementation
         */
        public function loginCheckAction() {}
        public function lostpasswordAction(Request $request, BruteforceProtectionHandler $bruteforceProtectionHandler, CsrfProtectionListener $csrfProtectionListener) {}
        public function deeplinkAction(Request $request) {}
        /**
         * @return ViewModel
         */
        protected function buildLoginPageViewModel() {}
        public function twoFactorAuthenticationAction(Request $request, BruteforceProtectionHandler $bruteforceProtectionHandler) {}
        public function twoFactorAuthenticationVerifyAction(Request $request) {}
    }

    /**
     * @Route("/portal")
     */
    class PortalController extends \pimcore\bundle\adminbundle\controller\admincontroller implements \pimcore\controller\eventedcontrollerinterface {
        /**
         * @var \Pimcore\Helper\Dashboard
         */
        protected $dashboardHelper;

        protected function getCurrentConfiguration(Request $request) {}
        protected function saveConfiguration(Request $request, $config) {}
        public function dashboardListAction(Request $request) {}
        public function createDashboardAction(Request $request) {}
        public function deleteDashboardAction(Request $request) {}
        public function getConfigurationAction(Request $request) {}
        public function removeWidgetAction(Request $request) {}
        public function addWidgetAction(Request $request) {}
        public function reorderWidgetAction(Request $request) {}
        public function updatePortletConfigAction(Request $request) {}
/**
 * @var Document $doc
 */
        public function portletModifiedDocumentsAction(/**
 * @var Document $doc
 */
Request $request) {}
/**
 * @var Asset $doc
 */
        public function portletModifiedAssetsAction(/**
 * @var Asset $doc
 */
Request $request) {}
/**
 * @var DataObject $object
 */
        public function portletModifiedObjectsAction(/**
 * @var DataObject $object
 */
Request $request) {}
        public function portletModificationStatisticsAction(Request $request) {}
/** @var Site $site */
        public function portletAnalyticsSitesAction(/** @var Site $site */
TranslatorInterface $translator, /** @var Site $site */
SiteConfigProvider $siteConfigProvider) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    /**
     * @Route("/misc")
     */
    class MiscController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function getAvailableModulesAction(ControllerDataProvider $provider) {}
        public function getAvailableControllersAction(Request $request, ControllerDataProvider $provider) {}
        public function getAvailableActionsAction(Request $request, ControllerDataProvider $provider) {}
        public function getAvailableTemplatesAction(ControllerDataProvider $provider) {}
        public function jsonTranslationsSystemAction(Request $request) {}
        public function scriptProxyAction(Request $request) {}
        public function adminCssAction(Request $request) {}
        public function pingAction(Request $request) {}
        public function availableLanguagesAction(Request $request) {}
        public function getValidFilenameAction(Request $request) {}
        public function fileexplorerTreeAction(Request $request) {}
        public function fileexplorerContentAction(Request $request) {}
        public function fileexplorerContentSaveAction(Request $request) {}
        public function fileexplorerAddAction(Request $request) {}
        public function fileexplorerAddFolderAction(Request $request) {}
        public function fileexplorerDeleteAction(Request $request) {}
        public function fileexplorerRenameAction(Request $request) {}
        private function getFileexplorerPath(Request $request, $paramName = 'node') {}
        public function maintenanceAction(Request $request) {}
        public function httpErrorLogAction(Request $request) {}
        public function httpErrorLogFlushAction(Request $request) {}
        public function httpErrorLogDetailAction(Request $request) {}
        public function countryListAction(Request $request) {}
        public function languageListAction(Request $request) {}
        public function phpinfoAction(Request $request, ?Profiler $profiler) {}
        public function getLanguageFlagAction(Request $request) {}
        public function iconListAction(Request $request, ?Profiler $profiler) {}
        public function testAction(Request $request) {}
    }

    /**
     * @Route("/asset")
     */
    class AssetController extends \pimcore\bundle\adminbundle\controller\admin\elementcontrollerbase implements \pimcore\controller\eventedcontrollerinterface {
    use \pimcore\controller\traits\elementeditlockhelpertrait, \pimcore\model\element\adminstyletrait;

        /**
         * @var Asset\Service
         */
        protected $_assetService;

        public function getDataByIdAction(Request $request, EventDispatcherInterface $eventDispatcher) {}
        public function treeGetChildsByIdAction(Request $request, EventDispatcherInterface $eventDispatcher) {}
        public function addAssetAction(Request $request) {}
        public function addAssetCompatibilityAction(Request $request) {}
        protected function addAsset(Request $request) {}
        protected function getSafeFilename($targetPath, $filename) {}
        public function replaceAssetAction(Request $request) {}
        public function addFolderAction(Request $request) {}
/** @var Asset $asset */
        public function deleteAction(/** @var Asset $asset */
Request $request) {}
        protected function getTreeNodeConfig($element) {}
        protected function getThumbnailUrl(Asset $asset, $hdpi = false) {}
        public function updateAction(Request $request) {}
        public function webdavAction(Request $request) {}
        public function saveAction(Request $request) {}
        public function publishVersionAction(Request $request) {}
        public function showVersionAction(Request $request) {}
        public function downloadAction(Request $request) {}
        public function downloadImageThumbnailAction(Request $request) {}
        public function getImageThumbnailAction(Request $request) {}
        public function getVideoThumbnailAction(Request $request) {}
        public function getDocumentThumbnailAction(Request $request) {}
        protected function addThumbnailCacheHeaders(Response $response) {}
        public function getPreviewDocumentAction(Request $request) {}
        protected function getDocumentPreviewPdf(Asset $asset) {}
        public function getPreviewVideoAction(Request $request) {}
        public function serveVideoPreviewAction(Request $request) {}
        public function imageEditorAction(Request $request) {}
        public function imageEditorSaveAction(Request $request) {}
        public function getFolderContentPreviewAction(Request $request, EventDispatcherInterface $eventDispatcher) {}
        public function copyInfoAction(Request $request) {}
        public function copyAction(Request $request) {}
        public function downloadAsZipJobsAction(Request $request) {}
        public function downloadAsZipAddFilesAction(Request $request) {}
        public function downloadAsZipAction(Request $request) {}
        public function importZipAction(Request $request) {}
        public function importZipFilesAction(Request $request) {}
        public function importServerAction(Request $request) {}
        public function importServerFilesAction(Request $request) {}
        protected function checkForPharStreamWrapper($path) {}
        public function importUrlAction(Request $request) {}
        public function clearThumbnailAction(Request $request) {}
        public function gridProxyAction(Request $request, EventDispatcherInterface $eventDispatcher, GridHelperService $gridHelperService) {}
        public function getTextAction(Request $request) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    /**
     * @Route("/targeting")
     */
    class TargetingController extends \pimcore\bundle\adminbundle\controller\admincontroller implements \pimcore\controller\eventedcontrollerinterface {
/** @var Targeting\Rule $target */
        public function ruleListAction(/** @var Targeting\Rule $target */
Request $request) {}
        public function ruleAddAction(Request $request) {}
        public function ruleDeleteAction(Request $request) {}
        public function ruleGetAction(Request $request) {}
/** @var Targeting\Rule|Targeting\Rule\Dao $target */
        public function ruleSaveAction(/** @var Targeting\Rule|Targeting\Rule\Dao $target */
Request $request) {}
/** @var Targeting\Rule $rule */
        public function ruleOrderAction(/** @var Targeting\Rule $rule */
Request $request) {}
/** @var TargetGroup $targetGroup */
        public function targetGroupListAction(/** @var TargetGroup $targetGroup */
Request $request) {}
/** @var TargetGroup|TargetGroup\Dao $targetGroup */
        public function targetGroupAddAction(/** @var TargetGroup|TargetGroup\Dao $targetGroup */
Request $request, /** @var TargetGroup|TargetGroup\Dao $targetGroup */
CoreHandlerInterface $cache) {}
/** @var TargetGroup|TargetGroup\Dao $targetGroup */
        public function targetGroupDeleteAction(/** @var TargetGroup|TargetGroup\Dao $targetGroup */
Request $request, /** @var TargetGroup|TargetGroup\Dao $targetGroup */
CoreHandlerInterface $cache) {}
/** @var TargetGroup|TargetGroup\Dao $targetGroup */
        public function targetGroupGetAction(/** @var TargetGroup|TargetGroup\Dao $targetGroup */
Request $request) {}
/** @var TargetGroup|TargetGroup\Dao $targetGroup */
        public function targetGroupSaveAction(/** @var TargetGroup|TargetGroup\Dao $targetGroup */
Request $request, /** @var TargetGroup|TargetGroup\Dao $targetGroup */
CoreHandlerInterface $cache) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    class IndexController extends \pimcore\bundle\adminbundle\controller\admincontroller implements \pimcore\controller\eventedcontrollerinterface {
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;

        public function __construct(EventDispatcherInterface $eventDispatcher) {}
        public function indexAction(Request $request, SiteConfigProvider $siteConfigProvider, KernelInterface $kernel, Executor $maintenanceExecutor, CsrfProtectionListener $csrfProtectionListener) {}
        public function statisticsAction(Request $request, ConnectionInterface $db, KernelInterface $kernel) {}
        protected function addRuntimePerspective(ViewModel $view, User $user) {}
        protected function addReportConfig(ViewModel $view) {}
        protected function addPluginAssets(ViewModel $view) {}
        protected function buildPimcoreSettings(Request $request, ViewModel $view, User $user, KernelInterface $kernel, ExecutorInterface $maintenanceExecutor, CsrfProtectionListener $csrfProtectionListener) {}
        /**
         * @return string
         */
        private function getInstanceId() {}
        private function buildGoogleAnalyticsSettings(ViewModel $view, ViewModel $settings, SiteConfigProvider $siteConfigProvider) {}
        protected function addSystemVarSettings(ViewModel $settings) {}
        protected function addMaintenanceSettings(ViewModel $settings, ExecutorInterface $maintenanceExecutor) {}
        protected function addMailSettings(ViewModel $settings, $config) {}
        protected function addCustomViewSettings(ViewModel $settings) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    /**
     * @Route("/settings")
     */
    class SettingsController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function displayCustomLogoAction(Request $request) {}
        public function uploadCustomLogoAction(Request $request) {}
        public function deleteCustomLogoAction(Request $request) {}
        public function metadataAction(Request $request) {}
/** @var Metadata\Predefined $item */
        public function getPredefinedMetadataAction(/** @var Metadata\Predefined $item */
Request $request) {}
        public function propertiesAction(Request $request) {}
        public function getSystemAction(Request $request) {}
        public function setSystemAction(Request $request) {}
        protected function checkFallbackLanguageLoop($source, $definitions, $fallbacks = [ ]) {}
        public function getWeb2printAction(Request $request) {}
        public function setWeb2printAction(Request $request) {}
        public function clearCacheAction(Request $request, KernelInterface $kernel, EventDispatcherInterface $eventDispatcher, CoreHandlerInterface $cache, ConnectionInterface $db, Filesystem $filesystem, CacheClearer $symfonyCacheClearer) {}
        public function clearOutputCacheAction(EventDispatcherInterface $eventDispatcher) {}
        public function clearTemporaryFilesAction(EventDispatcherInterface $eventDispatcher) {}
/** @var Staticroute $route */
        public function staticroutesAction(/** @var Staticroute $route */
Request $request) {}
        public function getAvailableAdminLanguagesAction(Request $request) {}
        public function glossaryAction(Request $request) {}
        public function getAvailableSitesAction(Request $request) {}
        public function getAvailableCountriesAction(Request $request) {}
        public function thumbnailAdapterCheckAction(Request $request) {}
/** @var Asset\Image\Thumbnail\Config $item */
        public function thumbnailTreeAction(/** @var Asset\Image\Thumbnail\Config $item */
Request $request) {}
/** @var Asset\Image\Thumbnail\Config $item */
        public function thumbnailDownloadableAction(/** @var Asset\Image\Thumbnail\Config $item */
Request $request) {}
        public function thumbnailAddAction(Request $request) {}
        public function thumbnailDeleteAction(Request $request) {}
        public function thumbnailGetAction(Request $request) {}
        public function thumbnailUpdateAction(Request $request) {}
        public function videoThumbnailAdapterCheckAction(Request $request) {}
/** @var Asset\Image\Thumbnail\Config $item */
        public function videoThumbnailTreeAction(/** @var Asset\Image\Thumbnail\Config $item */
Request $request) {}
        public function videoThumbnailAddAction(Request $request) {}
        public function videoThumbnailDeleteAction(Request $request) {}
        public function videoThumbnailGetAction(Request $request) {}
        public function videoThumbnailUpdateAction(Request $request) {}
        /**
         * @Route("/robots-txt", methods={"GET"})
         *
         * @return JsonResponse
         */
        public function robotsTxtGetAction() {}
        public function robotsTxtPutAction(Request $request) {}
        public function tagManagementTreeAction(Request $request) {}
        public function tagManagementAddAction(Request $request) {}
        public function tagManagementDeleteAction(Request $request) {}
        public function tagManagementGetAction(Request $request) {}
        public function tagManagementUpdateAction(Request $request) {}
        public function websiteSettingsAction(Request $request) {}
        private function getWebsiteSettingForEditMode($item) {}
        public function getAvailableAlgorithmsAction(Request $request) {}
        protected function deleteViews($language, $dbName) {}
        public function testWeb2printAction(Request $request) {}
    }

    class ElementControllerBase extends \pimcore\bundle\adminbundle\controller\admincontroller {
        protected function getTreeNodeConfig($element) {}
        public function treeGetRootAction(Request $request) {}
        public function deleteInfoAction(Request $request) {}
    }

    class ElementController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function lockElementAction(Request $request) {}
        public function unlockElementAction(Request $request) {}
        public function getSubtypeAction(Request $request) {}
        protected function processNoteTypesFromParameters(string $parameterName) {}
        public function noteTypes(Request $request) {}
        public function noteListAction(Request $request) {}
        public function noteAddAction(Request $request) {}
        public function findUsagesAction(Request $request) {}
        public function replaceAssignmentsAction(Request $request) {}
        public function unlockPropagateAction(Request $request) {}
        public function typePathAction(Request $request) {}
        public function versionUpdateAction(Request $request) {}
        public function getNicePathAction(Request $request) {}
        public function getVersionsAction(Request $request) {}
        public function deleteVersionAction(Request $request) {}
        public function deleteAllVersionAction(Request $request) {}
        public function getRequiresDependenciesAction(Request $request) {}
        public function getRequiredByDependenciesAction(Request $request) {}
        public function getPredefinedPropertiesAction(Request $request) {}
        public function analyzePermissionsAction(Request $request) {}
/** @var DataObject\ClassDefinition\Data\Localizedfields $fdLocalizedFields */
        protected function getNicePathFormatterFieldDefinition(/** @var DataObject\ClassDefinition\Data\Localizedfields $fdLocalizedFields */
$source, /** @var DataObject\ClassDefinition\Data\Localizedfields $fdLocalizedFields */
$context) {}
        protected function convertResultWithPathFormatter(DataObject\Concrete $source, $context, $result, $targets) : array {}
    }

    /**
     * @Route("/install")
     */
    class InstallController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function checkAction(Request $request, ConnectionInterface $db, ?Profiler $profiler) {}
    }

    class RecyclebinController extends \pimcore\bundle\adminbundle\controller\admincontroller implements \pimcore\controller\eventedcontrollerinterface {
        public function listAction(Request $request) {}
        public function restoreAction(Request $request) {}
        /**
         * @Route("/recyclebin/flush", methods={"DELETE"})
         *
         * @return JsonResponse
         */
        public function flushAction() {}
        public function addAction(Request $request) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    /**
     * @Route("/email")
     */
    class EmailController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function emailLogsAction(Request $request) {}
        public function showEmailLogAction(Request $request, ?Profiler $profiler) {}
        protected function enhanceLoggingData($data, $fullEntry = null) {}
        public function deleteEmailLogAction(Request $request) {}
        public function resendEmailAction(Request $request) {}
        public function sendTestEmailAction(Request $request) {}
        public function blacklistAction(Request $request) {}
        protected function parseLoggingParamObject($params) {}
    }

    /**
     * @Route("/translation")
     */
    class TranslationController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function importAction(Request $request) {}
        public function uploadImportFileAction(Request $request) {}
        public function exportAction(Request $request) {}
        public function addAdminTranslationKeysAction(Request $request) {}
        public function translationsAction(Request $request, Translator $translator) {}
        protected function prefixTranslations($translations) {}
        protected function extendTranslationQuery($joins, $list, $tableName, $filters) {}
        protected function getGridFilterCondition(Request $request, $tableName, $languageMode = false, $admin = false) {}
        public function cleanupAction(Request $request) {}
        public function contentExportJobsAction(Request $request) {}
        public function xliffExportAction(Request $request, ExportServiceInterface $exportService) {}
        public function xliffExportDownloadAction(Request $request, ExporterInterface $translationExporter, ExportServiceInterface $exportService) {}
        public function xliffImportUploadAction(Request $request, ImportDataExtractorInterface $importDataExtractor) {}
        public function xliffImportElementAction(Request $request, ImportDataExtractorInterface $importDataExtractor, ImporterServiceInterface $importerService) {}
/** @var DataObject\ClassDefinition\Data\Localizedfields|null $fd */
        public function wordExportAction(/** @var DataObject\ClassDefinition\Data\Localizedfields|null $fd */
Request $request) {}
        public function wordExportDownloadAction(Request $request) {}
        private function sanitzeExportId(string $id) : string {}
        private function getExportFilePath(string $id, bool $checkExistence = true) : string {}
        public function mergeItemAction(Request $request) {}
        public function getWebsiteTranslationLanguagesAction(Request $request) {}
    }

    /**
     * @Route("/redirects")
     */
    class RedirectsController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function redirectsAction(Request $request) {}
        public function csvExportAction(Request $request, Csv $csv) {}
/** @var UploadedFile $file */
        public function csvImportAction(/** @var UploadedFile $file */
Request $request, /** @var UploadedFile $file */
Csv $csv) {}
        public function cleanupAction(Request $request) {}
    }

    /**
     * @Route("/tags")
     */
    class TagsController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function addAction(Request $request) {}
        public function deleteAction(Request $request) {}
        public function updateAction(Request $request) {}
        public function treeGetChildrenByIdAction(Request $request) {}
        protected function convertTagToArray(Tag $tag, $showSelection, $assignedTagIds, $loadChildren = false) {}
        public function loadTagsForElementAction(Request $request) {}
        public function addTagToElementAction(Request $request) {}
        public function removeTagFromElementAction(Request $request) {}
        public function getBatchAssignmentJobsAction(Request $request, EventDispatcherInterface $eventDispatcher) {}
        private function getSubObjectIds(\Pimcore\Model\DataObject\AbstractObject $object, EventDispatcherInterface $eventDispatcher) {}
        private function getSubAssetIds(\Pimcore\Model\Asset $asset, EventDispatcherInterface $eventDispatcher) {}
        private function getSubDocumentIds(\Pimcore\Model\Document $document, EventDispatcherInterface $eventDispatcher) {}
        public function doBatchAssignmentAction(Request $request) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Controller\Admin\Asset {
    /**
     * @Route("/asset-helper")
     */
    class AssetHelperController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function getMyOwnGridColumnConfigs($userId, $classId, $searchType) {}
        public function getSharedGridColumnConfigs($user, $classId, $searchType = null) {}
        public function gridDeleteColumnConfigAction(Request $request) {}
        public function gridGetColumnConfigAction(Request $request) {}
        public function doGetGridColumnConfig(Request $request, $isDelete = false) {}
        protected function getFieldGridConfig($field, $language = '', $keyPrefix = null) {}
        public function getDefaultGridFields($noSystemColumns, $fields, $context, $types = [ ]) {}
        public function prepareHelperColumnConfigs(Request $request) {}
        public function gridMarkFavouriteColumnConfigAction(Request $request) {}
        protected function getShareSettings($gridConfigId) {}
        public function gridSaveColumnConfigAction(Request $request) {}
        protected function updateGridConfigShares($gridConfig, $metadata) {}
        public function getExportJobsAction(Request $request, GridHelperService $gridHelperService) {}
/** @var \Pimcore\Model\Asset\Listing $list */
        public function doExportAction(/** @var \Pimcore\Model\Asset\Listing $list */
Request $request, /** @var \Pimcore\Model\Asset\Listing $list */
LocaleServiceInterface $localeService) {}
        public function encodeFunc($value) {}
        protected function getCsvData(Request $request, $language, $list, $fields, $addTitles = true) {}
        protected function extractLanguage(Request $request) {}
        protected function getCsvFile($fileHandle) {}
        public function downloadCsvFileAction(Request $request) {}
        public function downloadXlsxFileAction(Request $request) {}
/** @var Metadata\Predefined $item */
        public function getMetadataForColumnConfigAction(/** @var Metadata\Predefined $item */
Request $request) {}
        public function getBatchJobsAction(Request $request, GridHelperService $gridHelperService) {}
        public function batchAction(Request $request) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Controller\Admin\Document {
    abstract class DocumentControllerBase extends \pimcore\bundle\adminbundle\controller\admincontroller implements \pimcore\controller\eventedcontrollerinterface {
    use \pimcore\model\element\adminstyletrait;

        protected function addPropertiesToDocument(Request $request, Model\Document $document) {}
        protected function addSchedulerToDocument(Request $request, Model\Document $document) {}
        protected function addSettingsToDocument(Request $request, Model\Document $document) {}
        protected function addDataToDocument(Request $request, Model\Document $document) {}
        protected function addTranslationsData(Model\Document $document) {}
        public function saveToSessionAction(Request $request) {}
        protected function saveToSession($doc, $useForSave = false) {}
        protected function getFromSession($doc) {}
        public function removeFromSessionAction(Request $request) {}
        protected function minimizeProperties($document) {}
        protected function getPropertyInheritance(Model\Document $document, $propertyName, $propertyValue) {}
        protected function getLatestVersion(Model\Document $document) {}
        public function changeMasterDocumentAction(Request $request) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
        abstract protected function setValuesToDocument(Request $request, Model\Document $page) ;
    }

    class RenderletController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function renderletAction(Request $request, ActionRenderer $actionRenderer, TagHandlerInterface $tagHandler, LocaleServiceInterface $localeService) {}
        private function loadElement(Request $request) : ElementInterface {}
        private function configureElementTargeting(Request $request, ElementInterface $element) {}
    }

    class PrintpageControllerBase extends \pimcore\bundle\adminbundle\controller\admin\document\documentcontrollerbase {
    use \pimcore\controller\traits\elementeditlockhelpertrait;

        public function getDataByIdAction(Request $request) {}
        public function saveAction(Request $request) {}
        protected function setValuesToDocument(Request $request, Document $page) {}
/** @var Document\Printpage $document */
        public function activeGenerateProcessAction(/** @var Document\Printpage $document */
Request $request) {}
        public function pdfDownloadAction(Request $request) {}
        public function startPdfGenerationAction(Request $request) {}
        public function checkPdfDirtyAction(Request $request) {}
        public function getProcessingOptionsAction(Request $request) {}
        private function getStoredProcessingOptions($documentId) {}
        private function saveProcessingOptions($documentId, $options) {}
        public function cancelGenerationAction(Request $request) {}
    }

    /**
     * @Route("/link")
     */
    class LinkController extends \pimcore\bundle\adminbundle\controller\admin\document\documentcontrollerbase {
    use \pimcore\controller\traits\elementeditlockhelpertrait;

        public function getDataByIdAction(Request $request) {}
        public function saveAction(Request $request) {}
        protected function setValuesToDocument(Request $request, Document $link) {}
    }

    /**
     * @Route("/hardlink")
     */
    class HardlinkController extends \pimcore\bundle\adminbundle\controller\admin\document\documentcontrollerbase {
    use \pimcore\controller\traits\elementeditlockhelpertrait;

        public function getDataByIdAction(Request $request) {}
        public function saveAction(Request $request) {}
        protected function setValuesToDocument(Request $request, Document $link) {}
    }

    /**
     * @Route("/snippet")
     */
    class SnippetController extends \pimcore\bundle\adminbundle\controller\admin\document\documentcontrollerbase {
    use \pimcore\controller\traits\elementeditlockhelpertrait;

        public function getDataByIdAction(Request $request) {}
        public function saveAction(Request $request) {}
        protected function setValuesToDocument(Request $request, Document $snippet) {}
    }

    /**
     * @Route("/printcontainer")
     */
    class PrintcontainerController extends \pimcore\bundle\adminbundle\controller\admin\document\printpagecontrollerbase {}

    /**
     * @Route("/newsletter")
     */
    class NewsletterController extends \pimcore\bundle\adminbundle\controller\admin\document\documentcontrollerbase {
    use \pimcore\controller\traits\elementeditlockhelpertrait;

/** @var Document\Newsletter $email */
        public function getDataByIdAction(/** @var Document\Newsletter $email */
Request $request) : JsonResponse {}
/** @var Document\Newsletter $page */
        public function saveAction(/** @var Document\Newsletter $page */
Request $request) : JsonResponse {}
        protected function setValuesToDocument(Request $request, Document $page) {}
/** @var Pimcore\Model\Listing\AbstractListing $list */
        public function checksqlAction(/** @var Pimcore\Model\Listing\AbstractListing $list */
Request $request) : JsonResponse {}
        /**
         * @Route("/get-available-classes", methods={"GET"})
         *
         * @return JsonResponse
         */
        public function getAvailableClassesAction() : JsonResponse {}
        public function getAvailableReportsAction(Request $request) : JsonResponse {}
        public function getSendStatusAction(Request $request) : JsonResponse {}
        public function stopSendAction(Request $request) : JsonResponse {}
        public function sendAction(Request $request) : JsonResponse {}
/** @var AddressSourceAdapterFactoryInterface $addressAdapterFactory */
        public function calculateAction(/** @var AddressSourceAdapterFactoryInterface $addressAdapterFactory */
Request $request) : JsonResponse {}
/** @var AddressSourceAdapterFactoryInterface $addressAdapterFactory */
        public function sendTestAction(/** @var AddressSourceAdapterFactoryInterface $addressAdapterFactory */
Request $request) : JsonResponse {}
    }

    /**
     * @Route("/document")
     */
    class DocumentController extends \pimcore\bundle\adminbundle\controller\admin\elementcontrollerbase implements \pimcore\controller\eventedcontrollerinterface {
    use \pimcore\model\element\adminstyletrait;

        /**
         * @var Document\Service
         */
        protected $_documentService;

        public function getDataByIdAction(Request $request, EventDispatcherInterface $eventDispatcher) {}
        public function treeGetChildsByIdAction(Request $request, EventDispatcherInterface $eventDispatcher) {}
        public function addAction(Request $request) {}
        public function deleteAction(Request $request) {}
        public function updateAction(Request $request) {}
        protected function updateIndexesOfDocumentSiblings(Document $document, $newIndex) {}
        public function docTypesGetAction(Request $request) {}
        public function docTypesAction(Request $request) {}
        public function getDocTypesAction(Request $request) {}
        public function versionToSessionAction(Request $request) {}
        public function publishVersionAction(Request $request) {}
        public function updateSiteAction(Request $request) {}
        public function removeSiteAction(Request $request) {}
        public function copyInfoAction(Request $request) {}
        public function copyRewriteIdsAction(Request $request) {}
        public function copyAction(Request $request) {}
        public function diffVersionsAction(Request $request, $from, $to) {}
        public function diffVersionsImageAction(Request $request) {}
        protected function getTreeNodeConfig($element) {}
        public function getIdForPathAction(Request $request) {}
        public function seopanelTreeRootAction(DocumentRouteHandler $documentRouteHandler) {}
        public function seopanelTreeAction(Request $request, EventDispatcherInterface $eventDispatcher, DocumentRouteHandler $documentRouteHandler) {}
        public function languageTreeAction(Request $request) {}
        public function languageTreeRootAction(Request $request) {}
        private function getTranslationTreeNodeConfig($document, array $languages, array $translations = null) {}
        public function convertAction(Request $request) {}
        public function translationDetermineParentAction(Request $request) {}
        public function translationAddAction(Request $request) {}
        public function translationRemoveAction(Request $request) {}
        public function translationCheckLanguageAction(Request $request) {}
        private function getSeoNodeConfig($document) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    /**
     * @Route("/printpage")
     */
    class PrintpageController extends \pimcore\bundle\adminbundle\controller\admin\document\printpagecontrollerbase {}

    /**
     * @Route("/email")
     */
    class EmailController extends \pimcore\bundle\adminbundle\controller\admin\document\documentcontrollerbase {
    use \pimcore\controller\traits\elementeditlockhelpertrait;

        public function getDataByIdAction(Request $request) {}
        public function saveAction(Request $request) {}
        protected function setValuesToDocument(Request $request, Document $page) {}
    }

    /**
     * @Route("/folder")
     */
    class FolderController extends \pimcore\bundle\adminbundle\controller\admin\document\documentcontrollerbase {
    use \pimcore\controller\traits\elementeditlockhelpertrait;

        public function getDataByIdAction(Request $request) {}
        public function saveAction(Request $request) {}
        protected function setValuesToDocument(Request $request, Document $folder) {}
    }

    /**
     * @Route("/page")
     */
    class PageController extends \pimcore\bundle\adminbundle\controller\admin\document\documentcontrollerbase {
    use \pimcore\controller\traits\elementeditlockhelpertrait;

/** @var Document\Page $page */
        public function getDataByIdAction(/** @var Document\Page $page */
Request $request) {}
        public function saveAction(Request $request) {}
        public function getListAction(Request $request) {}
        public function generateScreenshotAction(Request $request) {}
        public function displayPreviewImageAction(Request $request) {}
        public function checkPrettyUrlAction(Request $request) {}
/** @var Document\Tag $element */
        public function clearEditableDataAction(/** @var Document\Tag $element */
Request $request) {}
        protected function setValuesToDocument(Request $request, Document $page) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Controller\Admin\DataObject {
    class QuantityValueController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function unitProxyGetAction(Request $request) {}
        public function unitProxyAction(Request $request) {}
        private function getOperator($comparison) {}
/** @var Unit $unit */
        public function unitListAction(/** @var Unit $unit */
Request $request) {}
/** @var UnitConversionService $converter */
        public function convertAction(/** @var UnitConversionService $converter */
Request $request) {}
    }

    /**
     * @Route("/object")
     */
    class DataObjectController extends \pimcore\bundle\adminbundle\controller\admin\elementcontrollerbase implements \pimcore\controller\eventedcontrollerinterface {
    use \pimcore\controller\traits\elementeditlockhelpertrait, \pimcore\model\element\adminstyletrait;

        /**
         * @var DataObject\Service
         */
        protected $_objectService;
        /**
         * @var array
         */
        private $objectData;
        /**
         * @var array
         */
        private $metaData;

        public function treeGetChildsByIdAction(Request $request, EventDispatcherInterface $eventDispatcher) {}
        protected function getTreeNodeConfig($element) {}
        public function getIdPathPagingInfoAction(Request $request) {}
/** -------------------------------------------------------------
 *   Load remaining general data from latest version
 *  ------------------------------------------------------------- */
        public function getAction(/** -------------------------------------------------------------
 *   Load remaining general data from latest version
 *  ------------------------------------------------------------- */
Request $request, /** -------------------------------------------------------------
 *   Load remaining general data from latest version
 *  ------------------------------------------------------------- */
EventDispatcherInterface $eventDispatcher) {}
        private function getDataForObject(DataObject\Concrete $object, $objectFromVersion = false) {}
        private function getDataForField($object, $key, $fielddefinition, $objectFromVersion, $level = 0) {}
        protected function setLayoutPermission($layout, $allowedView, $allowedEdit) {}
        public function getFolderAction(Request $request, EventDispatcherInterface $eventDispatcher) {}
        protected function prepareChildClasses($classes) {}
        public function addAction(Request $request) {}
        public function addFolderAction(Request $request) {}
        public function deleteAction(Request $request) {}
/** @var Model\Object $object */
        public function changeChildrenSortByAction(/** @var Model\Object $object */
Request $request) {}
        public function updateAction(Request $request) {}
/** @var DataObject\AbstractObject $child */
        protected function updateIndexesOfObjectSiblings(/** @var DataObject\AbstractObject $child */
DataObject\AbstractObject $updatedObject, /** @var DataObject\AbstractObject $child */
$newIndex) {}
/** @var DataObject\Concrete $object */
        public function saveAction(/** @var DataObject\Concrete $object */
Request $request) {}
/** @var DataObject\Fieldcollection\Definition $fdDef */
        protected function performFieldcollectionModificationCheck(/** @var DataObject\Fieldcollection\Definition $fdDef */
Request $request, /** @var DataObject\Fieldcollection\Definition $fdDef */
DataObject\Concrete $object, /** @var DataObject\Fieldcollection\Definition $fdDef */
$originalModificationDate, /** @var DataObject\Fieldcollection\Definition $fdDef */
$data) {}
        public function saveFolderAction(Request $request) {}
        protected function assignPropertiesFromEditmode(Request $request, $object) {}
        public function publishVersionAction(Request $request) {}
        public function previewVersionAction(Request $request) {}
        public function diffVersionsAction(Request $request, $from, $to) {}
/** @var DataObject\Localizedfield $localizedFields */
        public function gridProxyAction(/** @var DataObject\Localizedfield $localizedFields */
Request $request, /** @var DataObject\Localizedfield $localizedFields */
EventDispatcherInterface $eventDispatcher, /** @var DataObject\Localizedfield $localizedFields */
GridHelperService $gridHelperService) {}
        protected function getFieldDefinition($class, $key) {}
        protected function getFieldDefinitionFromBrick($brickType, $key) {}
        public function copyInfoAction(Request $request) {}
        public function copyRewriteIdsAction(Request $request) {}
        public function copyAction(Request $request) {}
        public function previewAction(Request $request) {}
        protected function processRemoteOwnerRelations($object, $toDelete, $toAdd, $ownerFieldName) {}
        protected function detectDeletedRemoteOwnerRelations($relations, $value) {}
        protected function detectAddedRemoteOwnerRelations($relations, $value) {}
        protected function getLatestVersion(DataObject\Concrete $object) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    /**
     * @Route("/class")
     */
    class ClassController extends \pimcore\bundle\adminbundle\controller\admincontroller implements \pimcore\controller\eventedcontrollerinterface {
        public function getDocumentTypesAction(Request $request) {}
        public function getAssetTypesAction(Request $request) {}
        public function getTreeAction(Request $request) {}
        public function getAction(Request $request) {}
        public function getCustomLayoutAction(Request $request) {}
        public function addAction(Request $request) {}
        public function addCustomLayoutAction(Request $request) {}
        public function deleteAction(Request $request) {}
        public function deleteCustomLayoutAction(Request $request) {}
        public function saveCustomLayoutAction(Request $request) {}
        public function saveAction(Request $request) {}
        protected function correctClassname($name) {}
        public function importClassAction(Request $request) {}
        public function importCustomLayoutDefinitionAction(Request $request) {}
/** @var DataObject\ClassDefinition\CustomLayout $item */
        public function getCustomLayoutDefinitionsAction(/** @var DataObject\ClassDefinition\CustomLayout $item */
Request $request) {}
        public function getAllLayoutsAction(Request $request) {}
        public function exportClassAction(Request $request) {}
        public function exportCustomLayoutDefinitionAction(Request $request) {}
        public function fieldcollectionGetAction(Request $request) {}
        public function fieldcollectionUpdateAction(Request $request) {}
        public function importFieldcollectionAction(Request $request) {}
        public function exportFieldcollectionAction(Request $request) {}
        public function fieldcollectionDeleteAction(Request $request) {}
/** @var DataObject\Fieldcollection\Definition $item */
        public function fieldcollectionTreeAction(/** @var DataObject\Fieldcollection\Definition $item */
Request $request) {}
/** @var DataObject\Fieldcollection\Definition $type */
        public function fieldcollectionListAction(/** @var DataObject\Fieldcollection\Definition $type */
Request $request) {}
        public function getClassDefinitionForColumnConfigAction(Request $request) {}
        public function objectbrickGetAction(Request $request) {}
        public function objectbrickUpdateAction(Request $request) {}
        public function importObjectbrickAction(Request $request) {}
        public function exportObjectbrickAction(Request $request) {}
        public function objectbrickDeleteAction(Request $request) {}
/** @var DataObject\Objectbrick\Definition $item */
        public function objectbrickTreeAction(/** @var DataObject\Objectbrick\Definition $item */
Request $request) {}
        public function objectbrickListAction(Request $request) {}
        public function bulkImportAction(Request $request) {}
        public function bulkCommitAction(Request $request) {}
        public function bulkExportPrepareAction(Request $request) {}
        public function bulkExportAction(Request $request) {}
/** @var DataObject\ClassDefinition\CustomLayout $customLayout */
        public function doBulkExportAction(/** @var DataObject\ClassDefinition\CustomLayout $customLayout */
Request $request) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
        public function getFieldcollectionUsagesAction(Request $request) {}
        public function getBrickUsagesAction(Request $request) {}
        public function getIconsAction(Request $request) {}
        /**
         * @Route("/suggest-class-identifier")
         *
         * @return Response
         */
        public function suggestClassIdentifierAction() {}
/** @var DataObject\ClassDefinition\CustomLayout $item */
        public function suggestCustomLayoutIdentifierAction(/** @var DataObject\ClassDefinition\CustomLayout $item */
Request $request) {}
    }

    /**
     * @Route("/classificationstore")
     */
    class ClassificationstoreController extends \pimcore\bundle\adminbundle\controller\admincontroller implements \pimcore\controller\eventedcontrollerinterface {
        public function deleteCollectionAction(Request $request) {}
        public function deleteCollectionRelationAction(Request $request) {}
        public function deleteRelationAction(Request $request) {}
        public function deleteGroupAction(Request $request) {}
        public function createGroupAction(Request $request) {}
        public function createStoreAction(Request $request) {}
        public function createCollectionAction(Request $request) {}
/** @var DataObject\ClassDefinition\Data\Classificationstore $fd */
        public function collectionsActionGet(/** @var DataObject\ClassDefinition\Data\Classificationstore $fd */
Request $request) {}
        public function collectionsAction(Request $request) {}
        public function groupsActionGet(Request $request) {}
        public function groupsAction(Request $request) {}
        public function collectionRelationsGetAction(Request $request) {}
        public function collectionRelationsAction(Request $request) {}
        public function listStoresAction(Request $request) {}
        public function searchRelationsAction(Request $request) {}
/** @var Classificationstore\KeyGroupRelation $config */
        public function relationsActionGet(/** @var Classificationstore\KeyGroupRelation $config */
Request $request) {}
        public function relationsAction(Request $request) {}
        public function addCollectionsAction(Request $request) {}
        public function addGroupsAction(Request $request) {}
/** @var Classificationstore\KeyGroupRelation $keyEntry */
        public function propertiesGetAction(/** @var Classificationstore\KeyGroupRelation $keyEntry */
Request $request) {}
        public function propertiesAction(Request $request) {}
        protected function getConfigItem($config) {}
        public function addPropertyAction(Request $request) {}
        public function deletePropertyAction(Request $request) {}
        public function editStoreAction(Request $request) {}
/** @var Classificationstore\StoreConfig $item */
        public function storetreeAction(/** @var Classificationstore\StoreConfig $item */
Request $request) {}
        public function getPageAction(Request $request) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    /**
     * @Route("/variants")
     */
    class VariantsController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function updateKeyAction(Request $request) {}
        public function getVariantsAction(Request $request, GridHelperService $gridHelperService) {}
    }

    /**
     * @Route("/object-helper")
     */
    class DataObjectHelperController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        const SYSTEM_COLUMNS = ['id', 'fullpath', 'key', 'published', 'creationDate', 'modificationDate', 'filename', 'classname'];

        public function loadObjectDataAction(Request $request) {}
        public function getMyOwnGridColumnConfigs($userId, $classId, $searchType) {}
        public function getSharedGridColumnConfigs($user, $classId, $searchType = null) {}
/** @var GridConfigShare $sharedConfig */
        public function importExportConfigAction(/** @var GridConfigShare $sharedConfig */
Request $request, /** @var GridConfigShare $sharedConfig */
ImportService $importService) {}
/** @var ImportConfig $config */
        private function getImportConfigs(/** @var ImportConfig $config */
ImportService $importService, /** @var ImportConfig $config */
$user, /** @var ImportConfig $config */
$classId) {}
/** @var Config $config */
        public function getExportConfigsAction(/** @var Config $config */
Request $request) {}
        public function deleteImportConfigAction(Request $request) {}
        public function gridDeleteColumnConfigAction(Request $request) {}
        public function gridGetColumnConfigAction(Request $request) {}
        public function doGetGridColumnConfig(Request $request, $isDelete = false) {}
        public function getDefaultGridFields($noSystemColumns, $class, $gridType, $noBrickColumns, $fields, $context, $objectId, $types = [ ]) {}
        protected function appendBrickFields($field, $brickFields, $availableFields, $gridType, $count, $brickType, $class, $objectId, $context = null) {}
        protected function getCalculatedColumnConfig($config) {}
        public function prepareHelperColumnConfigs(Request $request) {}
        public function gridConfigApplyToAllAction(Request $request) {}
        public function gridMarkFavouriteColumnConfigAction(Request $request) {}
        protected function getShareSettings($gridConfigId) {}
        public function importSaveConfigAction(Request $request, ImportService $importService) {}
        public function gridSaveColumnConfigAction(Request $request) {}
        protected function updateImportConfigShares($importConfig, $configData) {}
        protected function updateGridConfigShares($gridConfig, $metadata) {}
        protected function getFieldGridConfig($field, $gridType, $position, $force = false, $keyPrefix = null, $class = null, $objectId = null) {}
        public function prepareImportPreviewAction(Request $request) {}
        public function importPreviewAction(Request $request, ImportService $importService, LocaleServiceInterface $localeService, FactoryInterface $modelFactory, EventDispatcherInterface $eventDispatcher) {}
/** @var ConfigElementInterface $config */
        protected function populateObject(/** @var ConfigElementInterface $config */
ImportService $importService, /** @var ConfigElementInterface $config */
LocaleServiceInterface $localeService, /** @var ConfigElementInterface $config */
$object, /** @var ConfigElementInterface $config */
$configData, /** @var ConfigElementInterface $config */
$rowData, /** @var ConfigElementInterface $config */
$context) {}
        public function importUploadAction(Request $request) {}
        public function importGetFileInfoAction(Request $request, ImportService $importService) {}
/** @var DataObject\Concrete $object */
        public function importProcessAction(/** @var DataObject\Concrete $object */
Request $request, /** @var DataObject\Concrete $object */
ImportService $importService, /** @var DataObject\Concrete $object */
LocaleServiceInterface $localeService, /** @var DataObject\Concrete $object */
EventDispatcherInterface $eventDispatcher) {}
        protected function extractLanguage(Request $request) {}
        protected function getCsvFile($fileHandle) {}
        public function getExportJobsAction(Request $request, GridHelperService $gridHelperService) {}
/** @var \Pimcore\Model\DataObject\Listing $list */
        public function doExportAction(/** @var \Pimcore\Model\DataObject\Listing $list */
Request $request, /** @var \Pimcore\Model\DataObject\Listing $list */
LocaleServiceInterface $localeService) {}
        public function encodeFunc($value) {}
        public function downloadCsvFileAction(Request $request) {}
        public function downloadXlsxFileAction(Request $request) {}
        protected function mapFieldname($field, $helperDefinitions) {}
        protected function getCsvData(Request $request, LocaleServiceInterface $localeService, $list, $fields, $addTitles = true) {}
/** @var DataObject\ClassDefinition\Data\Localizedfields $localizedFields */
        protected function getCsvFieldData(/** @var DataObject\ClassDefinition\Data\Localizedfields $localizedFields */
Request $request, /** @var DataObject\ClassDefinition\Data\Localizedfields $localizedFields */
$field, /** @var DataObject\ClassDefinition\Data\Localizedfields $localizedFields */
$object, /** @var DataObject\ClassDefinition\Data\Localizedfields $localizedFields */
$requestedLanguage, /** @var DataObject\ClassDefinition\Data\Localizedfields $localizedFields */
$helperDefinitions) {}
        protected function csvObjectData($object) {}
        public function getBatchJobsAction(Request $request, GridHelperService $gridHelperService) {}
/** @var DataObject\Localizedfield $localizedField */
        public function batchAction(/** @var DataObject\Localizedfield $localizedField */
Request $request) {}
/** @var DataObject\ClassDefinition\Data\Localizedfields|null $localizedFields */
        public function getAvailableVisibleFieldsAction(/** @var DataObject\ClassDefinition\Data\Localizedfields|null $localizedFields */
Request $request) {}
        protected function processAvailableFieldDefinitions($fds, $firstOne, $commonFields) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Controller\Admin\External {
    class LinfoController extends \pimcore\bundle\adminbundle\controller\admincontroller implements \pimcore\controller\eventedcontrollerinterface {
        /**
         * @var string
         */
        protected $linfoHome;

        public function indexAction(Request $request, ?Profiler $profiler) {}
        public function layoutAction(Request $request) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    class AdminerController extends \pimcore\bundle\adminbundle\controller\admincontroller implements \pimcore\controller\eventedcontrollerinterface {
        /**
         * @var string
         */
        protected $adminerHome;

        public function adminerAction(Request $request, ?Profiler $profiler) {}
        public function proxyAction(Request $request) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
        protected function mergeAdminerHeaders(Response $response) {}
    }

    class OpcacheController extends \pimcore\bundle\adminbundle\controller\admincontroller implements \pimcore\controller\eventedcontrollerinterface {
        public function indexAction(Request $request, ?Profiler $profiler) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Controller\GDPR {
    class AdminController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function getDataProvidersAction(Manager $manager) {}
        public function onKernelController(FilterControllerEvent $event) {}
    }

    /**
     * Class DataObjectController
     *
     * @Route("/data-object")
     *
     * @package GDPRDataExtractorBundle\Controller
     */
    class DataObjectController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function onKernelController(FilterControllerEvent $event) {}
        public function searchDataObjectsAction(Request $request, DataObjects $service) {}
        public function exportDataObjectAction(Request $request, DataObjects $service) {}
    }

    /**
     * Class AssetController
     *
     * @Route("/asset")
     *
     * @package GDPRDataExtractorBundle\Controller
     */
    class AssetController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function onKernelController(FilterControllerEvent $event) {}
        public function searchAssetAction(Request $request, Assets $service) {}
        public function exportAssetsAction(Request $request, Assets $service) {}
    }

    /**
     * Class SentMailController
     *
     * @Route("/sent-mail")
     *
     * @package GDPRDataExtractorBundle\Controller
     */
    class SentMailController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function onKernelController(FilterControllerEvent $event) {}
        public function exportDataObjectAction(Request $request) {}
    }

    /**
     * Class PimcoreUsersController
     *
     * @Route("/pimcore-users")
     *
     * @package GDPRDataExtractorBundle\Controller
     */
    class PimcoreUsersController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function onKernelController(FilterControllerEvent $event) {}
        public function searchUsersAction(Request $request, PimcoreUsers $pimcoreUsers) {}
        public function exportUserDataAction(Request $request, PimcoreUsers $pimcoreUsers) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Controller\Searchadmin {
    /**
     * @Route("/search")
     */
    class SearchController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function findAction(Request $request, EventDispatcherInterface $eventDispatcher, GridHelperService $gridHelperService) {}
        protected function getForbiddenCondition($types = ['assets', 'documents', 'objects']) {}
        protected function filterQueryParam(string $query) {}
        public function quicksearchAction(Request $request, EventDispatcherInterface $eventDispatcher) {}
        protected function shortenPath($path) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Controller\ExtensionManager {
    class ExtensionManagerController extends \pimcore\bundle\adminbundle\controller\admincontroller implements \pimcore\controller\eventedcontrollerinterface {
        /**
         * @var PimcoreBundleManager
         */
        private $bundleManager;
        /**
         * @var AreabrickManager
         */
        private $areabrickManager;

        public function __construct(PimcoreBundleManager $bundleManager, AreabrickManagerInterface $areabrickManager) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
        /**
         * @Route("/admin/extensions", methods={"GET"})
         *
         * @return JsonResponse
         */
        public function getExtensionsAction() {}
        public function updateExtensionsAction(Request $request) {}
        public function toggleExtensionStateAction(Request $request, KernelInterface $kernel, CacheClearer $cacheClearer, AssetsInstaller $assetsInstaller) {}
        private function installAssets(AssetsInstaller $assetsInstaller, bool $enable) : array {}
        public function installAction(Request $request) {}
        public function uninstallAction(Request $request) {}
        private function handleInstallation(Request $request, $install = true) {}
        private function getBundleList(array $filter = [ ]) {}
/** @var PimcoreBundleInterface $bundle */
        private function buildBundleInstance(/** @var PimcoreBundleInterface $bundle */
$bundleName) {}
        private function buildBundleInfo(PimcoreBundleInterface $bundle, $enabled = false, $installed = false) {}
        private function getIframePath(PimcoreBundleInterface $bundle) {}
        /**
         * @return array
         */
        private function getBrickList() {}
        private function buildBrickInfo(AreabrickInterface $brick) {}
        private function getInstallerOutput(PimcoreBundleInterface $bundle, bool $decorated = false) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Controller\Rest {
    /**
     * @deprecated
     *
     * Contains actions to gather information about the API. The /user endpoint
     * is used in tests.
     */
    class InfoController extends \pimcore\bundle\adminbundle\controller\rest\abstractrestcontroller {
        /**
         * @Route("/system-clock", methods={"GET"})
         */
        public function systemClockAction() {}
        /**
         * @Route("/user", methods={"GET"})
         */
        public function userAction() {}
        /**
         * @Route("/server-info", methods={"GET"})
         *
         * Returns a list of all class definitions.
         */
        public function serverInfoAction() {}
        public function translationsAction(Request $request) {}
    }

    /**
     * @deprecated
     */
    class ImageController extends \pimcore\bundle\adminbundle\controller\rest\abstractrestcontroller {
        public function imageThumbnailAction(Request $request, $id = null) {}
        /**
         * @Route("/image-thumbnails", methods={"GET"})
         */
        public function imageThumbnailsAction() {}
    }

    /**
     * @deprecated
     */
    class ClassController extends \pimcore\bundle\adminbundle\controller\rest\abstractrestcontroller {
        public function classAction($id) {}
        /**
         * @Route("/classes", methods={"GET"})
         *
         * @return JsonResponse
         */
        public function classesAction() {}
        public function objectBrickAction($id) {}
        /**
         * @Route("/object-bricks", methods={"GET"})
         *
         * Returns a list of all object brick definitions.
         */
        public function objectBricksAction() {}
        public function fieldCollectionAction($id) {}
        /**
         * @Route("/field-collections", methods={"GET"})
         *
         * Returns a list of all field collection definitions.
         */
        public function fieldCollectionsAction() {}
/** @var DataObject\QuantityValue\Unit $item */
        public function quantityValueUnitDefinitionAction(/** @var DataObject\QuantityValue\Unit $item */
Request $request) {}
/** @var DataObject\Classificationstore\CollectionGroupRelation $item */
        public function classificationstoreDefinitionAction(/** @var DataObject\Classificationstore\CollectionGroupRelation $item */
Request $request) {}
    }

    /**
     * @deprecated
     */
    abstract class AbstractRestController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        /**
         * @var Stopwatch
         */
        protected $stopwatch;
        /**
         * @var Service
         */
        protected $service;

        public function __construct(Service $service) {}
        /**
         * @inheritDoc
         */
        public function needsSessionDoubleAuthenticationCheck() {}
        protected function checkPermission($permission) {}
        protected function createSuccessData($data = null, $wrapInDataProperty = true) {}
        protected function createErrorData($data = null) {}
        protected function normalizeResponseData($data = null) {}
        protected function createSuccessResponse($data = null, $wrapInDataProperty = true, $status = Response::HTTP_OK) {}
        protected function createCollectionSuccessResponse(array $data = [ ], $status = Response::HTTP_OK) {}
        protected function createErrorResponse($data = null, $status = Response::HTTP_BAD_REQUEST) {}
        protected function createNotFoundResponseException($message = null, \Exception $previous = null) {}
        protected function getJsonData(Request $request) {}
        protected function resolveId(Request $request, $id = null) {}
        /**
         * @return LoggerInterface
         */
        protected function getLogger() {}
        /**
         * @return Stopwatch
         */
        protected function getStopwatch() {}
        /**
         * @return Stopwatch
         */
        protected function startProfiling() {}
        protected function getProfilingData($sectionName) {}
        protected function checkCondition($condition) {}
        protected function buildCondition(Request $request) {}
        public function dispatchBeforeLoadEvent(Request $request, FilterEvent $eventData) {}
    }

    /**
     * @deprecated
     */
    class Helper {
        public static function buildSqlCondition($q, $op = null, $subject = null) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Controller\Rest\Element {
    /**
     * @deprecated
     *
     * end point for object related data.
     *
     * - get object by id
     *      GET http://[YOUR-DOMAIN]/webservice/rest/object/id/1281?apikey=[API-KEY]
     *      returns json-encoded object data.
     * - delete object by id
     *      DELETE http://[YOUR-DOMAIN]/webservice/rest/object/id/1281?apikey=[API-KEY]
     *      returns json encoded success value
     * - create object
     *      PUT or POST http://[YOUR-DOMAIN]/webservice/rest/object?apikey=[API-KEY]
     *      body: json-encoded object data in the same format as returned by get object by id
     *              but with missing id field or id set to 0
     *      returns json encoded object id
     * - update object
     *      PUT or POST http://[YOUR-DOMAIN]/webservice/rest/object/id/1281?apikey=[API-KEY]
     *      body: same as for create object. object id can be either in URI or as request payload
     *      returns json encoded success value
     */
    class DataObjectController extends \pimcore\bundle\adminbundle\controller\rest\element\abstractelementcontroller {
/** @var WebserviceObjectOut|WebserviceFolderOut $out */
        public function getAction(/** @var WebserviceObjectOut|WebserviceFolderOut $out */
Request $request, /** @var WebserviceObjectOut|WebserviceFolderOut $out */
$id = null) {}
        public function createAction(Request $request) {}
        public function updateAction(Request $request, $id) {}
        public function deleteAction(Request $request, $id = null) {}
        public function listAction(Request $request) {}
        public function objectMetaAction($id) {}
        public function countAction(Request $request) {}
        public function inquireAction(Request $request) {}
        protected function loadObject($id) {}
        protected function createObject($type, array $data) {}
        protected function updateObject(DataObject\AbstractObject $object, $type, array $data) {}
    }

    /**
     * @deprecated
     */
    class AssetController extends \pimcore\bundle\adminbundle\controller\rest\element\abstractelementcontroller {
/** @var Asset\Image $asset */
        public function getAction(/** @var Asset\Image $asset */
Request $request, /** @var Asset\Image $asset */
$id = null) {}
        public function createAction(Request $request) {}
        public function updateAction(Request $request, $id) {}
        public function deleteAction(Request $request, $id = null) {}
        public function listAction(Request $request) {}
        public function countAction(Request $request) {}
        public function inquireAction(Request $request) {}
        protected function loadAsset($id) {}
        protected function createAsset($type, array $data) {}
        protected function updateAsset(Asset $asset, $type, array $data) {}
    }

    /**
     * @deprecated
     */
    abstract class AbstractElementController extends \pimcore\bundle\adminbundle\controller\rest\abstractrestcontroller {
        const ELEMENT_DOES_NOT_EXIST = -1;

        protected function inquire(Request $request, $type) {}
        protected function checkElementPermission(AbstractElement $element, $type) {}
        protected function fillWebserviceData($class, $data) {}
/** @var \Pimcore\Model\Webservice\Data\Asset $wsData */
        private function mapWebserviceData(/** @var \Pimcore\Model\Webservice\Data\Asset $wsData */
$wsData, /** @var \Pimcore\Model\Webservice\Data\Asset $wsData */
$data) {}
    }

    /**
     * @deprecated
     *
     * end point for document related data.
     * - get document by id
     *      GET http://[YOUR-DOMAIN]/webservice/rest/document/id/1281?apikey=[API-KEY]
     *      returns json-encoded document data.
     * - delete document by id
     *      DELETE http://[YOUR-DOMAIN]/webservice/rest/document/id/1281?apikey=[API-KEY]
     *      returns json encoded success value
     * - create document
     *      PUT or POST http://[YOUR-DOMAIN]/webservice/rest/document?apikey=[API-KEY]
     *      body: json-encoded document data in the same format as returned by get document by id
     *              but with missing id field or id set to 0
     *      returns json encoded document id
     * - update document
     *      PUT or POST http://[YOUR-DOMAIN]/webservice/rest/document?apikey=[API-KEY]
     *      body: same as for create document but with object id
     *      returns json encoded success value
     */
    class DocumentController extends \pimcore\bundle\adminbundle\controller\rest\element\abstractelementcontroller {
        public function getAction(Request $request, $id = null) {}
        public function createAction(Request $request) {}
        public function updateAction(Request $request, $id) {}
        public function deleteAction(Request $request, $id = null) {}
        public function listAction(Request $request) {}
        public function countAction(Request $request) {}
        public function inquireAction(Request $request) {}
        protected function loadDocument($id) {}
        protected function createDocument($type, array $data) {}
        protected function updateDocument(Document $document, $type, array $data) {}
        protected function getWebserviceInClassName($type) {}
        protected function checkWebserviceMethod($method, $type) {}
    }

    /**
     * @deprecated
     */
    class TagController extends \pimcore\bundle\adminbundle\controller\rest\element\abstractelementcontroller {
        const TAG_DOES_NOT_EXIST = -1;

        /**
         * @Route("/tag-list", methods={"GET"})
         *
         * Returns a list of all tags.
         *  GET http://[YOUR-DOMAIN]/webservice/rest/tag-list?apikey=[API-KEY]
         *
         * @return JsonResponse
         */
        public function tagListAction() {}
        public function tagsElementListAction(Request $request) {}
/** @var Element\ElementInterface $element */
        public function elementsTagListAction(/** @var Element\ElementInterface $element */
Request $request) {}
        protected function checkType($type) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Controller\Reports {
    /**
     * @Route("/analytics")
     */
    class AnalyticsController extends \pimcore\bundle\adminbundle\controller\reports\reportscontrollerbase implements \pimcore\controller\eventedcontrollerinterface {
        /**
         * @var \Google_Client
         */
        protected $service;

        public function deeplinkAction(Request $request, SiteConfigProvider $siteConfigProvider) {}
        public function getProfilesAction(Request $request) {}
        private function getSite(Request $request) {}
        protected function getFilterPath(Request $request) {}
        public function chartmetricdataAction(Request $request, SiteConfigProvider $siteConfigProvider) {}
        public function summaryAction(Request $request, SiteConfigProvider $siteConfigProvider) {}
        public function sourceAction(Request $request, SiteConfigProvider $siteConfigProvider) {}
        public function dataExplorerAction(Request $request, SiteConfigProvider $siteConfigProvider) {}
        public function getDimensionsAction(Request $request) {}
        public function getMetricsAction(Request $request) {}
        public function getSegmentsAction(Request $request) {}
        protected function formatDimension($type, $value) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    /**
     * @Route("/custom-report")
     */
    class CustomReportController extends \pimcore\bundle\adminbundle\controller\reports\reportscontrollerbase {
        public function treeAction(Request $request) {}
        public function portletReportListAction(Request $request) {}
        public function addAction(Request $request) {}
        public function deleteAction(Request $request) {}
        public function cloneAction(Request $request) {}
        public function getAction(Request $request) {}
        public function updateAction(Request $request) {}
        public function columnConfigAction(Request $request) {}
/** @var CustomReport\Config $report */
        public function getReportConfigAction(/** @var CustomReport\Config $report */
Request $request) {}
        public function dataAction(Request $request) {}
        public function drillDownOptionsAction(Request $request) {}
        public function chartAction(Request $request) {}
        public function downloadCsvAction(Request $request) {}
    }

    /**
     * @Route("/settings")
     */
    class SettingsController extends \pimcore\bundle\adminbundle\controller\reports\reportscontrollerbase {
        public function getAction(Request $request) {}
        public function saveAction(Request $request, ReportConfigWriter $configWriter) {}
    }

    /**
     * @Route("/piwik")
     */
    class PiwikController extends \pimcore\bundle\adminbundle\controller\reports\reportscontrollerbase {
        public function reportsAction(ReportBroker $reportBroker) {}
        public function reportAction(ReportBroker $reportBroker, $report) {}
        public function iframeIntegrationAction(ConfigProvider $configProvider) {}
        public function sitesAction(SiteIdProvider $siteConfigProvider, ConfigProvider $configProvider, TranslatorInterface $translator) {}
        public function portalWidgetsAction(WidgetBroker $widgetBroker, string $configKey) {}
        public function portalWidgetAction(Request $request, WidgetBroker $widgetBroker, string $configKey, string $widgetId) {}
        public function apiSiteCreateAction(string $configKey, SiteIdProvider $siteConfigProvider, SitesManager $sitesManager) {}
        public function apiSiteUpdateAction(string $configKey, SiteIdProvider $siteConfigProvider, SitesManager $sitesManager) {}
    }

    /**
     * @Route("/qrcode")
     */
    class QrcodeController extends \pimcore\bundle\adminbundle\controller\reports\reportscontrollerbase implements \pimcore\controller\eventedcontrollerinterface {
        public function treeAction(Request $request) {}
        public function addAction(Request $request) {}
        public function deleteAction(Request $request) {}
        public function getAction(Request $request) {}
        public function updateAction(Request $request) {}
        public function codeAction(Request $request) {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    class ReportsControllerBase extends \pimcore\bundle\adminbundle\controller\admincontroller {
        /**
         * @return \Pimcore\Config\Config
         */
        public function getConfig() {}
    }

}

namespace Pimcore\Bundle\AdminBundle\GDPR\DataProvider {
    class SentMail implements \pimcore\bundle\adminbundle\gdpr\dataprovider\dataproviderinterface {
        /**
         * @inheritdoc
         */
        public function getName() : string {}
        /**
         * @inheritdoc
         */
        public function getJsClassName() : string {}
        /**
         * @inheritdoc
         */
        public function getSortPriority() : int {}
    }

    class PimcoreUsers implements \pimcore\bundle\adminbundle\gdpr\dataprovider\dataproviderinterface {
        /**
         * @var TokenStorageUserResolver
         */
        protected $userResolver;

        public function __construct(TokenStorageUserResolver $userResolver) {}
        /**
         * @inheritdoc
         */
        public function getName() : string {}
        /**
         * @inheritdoc
         */
        public function getJsClassName() : string {}
        /**
         * @inheritdoc
         */
        public function getSortPriority() : int {}
        public function searchData(int $id, string $firstname, string $lastname, string $email, int $start, int $limit, string $sort = null) : array {}
        public function getExportData(int $id) : array {}
        protected function getVersionDataForUser(User\AbstractUser $user) : array {}
        protected function getUsageLogDataForUser(User\AbstractUser $user) : array {}
    }

    class Manager {
        /**
         * @var CollectionServiceLocator
         */
        private $services;
        /**
         * @var array
         */
        private $sortedServices;

        public function __construct(CollectionServiceLocator $services) {}
        /**
         * Returns registered services in sorted order
         *
         * @return DataProviderInterface[]
         */
        public function getServices() : array {}
    }

    class DataObjects extends \pimcore\bundle\adminbundle\gdpr\dataprovider\elements implements \pimcore\bundle\adminbundle\gdpr\dataprovider\dataproviderinterface {
        /**
         * @var \Pimcore\Model\Webservice\Service
         */
        protected $service;
        /**
         * @var string[]
         */
        protected $exportIds;
        /**
         * @var array
         */
        protected $config;

        public function __construct(\Pimcore\Model\Webservice\Service $service, array $config) {}
        /**
         * @inheritdoc
         */
        public function getName() : string {}
        /**
         * @inheritdoc
         */
        public function getJsClassName() : string {}
        public function doExportData(AbstractObject $object) : array {}
        protected function fillIds(ElementInterface $element) {}
        public function searchData(int $id, string $firstname, string $lastname, string $email, int $start, int $limit, string $sort = null) : array {}
        /**
         * @inheritdoc
         */
        public function getSortPriority() : int {}
    }

    class Assets extends \pimcore\bundle\adminbundle\gdpr\dataprovider\elements implements \pimcore\bundle\adminbundle\gdpr\dataprovider\dataproviderinterface {
        /**
         * @var \Pimcore\Model\Webservice\Service
         */
        protected $service;
        /**
         * @var string[]
         */
        protected $exportIds;
        /**
         * @var array
         */
        protected $config;

        public function __construct(\Pimcore\Model\Webservice\Service $service, array $config = null) {}
        /**
         * @inheritdoc
         */
        public function getName() : string {}
        /**
         * @inheritdoc
         */
        public function getJsClassName() : string {}
        public function doExportData(Asset $asset) {}
        protected function fillIds(ElementInterface $element) {}
/** @var AbstractElement $hit */
        public function searchData(/** @var AbstractElement $hit */
int $id, /** @var AbstractElement $hit */
string $firstname, /** @var AbstractElement $hit */
string $lastname, /** @var AbstractElement $hit */
string $email, /** @var AbstractElement $hit */
int $start, /** @var AbstractElement $hit */
int $limit, /** @var AbstractElement $hit */
string $sort = null) : array {}
        /**
         * @inheritdoc
         */
        public function getSortPriority() : int {}
    }

    abstract class Elements implements \pimcore\bundle\adminbundle\gdpr\dataprovider\dataproviderinterface {
        protected function prepareQueryString($query) : string {}
    }


    interface DataProviderInterface {
        /**
         * Returns sort priority - higher is sorted first
         *
         * @return int
         */
        function getSortPriority() : int ;
        /**
         * Returns name of DataProvider
         *
         * @return string
         */
        function getName() : string ;
        /**
         * Returns JavaScript class name of frontend implementation
         *
         * @return string
         */
        function getJsClassName() : string ;
    }

}

namespace Pimcore\Bundle\AdminBundle\Helper {
    class GridHelperService {
/** @var Model\DataObject\ClassDefinition\Data\Classificationstore $csFieldDefinition */
        public function getFeatureFilters(/** @var Model\DataObject\ClassDefinition\Data\Classificationstore $csFieldDefinition */
string $filterJson, /** @var Model\DataObject\ClassDefinition\Data\Classificationstore $csFieldDefinition */
ClassDefinition $class, /** @var Model\DataObject\ClassDefinition\Data\Classificationstore $csFieldDefinition */
string $requestedLanguage) : array {}
/** @var ClassDefinition\Data\Localizedfields|null $localizedFields */
        public function getFilterCondition(/** @var ClassDefinition\Data\Localizedfields|null $localizedFields */
$filterJson, /** @var ClassDefinition\Data\Localizedfields|null $localizedFields */
ClassDefinition $class) : string {}
        protected function extractBricks(array $fields) : array {}
        public function addGridFeatureJoins(DataObject\Listing\Concrete $list, array $featureJoins, ClassDefinition $class, array $featureFilters) {}
/** @var DataObject\ClassDefinition\Data\Classificationstore $csFieldDefinition */
        public function prepareListingForGrid(/** @var DataObject\ClassDefinition\Data\Classificationstore $csFieldDefinition */
array $requestParams, /** @var DataObject\ClassDefinition\Data\Classificationstore $csFieldDefinition */
string $requestedLanguage, /** @var DataObject\ClassDefinition\Data\Classificationstore $csFieldDefinition */
$adminUser) : DataObject\Listing\Concrete {}
        public function prepareAssetListingForGrid($allParams, $adminUser) {}
        protected function filterQueryParam(string $query) {}
    }

    class QueryParams {
        public static function extractSortingSettings($params) {}
        public static function getRecordIdForGridRequest($param) {}
/**
 * make sure you pass the date as timestamp
 *
 * filter: {type : 'date',dateFormat: 'timestamp'}
 */
        public static function getFilterCondition(/**
 * make sure you pass the date as timestamp
 *
 * filter: {type : 'date',dateFormat: 'timestamp'}
 */
$filterString, /**
 * make sure you pass the date as timestamp
 *
 * filter: {type : 'date',dateFormat: 'timestamp'}
 */
$matchExact = ['id', 'o_id'], /**
 * make sure you pass the date as timestamp
 *
 * filter: {type : 'date',dateFormat: 'timestamp'}
 */
$returnString = true, /**
 * make sure you pass the date as timestamp
 *
 * filter: {type : 'date',dateFormat: 'timestamp'}
 */
$callbacks = [ ]) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\DependencyInjection {
    class PimcoreAdminExtension extends \symfony\component\dependencyinjection\extension\extension {
        const PARAM_DOCUMENTS_NOTES_EVENTS_TYPES = 'pimcore_admin.documents.notes_events.types';
        const PARAM_DATAOBJECTS_NOTES_EVENTS_TYPES = 'pimcore_admin.dataObjects.notes_events.types';
        const PARAM_ASSETS_NOTES_EVENTS_TYPES = 'pimcore_admin.assets.notes_events.types';

        public function load(array $configs, ContainerBuilder $container) {}
    }

    /**
     * Adds configuration for gdpr data provider
     */
    class Configuration implements \symfony\component\config\definition\configurationinterface {
        /**
         * {@inheritdoc}
         */
        public function getConfigTreeBuilder() {}
        /**
         * @return \Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition|\Symfony\Component\Config\Definition\Builder\NodeDefinition
         */
        protected function buildGdprDataExtractorNode() {}
        /**
         * @return ArrayNodeDefinition|\Symfony\Component\Config\Definition\Builder\NodeDefinition
         */
        protected function buildEventsNode() {}
        /**
         * @return ArrayNodeDefinition|\Symfony\Component\Config\Definition\Builder\NodeDefinition
         */
        protected function buildObjectsNode() {}
        /**
         * @return ArrayNodeDefinition|\Symfony\Component\Config\Definition\Builder\NodeDefinition
         */
        protected function buildAssetsNode() {}
        /**
         * @return ArrayNodeDefinition|\Symfony\Component\Config\Definition\Builder\NodeDefinition
         */
        protected function buildDocumentsNode() {}
    }

}

namespace Pimcore\Bundle\AdminBundle\DependencyInjection\Compiler {
    class TranslationServicesPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    class GDPRDataProviderPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    class ImportExportLocatorsPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
        private function processImport(ContainerBuilder $container) {}
        private function processGridColumns(ContainerBuilder $container) {}
        private function createLocatorForTaggedServices(ContainerBuilder $container, Definition $definition, string $type, string $tag, string $argument) {}
    }

    /**
     * Adds all services with the tags "pimcore_admin.serializer.encoder" and "pimcore_admin.serializer.normalizer" as
     * encoders and normalizers to the Admin Serializer service.
     *
     * This does exactly the same as the framework serializer pass, but adds encoders/normalizers to our custom admin
     * serializer.
     *
     * @see \Symfony\Component\Serializer\Serializer
     */
    class SerializerPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
    use \symfony\component\dependencyinjection\compiler\prioritytaggedservicetrait;

        public function process(ContainerBuilder $container) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\HttpFoundation {
    /**
     * This response serializes its data through the admin serializer (with reference loop handling) instead
     * of calling json_encode. This is to make sure we have consistent responses with `$this->json()` and `new JsonResponse`
     * in admin controllers.
     */
    class JsonResponse extends \symfony\component\httpfoundation\jsonresponse {
        public function setData($data = [ ]) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\EventListener {
    class CustomAdminEntryPointCheckListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        protected $customAdminPathIdentifier;

        public function __construct(?string $customAdminPathIdentifier) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() : array {}
        public function onKernelRequest(GetResponseEvent $event) {}
    }

    class EnablePreviewTimeSliderListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\responseinjectiontrait;

        /**
         * @var OutputTimestampResolver
         */
        protected $outputTimestampResolver;
        /**
         * @var RequestHelper
         */
        protected $requestHelper;
        /**
         * @var EditmodeResolver
         */
        protected $editmodeResolver;
        /**
         * @var DocumentResolver
         */
        protected $documentResolver;

        public function __construct(OutputTimestampResolver $outputTimestampResolver, RequestHelper $requestHelper, EditmodeResolver $editmodeResolver, DocumentResolver $documentResolver) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    class ImportConfigListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onClassDelete($event) {}
        public function onUserDelete($event) {}
        protected function cleanupImportConfigs($condition) {}
    }

    /**
     * Handles double authentication check for pimcore controllers after the firewall did to make sure the admin interface is
     * not accessible on configuration errors. Unauthenticated routes are not double-checked (e.g. login).
     *
     * TODO: the double authentication check is currently running for every DoubleAuthenticationControllerInterface, independent
     * of the request context, to ensure third party bundles using the AdminController handle authentication as well. Should we
     * do this on the pimcore context instead?
     */
    class AdminAuthenticationDoubleCheckListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\adminbundle\eventlistener\traits\controllertypetrait;

        /**
         * @var RequestMatcherFactory
         */
        protected $requestMatcherFactory;
        /**
         * @var array
         */
        protected $unauthenticatedRoutes;
        /**
         * @var RequestMatcherInterface[]
         */
        protected $unauthenticatedMatchers;
        /**
         * @var TokenStorageUserResolver
         */
        protected $tokenResolver;

        public function __construct(RequestMatcherFactory $factory, TokenStorageUserResolver $tokenResolver, array $unauthenticatedRoutes) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
/** @var DoubleAuthenticationControllerInterface $controller */
        public function onKernelController(/** @var DoubleAuthenticationControllerInterface $controller */
FilterControllerEvent $event) {}
        protected function requestNeedsAuthentication(Request $request) {}
        /**
         * Get list of paths which don't need double authentication check
         *
         * @return RequestMatcherInterface[]
         */
        protected function getUnauthenticatedMatchers() {}
        /**
         * @throws AccessDeniedHttpException
         *      if there's no current user in the session
         */
        protected function checkSessionUser() {}
        /**
         * @throws AccessDeniedHttpException
         *      if there's no current user in the token storage
         */
        protected function checkTokenStorageUser() {}
    }

    class TwoFactorListener {
        public function onAuthenticationComplete(TwoFactorAuthenticationEvent $event) {}
    }

    class HttpCacheListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        /**
         * @var RequestHelper
         */
        protected $requestHelper;
        /**
         * @var ResponseHelper
         */
        protected $responseHelper;

        public function __construct(RequestHelper $requestHelper, ResponseHelper $responseHelper) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    class AdminExceptionListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() : array {}
        public function onKernelException(GetResponseForExceptionEvent $event) {}
        private function getResponseData(\Exception $ex, int $defaultStatusCode = 500) : array {}
        protected function recursiveAddValidationExceptionSubItems($items, $message, $detailedInfo) {}
        protected function addContext(ValidationException $e, $message) {}
        protected function getInnerStack(\Exception $e) {}
    }

    class UsageStatisticsListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        /**
         * @var TokenStorageUserResolver
         */
        protected $userResolver;

        public function __construct(TokenStorageUserResolver $userResolver) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelRequest(GetResponseEvent $event) {}
        protected function logUsageStatistics(Request $request) {}
        protected function getParams(Request $request) {}
    }

    class UserPerspectiveListener implements \symfony\component\eventdispatcher\eventsubscriberinterface, \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait, \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        /**
         * @var TokenStorageUserResolver
         */
        protected $userResolver;

        public function __construct(TokenStorageUserResolver $userResolver) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelRequest(GetResponseEvent $event) {}
        protected function setRequestedPerspective(User $user, Request $request) {}
    }

    class GridConfigListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onObjectDelete($event) {}
        public function onClassDelete($event) {}
        public function onUserDelete($event) {}
        protected function cleanupGridConfigs($condition) {}
        protected function cleanupGridConfigFavourites($condition) {}
    }

    class CsrfProtectionListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \psr\log\loggerawaretrait, \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        protected $excludedRoutes;
        protected $csrfToken;
        /**
         * @var PhpEngine
         */
        protected $phpTemplatingEngine;

        public function __construct($excludedRoutes, PhpEngine $phpTemplatingEngine) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function handleRequest(GetResponseEvent $event) {}
        public function checkCsrfToken(Request $request) {}
        /**
         * @return string
         */
        public function getCsrfToken() {}
        public function regenerateCsrfToken() {}
    }

    class BruteforceProtectionListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        /**
         * @var BruteforceProtectionHandler
         */
        protected $handler;

        public function __construct(BruteforceProtectionHandler $handler) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelException(GetResponseForExceptionEvent $event) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\EventListener\Traits {
    trait ControllerTypeTrait {
        protected function getControllerType(FilterControllerEvent $event, $type) {}
        protected function isControllerType(FilterControllerEvent $event, $type) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Session {
    class AdminSessionBagConfigurator implements \pimcore\session\sessionconfiguratorinterface {
        /**
         * Attribute bag configuration
         *
         * @var array
         */
        private $config;

        public function __construct(array $config) {}
        public function configure(SessionInterface $session) {}
    }

}

namespace Pimcore\Bundle\AdminBundle\Session\Handler {
    class AdminSessionHandler implements \pimcore\bundle\adminbundle\session\handler\adminsessionhandlerinterface, \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * Contains how many sessions are currently open, this is important, because writeClose() must not be called if
         * there is still an open session, this is especially important if something doesn't use the method use() but get()
         * so the session isn't closed automatically after the action is done
         */
        private $openedSessions;
        /**
         * @var SessionInterface
         */
        protected $session;
        protected $readOnlySessionBagsCache;

        public function __construct(SessionInterface $session) {}
        /**
         * @inheritdoc
         */
        public function getSessionId() {}
        /**
         * @inheritdoc
         */
        public function getSessionName() {}
        public function useSession(callable $callable) {}
        public function useSessionAttributeBag(callable $callable, string $name = 'pimcore_admin') {}
        public function getReadOnlyAttributeBag(string $name = 'pimcore_admin') : AttributeBagInterface {}
        public function invalidate(int $lifetime = null) : bool {}
        /**
         * @inheritdoc
         */
        public function regenerateId() : bool {}
        public function loadAttributeBag(string $name, SessionInterface $session = null) : SessionBagInterface {}
        public function requestHasSessionId(Request $request, bool $checkRequestParams = false) : bool {}
        public function getSessionIdFromRequest(Request $request, bool $checkRequestParams = false) : string {}
        /**
         * @inheritdoc
         */
        public function loadSession() : SessionInterface {}
        /**
         * @inheritdoc
         */
        public function writeClose() {}
    }


    interface AdminSessionHandlerInterface {
        /**
         * @return string
         */
        function getSessionName() ;
        /**
         * Returns the session ID
         *
         * @see SessionInterface::getId()
         *
         * @return string
         */
        function getSessionId() ;
        function useSession(callable $callable) ;
        function useSessionAttributeBag(callable $callable, string $name = 'pimcore_admin') ;
        function getReadOnlyAttributeBag(string $name = 'pimcore_admin') : AttributeBagInterface ;
        function invalidate(int $lifetime = null) : bool ;
        /**
         * Regenerates the session ID
         *
         * @see SessionInterface::migrate()
         *
         * @return bool
         */
        function regenerateId() : bool ;
        function loadAttributeBag(string $name, SessionInterface $session = null) : SessionBagInterface ;
        /**
         * Saves the session if it is the last admin session which was opened
         */
        function writeClose() ;
        function requestHasSessionId(Request $request, bool $checkRequestParams = false) : bool ;
        function getSessionIdFromRequest(Request $request, bool $checkRequestParams = false) : string ;
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle {
    class Factory {
        /**
         * @var ContainerInterface
         */
        private $container;
        /**
         * @var EnvironmentInterface
         */
        private $environment;
        /**
         * Tenant specific cart managers
         *
         * @var CartManagerLocatorInterface
         */
        private $cartManagers;
        /**
         * Tenant specific order managers
         *
         * @var OrderManagerLocatorInterface
         */
        private $orderManagers;
        /**
         * Pricing managers registered by tenant
         *
         * @var PricingManagerLocatorInterface
         */
        private $pricingManagers;
        /**
         * Price systems registered by name
         *
         * @var PriceSystemLocatorInterface
         */
        private $priceSystems;
        /**
         * Availability systems registered by name
         *
         * @var AvailabilitySystemLocatorInterface
         */
        private $availabilitySystems;
        /**
         * Checkout manager factories registered by tenant
         *
         * @var CheckoutManagerFactoryLocatorInterface
         */
        private $checkoutManagerFactories;
        /**
         * Commit order processors registered by tenant
         *
         * @var CommitOrderProcessorLocatorInterface
         */
        private $commitOrderProcessors;
        /**
         * Filter services registered by ^tenant
         *
         * @var FilterServiceLocatorInterface
         */
        private $filterServices;

        public function __construct(ContainerInterface $container, CartManagerLocatorInterface $cartManagers, OrderManagerLocatorInterface $orderManagers, PricingManagerLocatorInterface $pricingManagers, PriceSystemLocatorInterface $priceSystems, AvailabilitySystemLocatorInterface $availabilitySystems, CheckoutManagerFactoryLocatorInterface $checkoutManagerFactories, CommitOrderProcessorLocatorInterface $commitOrderProcessors, FilterServiceLocatorInterface $filterServices) {}
        public static function getInstance() : self {}
        public function getEnvironment() : EnvironmentInterface {}
        public function getCartManager(string $tenant = null) : CartManagerInterface {}
        public function getOrderManager(string $tenant = null) : OrderManagerInterface {}
        public function getPricingManager(string $tenant = null) : PricingManagerInterface {}
        public function getPriceSystem(string $name = null) : PriceSystemInterface {}
        public function getAvailabilitySystem(string $name = null) : AvailabilitySystemInterface {}
        public function getCheckoutManager(CartInterface $cart, string $tenant = null) : CheckoutManagerInterface {}
        public function getCommitOrderProcessor(string $tenant = null) : CommitOrderProcessorInterface {}
        public function getPaymentManager() : PaymentManagerInterface {}
        /**
         * Returns the index service which holds a collection of all index workers
         *
         * @return IndexService
         */
        public function getIndexService() : IndexService {}
        public function getFilterService(string $tenant = null) : FilterService {}
        public function getAllTenants() : array {}
        public function getOfferToolService() : ServiceInterface {}
        public function getVoucherService() : VoucherServiceInterface {}
        public function getTokenManager(AbstractVoucherTokenType $configuration) : TokenManagerInterface {}
        public function getTrackingManager() : TrackingManagerInterface {}
        public function saveState() {}
    }

    class SessionEnvironment extends \pimcore\bundle\ecommerceframeworkbundle\environment implements \pimcore\bundle\ecommerceframeworkbundle\environmentinterface {
        const SESSION_KEY_CHECKOUT_TENANT = 'currentcheckouttenant';
        const SESSION_KEY_ASSORTMENT_SUB_TENANT = 'currentassortmentsubtenant';
        const SESSION_KEY_USERID = 'userid';
        const SESSION_KEY_CUSTOM_ITEMS = 'customitems';
        const SESSION_KEY_ASSORTMENT_TENANT = 'currentassortmenttenant';
        const SESSION_KEY_USE_GUEST_CART = 'useguestcart';

        /**
         * @var SessionInterface
         */
        protected $session;
        /**
         * @var bool
         */
        protected $sessionLoaded;

        public function __construct(SessionInterface $session, LocaleServiceInterface $localeService, array $options = [ ]) {}
        protected function load() {}
        public function save() {}
        public function clearEnvironment() {}
        /**
         * @return AttributeBagInterface
         */
        protected function getSessionBag() : AttributeBagInterface {}
    }

    class PimcoreEcommerceFrameworkBundle extends \pimcore\extension\bundle\abstractpimcorebundle {
    use \pimcore\extension\bundle\traits\statehelpertrait;

        /**
         * @inheritDoc
         */
        public function getVersion() {}
        public function build(ContainerBuilder $container) {}
        /**
         * @return array
         */
        public function getCssPaths() {}
        /**
         * @return array
         */
        public function getJsPaths() {}
        public function boot() {}
        /**
         * @return Installer
         */
        public function getInstaller() {}
    }

    class Environment implements \pimcore\bundle\ecommerceframeworkbundle\environmentinterface {
        const USER_ID_NOT_SET = -1;

        /**
         * @var LocaleServiceInterface
         */
        protected $localeService;
        /**
         * @var Currency
         */
        protected $defaultCurrency;
        /**
         * @var array
         */
        protected $customItems;
        /**
         * @var int
         */
        protected $userId;
        /**
         * @var bool
         */
        protected $useGuestCart;
        /**
         * @var string
         */
        protected $currentAssortmentTenant;
        /**
         * @var string
         */
        protected $currentAssortmentSubTenant;
        /**
         * @var string
         */
        protected $currentCheckoutTenant;
        /**
         * Current transient checkout tenant
         *
         * This value will not be stored into the session and is only valid for current process
         * set with setCurrentCheckoutTenant('tenant', false');
         *
         * @var string
         */
        protected $currentTransientCheckoutTenant;

        public function __construct(LocaleServiceInterface $localeService, array $options = [ ]) {}
        protected function processOptions(array $options) {}
        protected function configureOptions(OptionsResolver $resolver) {}
        protected function load() {}
        public function save() {}
        public function getAllCustomItems() {}
        public function getCustomItem($key, $defaultValue = null) {}
        public function setCustomItem($key, $value) {}
        /**
         * @return int
         */
        public function getCurrentUserId() {}
        public function setCurrentUserId($userId) {}
        /**
         * @return bool
         */
        public function hasCurrentUserId() {}
        public function removeCustomItem($key) {}
        public function clearEnvironment() {}
        public function setCurrentTenant($currentTenant) {}
        /**
         * @deprecated
         *
         * use getCurrentAssortmentTenant instead
         *
         * @return string
         */
        public function getCurrentTenant() {}
        public function setCurrentSubTenant($currentSubTenant) {}
        /**
         * @deprecated
         *
         * use getCurrentAssortmentSubTenant instead
         *
         * @return mixed
         */
        public function getCurrentSubTenant() {}
        public function setDefaultCurrency(Currency $currency) {}
        /**
         * @return Currency
         */
        public function getDefaultCurrency() {}
        /**
         * @return bool
         */
        public function getUseGuestCart() {}
        public function setUseGuestCart($useGuestCart) {}
        public function setCurrentAssortmentTenant($tenant) {}
        /**
         * gets current assortment tenant which is used for indexing and product lists
         *
         * @return string
         */
        public function getCurrentAssortmentTenant() {}
        public function setCurrentAssortmentSubTenant($subTenant) {}
        /**
         * gets current assortment tenant which is used for indexing and product lists
         *
         * @return mixed
         */
        public function getCurrentAssortmentSubTenant() {}
        public function setCurrentCheckoutTenant($tenant, $persistent = true) {}
        /**
         * gets current assortment tenant which is used for cart and checkout manager
         *
         * @return string
         */
        public function getCurrentCheckoutTenant() {}
        /**
         * gets current system locale
         *
         * @return null|string
         */
        public function getSystemLocale() {}
    }


    /**
     * Interface for environment implementations of online shop framework
     */
    interface EnvironmentInterface extends \pimcore\bundle\ecommerceframeworkbundle\componentinterface {
        /**
         * Returns current user id
         *
         * @return int
         */
        function getCurrentUserId() ;
        function setCurrentUserId($userId) ;
        /**
         * Checks if a user id is set
         *
         * @return bool
         */
        function hasCurrentUserId() ;
        function setCustomItem($key, $value) ;
        function removeCustomItem($key) ;
        function getCustomItem($key, $defaultValue = null) ;
        /**
         * Returns all custom items from environment
         *
         * @return array
         */
        function getAllCustomItems() ;
        /**
         * Resets environment
         * save()-call is needed to save changes
         */
        function clearEnvironment() ;
        function setCurrentAssortmentTenant($tenant) ;
        /**
         * Returns current assortment tenant which is used for indexing and product lists
         *
         * @return string
         */
        function getCurrentAssortmentTenant() ;
        function setCurrentAssortmentSubTenant($subTenant) ;
        /**
         * Returns current sub assortment tenant which is used for indexing and product lists
         *
         * @return mixed
         */
        function getCurrentAssortmentSubTenant() ;
        function setCurrentCheckoutTenant($tenant, $persistent = true) ;
        /**
         * Returns current assortment tenant which is used for cart and checkout manager
         *
         * @return string
         */
        function getCurrentCheckoutTenant() ;
        function setDefaultCurrency(Currency $currency) ;
        /**
         * Returns instance of default currency
         *
         * @return Currency
         */
        function getDefaultCurrency() ;
        /**
         * @return bool
         */
        function getUseGuestCart() ;
        function setUseGuestCart($useGuestCart) ;
        /**
         * Returns current system locale
         *
         * @return null|string
         */
        function getSystemLocale() ;
        function setCurrentTenant($tenant) ;
        /**
         * @deprecated use getCurrentAssortmentTenant instead
         *
         * @return string
         */
        function getCurrentTenant() ;
        function setCurrentSubTenant($tenant) ;
        /**
         * @deprecated use getCurrentAssortmentSubTenant instead
         *
         * @return mixed
         */
        function getCurrentSubTenant() ;
    }

    interface ComponentInterface {
        /**
         * @return mixed
         */
        function save() ;
    }

    /**
     * @deprecated use EnvironmentInterface instead.
     */
    interface IEnvironment {}

    /**
     * @deprecated use ComponentInterface instead.
     */
    interface IComponent {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\CoreExtensions\ObjectData {
    class IndexFieldSelection {
        /**
         * @var string
         */
        public $tenant;
        /**
         * @var string
         */
        public $field;
        /**
         * @var string|string[]
         */
        public $preSelect;

        public function __construct($tenant, $field, $preSelect) {}
        public function setField($field) {}
        /**
         * @return string
         */
        public function getField() {}
        public function setPreSelect($preSelect) {}
        /**
         * @return string|string[]
         */
        public function getPreSelect() {}
        public function setTenant($tenant) {}
        /**
         * @return string
         */
        public function getTenant() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\CoreExtensions\ClassDefinition {
    class IndexFieldSelection extends \pimcore\model\dataobject\classdefinition\data implements \pimcore\model\dataobject\classdefinition\data\queryresourcepersistenceawareinterface, \pimcore\model\dataobject\classdefinition\data\resourcepersistenceawareinterface {
    use \pimcore\model\dataobject\classdefinition\data\extension\columntype, \pimcore\model\dataobject\classdefinition\data\extension\querycolumntype;

        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        /**
         * Type for the column to query
         *
         * @var string
         */
        public $queryColumnType;
        /**
         * Type for the column
         *
         * @var string
         */
        public $columnType;
        /**
         * Type for the generated phpdoc
         *
         * @var string
         */
        public $phpdocType;
        public $width;
        public $considerTenants;
        public $multiPreSelect;
        public $filterGroups;
        public $predefinedPreSelectOptions;

        public function __construct() {}
        public function setConsiderTenants($considerTenants) {}
        public function getConsiderTenants() {}
        public function setFilterGroups($filterGroups) {}
        public function getFilterGroups() {}
        public function setMultiPreSelect($multiPreSelect) {}
        /**
         * @return bool
         */
        public function getMultiPreSelect() {}
        public function setPredefinedPreSelectOptions($predefinedPreSelectOptions) {}
        /**
         * @return array
         */
        public function getPredefinedPreSelectOptions() {}
        public function getDataForResource($data, $object = null, $params = [ ]) {}
        public function getDataFromResource($data, $object = null, $params = [ ]) {}
        public function getDataForQueryResource($data, $object = null, $params = [ ]) {}
        public function getDataForEditmode($data, $object = null, $params = [ ]) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
        public function getVersionPreview($data, $object = null, $params = [ ]) {}
        public function checkValidity($data, $omitMandatoryCheck = false) {}
        public function getForCsvExport($object, $params = [ ]) {}
        public function getFromCsvImport($importValue, $object = null, $params = [ ]) {}
        public function getForWebserviceExport($object, $params = [ ]) {}
        public function getFromWebserviceImport($value, $relatedObject = null, $params = [ ], $idMapper = null) {}
        public function isDiffChangeAllowed($object, $params = [ ]) {}
        /**
         * @return mixed
         */
        public function getWidth() {}
        public function setWidth($width) {}
    }

    class IndexFieldSelectionField extends \pimcore\model\dataobject\classdefinition\data\textarea {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        public $specificPriceField;
        public $showAllFields;
        public $considerTenants;

        public function setSpecificPriceField($specificPriceField) {}
        public function getSpecificPriceField() {}
        public function setShowAllFields($showAllFields) {}
        public function getShowAllFields() {}
        public function setConsiderTenants($considerTenants) {}
        public function getConsiderTenants() {}
        public function isEmpty($data) {}
        public function getDataFromEditmode($data, $object = null, $params = [ ]) {}
    }

    class IndexFieldSelectionCombo extends \pimcore\model\dataobject\classdefinition\data\select {
        /**
         * Static type of this element
         *
         * @var string
         */
        public $fieldtype;
        public $specificPriceField;
        public $showAllFields;
        public $considerTenants;

        public function __construct() {}
        protected function buildOptions() : array {}
        public function setSpecificPriceField($specificPriceField) {}
        public function getSpecificPriceField() {}
        public function setShowAllFields($showAllFields) {}
        public function getShowAllFields() {}
        public function setConsiderTenants($considerTenants) {}
        public function getConsiderTenants() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\Tools {
    class Installer extends \pimcore\extension\bundle\installer\migrationinstaller {
        /**
         * @var string
         */
        private $installSourcesPath;
        /**
         * @var array
         */
        private $tablesToInstall;
        /**
         * @var array
         */
        private $classesToInstall;
        /**
         * @var array
         */
        private $permissionsToInstall;

        public function __construct(BundleInterface $bundle, ConnectionInterface $connection, MigrationManager $migrationManager) {}
/** @var InstallMigration $migration */
        public function migrateInstall(/** @var InstallMigration $migration */
Schema $schema, /** @var InstallMigration $migration */
Version $version) {}
/** @var InstallMigration $migration */
        public function migrateUninstall(/** @var InstallMigration $migration */
Schema $schema, /** @var InstallMigration $migration */
Version $version) {}
        private function getClassesToInstall() : array {}
        private function installClasses() {}
        private function installFieldCollections() {}
        private function installObjectBricks() {}
        private function installPermissions() {}
        private function uninstallPermissions(Version $version) {}
        private function installTables(Schema $schema, Version $version) {}
        private function uninstallTables(Schema $schema) {}
        private function installTranslations() {}
        private function findInstallFiles(string $directory, string $pattern) : array {}
        public function needsReloadAfterInstall() {}
    }

    class SessionConfigurator implements \pimcore\session\sessionconfiguratorinterface {
        const ATTRIBUTE_BAG_CART = 'ecommerceframework_cart';
        const ATTRIBUTE_BAG_ENVIRONMENT = 'ecommerceframework_environment';
        const ATTRIBUTE_BAG_PAYMENT_ENVIRONMENT = 'ecommerceframework_payment_environment';
        const ATTRIBUTE_BAG_PRICING_ENVIRONMENT = 'ecommerceframework_pricing_environment';

        /**
         * @return string[]
         */
        protected function getBagNames() {}
        public function configure(SessionInterface $session) {}
        public function clearSession(SessionInterface $session) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\Traits {
    trait OptionsResolverTrait {
        /**
         * @var OptionsResolver[]
         */
        protected $optionsResolvers;
        protected function resolveOptions(array $options, string $resolverName = 'default') : array {}
        protected function getOptionsResolver(string $resolverName = 'default') : OptionsResolver {}
        abstract protected function configureOptionsResolver(string $resolverName, OptionsResolver $resolver) ;
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\FilterService {
    class FilterService {
        /**
         * @var FilterGroupHelper
         */
        protected $filterGroupHelper;
        /**
         * @var AbstractFilterType[]
         */
        protected $filterTypes;

        public function __construct(FilterGroupHelper $filterGroupHelper, array $filterTypes) {}
        protected function registerFilterType(string $name, AbstractFilterType $filterType) {}
        public function getFilterType(string $name) : AbstractFilterType {}
        public function getFilterGroupHelper() : FilterGroupHelper {}
/** @var AbstractFilterDefinitionType $condition */
        public function initFilterService(/** @var AbstractFilterDefinitionType $condition */
AbstractFilterDefinition $filterObject, /** @var AbstractFilterDefinitionType $condition */
ProductListInterface $productList, /** @var AbstractFilterDefinitionType $condition */
$params = [ ]) {}
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class FilterServiceLocator extends \pimcore\bundle\ecommerceframeworkbundle\dependencyinjection\servicelocator\assortmenttenantawareservicelocator implements \pimcore\bundle\ecommerceframeworkbundle\filterservice\filterservicelocatorinterface {
        public function getFilterService(string $tenant = null) : FilterService {}
        public function hasFilterService(string $tenant) : bool {}
        protected function buildNotFoundException(string $tenant) : UnsupportedException {}
    }

    /**
     * Helper for getting possible group by values based on different column groups
     *
     * one or more column groups can be mapped to one column type - which defines the logic for retrieving data
     *
     * available column types are
     *  - relation
     *  - multiselect
     *  - category
     *  - other
     */
    class FilterGroupHelper {
        protected function getColumnTypeForColumnGroup($columnGroup) {}
        public function getGroupByValuesForFilterGroup($columnGroup, ProductListInterface $productList, $field) {}
    }

    /**
     * Helper Class for setting up a product list utilizing the filter service
     * based on a filter definition and set filter parameters
     */
    class Helper {
        public static function setupProductList(\Pimcore\Model\DataObject\FilterDefinition $filterDefinition, ProductListInterface $productList, $params, ViewModel $viewModel, FilterService $filterService, $loadFullPage, $excludeLimitOfFirstpage = false) {}
        public static function createPagingQuerystring($page) {}
        public static function getFirstFilteredCategory($conditions) {}
    }


    interface FilterServiceLocatorInterface {
        function getFilterService(string $tenant = null) : FilterService ;
        function hasFilterService(string $tenant) : bool ;
    }

    /**
     * @deprecated use FilterServiceLocatorInterface instead.
     */
    interface IFilterServiceLocator {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\FilterService\FilterType {
    abstract class AbstractFilterType {
        const EMPTY_STRING = '$$EMPTY$$';

        /**
         * @var TranslatorInterface
         */
        protected $translator;
        /**
         * @var EngineInterface
         */
        protected $templatingEngine;
        /**
         * @var string
         */
        protected $template;
        /**
         * @var Request
         */
        protected $request;

        public function __construct(TranslatorInterface $translator, EngineInterface $templatingEngine, RequestStack $requestStack, string $template, array $options = [ ]) {}
        protected function processOptions(array $options) {}
        protected function getField(AbstractFilterDefinitionType $filterDefinition) {}
        protected function getTemplate(AbstractFilterDefinitionType $filterDefinition) {}
        protected function getPreSelect(AbstractFilterDefinitionType $filterDefinition) {}
        abstract public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) ;
        abstract public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) ;
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        protected function sortResult(AbstractFilterDefinitionType $filterDefinition, array $result) {}
        protected function render($template, array $parameters = [ ]) {}
    }

    class MultiSelectRelation extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\abstractfiltertype {
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        protected function loadAllAvailableRelations($availableRelations, $availableRelationsArray = [ ]) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class MultiSelectCategory extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\abstractfiltertype {
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class SelectFromMultiSelect extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\abstractfiltertype {
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class Input extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\abstractfiltertype {
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class SelectCategory extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\abstractfiltertype {
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class Select extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\abstractfiltertype {
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class MultiSelect extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\abstractfiltertype {
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class SelectRelation extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\abstractfiltertype {
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        protected function loadAllAvailableRelations($availableRelations, $availableRelationsArray = [ ]) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class MultiSelectFromMultiSelect extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\selectfrommultiselect {
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class NumberRangeSelection extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\abstractfiltertype {
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        private function createLabel($data) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class NumberRange extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\abstractfiltertype {
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\FilterService\FilterType\FactFinder {
    class SelectCategory extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\selectcategory {
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
    }

    class Select extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\select {
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class MultiSelect extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\multiselect {
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class NumberRange extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\numberrange {
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\FilterService\FilterType\Findologic {
    class MultiSelectRelation extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\multiselectrelation {
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class SelectCategory extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\selectcategory {
        const FIELDNAME = 'cat';

        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class Select extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\select {
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class MultiSelect extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\multiselect {
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class SelectRelation extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\selectrelation {
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class NumberRangeSelection extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\numberrangeselection {
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
        private function createLabel($data) {}
    }

    class NumberRange extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\numberrange {
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\FilterService\FilterType\ElasticSearch {
    class MultiSelectRelation extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\multiselectrelation {
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class SelectFromMultiSelect extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\selectfrommultiselect {
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class Input extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\input {
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class SelectCategory extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\selectcategory {
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class Select extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\select {
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class MultiSelect extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\multiselect {
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class SelectRelation extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\selectrelation {
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        protected function loadAllAvailableRelations($availableRelations, $availableRelationsArray = [ ]) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class MultiSelectFromMultiSelect extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\multiselectfrommultiselect {
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class SelectClassificationStoreAttributes extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\abstractfiltertype {
        protected function extractExcludedKeys(AbstractFilterDefinitionType $filterDefinition) : array {}
        protected function sortResult(AbstractFilterDefinitionType $filterDefinition, array $keyCollection) {}
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        public function getFilterFrontend(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class NumberRangeSelection extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\numberrangeselection {
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

    class NumberRange extends \pimcore\bundle\ecommerceframeworkbundle\filterservice\filtertype\numberrange {
        public function prepareGroupByValues(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList) {}
        public function addCondition(AbstractFilterDefinitionType $filterDefinition, ProductListInterface $productList, $currentFilter, $params, $isPrecondition = false) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\FilterService\Exception {
    class FilterTypeNotFoundException extends \runtimeexception {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\PricingManager {
    class Rule extends \pimcore\model\abstractmodel implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\ruleinterface {
        /**
         * @var int
         */
        protected $id;
        /**
         * @var string
         */
        protected $name;
        /**
         * @var string[]
         */
        protected $label;
        /**
         * @var string[]
         */
        protected $description;
        /**
         * @var BracketInterface
         */
        protected $condition;
        /**
         * @var array|ActionInterface
         */
        protected $action;
        /**
         * @var string
         */
        protected $behavior;
        /**
         * @var bool
         */
        protected $active;
        /**
         * @var int
         */
        protected $prio;

        public static function getById($id) {}
        public function setValue($key, $value) {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setLabel($label, $locale = null) {}
        public function getLabel($locale = null) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setName($name, $locale = null) {}
        public function setDescription($description, $locale = null) {}
        public function getDescription($locale = null) {}
        public function setBehavior($behavior) {}
        /**
         * @return string
         */
        public function getBehavior() {}
        public function setActive($active) {}
        /**
         * @return bool
         */
        public function getActive() {}
        public function setCondition(ConditionInterface $condition) {}
        /**
         * @return ConditionInterface
         */
        public function getCondition() {}
        public function setActions(array $action) {}
        /**
         * @return array|ActionInterface
         */
        public function getActions() {}
        public function setPrio($prio) {}
        /**
         * @return int
         */
        public function getPrio() {}
        /**
         * @return RuleInterface
         */
        public function save() {}
        /**
         * delete item
         */
        public function delete() {}
        public function check(EnvironmentInterface $environment) {}
        /**
         * checks if rule has at least one action that changes product price (and not cart price)
         *
         * @return bool
         */
        public function hasProductActions() {}
        public function executeOnProduct(EnvironmentInterface $environment) {}
        public function executeOnCart(EnvironmentInterface $environment) {}
        protected function getLanguage($language = null) {}
        public function getConditionsByType(string $typeClass) : array {}
    }

    class PricingManager implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\pricingmanagerinterface {
        /**
         * @var bool
         */
        protected $enabled;
        /**
         * Condition name => class mapping
         *
         * @var array
         */
        protected $conditionMapping;
        /**
         * Action name => class mapping
         *
         * @var array
         */
        protected $actionMapping;
        /**
         * @var SessionInterface
         */
        protected $session;
        /**
         * @var array
         */
        protected $options;
        /**
         * @var VisitorInfoStorageInterface
         */
        protected $visitorInfoStorage;
        /**
         * @var Rule[]
         */
        protected $rules;

        public function __construct(array $conditionMapping, array $actionMapping, SessionInterface $session, array $options = [ ], VisitorInfoStorageInterface $visitorInfoStorage = null) {}
        protected function configureOptions(OptionsResolver $resolver) {}
        public function setEnabled(bool $enabled) {}
        public function isEnabled() : bool {}
        public function applyProductRules(PriceSystemPriceInfoInterface $priceInfo) {}
        public function applyCartRules(CartInterface $cart) : array {}
        /**
         * @return RuleInterface[]
         */
        public function getValidRules() {}
        /** @var EnvironmentInterface $environment */
        public function getEnvironment() {}
        /**
         * @return Rule\Listing
         */
        public function getRuleListing() {}
        /**
         * @return array
         */
        public function getConditionMapping() : array {}
        /**
         * @return array
         */
        public function getActionMapping() : array {}
        public function getCondition($type) {}
        public function getAction($type) {}
        public function getPriceInfo(PriceSystemPriceInfoInterface $priceInfo) {}
    }

    class PricingManagerLocator extends \pimcore\bundle\ecommerceframeworkbundle\dependencyinjection\servicelocator\checkouttenantawareservicelocator implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\pricingmanagerlocatorinterface {
        public function getPricingManager(string $tenant = null) : PricingManagerInterface {}
        public function hasPricingManager(string $tenant) : bool {}
        protected function buildNotFoundException(string $tenant) : UnsupportedException {}
    }

    class PriceInfo implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\priceinfointerface {
        /**
         * @var PriceInfoInterface
         */
        protected $priceInfo;
        /**
         * @var Decimal
         */
        protected $amount;
        /**
         * @var RuleInterface[]
         */
        protected $rules;
        /**
         * @var RuleInterface[]
         */
        protected $validRules;
        /**
         * @var bool
         */
        protected $rulesApplied;
        /**
         * @var string
         */
        protected $priceEnvironmentHash;
        /**
         * @var EnvironmentInterface
         */
        protected $environment;

        public function __construct(PriceSystemPriceInfoInterface $priceInfo, EnvironmentInterface $environment) {}
        public function addRule(RuleInterface $rule) {}
        /**
         * @inheritdoc
         */
        public function getEnvironment() : EnvironmentInterface {}
        public function setEnvironment(EnvironmentInterface $environment) {}
        /**
         * Checks if environment changed based on hash
         * if so, resets valid rules
         *
         * @return bool
         */
        protected function environmentHashChanged() {}
        public function getRules(bool $forceRecalc = false) : array {}
        /**
         * @inheritdoc
         */
        public function getPrice() : PriceInterface {}
        /**
         * @inheritdoc
         */
        public function getTotalPrice() : PriceInterface {}
        /**
         * @inheritdoc
         */
        public function isMinPrice() : bool {}
        /**
         * @inheritdoc
         */
        public function getQuantity() {}
        public function setQuantity($quantity) {}
        public function setPriceSystem(PriceSystemInterface $priceSystem) {}
        public function setProduct(CheckoutableInterface $product) {}
        /**
         * @inheritdoc
         */
        public function getProduct() {}
        public function setAmount(Decimal $amount) {}
        /**
         * @inheritdoc
         */
        public function getAmount() : Decimal {}
        public function __call($name, $arguments) {}
        /**
         * @inheritdoc
         */
        public function getOriginalPrice() : PriceInterface {}
        /**
         * @inheritdoc
         */
        public function getOriginalTotalPrice() : PriceInterface {}
        /**
         * @inheritdoc
         */
        public function hasDiscount() : bool {}
        /**
         * @inheritdoc
         */
        public function getDiscount() : PriceInterface {}
        /**
         * @inheritdoc
         */
        public function getTotalDiscount() : PriceInterface {}
        /**
         * @inheritdoc
         */
        public function getDiscountPercent() {}
        /**
         * @inheritdoc
         */
        public function hasRulesApplied() : bool {}
    }

    class Environment implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\environmentinterface {
        /**
         * @var CartInterface
         */
        protected $cart;
        /**
         * @var CartItemInterface
         */
        protected $cartItem;
        /**
         * @var CheckoutableInterface
         */
        protected $product;
        /**
         * @var VisitorInfo
         */
        protected $visitorInfo;
        /**
         * @var RuleInterface
         */
        protected $rule;
        /**
         * @var PriceInfoInterface
         */
        protected $priceInfo;
        /**
         * @var AbstractCategory[]
         */
        protected $categories;
        /**
         * @var AttributeBagInterface
         */
        protected $session;
        /**
         * Execution mode of system - either product or cart
         *
         * @var string
         */
        protected $executionMode;

        public function setCart(CartInterface $cart) {}
        /**
         * @return CartInterface
         */
        public function getCart() {}
        /**
         * @return CartItemInterface
         */
        public function getCartItem() {}
        public function setCartItem(CartItemInterface $cartItem) {}
        public function setProduct(CheckoutableInterface $product = null) {}
        /**
         * @return CheckoutableInterface
         */
        public function getProduct() {}
        public function setVisitorInfo(VisitorInfo $visitorInfo) {}
        /**
         * @return VisitorInfo
         */
        public function getVisitorInfo() {}
        public function setRule($rule) {}
        /**
         * @return RuleInterface
         */
        public function getRule() {}
        public function setPriceInfo(PriceInfoInterface $priceInfo) {}
        /**
         * @return PriceInfoInterface
         */
        public function getPriceInfo() {}
        public function setCategories(array $categories) {}
        /**
         * @return AbstractCategory[]
         */
        public function getCategories() {}
        /**
         * @return AttributeBagInterface
         */
        public function getSession() {}
        public function setSession(AttributeBagInterface $session) {}
        public function setExecutionMode($executionMode) {}
        public function getExecutionMode() {}
        /**
         * returns hash of environment based on its content
         *
         * @return string
         */
        public function getHash() {}
    }


    interface EnvironmentInterface {
    const EXECUTION_MODE_PRODUCT = 'product';
    const EXECUTION_MODE_CART = 'cart';
        function setCart(CartInterface $cart) ;
        /**
         * @return CartInterface
         */
        function getCart() ;
        function setCartItem(CartItemInterface $cartItem) ;
        /**
         * @return CartItemInterface
         */
        function getCartItem() ;
        function setProduct(CheckoutableInterface $product) ;
        /**
         * @return CheckoutableInterface
         */
        function getProduct() ;
        function setVisitorInfo(VisitorInfo $visitorInfo) ;
        /**
         * @return VisitorInfo
         */
        function getVisitorInfo() ;
        function setRule($rule) ;
        /**
         * @return RuleInterface
         */
        function getRule() ;
        function setPriceInfo(PriceInfoInterface $priceInfo) ;
        /**
         * @return PriceInfoInterface
         */
        function getPriceInfo() ;
        function setCategories(array $categories) ;
        /**
         * @return AbstractCategory[]
         */
        function getCategories() ;
        function setSession(AttributeBagInterface $namespace) ;
        /**
         * @return AttributeBagInterface
         */
        function getSession() ;
        function setExecutionMode($executionMode) ;
        /**
         * returns in with execution mode the system is - either product or cart
         *
         * @return string
         */
        function getExecutionMode() ;
        /**
         * returns hash of environment based on its content
         *
         * @return string
         */
        function getHash() ;
    }

    /**
     * @deprecated use PricingManagerInterface instead.
     */
    interface IPricingManager {}

    /**
     * @deprecated use PricingManagerLocatorInterface instead.
     */
    interface IPricingManagerLocator {}

    /**
     * @deprecated use ActionInterface instead.
     */
    interface IAction {}

    interface ConditionInterface {
        function check(EnvironmentInterface $environment) ;
        /**
         * @return string
         */
        function toJSON() ;
        function fromJSON($string) ;
    }

    interface RuleInterface {
        /**
         * @return int
         */
        function getId() ;
        function setId($id) ;
        function setName($name) ;
        /**
         * @return string
         */
        function getName() ;
        function setLabel($label, $locale = null) ;
        function getLabel($locale = null) ;
        function setDescription($description, $locale = null) ;
        function getDescription($locale = null) ;
        function setCondition(ConditionInterface $condition) ;
        /**
         * @return ConditionInterface
         */
        function getCondition() ;
        function setActions(array $action) ;
        /**
         * @return array|ActionInterface
         */
        function getActions() ;
        function setActive($active) ;
        /**
         * @return bool
         */
        function getActive() ;
        function setBehavior($behavior) ;
        /**
         * @return string
         */
        function getBehavior() ;
        function check(EnvironmentInterface $environment) ;
        /**
         * checks if rule has at least one action that changes product price (and not cart price)
         *
         * @return bool
         */
        function hasProductActions() ;
        function executeOnProduct(EnvironmentInterface $environment) ;
        function executeOnCart(EnvironmentInterface $environment) ;
        function getConditionsByType(string $typeClass) : array ;
        function setPrio($prio) ;
        /**
         * @return int
         */
        function getPrio() ;
        /**
         * @return RuleInterface
         */
        function save() ;
        /**
         * delete item
         */
        function delete() ;
    }

    interface ActionInterface {
        function executeOnProduct(EnvironmentInterface $environment) ;
        function executeOnCart(EnvironmentInterface $environment) ;
        /**
         * @return string
         */
        function toJSON() ;
        function fromJSON($string) ;
    }

    interface PricingManagerLocatorInterface {
        function getPricingManager(string $tenant = null) : PricingManagerInterface ;
        function hasPricingManager(string $tenant) : bool ;
    }

    /**
     * @deprecated use EnvironmentInterface instead.
     */
    interface IEnvironment {}

    /**
     * @deprecated use PriceInfoInterface instead.
     */
    interface IPriceInfo {}

    /**
     * @deprecated use ConditionInterface instead.
     */
    interface ICondition {}

    interface PricingManagerInterface {
        function applyProductRules(PriceSystemPriceInfoInterface $priceinfo) ;
        function applyCartRules(CartInterface $cart) : array ;
        /**
         * Get map from action name to used class
         *
         * @return array
         */
        function getActionMapping() : array ;
        /**
         * Get map from condition name to used class
         *
         * @return array
         */
        function getConditionMapping() : array ;
        function getCondition($type) ;
        function getAction($type) ;
        /**
         * Factory
         *
         * @return EnvironmentInterface
         */
        function getEnvironment() ;
        function getPriceInfo(PriceSystemPriceInfoInterface $priceInfo) ;
    }

    interface PriceInfoInterface extends \pimcore\bundle\ecommerceframeworkbundle\pricesystem\priceinfointerface {
        function __construct(PriceSystemPriceInfoInterface $priceInfo, EnvironmentInterface $environment) ;
        function addRule(RuleInterface $rule) ;
        function getRules(bool $forceRecalc = false) : array ;
        function setAmount(Decimal $amount) ;
        /**
         * @return Decimal
         */
        function getAmount() : Decimal ;
        /**
         * @return PriceInterface
         */
        function getOriginalPrice() : PriceInterface ;
        /**
         * @return PriceInterface
         */
        function getOriginalTotalPrice() : PriceInterface ;
        /**
         * @return EnvironmentInterface
         */
        function getEnvironment() : EnvironmentInterface ;
        function setEnvironment(EnvironmentInterface $environment) ;
        /**
         * @return bool
         */
        function hasDiscount() : bool ;
        /**
         * @return PriceInterface
         */
        function getDiscount() : PriceInterface ;
        /**
         * @return PriceInterface
         */
        function getTotalDiscount() : PriceInterface ;
        /**
         * Get discount in percent
         *
         * @return float
         */
        function getDiscountPercent() ;
        /**
         * @return bool
         */
        function hasRulesApplied() : bool ;
    }

    /**
     * @deprecated use RuleInterface instead.
     */
    interface IRule {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\PricingManager\Rule {
    class Dao extends \pimcore\model\dao\abstractdao {
        const TABLE_NAME = 'ecommerceframework_pricing_rule';

        /**
         * Contains all valid columns in the database table
         *
         * @var array
         */
        protected $validColumns;
        /**
         * @var array
         */
        protected $fieldsToSave;
        /**
         * @var array
         */
        protected $localizedFields;

        /**
         * Get the valid columns from the database
         *
         * @return void
         */
        public function init() {}
        public function getById($id) {}
        /**
         * Create a new record for the object in database
         */
        public function create() {}
        /**
         * Save object to database
         *
         * @return void
         */
        public function save() {}
        /**
         * @return void
         */
        public function update() {}
        /**
         * Deletes object from database
         *
         * @return void
         */
        public function delete() {}
        public function setFieldsToSave(array $fields) {}
    }

    /**
     * @method Rule[] load()
     * @method Rule current()
     * @method \Pimcore\Bundle\EcommerceFrameworkBundle\PricingManager\Rule\Listing\Dao getDao()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var RuleInterface[]
         *
         * @deprecated use getter/setter methods or $this->data
         */
        protected $rules;
        /**
         * @var bool
         */
        protected $validate;

        public function __construct() {}
        public function setValidation($state) {}
        public function isValidOrderKey($key) {}
        /**
         * @return RuleInterface[]
         */
        public function getRules() {}
        public function setRules(array $rules) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\PricingManager\Rule\Listing {
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * @var string
         */
        protected $ruleClass;

        /**
         * @return array
         */
        public function load() {}
        public function setRuleClass($cartClass) {}
        public function getRuleClass() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\PricingManager\Action {
    class FreeShipping implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\actioninterface {
        public function executeOnProduct(EnvironmentInterface $environment) {}
        public function executeOnCart(EnvironmentInterface $environment) {}
        /**
         * @return string
         */
        public function toJSON() {}
        public function fromJSON($string) {}
    }

    class Gift implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\action\giftinterface {
        /**
         * @var AbstractProduct
         */
        protected $product;
        /**
         * @var string
         */
        protected $productPath;

        public function executeOnProduct(EnvironmentInterface $environment) {}
        public function executeOnCart(EnvironmentInterface $environment) {}
        public function setProduct(AbstractProduct $product) {}
        /**
         * @return AbstractProduct
         */
        public function getProduct() {}
        /**
         * @return string
         */
        public function toJSON() {}
        public function fromJSON($string) {}
        /**
         * dont cache the entire product object
         *
         * @return array
         */
        public function __sleep() {}
        /**
         * restore product
         */
        public function __wakeup() {}
    }

    class ProductDiscount implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\action\productdiscountinterface {
        /**
         * @var float
         */
        protected $amount;
        /**
         * @var float
         */
        protected $percent;

        public function executeOnProduct(EnvironmentInterface $environment) {}
        public function executeOnCart(EnvironmentInterface $environment) {}
        /**
         * @return string
         */
        public function toJSON() {}
        public function fromJSON($string) {}
        public function setAmount($amount) {}
        /**
         * @return float
         */
        public function getAmount() {}
        public function setPercent($percent) {}
        /**
         * @return float
         */
        public function getPercent() {}
    }

    class CartDiscount implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\action\discountinterface {
        /**
         * @var float
         */
        protected $amount;
        /**
         * @var float
         */
        protected $percent;

        public function executeOnProduct(EnvironmentInterface $environment) {}
        public function executeOnCart(EnvironmentInterface $environment) {}
        /**
         * @return string
         */
        public function toJSON() {}
        public function fromJSON($string) {}
        public function setAmount($amount) {}
        /**
         * @return float
         */
        public function getAmount() {}
        public function setPercent($percent) {}
        /**
         * @return float
         */
        public function getPercent() {}
    }


    interface DiscountInterface extends \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\actioninterface {
        function setAmount($amount) ;
        function setPercent($percent) ;
        /**
         * @return float
         */
        function getAmount() ;
        /**
         * @return float
         */
        function getPercent() ;
    }

    /**
     * @deprecated use GiftInterface instead.
     */
    interface IGift {}

    /**
     * Adds a gift product to the given cart
     */
    interface GiftInterface extends \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\actioninterface {
        function setProduct(AbstractProduct $product) ;
        /**
         * @return AbstractProduct
         */
        function getProduct() ;
    }

    /**
     * Interface to identify product discount actions
     */
    interface ProductDiscountInterface extends \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\action\discountinterface {}

    /**
     * @deprecated use DiscountInterface instead.
     */
    interface IDiscount {}

    /**
     * @deprecated use ProductDiscountInterface instead.
     */
    interface IProductDiscount {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\PricingManager\Condition {
    class CatalogCategory extends \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\condition\abstractobjectlistcondition implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\condition\categoryinterface {
        /**
         * @var AbstractCategory[]
         */
        protected $categories;
        /**
         * Serialized category IDs
         *
         * @var array
         */
        protected $categoryIds;

        public function setCategories(array $categories) {}
        /**
         * @return AbstractCategory[]
         */
        public function getCategories() {}
        /**
         * @return string
         */
        public function toJSON() {}
        public function fromJSON($string) {}
        /**
         * Don't cache the entire category object
         *
         * @return array
         */
        public function __sleep() {}
        /**
         * Restore categories from serialized ID list
         */
        public function __wakeup() {}
        public function check(EnvironmentInterface $environment) {}
    }

    abstract class AbstractOrder implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\conditioninterface {
        /**
         * Persistent cache for all conditions inheriting from AbstractOrder
         *
         * @var int[]
         */
        static private $cache;

        private function getData(RuleInterface $rule, $field) {}
        protected function getSoldCount(RuleInterface $rule) {}
        protected function getSalesAmount(RuleInterface $rule) : Decimal {}
    }

    class Bracket implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\condition\bracketinterface {
        /**
         * @var array|ConditionInterface
         */
        protected $conditions;
        /**
         * @var array|BracketInterface::OPERATOR_*
         */
        protected $operator;

        public function addCondition(ConditionInterface $condition, $operator) {}
        public function check(EnvironmentInterface $environment) {}
        /**
         * @return string
         */
        public function toJSON() {}
        public function fromJSON($string) {}
        public function getConditionsByType(string $typeClass) : array {}
    }

    class Sales extends \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\condition\abstractorder implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\conditioninterface {
        /**
         * @var int
         */
        protected $amount;
        /**
         * @var int[]
         */
        protected $currentSalesAmount;

        public function check(EnvironmentInterface $environment) {}
        /**
         * @return string
         */
        public function toJSON() {}
        public function fromJSON($string) {}
        /**
         * @return int
         */
        public function getAmount() {}
        public function setAmount($amount) {}
        protected function getCurrentAmount(RuleInterface $rule) {}
    }

    class Token implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\conditioninterface {
        /**
         * @var string
         */
        protected $token;

        public function check(EnvironmentInterface $environment) {}
        /**
         * @return string
         */
        public function toJSON() {}
        public function fromJSON($string) {}
        /**
         * @return string
         */
        public function getToken() {}
        public function setToken($token) {}
    }

    class CatalogProduct extends \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\condition\abstractobjectlistcondition implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\condition\catalogproductinterface {
        /**
         * @var AbstractProduct[]
         */
        protected $products;
        /**
         * Serialized product IDs
         *
         * @var array
         */
        protected $productIds;

        public function check(EnvironmentInterface $environment) {}
        /**
         * @return string
         */
        public function toJSON() {}
        public function fromJSON($string) {}
        /**
         * Don't cache the entire product object
         *
         * @return array
         */
        public function __sleep() {}
        /**
         * Restore products from serialized ID list
         */
        public function __wakeup() {}
        public function setProducts(array $products) {}
        /**
         * @return AbstractProduct[]
         */
        public function getProducts() {}
    }

    class ClientIp implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\conditioninterface {
        /**
         * @var int
         */
        protected $ip;

        public function check(EnvironmentInterface $environment) {}
        /**
         * @return string
         */
        public function toJSON() {}
        public function fromJSON($string) {}
        /**
         * @return int
         */
        public function getIp() {}
        public function setIp($ip) {}
    }

    abstract class AbstractObjectListCondition {
/** @var Concrete $item */
        protected function handleSleep(/** @var Concrete $item */
$objectProperty, /** @var Concrete $item */
$idProperty) {}
        protected function handleWakeup($objectProperty, $idProperty) {}
        protected function loadObject($id) {}
    }

    class DateRange implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\condition\daterangeinterface {
        /**
         * @var \DateTime
         */
        protected $starting;
        /**
         * @var \DateTime
         */
        protected $ending;

        public function check(EnvironmentInterface $environment) {}
        public function setStarting(\DateTime $date) {}
        public function setEnding(\DateTime $date) {}
        /**
         * @return \DateTime
         */
        public function getStarting() {}
        /**
         * @return \DateTime
         */
        public function getEnding() {}
        /**
         * @return string
         */
        public function toJSON() {}
        public function fromJSON($string) {}
    }

    class CartAmount implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\condition\cartamountinterface {
        /**
         * @var float
         */
        protected $limit;

        public function check(EnvironmentInterface $environment) {}
        public function setLimit($limit) {}
        /**
         * @return float
         */
        public function getLimit() {}
        /**
         * @return string
         */
        public function toJSON() {}
        public function fromJSON($string) {}
    }

    class Tenant implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\conditioninterface {
        /**
         * @var string[]
         */
        protected $tenant;

        public function check(EnvironmentInterface $environment) {}
        /**
         * @return string
         */
        public function toJSON() {}
        public function fromJSON($string) {}
        /**
         * @return string[]
         */
        public function getTenant() {}
        public function setTenant(array $tenant) {}
    }

    class TargetGroup implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\conditioninterface {
        /**
         * @var int
         */
        protected $targetGroupId;
        /**
         * @var \Pimcore\Model\Tool\Targeting\TargetGroup
         */
        protected $targetGroup;
        /**
         * @var int
         */
        protected $threshold;

        public function check(EnvironmentInterface $environment) {}
        /**
         * @return array
         */
        public function __sleep() {}
        public function __wakeup() {}
        /**
         * @return string
         */
        public function toJSON() {}
        public function fromJSON($string) {}
        /**
         * @return int
         */
        public function getTargetGroupId() : int {}
        public function setTargetGroupId(int $targetGroupId) {}
        /**
         * @return \Pimcore\Model\Tool\Targeting\TargetGroup
         */
        public function getTargetGroup() : \Pimcore\Model\Tool\Targeting\TargetGroup {}
        public function setTargetGroup(\Pimcore\Model\Tool\Targeting\TargetGroup $targetGroup) {}
        /**
         * @return int
         */
        public function getThreshold() : int {}
        public function setThreshold(int $threshold) {}
    }

    class VoucherToken implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\conditioninterface {
        /**
         * @var int[]
         */
        protected $whiteListIds;
        /**
         * @var \stdClass[]
         */
        protected $whiteList;
        /**
         * @var string[]
         */
        protected $errorMessages;

        public function check(EnvironmentInterface $environment) {}
        public function checkVoucherCode($code) {}
        /**
         * @return string
         */
        public function toJSON() {}
        public function fromJSON($string) {}
        protected function loadSeries($id) {}
        /**
         * @return int[]
         */
        public function getWhiteListIds() {}
        public function setWhiteListIds($whiteListIds) {}
        /**
         * @return \stdClass[]
         */
        public function getWhiteList() {}
        public function setWhiteList($whiteList) {}
        /**
         * @return string[]
         */
        public function getErrorMessagesRaw() : array {}
        public function setErrorMessagesRaw(array $errorMessages) : void {}
        public function getErrorMessage(string $locale) : string {}
    }

    class Sold extends \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\condition\abstractorder implements \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\conditioninterface {
        /**
         * @var int
         */
        protected $count;
        /**
         * @var int[]
         */
        protected $currentSoldCount;
        /**
         * @var bool
         */
        protected $countCart;

        public function check(EnvironmentInterface $environment) {}
        /**
         * @return string
         */
        public function toJSON() {}
        public function fromJSON($string) {}
        /**
         * @return int
         */
        public function getCount() {}
        public function setCount($count) {}
        /**
         * @return bool
         */
        public function isCountCart() {}
        public function setCountCart($countCart) {}
        /**
         * @return CartInterface|null
         */
        protected function getCart() {}
        protected function getCartRuleCount(CartInterface $cart, RuleInterface $rule, CartItemInterface $cartItem = null) {}
    }


    interface CatalogProductInterface extends \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\conditioninterface {
        function setProducts(array $products) ;
        /**
         * @return AbstractProduct[]
         */
        function getProducts() ;
    }

    /**
     * @deprecated use DateRangeInterface instead.
     */
    interface IDateRange {}

    interface DateRangeInterface extends \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\conditioninterface {
        function setStarting(\DateTime $date) ;
        function setEnding(\DateTime $date) ;
        /**
         * @return \DateTime
         */
        function getStarting() ;
        /**
         * @return \DateTime
         */
        function getEnding() ;
    }

    interface CategoryInterface extends \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\conditioninterface {
        function setCategories(array $categories) ;
        /**
         * @return AbstractCategory[]
         */
        function getCategories() ;
    }

    /**
     * @deprecated use CatalogProductInterface instead.
     */
    interface ICatalogProduct {}

    /**
     * @deprecated use BracketInterface instead.
     */
    interface IBracket {}

    interface BracketInterface extends \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\conditioninterface {
    const OPERATOR_AND = 'and';
    const OPERATOR_AND_NOT = 'and_not';
    const OPERATOR_OR = 'or';
        function addCondition(ConditionInterface $condition, $operator) ;
        function getConditionsByType(string $typeClass) : array ;
    }

    /**
     * @deprecated use CartAmountInterface instead.
     */
    interface ICartAmount {}

    /**
     * @deprecated use CartProductInterface instead.
     */
    interface ICartProduct {}

    /**
     * @deprecated use CategoryInterface instead.
     */
    interface ICategory {}

    interface CartAmountInterface extends \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\conditioninterface {
        function setLimit($limit) ;
        /**
         * @return float
         */
        function getLimit() ;
    }

    interface CartProductInterface extends \pimcore\bundle\ecommerceframeworkbundle\pricingmanager\conditioninterface {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\CartManager {
    class SessionCartCheckoutData extends \pimcore\bundle\ecommerceframeworkbundle\cartmanager\abstractcartcheckoutdata {
        protected $cartId;

        public function save() {}
        public static function getByKeyCartId($key, $cartId) {}
        public static function removeAllFromCart($cartId) {}
        public function setCart(CartInterface $cart) {}
        public function getCart() {}
        public function getCartId() {}
        public function setCartId($cartId) {}
        /**
         * @return array
         */
        public function __sleep() {}
    }

    class Cart extends \pimcore\bundle\ecommerceframeworkbundle\cartmanager\abstractcart implements \pimcore\bundle\ecommerceframeworkbundle\cartmanager\cartinterface {
        /**
         * @return string
         */
        protected function getCartItemClassName() {}
        /**
         * @return string
         */
        protected function getCartCheckoutDataClassName() {}
        public function save() {}
        /**
         * @return void
         */
        public function delete() {}
        public function sortItems(callable $value_compare_func) {}
        public static function getById($id) {}
        public function getItems() {}
        public function getItemCount($countSubItems = false) {}
        public function getItemAmount($countSubItems = false) {}
        public static function getAllCartsForUser($userId) {}
    }

    class SessionCart extends \pimcore\bundle\ecommerceframeworkbundle\cartmanager\abstractcart implements \pimcore\bundle\ecommerceframeworkbundle\cartmanager\cartinterface {
        /**
         * @var CartInterface[]
         */
        static protected $unserializedCarts;

        /**
         * @return string
         */
        protected function getCartItemClassName() {}
        /**
         * @return string
         */
        protected function getCartCheckoutDataClassName() {}
        /** @var AttributeBagInterface $sessionBag */
        protected static function getSessionBag() : AttributeBagInterface {}
        public function save() {}
        /**
         * @return void
         *
         * @throws \Exception if the cart is not yet saved.
         */
        public function delete() {}
        public function sortItems(callable $value_compare_func) {}
        /**
         * @inheritDoc
         */
        public function modified() {}
        public static function getById($id) {}
        public static function getAllCartsForUser($userId) {}
        /**
         * @return array
         */
        public function __sleep() {}
        /**
         * modified flag needs to be set
         */
        public function __wakeup() {}
    }

    class CartItem extends \pimcore\bundle\ecommerceframeworkbundle\cartmanager\abstractcartitem implements \pimcore\bundle\ecommerceframeworkbundle\cartmanager\cartiteminterface {
        /**
         * @var int
         */
        protected $sortIndex;

        public function setSortIndex($sortIndex) {}
        /**
         * @return int
         */
        public function getSortIndex() {}
        public function getCart() {}
        public function save() {}
        public static function getByCartIdItemKey($cartId, $itemKey, $parentKey = '') {}
        public static function removeAllFromCart($cartId) {}
        /**
         * @return CartItemInterface[]
         */
        public function getSubItems() {}
    }

    class CartCheckoutData extends \pimcore\bundle\ecommerceframeworkbundle\cartmanager\abstractcartcheckoutdata {
        public function save() {}
        public static function getByKeyCartId($key, $cartId) {}
        public static function removeAllFromCart($cartId) {}
    }

    class CartPriceCalculator implements \pimcore\bundle\ecommerceframeworkbundle\cartmanager\cartpricecalculatorinterface {
        /**
         * @var EnvironmentInterface
         */
        protected $environment;
        /**
         * @var CartInterface
         */
        protected $cart;
        /**
         * @var bool
         */
        protected $isCalculated;
        /**
         * @var PriceInterface
         */
        protected $subTotal;
        /**
         * @var PriceInterface
         */
        protected $grandTotal;
        /**
         * Standard modificators are handled as configuration as they may
         * be reinitialized on demand (e.g. inside AJAX calls).
         *
         * @var array
         */
        protected $modificatorConfig;
        /**
         * @var CartPriceModificatorInterface[]
         */
        protected $modificators;
        /**
         * @var ModificatedPriceInterface[]
         */
        protected $modifications;
        /**
         * @var RuleInterface[]
         */
        protected $appliedPricingRules;
        /**
         * @var PricingManagerInterface
         */
        protected $pricingManager;

        public function __construct(EnvironmentInterface $environment, CartInterface $cart, array $modificatorConfig = [ ]) {}
        /**
         * (Re-)initialize standard price modificators, e.g. after removing an item from a cart
         * within the same request, such as an AJAX-call.
         */
        public function initModificators() {}
/** @var CartPriceModificatorInterface $modificator */
        protected function buildModificator(/** @var CartPriceModificatorInterface $modificator */
array $config) : CartPriceModificatorInterface {}
        protected function setModificatorConfig(array $modificatorConfig) {}
        protected function configureModificatorResolver(OptionsResolver $resolver) {}
/** @var TaxEntry[] $grandTotalTaxes */
        public function calculate(/** @var TaxEntry[] $grandTotalTaxes */
$ignorePricingRules = false) {}
        public function setPricingManager(PricingManagerInterface $pricingManager) {}
        public function getPricingManager() {}
        /**
         * gets default currency object based on the default currency locale defined in the environment
         *
         * @return Currency
         */
        protected function getDefaultCurrency() {}
        protected function getDefaultPriceObject(Decimal $amount, Currency $currency) : PriceInterface {}
        /**
         * @return PriceInterface $price
         */
        public function getGrandTotal() : PriceInterface {}
        /**
         * @return ModificatedPriceInterface[] $priceModification
         */
        public function getPriceModifications() : array {}
        /**
         * @return PriceInterface $price
         */
        public function getSubTotal() : PriceInterface {}
        /**
         * @return void
         */
        public function reset() {}
        public function addModificator(CartPriceModificatorInterface $modificator) {}
        /**
         * @return CartPriceModificatorInterface[]
         */
        public function getModificators() : array {}
        public function removeModificator(CartPriceModificatorInterface $modificator) {}
        /**
         * @return RuleInterface[]
         *
         * @throws UnsupportedException
         */
        public function getAppliedPricingRules() : array {}
        /**
         * @return bool
         */
        public function isCalculated() : bool {}
    }

    class CartPriceCalculatorFactory implements \pimcore\bundle\ecommerceframeworkbundle\cartmanager\cartpricecalculatorfactoryinterface {
        /**
         * @var EnvironmentInterface
         */
        protected $environment;
        /**
         * @var array
         */
        protected $modificatorConfig;
        /**
         * @var array
         */
        protected $options;

        public function __construct(array $modificatorConfig, array $options = [ ]) {}
        protected function configureOptions(OptionsResolver $resolver) {}
        public function create(EnvironmentInterface $environment, CartInterface $cart) : CartPriceCalculatorInterface {}
    }

    abstract class AbstractCartItem extends \pimcore\model\abstractmodel implements \pimcore\bundle\ecommerceframeworkbundle\cartmanager\cartiteminterface {
        /**
         * flag needed for preventing call modified on cart when loading cart from storage
         *
         * @var bool
         */
        protected $isLoading;
        /**
         * @var CheckoutableInterface
         */
        protected $product;
        /**
         * @var int
         */
        protected $productId;
        /**
         * @var string
         */
        protected $itemKey;
        protected $count;
        protected $comment;
        /**
         * @var string
         */
        protected $parentItemKey;
        protected $subItems;
        /**
         * @var CartInterface
         */
        protected $cart;
        protected $cartId;
        /**
         * @var int unix timestamp
         */
        protected $addedDateTimestamp;

        public function __construct() {}
        public function setCount($count, bool $fireModified = true) {}
        public function getCount() {}
        public function setProduct(CheckoutableInterface $product, bool $fireModified = true) {}
        /**
         * @return CheckoutableInterface
         */
        public function getProduct() {}
        public function setCart(CartInterface $cart) {}
        /**
         * @return CartInterface
         */
        abstract public function getCart() ;
        /**
         * @return int
         */
        public function getCartId() {}
        public function setCartId($cartId) {}
        /**
         * @return int
         */
        public function getProductId() {}
        public function setProductId($productId) {}
        public function setParentItemKey($parentItemKey) {}
        /**
         * @return string
         */
        public function getParentItemKey() {}
        public function setItemKey($itemKey) {}
        /**
         * @return string
         */
        public function getItemKey() {}
        public function setSubItems($subItems) {}
        /**
         * @return PriceInterface
         */
        public function getPrice() : PriceInterface {}
        /**
         * @return PriceInfoInterface
         */
        public function getPriceInfo() : PriceInfoInterface {}
        /**
         * @return AvailabilityInterface
         */
        public function getAvailabilityInfo() {}
        /**
         * @return \Pimcore\Bundle\EcommerceFrameworkBundle\Model\AbstractSetProductEntry[]
         */
        public function getSetEntries() {}
        public function setComment($comment) {}
        /**
         * @return string
         */
        public function getComment() {}
        /**
         * @return PriceInterface
         */
        public function getTotalPrice() : PriceInterface {}
        public function setAddedDate(\DateTime $date = null) {}
        /**
         * @return \DateTime|null
         */
        public function getAddedDate() {}
        /**
         * @return int
         */
        public function getAddedDateTimestamp() {}
        public function setAddedDateTimestamp($time) {}
        /**
         * get item name
         *
         * @return string
         */
        public function getName() {}
        public function setIsLoading(bool $isLoading) {}
    }

    class CartFactory implements \pimcore\bundle\ecommerceframeworkbundle\cartmanager\cartfactoryinterface {
        /**
         * @var array
         */
        protected $options;

        public function __construct(array $options = [ ]) {}
        protected function configureOptions(OptionsResolver $resolver) {}
        public function getCartClassName(EnvironmentInterface $environment) : string {}
        public function create(EnvironmentInterface $environment, string $name, string $id = null, array $options = [ ]) : CartInterface {}
/** @var CartInterface $cart */
        protected function createCartInstance(/** @var CartInterface $cart */
EnvironmentInterface $environment, /** @var CartInterface $cart */
string $name, /** @var CartInterface $cart */
string $id = null, /** @var CartInterface $cart */
array $options = [ ]) : CartInterface {}
        /**
         * @return string
         */
        public function getCartReadOnlyMode() : string {}
    }

    class MultiCartManager implements \pimcore\bundle\ecommerceframeworkbundle\cartmanager\cartmanagerinterface {
        /**
         * @var EnvironmentInterface
         */
        protected $environment;
        /**
         * @var CartFactoryInterface
         */
        protected $cartFactory;
        /**
         * @var CartPriceCalculatorFactoryInterface
         */
        protected $cartPriceCalculatorFactory;
        /**
         * @var OrderManagerLocatorInterface
         */
        protected $orderManagers;
        /**
         * @var LoggerInterface
         */
        protected $logger;
        /**
         * @var CartInterface[]
         */
        protected $carts;
        /**
         * @var bool
         */
        protected $initialized;

        public function __construct(EnvironmentInterface $environment, CartFactoryInterface $cartFactory, CartPriceCalculatorFactoryInterface $cartPriceCalculatorFactory, OrderManagerLocatorInterface $orderManagers, LoggerInterface $logger) {}
        public function getCartClassName() : string {}
        /**
         * checks if cart manager is initialized and if not, do so
         */
        protected function checkForInit() {}
        protected function initSavedCarts() {}
        public function addToCart(CheckoutableInterface $product, $count, $key = null, $itemKey = null, $replace = false, array $params = [ ], array $subProducts = [ ], $comment = null) {}
        /**
         * @return void
         */
        public function save() {}
        public function deleteCart($key = null) {}
        public function createCart(array $params) {}
        public function clearCart($key = null) {}
        public function getCart($key = null) {}
        public function getCartByName($name) {}
        public function getOrCreateCartByName($name) {}
        /**
         * @return CartInterface[]
         */
        public function getCarts() : array {}
        public function removeFromCart($itemKey, $key = null) {}
        public function getCartPriceCalculator(CartInterface $cart) : CartPriceCalculatorInterface {}
        public function reset() {}
    }

    class CartManagerLocator extends \pimcore\bundle\ecommerceframeworkbundle\dependencyinjection\servicelocator\checkouttenantawareservicelocator implements \pimcore\bundle\ecommerceframeworkbundle\cartmanager\cartmanagerlocatorinterface {
        public function getCartManager(string $tenant = null) : CartManagerInterface {}
        public function hasCartManager(string $tenant) : bool {}
        protected function buildNotFoundException(string $tenant) : UnsupportedException {}
    }

    abstract class AbstractCartCheckoutData extends \pimcore\model\abstractmodel {
        protected $key;
        protected $data;
        /**
         * @var CartInterface
         */
        protected $cart;

        public function setCart(CartInterface $cart) {}
        public function getCart() {}
        public function getCartId() {}
        abstract public function save() ;
        public static function getByKeyCartId($key, $cartId) {}
        public static function removeAllFromCart($cartId) {}
        public function setKey($key) {}
        public function getKey() {}
        public function setData($data) {}
        public function getData() {}
    }

    class SessionCartItem extends \pimcore\bundle\ecommerceframeworkbundle\cartmanager\abstractcartitem implements \pimcore\bundle\ecommerceframeworkbundle\cartmanager\cartiteminterface {
        public function getCart() {}
        public function save() {}
        public static function getByCartIdItemKey($cartId, $itemKey, $parentKey = '') {}
        public static function removeAllFromCart($cartId) {}
        /**
         * @return CartItemInterface[]
         */
        public function getSubItems() {}
        /**
         * @return array
         */
        public function __sleep() {}
    }

    abstract class AbstractCart extends \pimcore\model\abstractmodel implements \pimcore\bundle\ecommerceframeworkbundle\cartmanager\cartinterface {
        const CART_READ_ONLY_MODE_STRICT = 'strict';
        const CART_READ_ONLY_MODE_DEACTIVATED = 'deactivated';

        /**
         * @var bool
         */
        private $ignoreReadonly;
        /**
         * @var int
         */
        protected $userId;
        /**
         * @var CartItemInterface[]
         */
        protected $items;
        /**
         * @var array
         */
        public $checkoutData;
        /**
         * @var string
         */
        protected $name;
        /**
         * @var \DateTime
         */
        protected $creationDate;
        /**
         * @var int
         */
        protected $creationDateTimestamp;
        /**
         * @var \DateTime
         */
        protected $modificationDate;
        /**
         * @var int
         */
        protected $modificationDateTimestamp;
        /**
         * @var mixed
         */
        protected $id;
        /**
         * @var CartItemInterface[]
         */
        protected $giftItems;
        /**
         * @var CartPriceCalculatorInterface
         */
        protected $priceCalculator;
        /**
         * @var int
         */
        protected $itemAmount;
        /**
         * @var int
         */
        protected $subItemAmount;
        /**
         * @var int
         */
        protected $itemCount;
        /**
         * @var int
         */
        protected $subItemCount;
        /**
         * @var string
         */
        protected $currentReadonlyMode;

        public function __construct() {}
        public function setCurrentReadonlyMode(string $currentReadonlyMode) : void {}
        /**
         * @deprecated use checkout implementation V7 instead
         *
         * @return bool
         */
        public function getIgnoreReadonly() {}
        /**
         * @return string
         */
        abstract protected function getCartItemClassName() ;
        /**
         * @return string
         */
        abstract protected function getCartCheckoutDataClassName() ;
        /**
         * @deprecated use checkout implementation V7 instead
         */
        protected function setIgnoreReadonly() {}
        /**
         * @deprecated use checkout implementation V7 instead
         */
        protected function unsetIgnoreReadonly() {}
        /**
         * @return bool
         *
         * @throws InvalidConfigException
         * @throws \Pimcore\Bundle\EcommerceFrameworkBundle\Exception\UnsupportedException
         *
         * @deprecated use checkout implementation V7 instead
         */
        public function isCartReadOnly() {}
        /**
         * @return bool
         *
         * @throws \Exception
         *
         * @deprecated use checkout implementation V7 instead
         */
        protected function checkCartIsReadOnly() {}
        public function addItem(CheckoutableInterface $product, $count, $itemKey = null, $replace = false, $params = [ ], $subProducts = [ ], $comment = null) {}
        public function updateItem($itemKey, CheckoutableInterface $product, $count, $replace = false, $params = [ ], $subProducts = [ ], $comment = null) {}
        public function updateItemCount($itemKey, $count) {}
        public function addGiftItem(CheckoutableInterface $product, $count, $itemKey = null, $replace = false, $params = [ ], $subProducts = [ ], $comment = null) {}
        public function updateGiftItem($itemKey, CheckoutableInterface $product, $count, $replace = false, $params = [ ], $subProducts = [ ], $comment = null) {}
        public function clear() {}
        public function getItemAmount($countSubItems = false) {}
        public function getItemCount($countSubItems = false) {}
        /**
         * @return CartItemInterface[]
         */
        public function getItems() {}
        public function getItem($itemKey) {}
        /**
         * @return bool|void
         */
        public function isEmpty() {}
        /**
         * @return CartItemInterface[]
         */
        public function getGiftItems() {}
        public function getGiftItem($itemKey) {}
        public function setItems($items) {}
        public function removeItem($itemKey) {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getName() {}
        /**
         * @return bool
         */
        public function getIsBookable() {}
        public function setId($id) {}
        /**
         * @return int
         */
        public function getId() {}
        /**
         * @return \DateTime
         */
        public function getCreationDate() {}
        public function setCreationDate(\DateTime $creationDate = null) {}
        public function setCreationDateTimestamp($creationDateTimestamp) {}
        /**
         * @return int
         */
        public function getCreationDateTimestamp() {}
        /**
         * @return \DateTime
         */
        public function getModificationDate() {}
        public function setModificationDate(\DateTime $modificationDate = null) {}
        public function setModificationDateTimestamp($modificationDateTimestamp) {}
        /**
         * @return mixed
         */
        public function getModificationDateTimestamp() {}
        /**
         * @return int
         */
        public function getUserId() {}
        public function setUserId($userId) {}
        /**
         * @return void
         */
        abstract public function save() ;
        /**
         * @return void
         */
        abstract public function delete() ;
        public function getCheckoutData($key) {}
        public function setCheckoutData($key, $data) {}
        /**
         * @return CartPriceCalculatorInterface
         */
        public function getPriceCalculator() {}
        public function setPriceCalculator(CartPriceCalculatorInterface $priceCalculator) {}
        /**
         * @return $this
         */
        public function modified() {}
        public function getRecentlyAddedItems($count) {}
        public function sortItems(callable $value_compare_func) {}
        public function addVoucherToken($code) {}
        public function isVoucherErrorCode($errorCode) {}
        /**
         * Removes all tokens form cart and releases the token reservations.
         */
        public function removeAllVoucherTokens() {}
        public function removeVoucherToken($code) {}
        /**
         * Filters checkout data and returns an array of strings with the assigns tokens.
         *
         * @return string[]
         */
        public function getVoucherTokenCodes() {}
        /**
         * @return PricingManagerTokenInformation[]
         */
        public function getPricingManagerTokenInformationDetails() : array {}
        /**
         * Checks if checkout data voucher tokens are valid reservations
         */
        protected function validateVoucherTokenReservations() {}
        protected static function isValidCartItem(CartItemInterface $item) {}
    }


    interface CartManagerInterface extends \pimcore\bundle\ecommerceframeworkbundle\componentinterface {
        /**
         * Returns cart class name configured in the ecommerce framework config
         *
         * Is also responsible for checking if guest cart class should be used or not,
         * by calling \Pimcore\Bundle\EcommerceFrameworkBundle\IEnvironment::getUseGuestCart();
         *
         * @return string
         */
        function getCartClassName() ;
        function addToCart(CheckoutableInterface $product, $count, $key = null, $itemKey = null, $replace = false, array $params = [ ], array $subProducts = [ ], $comment = null) ;
        function removeFromCart($itemKey, $key = null) ;
        function getCart($key = null) ;
        function getCartByName($name) ;
        function getOrCreateCartByName($name) ;
        /**
         * Returns all carts
         *
         * @return CartInterface[]
         */
        function getCarts() ;
        function clearCart($key = null) ;
        function createCart(array $params) ;
        function deleteCart($key = null) ;
        function getCartPriceCalculator(CartInterface $cart) ;
        /**
         * Resets cart manager - carts need to be reloaded after reset() is called
         *
         * @return void
         */
        function reset() ;
    }

    /**
     * @deprecated use CartManagerInterface instead.
     */
    interface ICartManager {}

    /**
     * @deprecated use CartPriceCalculatorFactoryInterface instead.
     */
    interface ICartPriceCalculatorFactory {}

    /**
     * Interface for cart item implementations of online shop framework
     */
    interface CartItemInterface {
        /**
         * @return CheckoutableInterface
         */
        function getProduct() ;
        /**
         * @return int
         */
        function getCount() ;
        /**
         * @return string
         */
        function getItemKey() ;
        function setProduct(CheckoutableInterface $product) ;
        function setCount($count) ;
        function setCart(CartInterface $cart) ;
        /**
         * @return CartInterface
         */
        function getCart() ;
        /**
         * @return CartItemInterface[]
         */
        function getSubItems() ;
        function setSubItems($subItems) ;
        /**
         * @return PriceInterface
         */
        function getPrice() : PriceInterface ;
        /**
         * @return PriceInterface
         */
        function getTotalPrice() : PriceInterface ;
        /**
         * @return PriceInfoInterface
         */
        function getPriceInfo() : PriceInfoInterface ;
        function setComment($comment) ;
        /**
         * @return string
         */
        function getComment() ;
        /**
         * @return AbstractSetProductEntry[]
         */
        function getSetEntries() ;
        /**
         * @return AvailabilityInterface
         */
        function getAvailabilityInfo() ;
        static function getByCartIdItemKey($cartId, $itemKey, $parentKey = '') ;
        static function removeAllFromCart($cartId) ;
        /**
         * @return void
         */
        function save() ;
        function setAddedDate(\DateTime $date = null) ;
        /**
         * @return \DateTime
         */
        function getAddedDate() ;
        /**
         * @return int unix timestamp
         */
        function getAddedDateTimestamp() ;
        function setAddedDateTimestamp($time) ;
        /**
         * get item name
         *
         * @return string
         */
        function getName() ;
    }

    interface CartFactoryInterface {
        function getCartClassName(EnvironmentInterface $environment) : string ;
        function create(EnvironmentInterface $environment, string $name, string $id = null, array $options = [ ]) : CartInterface ;
        /**
         * @return string
         */
        function getCartReadOnlyMode() : string ;
    }

    /**
     * @deprecated use CartManagerLocatorInterface instead.
     */
    interface ICartManagerLocator {}

    interface CartPriceCalculatorFactoryInterface {
        function create(EnvironmentInterface $environment, CartInterface $cart) : CartPriceCalculatorInterface ;
    }

    interface CartManagerLocatorInterface {
        function getCartManager(string $tenant = null) : CartManagerInterface ;
        function hasCartManager(string $tenant) : bool ;
    }

    /**
     * @deprecated use CartItemInterface instead.
     */
    interface ICartItem {}

    interface CartPriceCalculatorInterface {
        function __construct(EnvironmentInterface $environment, CartInterface $cart, array $modificators = [ ]) ;
        /**
         * (Re-)initialize standard price modificators, e.g. after removing an item from a cart
         * within the same request, such as an AJAX-call.
         */
        function initModificators() ;
        function calculate($ignorePricingRules = false) ;
        /**
         * Reset calculations
         *
         * @return void
         */
        function reset() ;
        /**
         * Returns sub total of cart
         *
         * @return PriceInterface $price
         */
        function getSubTotal() : PriceInterface ;
        /**
         * Returns grand total of cart
         *
         * @return PriceInterface $price
         */
        function getGrandTotal() : PriceInterface ;
        /**
         * Returns all price modifications which apply for this cart
         *
         * @return ModificatedPriceInterface[] $priceModification
         */
        function getPriceModifications() : array ;
        function addModificator(CartPriceModificatorInterface $modificator) ;
        function removeModificator(CartPriceModificatorInterface $modificator) ;
        /**
         * Returns all modificators
         *
         * @return CartPriceModificatorInterface[]
         */
        function getModificators() : array ;
        /**
         * Returns all applied PricingRules on Cart-Level
         *
         * @return RuleInterface[]
         *
         * @throws UnsupportedException
         */
        function getAppliedPricingRules() : array ;
        /**
         * @return bool
         */
        function isCalculated() : bool ;
    }

    /**
     * Interface for cart implementations of online shop framework
     */
    interface CartInterface {
        /**
         * @return int
         */
        function getId() ;
        function setId($id) ;
        /**
         * @return CartItemInterface[]
         */
        function getItems() ;
        /**
         * @return bool
         */
        function isEmpty() ;
        /**
         * returns if cart is read only
         * default implementation checks if order object exists and if order state is PAYMENT_PENDING
         *
         * @return bool
         *
         * @deprecated use checkout implementation V7 instead
         *
         */
        function isCartReadOnly() ;
        function getItem($itemKey) ;
        /**
         * @return CartItemInterface[]
         */
        function getGiftItems() ;
        function getGiftItem($itemKey) ;
        function addItem(CheckoutableInterface $product, $count, $itemKey = null, $replace = false, $params = [ ], $subProducts = [ ], $comment = null) ;
        function updateItem($itemKey, CheckoutableInterface $product, $count, $replace = false, $params = [ ], $subProducts = [ ], $comment = null) ;
        function updateItemCount($itemKey, $count) ;
        function addGiftItem(CheckoutableInterface $product, $count, $itemKey = null, $replace = false, $params = [ ], $subProducts = [ ], $comment = null) ;
        function updateGiftItem($itemKey, CheckoutableInterface $product, $count, $replace = false, $params = [ ], $subProducts = [ ], $comment = null) ;
        function removeItem($itemKey) ;
        /**
         * clears all items of cart
         *
         * @return void
         */
        function clear() ;
        function getItemAmount($countSubItems = false) ;
        function getItemCount($countSubItems = false) ;
        function getRecentlyAddedItems($count) ;
        /**
         * returns price calculator of cart
         *
         * @return CartPriceCalculatorInterface
         */
        function getPriceCalculator() ;
        /**
         * executes necessary steps when cart is modified - e.g. updating modification timestamp, resetting cart price calculator etc.
         *
         * -> is called internally every time when cart has been changed.
         *
         * @return $this
         */
        function modified() ;
        function setCheckoutData($key, $data) ;
        function getCheckoutData($key) ;
        /**
         * get name of cart.
         *
         * @return string
         */
        function getName() ;
        function setName($name) ;
        /**
         * returns if cart is bookable.
         * default implementation checks if all products of cart a bookable.
         *
         * @return bool
         */
        function getIsBookable() ;
        /**
         * @return \DateTime
         */
        function getCreationDate() ;
        function setCreationDate(\DateTime $creationDate = null) ;
        /**
         * @return \DateTime
         */
        function getModificationDate() ;
        function setModificationDate(\DateTime $modificationDate = null) ;
        function sortItems(callable $value_compare_func) ;
        /**
         * saves cart
         *
         * @return void
         */
        function save() ;
        /**
         * deletes cart
         *
         * @return void
         */
        function delete() ;
        static function getById($id) ;
        static function getAllCartsForUser($userId) ;
        function addVoucherToken($token) ;
        function removeVoucherToken($token) ;
        /**
         * @return string[]
         */
        function getVoucherTokenCodes() ;
        /**
         * Returns detail information of added voucher codes and if they are considered by pricing rules
         *
         * @return PricingManagerTokenInformation[]
         */
        function getPricingManagerTokenInformationDetails() : array ;
        function isVoucherErrorCode($errorCode) ;
    }

    /**
     * @deprecated use CartPriceCalculatorInterface instead.
     */
    interface ICartPriceCalculator {}

    /**
     * @deprecated use CartFactoryInterface instead.
     */
    interface ICartFactory {}

    /**
     * @deprecated use CartInterface instead.
     */
    interface ICart {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\CartManager\CartCheckoutData {
    class Dao extends \pimcore\model\dao\abstractdao {
        const TABLE_NAME = 'ecommerceframework_cartcheckoutdata';

        /**
         * Contains all valid columns in the database table
         *
         * @var array
         */
        protected $validColumns;
        protected $fieldsToSave;

        /**
         * Get the valid columns from the database
         *
         * @return void
         */
        public function init() {}
        public function getByKeyCartId($key, $cartId) {}
        /**
         * Save object to database
         */
        public function save() {}
        /**
         * @return void
         */
        public function update() {}
        /**
         * Deletes object from database
         *
         * @return void
         */
        public function delete() {}
        public function removeAllFromCart($cartId) {}
    }

    /**
     * @method CartCheckoutData[] load()
     * @method CartCheckoutData current()
     * @method int getTotalCount()
     * @method \Pimcore\Bundle\EcommerceFrameworkBundle\CartManager\CartCheckoutData\Listing\Dao getDao()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var array
         *
         * @deprecated use getter/setter methods or $this->data
         */
        public $cartCheckoutDataItems;

        public function __construct() {}
        public function isValidOrderKey($key) {}
        /**
         * @return array
         */
        public function getCartCheckoutDataItems() {}
        public function setCartCheckoutDataItems($cartCheckoutDataItems) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\CartManager\CartCheckoutData\Listing {
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * @return array
         */
        public function load() {}
        public function getTotalCount() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\CartManager\CartPriceModificator {
    class Discount implements \pimcore\bundle\ecommerceframeworkbundle\cartmanager\cartpricemodificator\discountinterface {
        /**
         * @var Decimal
         */
        protected $amount;
        /**
         * @var null|RuleInterface
         */
        protected $rule;

        public function __construct(RuleInterface $rule) {}
        /**
         * modificator name
         *
         * @return string
         */
        public function getName() {}
        public function modify(PriceInterface $currentSubTotal, CartInterface $cart) {}
        public function setAmount(Decimal $amount) {}
        /**
         * @inheritdoc
         */
        public function getAmount() : Decimal {}
        public function getRuleId() {}
    }

    class Shipping implements \pimcore\bundle\ecommerceframeworkbundle\cartmanager\cartpricemodificator\shippinginterface {
        /**
         * @var Decimal
         */
        protected $charge;
        /**
         * @var OnlineShopTaxClass
         */
        protected $taxClass;

        public function __construct(array $options = [ ]) {}
        protected function processOptions(array $options) {}
        protected function configureOptions(OptionsResolver $resolver) {}
        /**
         * @return string
         */
        public function getName() {}
        public function modify(PriceInterface $currentSubTotal, CartInterface $cart) {}
        public function setCharge(Decimal $charge) {}
        /**
         * @return Decimal
         */
        public function getCharge() : Decimal {}
        /**
         * @return OnlineShopTaxClass
         */
        public function getTaxClass() {}
        public function setTaxClass($taxClass) {}
    }


    /**
     * Special interface for price modifications added by discount pricing rules for carts
     */
    interface DiscountInterface extends \pimcore\bundle\ecommerceframeworkbundle\cartmanager\cartpricemodificator\cartpricemodificatorinterface {
        function setAmount(Decimal $amount) ;
        /**
         * @return Decimal
         */
        function getAmount() : Decimal ;
    }

    /**
     * @deprecated use CartPriceModificatorInterface instead.
     */
    interface ICartPriceModificator {}

    /**
     * special interface for shipping price modifications - needed for pricing rule that remove shipping costs
     */
    interface ShippingInterface extends \pimcore\bundle\ecommerceframeworkbundle\cartmanager\cartpricemodificator\cartpricemodificatorinterface {
        function setCharge(Decimal $charge) ;
        /**
         * @return Decimal
         */
        function getCharge() : Decimal ;
    }

    interface CartPriceModificatorInterface {
        /**
         * @return string
         */
        function getName() ;
        function modify(PriceInterface $currentSubTotal, CartInterface $cart) ;
    }

    /**
     * @deprecated use DiscountInterface instead.
     */
    interface IShipping {}

    /**
     * @deprecated use DiscountInterface instead.
     */
    interface IDiscount {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\CartManager\Cart {
    class Dao extends \pimcore\model\dao\abstractdao {
        const TABLE_NAME = 'ecommerceframework_cart';

        /**
         * Contains all valid columns in the database table
         *
         * @var array
         */
        protected $validColumns;
        protected $fieldsToSave;

        /**
         * Get the valid columns from the database
         *
         * @return void
         */
        public function init() {}
        public function getById($id) {}
        /**
         * @return void
         */
        public function create() {}
        /**
         * @return void
         */
        public function save() {}
        /**
         * @return void
         */
        public function update() {}
        /**
         * Deletes object from database
         *
         * @return void
         */
        public function delete() {}
        public function setFieldsToSave(array $fields) {}
    }

    /**
     * @method \Pimcore\Bundle\EcommerceFrameworkBundle\CartManager\Cart[] load()
     * @method \Pimcore\Bundle\EcommerceFrameworkBundle\CartManager\Cart current()
     * @method int getTotalCount()
     * @method \Pimcore\Bundle\EcommerceFrameworkBundle\CartManager\Cart\Listing\Dao getDao()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var array
         *
         * @deprecated use getter/setter methods or $this->data
         */
        public $carts;

        public function __construct() {}
        public function isValidOrderKey($key) {}
        /**
         * @return array
         */
        public function getCarts() {}
        public function setCarts($carts) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\CartManager\Cart\Listing {
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        protected $cartClass;

        /**
         * @return array
         */
        public function load() {}
        public function getTotalCount() {}
        public function setCartClass($cartClass) {}
        public function getCartClass() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\CartManager\CartItem {
    class Dao extends \pimcore\model\dao\abstractdao {
        const TABLE_NAME = 'ecommerceframework_cartitem';

        /**
         * Contains all valid columns in the database table
         *
         * @var array
         */
        protected $validColumns;
        /**
         * @var array
         */
        protected $fieldsToSave;

        /**
         * Get the valid columns from the database
         *
         * @return void
         */
        public function init() {}
        public function getByCartIdItemKey($cartId, $itemKey, $parentKey = '') {}
        /**
         * Save object to database
         */
        public function save() {}
        /**
         * @return void
         */
        public function update() {}
        /**
         * Deletes object from database
         *
         * @return void
         */
        public function delete() {}
        public function removeAllFromCart($cartId) {}
    }

    /**
     * @method CartItemInterface[] load()
     * @method CartItemInterface current()
     * @method int getTotalCount()
     * @method int getTotalAmount()
     * @method \Pimcore\Bundle\EcommerceFrameworkBundle\CartManager\CartItem\Listing\Dao getDao()
     */
    class Listing extends \pimcore\model\listing\abstractlisting {
        /**
         * @var array
         *
         * @deprecated use getter/setter methods or $this->data
         */
        public $cartItems;
        /**
         * @var array
         */
        protected $order;
        /**
         * @var array
         */
        protected $orderKey;

        public function __construct() {}
        public function isValidOrderKey($key) {}
        /**
         * @return CartItemInterface[]
         */
        public function getCartItems() {}
        public function setCartItems($cartItems) {}
        public function setCartItemClassName($className) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\CartManager\CartItem\Listing {
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        /**
         * @var string
         */
        protected $className;

        /**
         * @return array
         */
        public function load() {}
        public function getTotalCount() {}
        public function getTotalAmount() {}
        public function setClassName($className) {}
        /**
         * @return string
         */
        public function getClassName() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\Legacy {
    class InterfaceLoader {
        static protected $interfaces;

        /**
         * @deprecated
         * class interface_exists on all interfaces of e-commerce framework
         * this is necessary to make sure that interfaces are loaded during compile time and
         * no error is thrown during container compile when using old interfaces (e.g. IProduct) in
         * custom service implementations.
         *
         * should be removed when BC layer for interfaces is removed
         */
        public static function loadInterfaces() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\VoucherService {
    class Token extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * @var int
         */
        public $voucherSeriesId;
        /**
         * @var string
         */
        public $token;
        /**
         * @var int
         */
        public $length;
        /**
         * @var string
         */
        public $type;
        /**
         * @var int
         */
        public $usages;
        /**
         * @var int
         */
        public $timestamp;

        public static function getByCode($code) {}
        public function isUsed($maxUsages = 1) {}
        public static function isUsedToken($code, $maxUsages = 1) {}
        public function check($maxUsages = null, $isCheckout = false) {}
        /**
         * @return mixed
         */
        public function isReserved() {}
        public static function tokenExists($code) {}
        public function release($cart) {}
        public function apply() {}
        public function unuse() {}
        /**
         * @return int
         */
        public function getTimestamp() {}
        public function setTimestamp($timestamp) {}
        /**
         * @return int
         */
        public function getVoucherSeriesId() {}
        public function setVoucherSeriesId($voucherSeriesId) {}
        /**
         * @return string
         */
        public function getToken() {}
        public function setToken($token) {}
        /**
         * @return int
         */
        public function getLength() {}
        public function setLength($length) {}
        /**
         * @return string
         */
        public function getType() {}
        public function setType($type) {}
        /**
         * @return int
         */
        public function getUsages() {}
        public function setUsages($usages) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setId($id) {}
    }

    class PricingManagerTokenInformation {
        /**
         * Entered voucher token code
         *
         * @var string
         */
        protected $tokenCode;
        /**
         * Corresponding voucher token object
         *
         * @var Token
         */
        protected $tokenObject;
        /**
         * List of error messages that are defined in voucher token conditions of all
         * pricing rules that would take the given voucher token into account but are not
         * applied because some other conditions are not met.
         *
         * @var string[]
         */
        protected $errorMessages;
        /**
         * Flag that indicates if no pricing rules are defined for the given voucher token at all.
         *
         * @var bool
         */
        protected $hasNoValidRule;
        /**
         * List of not applied pricing rules that would take the given voucher token
         * into account but are not applied because some other conditions are not met.
         *
         * @var RuleInterface[]
         */
        protected $notAppliedRules;
        /**
         * List of applied pricing rules that require the given voucher token.
         *
         * @var RuleInterface[]
         */
        protected $appliedRules;

        /**
         * @return string
         */
        public function getTokenCode() : string {}
        public function setTokenCode(string $tokenCode) : void {}
        /**
         * @return Token
         */
        public function getTokenObject() : Token {}
        public function setTokenObject(Token $tokenObject) : void {}
        /**
         * @return string[]
         */
        public function getErrorMessages() : array {}
        public function setErrorMessages(array $errorMessages) : void {}
        /**
         * @return bool
         */
        public function hasNoValidRule() : bool {}
        public function setHasNoValidRule(bool $hasNoValidRule) : void {}
        /**
         * @return RuleInterface[]
         */
        public function getNotAppliedRules() : array {}
        public function setNotAppliedRules(array $notAppliedRules) : void {}
        /**
         * @return RuleInterface[]
         */
        public function getAppliedRules() : array {}
        public function setAppliedRules(array $appliedRules) : void {}
    }

    class Statistic extends \pimcore\model\abstractmodel {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $tokenSeriesId;
        /**
         * @var int
         */
        public $date;

        public function getById($id) {}
        public static function getBySeriesId($seriesId, $usagePeriod = null) {}
        public static function increaseUsageStatistic($seriesId) {}
        public static function cleanUpStatistics($duration, $seriesId = null) {}
        /**
         * @return int
         */
        public function getId() {}
        public function setId($id) {}
        /**
         * @return string
         */
        public function getTokenSeriesId() {}
        public function setTokenSeriesId($tokenSeriesId) {}
        /**
         * @return int
         */
        public function getDate() {}
        public function setDate($date) {}
    }

    class Reservation extends \pimcore\model\abstractmodel {
        public $id;
        public $token;
        public $timestamp;
        public $cart_id;

        public static function get($code, CartInterface $cart = null) {}
        public function exists() {}
        public function check($cart_id) {}
        public static function create($code, $cart_id) {}
        public static function releaseToken($code, CartInterface $cart = null) {}
        /**
         * @return mixed
         */
        public function remove() {}
        public static function cleanUpReservations($duration, $seriesId = null) {}
        public static function reservationExists($code, $cart) {}
        public static function getReservationCount($code) {}
        /**
         * @return mixed
         */
        public function getToken() {}
        public function setToken($token) {}
        /**
         * @return mixed
         */
        public function getCartId() {}
        public function setCartId($cart_id) {}
        /**
         * @return mixed
         */
        public function getId() {}
        public function setId($id) {}
        /**
         * @return mixed
         */
        public function getTimestamp() {}
        public function setTimestamp($timestamp) {}
    }

    class DefaultService implements \pimcore\bundle\ecommerceframeworkbundle\voucherservice\voucherserviceinterface {
        /**
         * @var int
         */
        protected $reservationMinutesThreshold;
        /**
         * @var int
         */
        protected $statisticsDaysThreshold;
        /**
         * @var string
         */
        protected $currentLocale;

        public function __construct(LocaleServiceInterface $localeService, array $options = [ ]) {}
        protected function processOptions(array $options) {}
        protected function configureOptions(OptionsResolver $resolver) {}
        public function checkToken($code, CartInterface $cart) {}
        public function reserveToken($code, CartInterface $cart) {}
        public function releaseToken($code, CartInterface $cart) {}
        public function applyToken($code, CartInterface $cart, AbstractOrder $order) {}
        public function removeAppliedTokenFromOrder(\Pimcore\Model\DataObject\OnlineShopVoucherToken $tokenObject, AbstractOrder $order) {}
/** @var VoucherToken $condition */
        public function getPricingManagerTokenInformationDetails(/** @var VoucherToken $condition */
CartInterface $cart, /** @var VoucherToken $condition */
string $locale = null) : array {}
        public function cleanUpReservations($seriesId = null) {}
        public function cleanUpVoucherSeries(\Pimcore\Model\DataObject\OnlineShopVoucherSeries $series) {}
        public function cleanUpStatistics($seriesId = null) {}
        public function getTokenManager($code) {}
    }


    /**
     * @deprecated use VoucherServiceInterface instead.
     */
    interface IVoucherService {}

    interface VoucherServiceInterface {
        function checkToken($code, CartInterface $cart) ;
        function reserveToken($code, CartInterface $cart) ;
        function releaseToken($code, CartInterface $cart) ;
        function applyToken($code, CartInterface $cart, AbstractOrder $order) ;
        function removeAppliedTokenFromOrder(\Pimcore\Model\DataObject\OnlineShopVoucherToken $tokenObject, AbstractOrder $order) ;
        function getPricingManagerTokenInformationDetails(CartInterface $cart, string $locale = null) : array ;
        function cleanUpReservations($seriesId = null) ;
        function cleanUpVoucherSeries(\Pimcore\Model\DataObject\OnlineShopVoucherSeries $series) ;
        function cleanUpStatistics($seriesId = null) ;
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\VoucherService\Token {
    class Dao extends \pimcore\model\dao\abstractdao {
        public const TABLE_NAME = 'ecommerceframework_vouchertoolkit_tokens';

        public function __construct() {}
        public function getByCode($code) {}
        public function isReserved(CartInterface $cart = null) {}
        public function getTokenUsages($code) {}
        /**
         * @return bool
         */
        public function apply() {}
        /**
         * @return bool
         */
        public function unuse() {}
        public function check($cart) {}
    }

    /**
     * @method Token[] load()
     * @method Token current()
     * @method int getTotalCount()
     * @method \Pimcore\Bundle\EcommerceFrameworkBundle\VoucherService\Token\Listing\Dao getDao()
     */
    class Listing extends \pimcore\model\listing\abstractlisting implements \zend\paginator\adapter\adapterinterface, \zend\paginator\adapteraggregateinterface {
        /**
         * @var Token[]|null
         *
         * @deprecated use getter/setter methods or $this->data
         */
        public $tokens;

        public function __construct() {}
        public function isValidOrderKey($key) {}
        public function setFilterConditions($seriesId, $filter = [ ]) {}
        public static function getBySeriesId($seriesId) {}
        /**
         * @return array
         */
        public function getTokenList() {}
        public static function getCodes($seriesId, $params) {}
        public static function getCountByUsages($usages = 1, $seriesId = null) {}
        public static function getCountBySeriesId($seriesId) {}
        public static function getCountByReservation($seriesId = null) {}
        public static function getCountByLength($length, $seriesId = null) {}
        public static function cleanUpAllTokens($seriesId) {}
        public static function cleanUpTokens($seriesId, $filter = [ ], $maxUsages = 1) {}
        public static function tokensExist($codes) {}
        /**
         * @return array
         */
        public function getTokens() {}
        public function setTokens($tokens) {}
        /**
         * @return \Pimcore\Model\DataObject\Listing|AdapterInterface
         */
        public function getPaginatorAdapter() {}
        public function getItems($offset, $itemCountPerPage) {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Count elements of an object
         *
         * @link http://php.net/manual/en/countable.count.php
         *
         * @return int The custom count as an integer.
         * </p>
         * <p>
         * The return value is cast to an integer.
         */
        public function count() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\VoucherService\Token\Listing {
    class Dao extends \pimcore\model\listing\dao\abstractdao {
        public function load() {}
        public function getTotalCount() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\VoucherService\Reservation {
    class Dao extends \pimcore\model\dao\abstractdao {
        const TABLE_NAME = 'ecommerceframework_vouchertoolkit_reservations';

        public function __construct() {}
        public function get($code, CartInterface $cart = null) {}
        public function create($code, $cart) {}
        /**
         * @return bool
         */
        public function remove() {}
        public static function getReservedTokenCount($seriesId = null) {}
        public static function isReservedToken($token) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\VoucherService\Statistic {
    class Dao extends \pimcore\model\dao\abstractdao {
        const TABLE_NAME = 'ecommerceframework_vouchertoolkit_statistics';

        public function __construct() {}
        public function getById($id) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\VoucherService\TokenManager {
    /**
     * Class Pattern
     */
    class Pattern extends \pimcore\bundle\ecommerceframeworkbundle\voucherservice\tokenmanager\abstracttokenmanager implements \pimcore\bundle\ecommerceframeworkbundle\voucherservice\tokenmanager\exportabletokenmanagerinterface {
        const MAX_PROBABILITY = 0.005;

        protected $template;
        protected $characterPools;

        public function __construct(AbstractVoucherTokenType $configuration) {}
        /**
         * @return bool
         */
        public function isValidSetting() {}
        public function cleanUpCodes($filter = [ ]) {}
        public function checkToken($code, CartInterface $cart) {}
        public function reserveToken($code, CartInterface $cart) {}
        public function applyToken($code, CartInterface $cart, AbstractOrder $order) {}
        public function removeAppliedTokenFromOrder(OnlineShopVoucherToken $tokenObject, AbstractOrder $order) {}
        public function releaseToken($code, CartInterface $cart) {}
        public function getCodes($filter = null) {}
        public function getStatistics($usagePeriod = null) {}
        /**
         * Generates Codes and an according Insert Query, if the MAX_PACKAGE_SIZE
         * may be reached several queries are generated.
         * returns the generated voucher codes if it was successfully - otherwise false
         *
         * @return bool | array  - bool failed - array if codes are generated
         */
        public function insertOrUpdateVoucherSeries() {}
        /**
         * Gets the final length of the token, incl.
         * prefix and separators.
         *
         * @return  int
         */
        public function getFinalTokenLength() {}
        /**
         * Calculates the probability to hit an existing value on a token generation.
         *
         * @return float
         */
        public function getInsertProbability() {}
        protected function isValidGeneration() {}
        /**
         * Calculates the max possible amount of tokens for the specified character pool.
         *
         * @return number
         */
        protected function getMaxCount() {}
        /**
         * Generates a single code.
         *
         * @return string
         */
        protected function generateCode() {}
        protected function formatCode($code) {}
        protected function tokenExists($tokens, $cTokens) {}
        protected function buildInsertQuery($insertTokens) {}
        /**
         * Generates a set of unique tokens according to the given token settings.
         * Returns false if the generation is not possible, due to set insert
         * probability MAX_INSERT_PROBABILITY.
         *
         * @return array|bool
         */
        public function generateCodes() {}
        protected function prepareUsageStatisticData($data, $usagePeriod) {}
        public function prepareConfigurationView($viewParamsBag, $params) {}
/** @var Token $token */
        protected function getExportData(/** @var Token $token */
array $params) {}
        public function cleanUpReservations($duration = 0) {}
        protected function characterPoolExists($poolName) {}
        /**
         * Generates and returns an example token to the given settings.
         *
         * @return string
         */
        public function getExampleToken() {}
        /**
         * @return \Pimcore\Model\DataObject\Fieldcollection\Data\VoucherTokenTypePattern
         */
        public function getConfiguration() {}
        public function setConfiguration($configuration) {}
        /**
         * @return array
         */
        public function getCharacterPools() {}
        public function getCharacterPool() {}
        public function setCharacterPools($characterPools) {}
        public function addCharacterPool($pool) {}
        public function setTemplate($template) {}
        public function setSeriesId($seriesId) {}
        /**
         * @return mixed
         */
        public function getSeriesId() {}
    }

    class Single extends \pimcore\bundle\ecommerceframeworkbundle\voucherservice\tokenmanager\abstracttokenmanager implements \pimcore\bundle\ecommerceframeworkbundle\voucherservice\tokenmanager\exportabletokenmanagerinterface {
        protected $template;

        public function __construct(AbstractVoucherTokenType $configuration) {}
        /**
         * @return bool
         */
        public function isValidSetting() {}
        public function cleanUpCodes($filter = [ ]) {}
        public function cleanupReservations($duration = 0, $seriesId = null) {}
        public function prepareConfigurationView($viewParamsBag, $params) {}
        protected function getExportData(array $params) {}
        /**
         * @return int
         */
        public function getFinalTokenLength() {}
        /**
         * @return bool | string - bool if failed - string if successfully created
         */
        public function insertOrUpdateVoucherSeries() {}
        public function getCodes($params = null) {}
        protected function prepareUsageStatisticData($data, $usagePeriod) {}
        public function getStatistics($usagePeriod = null) {}
        public function reserveToken($code, CartInterface $cart) {}
        public function applyToken($code, CartInterface $cart, AbstractOrder $order) {}
        public function removeAppliedTokenFromOrder(OnlineShopVoucherToken $tokenObject, AbstractOrder $order) {}
        public function releaseToken($code, CartInterface $cart) {}
        public function checkToken($code, CartInterface $cart) {}
        /**
         * @return \Pimcore\Model\DataObject\Fieldcollection\Data\VoucherTokenTypeSingle
         */
        public function getConfiguration() {}
        public function setConfiguration($configuration) {}
        /**
         * @return mixed
         */
        public function getSeriesId() {}
        public function setSeriesId($seriesId) {}
        public function setTemplate($template) {}
    }

    class TokenManagerFactory implements \pimcore\bundle\ecommerceframeworkbundle\voucherservice\tokenmanager\tokenmanagerfactoryinterface {
        /**
         * @var array
         */
        private $mapping;
        /**
         * @var TokenManagerInterface[]
         */
        private $tokenManagers;

        public function __construct(array $mapping) {}
        public function getTokenManager(AbstractVoucherTokenType $configuration) : TokenManagerInterface {}
    }

    abstract class AbstractTokenManager implements \pimcore\bundle\ecommerceframeworkbundle\voucherservice\tokenmanager\tokenmanagerinterface {
        public $configuration;
        public $seriesId;
        public $series;

        public function __construct(AbstractVoucherTokenType $configuration) {}
        /**
         * @return bool
         */
        abstract public function isValidSetting() ;
        abstract public function cleanUpCodes($filter = [ ]) ;
        public function checkToken($code, CartInterface $cart) {}
/** @var OnlineShopVoucherSeries $voucherSeries */
        protected function checkVoucherSeriesIsPublished(/** @var OnlineShopVoucherSeries $voucherSeries */
$code) {}
        protected function checkAllowOncePerCart($code, CartInterface $cart) {}
        protected function checkOnlyToken(CartInterface $cart) {}
        public function exportCsv(array $params) {}
/** @var Token $token */
        public function exportPlain(/** @var Token $token */
array $params) {}
        protected function getExportData(array $params) {}
        abstract public function reserveToken($code, CartInterface $cart) ;
        abstract public function applyToken($code, CartInterface $cart, \Pimcore\Bundle\EcommerceFrameworkBundle\Model\AbstractOrder $order) ;
        abstract public function releaseToken($code, CartInterface $cart) ;
        abstract public function getCodes($filter = null) ;
        abstract public function getStatistics($usagePeriod = null) ;
        /**
         * @return AbstractVoucherTokenType
         */
        abstract public function getConfiguration() ;
        /**
         * Returns bool false if failed - otherwise an array or a string with the codes
         *
         * @return bool | string | array
         */
        abstract public function insertOrUpdateVoucherSeries() ;
        /**
         * @return  int
         */
        abstract public function getFinalTokenLength() ;
        abstract public function cleanUpReservations($duration = 0) ;
        abstract public function prepareConfigurationView($viewParamsBag, $params) ;
    }


    /**
     * @deprecated use ExportableTokenManagerInterface instead.
     */
    interface IExportableTokenManager {}

    /**
     * @deprecated use TokenManagerInterface instead.
     */
    interface ITokenManager {}

    interface TokenManagerFactoryInterface {
        function getTokenManager(AbstractVoucherTokenType $configuration) : TokenManagerInterface ;
    }

    /**
     * @deprecated use TokenManagerFactoryInterface instead.
     */
    interface ITokenManagerFactory {}

    /**
     * Interface ITokenManager
     *
     * Manager for specific token settings object of type AbstractVoucherTokenType.
     * Provides functionality for generating, checking, removing, applying, reserving tokens.
     * Also prepares the view of the Voucher Code Tab and specifies its template.
     */
    interface TokenManagerInterface {
        function __construct(AbstractVoucherTokenType $configuration) ;
        /**
         * Checks if the configuration objects contains valid values to
         * generate the new token(s).
         *
         * @return bool
         */
        function isValidSetting() ;
        function cleanUpCodes($filter = [ ]) ;
        function checkToken($code, CartInterface $cart) ;
        function reserveToken($code, CartInterface $cart) ;
        function applyToken($code, CartInterface $cart, AbstractOrder $order) ;
        function releaseToken($code, CartInterface $cart) ;
        function removeAppliedTokenFromOrder(OnlineShopVoucherToken $tokenObject, AbstractOrder $order) ;
        function getCodes($filter = null) ;
        function getStatistics($usagePeriod = null) ;
        /**
         * @return bool
         */
        function insertOrUpdateVoucherSeries() ;
        /**
         * @return  int
         */
        function getFinalTokenLength() ;
        function cleanUpReservations($duration = 0) ;
        function prepareConfigurationView($viewParamsBag, $params) ;
        /**
         * @return AbstractVoucherTokenType
         */
        function getConfiguration() ;
    }

    interface ExportableTokenManagerInterface {
    const FORMAT_CSV = 'csv';
    const FORMAT_PLAIN = 'plain';
        function exportCsv(array $params) ;
        function exportPlain(array $params) ;
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\Controller {
    /**
     * Class VoucherController
     *
     * @Route("/voucher")
     */
    class VoucherController extends \pimcore\controller\frontendcontroller {
        public function onKernelController(FilterControllerEvent $event) {}
        public function voucherCodeTabAction(Request $request) {}
/** @var \Pimcore\Model\DataObject\OnlineShopVoucherSeries $onlineShopVoucherSeries */
        public function exportTokensAction(/** @var \Pimcore\Model\DataObject\OnlineShopVoucherSeries $onlineShopVoucherSeries */
Request $request) {}
        public function generateAction(Request $request) {}
        public function cleanupAction(Request $request) {}
        public function cleanupReservationsAction(Request $request) {}
    }

    /**
     * Class AdminOrderController
     *
     * @Route("/admin-order")
     */
    class AdminOrderController extends \pimcore\bundle\adminbundle\controller\admincontroller implements \pimcore\controller\templatecontrollerinterface, \pimcore\controller\eventedcontrollerinterface {
    use \pimcore\controller\traits\templatecontrollertrait;

        /**
         * @var OrderManagerInterface
         */
        protected $orderManager;

        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
        public function listAction(Request $request) {}
        public function detailAction(Request $request) {}
        public function itemCancelAction(Request $request) {}
        public function itemEditAction(Request $request) {}
        public function itemComplaintAction(Request $request) {}
    }

    /**
     * Class ConfigController
     *
     * @Route("/config")
     */
    class ConfigController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        /**
         * @Route("/js-config", methods={"GET"})
         *
         * @return string
         */
        public function jsConfigAction() {}
    }

    /**
     * Class IndexController
     *
     * @Route("/index")
     */
    class IndexController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        /**
         * @Route("/get-filter-groups", methods={"GET"})
         *
         * @return \Pimcore\Bundle\AdminBundle\HttpFoundation\JsonResponse
         */
        public function getFilterGroupsAction() {}
        public function getValuesForFilterFieldAction(Request $request) {}
        public function getFieldsAction(Request $request) {}
        /**
         * @Route("/get-all-tenants", methods={"GET"})
         *
         * @return \Pimcore\Bundle\AdminBundle\HttpFoundation\JsonResponse
         */
        public function getAllTenantsAction() {}
    }

    /**
     * Class ConfigController
     *
     * @Route("/pricing")
     */
    class PricingController extends \pimcore\bundle\adminbundle\controller\admincontroller implements \pimcore\controller\eventedcontrollerinterface {
        public function onKernelController(FilterControllerEvent $event) {}
        /**
         * @Route("/list", methods={"GET"})
         */
        public function listAction() {}
        public function getAction(Request $request) {}
        public function addAction(Request $request) {}
        public function deleteAction(Request $request) {}
        public function saveAction(Request $request) {}
        public function saveOrderAction(Request $request) {}
        /**
         * @Route("/get-config", methods={"GET"})
         *
         * @return JsonResponse
         */
        public function getConfigAction() {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    /**
     * Class FindologicController
     *
     * Routing see routing.yml
     */
    class FindologicController extends \pimcore\controller\frontendcontroller {
        public function exportAction(Request $request) {}
        /**
         * @return string
         */
        protected function getExportTableName() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\Controller\Reports {
    /**
     * @Route("/reports/piwik")
     */
    class PiwikController extends \pimcore\bundle\adminbundle\controller\admincontroller {
        public function reportsAction(PiwikReportsProvider $reportsProvider) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\OfferTool {
    /**
     * Abstract base class for offer pimcore objects
     */
    class AbstractOffer extends \pimcore\model\dataobject\concrete {
        /**
         * @return string
         *
         * @throws UnsupportedException
         */
        public function getOffernumber() {}
        public function setOffernumber($offernumber) {}
        /**
         * @throws UnsupportedException
         *
         * @return string|float|int
         */
        public function getTotalPrice() {}
        public function setTotalPriceBeforeDiscount($totalPrice) {}
        /**
         * @throws UnsupportedException
         *
         * @return string|float|int
         */
        public function getTotalPriceBeforeDiscount() {}
        public function setTotalPrice($totalPrice) {}
        /**
         * @throws UnsupportedException
         *
         * @return float
         */
        public function getDiscount() {}
        public function setDiscount($discount) {}
        /**
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getDiscountType() {}
        public function setDiscountType($discountType) {}
        /**
         * @throws UnsupportedException
         *
         * @return \DateTime
         */
        public function getDateCreated() {}
        public function setDateCreated($dateCreated) {}
        /**
         * @throws UnsupportedException
         *
         * @return \DateTime
         */
        public function getDateValidUntil() {}
        public function setDateValidUntil($dateValidUntil) {}
        /**
         * @throws UnsupportedException
         *
         * @return AbstractOfferItem[]
         */
        public function getItems() {}
        public function setItems($items) {}
        /**
         * @throws UnsupportedException
         *
         * @return AbstractOfferItem[]
         */
        public function getCustomItems() {}
        public function setCustomItems($customItems) {}
        /**
         * @throws UnsupportedException
         *
         * @return mixed
         */
        public function getCustomer() {}
        public function setCustomer($customer) {}
        /**
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getCartId() {}
        public function setCartId($cartId) {}
        public function addCustomItemFromProduct(AbstractOfferToolProduct $product, $amount = 1) {}
        public function getCustomItemsByGroup($groupName) {}
        public function getCustomItemByProduct(AbstractOfferToolProduct $product) {}
    }

    /**
     * Abstract base class for pimcore objects who should be used as custom products in the offer tool
     */
    class AbstractOfferToolProduct extends \pimcore\model\dataobject\concrete implements \pimcore\bundle\ecommerceframeworkbundle\model\checkoutableinterface {
        /**
         * should be overwritten in mapped sub classes of product classes
         *
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getOSName() {}
        /**
         * should be overwritten in mapped sub classes of product classes
         *
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getOSProductNumber() {}
        /**
         * defines the name of the availability system for this product.
         * for offline tool there are no availability systems implemented
         *
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getAvailabilitySystemName() {}
        public function getOSIsBookable($quantityScale = 1) {}
        /**
         * defines the name of the price system for this product.
         * there should either be a attribute in pro product object or
         * it should be overwritten in mapped sub classes of product classes
         *
         * @return string
         */
        public function getPriceSystemName() {}
        /**
         * returns instance of price system implementation based on result of getPriceSystemName()
         *
         * @return \Pimcore\Bundle\EcommerceFrameworkBundle\PriceSystem\PriceSystemInterface
         */
        public function getPriceSystemImplementation() {}
        /**
         * returns instance of availability system implementation based on result of getAvailabilitySystemName()
         *
         * @return AvailabilitySystemInterface
         */
        public function getAvailabilitySystemImplementation() {}
        public function getOSPrice($quantityScale = 1) {}
        public function getOSPriceInfo($quantityScale = 1) {}
        public function getOSAvailabilityInfo($quantity = null) {}
        public static function getById($id, $force = false) {}
        /**
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getProductGroup() {}
    }

    /**
     * Abstract base class for offer item pimcore objects
     */
    class AbstractOfferItem extends \pimcore\model\dataobject\concrete {
        /**
         * @throws UnsupportedException
         *
         * @return AbstractOfferToolProduct
         */
        public function getProduct() {}
        public function setProduct($product) {}
        /**
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getProductNumber() {}
        public function setProductNumber($productNumber) {}
        /**
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getProductName() {}
        public function setProductName($productName) {}
        /**
         * @throws UnsupportedException
         *
         * @return float
         */
        public function getAmount() {}
        public function setAmount($amount) {}
        /**
         * @throws UnsupportedException
         *
         * @return string|float|int
         */
        public function getOriginalTotalPrice() {}
        public function setOriginalTotalPrice($originalTotalPrice) {}
        /**
         * @throws UnsupportedException
         *
         * @return string|float|int
         */
        public function getFinalTotalPrice() {}
        public function setFinalTotalPrice($finalTotalPrice) {}
        /**
         * @throws UnsupportedException
         *
         * @return float
         */
        public function getDiscount() {}
        public function setDiscount($discount) {}
        /**
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getDiscountType() {}
        public function setDiscountType($discountType) {}
        /**
         * @return AbstractOrderItem[]
         *
         * @throws UnsupportedException
         */
        public function getSubItems() {}
        public function setSubItems($subItems) {}
        /**
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getComment() {}
        public function setComment($comment) {}
        /**
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getCartItemKey() {}
        public function setCartItemKey($cartItemKey) {}
    }

    class DefaultService implements \pimcore\bundle\ecommerceframeworkbundle\offertool\serviceinterface {
        /**
         * @var string
         */
        protected $offerClass;
        /**
         * @var string
         */
        protected $offerItemClass;
        /**
         * @var string
         */
        protected $parentFolderPath;
        /**
         * @var Folder
         */
        protected $parentFolder;

        public function __construct(string $offerClass, string $offerItemClass, string $parentFolderPath) {}
        protected function getParentFolder() : Folder {}
        public function createNewOfferFromCart(CartInterface $cart, array $excludeItems = [ ]) {}
        protected function getExcludedItemKeys($excludeItems) {}
/** @var AbstractOffer $offer */
        protected function getNewOfferObject(/** @var AbstractOffer $offer */
$tempOfferNumber) {}
        /**
         * @return AbstractOfferItem
         */
        public function getNewOfferItemObject() {}
        protected function createOfferItem(CartItemInterface $item, $parent) {}
        protected function updateOfferItem(CartItemInterface $cartItem, AbstractOfferItem $offerItem) {}
        protected function priceTransformationHook(Decimal $price) : Decimal {}
        protected function setCurrentCustomer(AbstractOffer $offer) {}
        public function updateOfferFromCart(AbstractOffer $offer, CartInterface $cart, array $excludeItems = [ ], $save = true) {}
        public function updateTotalPriceOfOffer(AbstractOffer $offer) {}
        public function getOffersForCart(CartInterface $cart) {}
        public function createCustomOfferToolItem($product, $offer) {}
    }


    /**
     * @deprecated use ServiceInterface instead.
     */
    interface IService {}

    interface ServiceInterface {
    const DISCOUNT_TYPE_AMOUNT = 'amount';
    const DISCOUNT_TYPE_PERCENT = 'percent';
        function createNewOfferFromCart(CartInterface $cart, array $excludeItems = [ ]) ;
        function updateOfferFromCart(AbstractOffer $offer, CartInterface $cart, array $excludeItems = [ ]) ;
        function updateTotalPriceOfOffer(AbstractOffer $offer) ;
        function getOffersForCart(CartInterface $cart) ;
        /**
         * @return AbstractOfferItem
         */
        function getNewOfferItemObject() ;
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\AvailabilitySystem {
    class AvailabilitySystem implements \pimcore\bundle\ecommerceframeworkbundle\availabilitysystem\availabilitysysteminterface {
        public function getAvailabilityInfo(CheckoutableInterface $product, $quantityScale = 1, $products = null) {}
    }

    class Availability implements \pimcore\bundle\ecommerceframeworkbundle\availabilitysystem\availabilityinterface {
        /**
         * @var CheckoutableInterface
         */
        private $product;
        /**
         * @var bool
         */
        private $available;

        public function __construct(CheckoutableInterface $product, bool $available) {}
        /**
         * @return CheckoutableInterface
         */
        public function getProduct() : CheckoutableInterface {}
        /**
         * @inheritDoc
         */
        public function getAvailable() : bool {}
    }

    class AvailabilitySystemLocator extends \pimcore\bundle\ecommerceframeworkbundle\dependencyinjection\servicelocator\nameservicelocator implements \pimcore\bundle\ecommerceframeworkbundle\availabilitysystem\availabilitysystemlocatorinterface {
        public function getAvailabilitySystem(string $name = null) : AvailabilitySystemInterface {}
        public function hasAvailabilitySystem(string $name) : bool {}
        protected function buildNotFoundException(string $name) : UnsupportedException {}
    }


    interface AvailabilitySystemLocatorInterface {
        function getAvailabilitySystem(string $name = null) : AvailabilitySystemInterface ;
        function hasAvailabilitySystem(string $name) : bool ;
    }

    interface AvailabilityInterface {
        /**
         * @return bool
         */
        function getAvailable() ;
    }

    interface AvailabilitySystemInterface {
        function getAvailabilityInfo(CheckoutableInterface $product, $quantityScale = 1, $products = null) ;
    }

    /**
     * @deprecated use Pimcore\Bundle\EcommerceFrameworkBundle\AvailabilitySystem\AvailabilityInterface instead.
     */
    interface IAvailability {}

    /**
     * @deprecated use Pimcore\Bundle\EcommerceFrameworkBundle\AvailabilitySystem\AvailabilitySystemLocatorInterface instead.
     */
    interface IAvailabilitySystemLocator {}

    /**
     * @deprecated use Pimcore\Bundle\EcommerceFrameworkBundle\AvailabilitySystem\AvailabilitySystemInterface instead.
     */
    interface IAvailabilitySystem {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\Type {
    /**
     * This value object is used throughout the ecommerce framework to represent a price value.
     *
     * IMPORTANT: if you do any changes, make sure to keep this object immutable. Every operation needs
     * to return a new instance with the changed value!
     */
    class Decimal {
        const INTEGER_NUMBER_REGEXP = '/^([+\-]?)\d+$/';

        /**
         * @var int
         */
        static protected $defaultScale;
        /**
         * @var int
         */
        private $amount;
        /**
         * Precision after comma - actual amount will be amount divided by 10^scale
         *
         * @var int
         */
        private $scale;

        protected function __construct(int $amount, int $scale) {}
        public static function setDefaultScale(int $scale) {}
        private static function validateScale(int $scale) {}
        private static function validateIntegerBounds($amount) {}
        private static function toIntValue($value, int $roundingMode = null) : int {}
        public static function create($amount, int $scale = null, int $roundingMode = null) : self {}
        public static function fromRawValue(int $amount, int $scale = null) : self {}
        public static function fromString(string $amount, int $scale = null, int $roundingMode = null) : self {}
        public static function fromNumeric($amount, int $scale = null, int $roundingMode = null) : self {}
        public static function fromDecimal(Decimal $amount, int $scale = null) : self {}
        public static function zero(int $scale = null) : self {}
        /**
         * Returns the used scale factor
         *
         * @return int
         */
        public function getScale() : int {}
        /**
         * Returns the internal representation value
         *
         * WARNING: use this with caution as the represented value depends on the scale!
         *
         * @return int
         */
        public function asRawValue() : int {}
        /**
         * Returns a numeric representation
         *
         * @return int|float
         */
        public function asNumeric() {}
        public function asString(int $digits = null) : string {}
        private function truncateDecimalString(string $amount, int $digits) : string {}
        /**
         * Default string representation
         *
         * @return string
         */
        public function __toString() : string {}
        public function withScale(int $scale, int $roundingMode = null) : self {}
        public function equals(Decimal $other) : bool {}
        public function notEquals(Decimal $other) : bool {}
        public function compare(Decimal $other) : int {}
        public function greaterThan(Decimal $other) : bool {}
        public function greaterThanOrEqual(Decimal $other) : bool {}
        public function lessThan(Decimal $other) : bool {}
        public function lessThanOrEqual(Decimal $other) : bool {}
        /**
         * Checks if amount is zero
         *
         * @return bool
         */
        public function isZero() : bool {}
        /**
         * Checks if amount is positive. Not: zero is NOT handled as positive.
         *
         * @return bool
         */
        public function isPositive() : bool {}
        /**
         * Checks if amount is negative
         *
         * @return bool
         */
        public function isNegative() : bool {}
        /**
         * Returns the absolute amount
         *
         * @return Decimal
         */
        public function abs() : self {}
        public function add($other) : self {}
        public function sub($other) : self {}
        public function mul($other, int $roundingMode = null) : self {}
        public function div($other, int $roundingMode = null) : self {}
        /**
         * Returns the additive inverse of a value (e.g. 5 returns -5, -5 returns 5)
         *
         * @example Decimal::create(5)->toAdditiveInverse() = -5
         * @example Decimal::create(-5)->toAdditiveInverse() = 5
         *
         * @return Decimal
         */
        public function toAdditiveInverse() : self {}
        public function toPercentage($percentage, int $roundingMode = null) : self {}
        public function discount($discount, int $roundingMode = null) : self {}
        public function percentageOf(Decimal $other) {}
        public function discountPercentageOf(Decimal $other) {}
        private function getScalarOperand($operand) {}
        private function assertSameScale(Decimal $other, string $message = null) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\PriceSystem {
    /**
     * Base implementation for a lazy loading price info
     */
    class LazyLoadingPriceInfo extends \pimcore\bundle\ecommerceframeworkbundle\pricesystem\abstractpriceinfo implements \pimcore\bundle\ecommerceframeworkbundle\pricesystem\priceinfointerface {
        /**
         * @var PriceInfoInterface[]
         */
        protected $priceRegistry;

        public static function getInstance() {}
        public function __call($name, $arg) {}
    }

    class Price implements \pimcore\bundle\ecommerceframeworkbundle\pricesystem\priceinterface {
        /**
         * @var Currency
         */
        private $currency;
        /**
         * @var Decimal
         */
        private $grossAmount;
        /**
         * @var Decimal
         */
        private $netAmount;
        /**
         * @var string
         */
        private $taxEntryCombinationMode;
        /**
         * @var bool
         */
        private $minPrice;
        /**
         * @var TaxEntry[]
         */
        private $taxEntries;

        public function __construct(Decimal $amount, Currency $currency, bool $minPrice = false) {}
        public function __toString() {}
        /**
         * @inheritdoc
         */
        public function isMinPrice() : bool {}
        public function setAmount(Decimal $amount, string $priceMode = self::PRICE_MODE_GROSS, bool $recalc = false) {}
        /**
         * @inheritdoc
         */
        public function getAmount() : Decimal {}
        public function setCurrency(Currency $currency) {}
        /**
         * @inheritdoc
         */
        public function getCurrency() : Currency {}
        /**
         * @inheritdoc
         */
        public function getGrossAmount() : Decimal {}
        /**
         * @inheritdoc
         */
        public function getNetAmount() : Decimal {}
        /**
         * @return TaxEntry[]
         */
        public function getTaxEntries() : array {}
        /**
         * @inheritdoc
         */
        public function getTaxEntryCombinationMode() : string {}
        public function setGrossAmount(Decimal $grossAmount, bool $recalc = false) {}
        public function setNetAmount(Decimal $netAmount, bool $recalc = false) {}
        public function setTaxEntries(array $taxEntries) {}
        public function setTaxEntryCombinationMode(string $taxEntryCombinationMode) {}
        protected function updateTaxes(string $calculationMode) {}
    }

    class AbstractPriceInfo implements \pimcore\bundle\ecommerceframeworkbundle\pricesystem\priceinfointerface {
        /**
         * @var PriceSystemInterface
         */
        private $priceSystem;
        /**
         * @var int
         */
        protected $quantity;
        /**
         * @var CheckoutableInterface
         */
        protected $product;
        /**
         * @var CheckoutableInterface[]
         */
        protected $products;

        /**
         * @return AbstractPriceInfo
         */
        public static function getInstance() {}
        public function setQuantity($quantity) {}
        /**
         * @inheritdoc
         */
        public function getQuantity() {}
        /**
         * @inheritdoc
         */
        public function isMinPrice() : bool {}
        public function setPriceSystem(PriceSystemInterface $priceSystem) {}
        /**
         * @return PriceSystemInterface
         */
        protected function getPriceSystem() {}
        /**
         * @inheritdoc
         */
        public function getPrice() : PriceInterface {}
        /**
         * @inheritdoc
         */
        public function getTotalPrice() : PriceInterface {}
        public function setProduct(CheckoutableInterface $product) {}
        /**
         * @inheritdoc
         */
        public function getProduct() {}
        public function setProducts($products) {}
        public function getProducts() {}
    }

    abstract class AbstractPriceSystem implements \pimcore\bundle\ecommerceframeworkbundle\pricesystem\pricesysteminterface {
        /**
         * @var PricingManagerLocatorInterface
         */
        protected $pricingManagers;

        public function __construct(PricingManagerLocatorInterface $pricingManagers) {}
        public function getPriceInfo(CheckoutableInterface $product, $quantityScale = null, $products = null) : PriceInfoInterface {}
        protected function initPriceInfoInstance($quantityScale, CheckoutableInterface $product, $products) {}
        protected function getPricingManager() : PricingManagerInterface {}
        abstract public function createPriceInfoInstance($quantityScale, CheckoutableInterface $product, $products) ;
        /**
         * Sample implementation for getting the correct OnlineShopTaxClass. In this case Tax Class is retrieved from
         * Website Setting and if no Website Setting is set it creates an empty new Tax Class.
         *
         * Should be overwritten in custom price systems with suitable implementation.
         *
         * @return OnlineShopTaxClass
         */
        protected function getDefaultTaxClass() {}
        public function getTaxClassForProduct(CheckoutableInterface $product) {}
        public function getTaxClassForPriceModification(CartPriceModificatorInterface $modificator) {}
        /**
         * @return TaxCalculationService
         */
        protected function getTaxCalculationService() {}
    }

    class PriceSystemLocator extends \pimcore\bundle\ecommerceframeworkbundle\dependencyinjection\servicelocator\nameservicelocator implements \pimcore\bundle\ecommerceframeworkbundle\pricesystem\pricesystemlocatorinterface {
        public function getPriceSystem(string $name = null) : PriceSystemInterface {}
        public function hasPriceSystem(string $name) : bool {}
        protected function buildNotFoundException(string $name) : UnsupportedException {}
    }

    /**
     * Attribute info for attribute price system
     */
    class AttributePriceInfo extends \pimcore\bundle\ecommerceframeworkbundle\pricesystem\abstractpriceinfo implements \pimcore\bundle\ecommerceframeworkbundle\pricesystem\priceinfointerface {
        /**
         * @var PriceInterface
         */
        protected $price;
        /**
         * @var PriceInterface
         */
        protected $totalPrice;

        public function __construct(PriceInterface $price, $quantity, PriceInterface $totalPrice) {}
        public function getPrice() : PriceInterface {}
        public function getTotalPrice() : PriceInterface {}
        public function __call($name, $arguments) {}
    }

    class AttributePriceSystem extends \pimcore\bundle\ecommerceframeworkbundle\pricesystem\cachingpricesystem implements \pimcore\bundle\ecommerceframeworkbundle\pricesystem\pricesysteminterface {
        /**
         * @var EnvironmentInterface
         */
        protected $environment;
        /**
         * @var string
         */
        protected $attributeName;
        /**
         * @var string
         */
        protected $priceType;
        /**
         * @var string
         */
        protected $priceClass;

        public function __construct(PricingManagerLocatorInterface $pricingManagers, EnvironmentInterface $environment, array $options = [ ]) {}
        protected function processOptions(array $options) {}
        protected function configureOptions(OptionsResolver $resolver) {}
        public function createPriceInfoInstance($quantityScale, CheckoutableInterface $product, $products) : PriceInfoInterface {}
        public function filterProductIds($productIds, $fromPrice, $toPrice, $order, $offset, $limit) {}
        protected function calculateAmount(CheckoutableInterface $product, $products) : Decimal {}
        /**
         * Returns default currency based on environment settings
         *
         * @return Currency
         */
        protected function getDefaultCurrency() : Currency {}
        protected function getPriceClassInstance(Decimal $amount) : PriceInterface {}
    }

    /**
     * Price system which caches created price info objects per product and request
     */
    abstract class CachingPriceSystem extends \pimcore\bundle\ecommerceframeworkbundle\pricesystem\abstractpricesystem implements \pimcore\bundle\ecommerceframeworkbundle\pricesystem\cachingpricesysteminterface {
        /**
         * @var PriceInfoInterface[] $priceInfos
         */
        protected $priceInfos;

        public function getPriceInfo(CheckoutableInterface $product, $quantityScale = 1, $products = null) : PriceInfoInterface {}
        public function loadPriceInfos($productEntries, $options) {}
        public function clearPriceInfos($productEntries, $options) {}
        public function filterProductIds($productIds, $fromPrice, $toPrice, $order, $offset, $limit) {}
    }

    class ModificatedPrice extends \pimcore\bundle\ecommerceframeworkbundle\pricesystem\price implements \pimcore\bundle\ecommerceframeworkbundle\pricesystem\modificatedpriceinterface {
        /**
         * @var null|string
         */
        protected $description;
        /**
         * @var null|RuleInterface
         */
        protected $rule;

        public function __construct(Decimal $amount, Currency $currency, bool $minPrice = false, string $description = null) {}
        /**
         * @return RuleInterface|null
         */
        public function getRule() {}
        public function setRule($rule) {}
        /**
         * @return string
         */
        public function getDescription() {}
        public function setDescription(string $description = null) {}
    }


    /**
     * @deprecated use CachingPriceSystemInterface instead.
     */
    interface ICachingPriceSystem {}

    interface PriceSystemInterface {
        function getPriceInfo(CheckoutableInterface $product, $quantityScale = null, $products = null) : PriceInfoInterface ;
        function filterProductIds($productIds, $fromPrice, $toPrice, $order, $offset, $limit) ;
        function getTaxClassForProduct(CheckoutableInterface $product) ;
        function getTaxClassForPriceModification(CartPriceModificatorInterface $modificator) ;
    }

    interface PriceSystemLocatorInterface {
        function getPriceSystem(string $name = null) : PriceSystemInterface ;
        function hasPriceSystem(string $name) : bool ;
    }

    /**
     * Interface for price implementations of online shop framework
     */
    interface PriceInterface {
    const PRICE_MODE_NET = 'net';
    const PRICE_MODE_GROSS = 'gross';
        /**
         * Returns $grossAmount
         *
         * @return Decimal
         */
        function getAmount() : Decimal ;
        /**
         * @return Currency
         */
        function getCurrency() : Currency ;
        /**
         * @return bool
         */
        function isMinPrice() : bool ;
        function setAmount(Decimal $amount, string $priceMode = self::PRICE_MODE_GROSS, bool $recalc = false) ;
        /**
         * Returns gross amount of price
         *
         * @return Decimal
         */
        function getGrossAmount() : Decimal ;
        /**
         * Returns net amount of price
         *
         * @return Decimal
         */
        function getNetAmount() : Decimal ;
        /**
         * Returns tax entries of price as an array
         *
         * @return TaxEntry[]
         */
        function getTaxEntries() : array ;
        /**
         * Returns tax entry combination mode needed for tax calculation
         *
         * @return string
         */
        function getTaxEntryCombinationMode() : string ;
        function setGrossAmount(Decimal $grossAmount, bool $recalc = false) ;
        function setNetAmount(Decimal $netAmount, bool $recalc = false) ;
        function setTaxEntries(array $taxEntries) ;
        function setTaxEntryCombinationMode(string $taxEntryCombinationMode) ;
    }

    interface CachingPriceSystemInterface extends \pimcore\bundle\ecommerceframeworkbundle\pricesystem\pricesysteminterface {
        function loadPriceInfos($productEntries, $options) ;
        function clearPriceInfos($productEntries, $options) ;
    }

    /**
     * Interface for prices returned by price modifcators
     */
    interface ModificatedPriceInterface extends \pimcore\bundle\ecommerceframeworkbundle\pricesystem\priceinterface {
        /**
         * @return string
         */
        function getDescription() ;
    }

    /**
     * @deprecated use PriceSystemInterface instead.
     */
    interface IPriceSystem {}

    /**
     * @deprecated use ModificatedPriceInterface instead.
     */
    interface IModificatedPrice {}

    /**
     * @deprecated use PriceSystemLocatorInterface instead.
     */
    interface IPriceSystemLocator {}

    /**
     * @deprecated use PriceInfoInterface instead.
     */
    interface IPriceInfo {}

    /**
     * @deprecated use PriceInterface instead.
     */
    interface IPrice {}

    /**
     * Interface for PriceInfo implementations of online shop framework
     */
    interface PriceInfoInterface {
    const MIN_PRICE = 'min';
        /**
         * Returns single price
         *
         * @return PriceInterface
         */
        function getPrice() : PriceInterface ;
        /**
         * Returns total price (single price * quantity)
         *
         * @return PriceInterface
         */
        function getTotalPrice() : PriceInterface ;
        /**
         * Returns if price is a minimal price (e.g. when having many product variants they might have a from price)
         *
         * @return bool
         */
        function isMinPrice() : bool ;
        /**
         * Returns quantity
         *
         * @return int|string
         */
        function getQuantity() ;
        function setQuantity($quantity) ;
        function setPriceSystem(PriceSystemInterface $priceSystem) ;
        function setProduct(CheckoutableInterface $product) ;
        /**
         * Returns product
         *
         * @return CheckoutableInterface
         */
        function getProduct() ;
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\PriceSystem\TaxManagement {
    class TaxEntry {
        const CALCULATION_MODE_FIXED = 'fixed';
        const CALCULATION_MODE_ONE_AFTER_ANOTHER = 'oneAfterAnother';
        const CALCULATION_MODE_COMBINE = 'combine';

        /**
         * @var TaxEntryFieldcollection
         */
        protected $entry;
        /**
         * @var float
         */
        protected $percent;
        /**
         * @var Decimal
         */
        protected $amount;
        /**
         * @var string
         */
        protected $taxId;

        public function __construct($percent, Decimal $amount, string $taxId = null, TaxEntryFieldcollection $entry = null) {}
        /**
         * @return float
         */
        public function getPercent() {}
        public function setPercent($percent) {}
        public function setEntry(TaxEntryFieldcollection $entry) {}
        /**
         * @return TaxEntryFieldcollection
         */
        public function getEntry() : TaxEntryFieldcollection {}
        /**
         * @return Decimal
         */
        public function getAmount() : Decimal {}
        public function setAmount(Decimal $amount) {}
        /**
         * @return string
         */
        public function getTaxId() {}
        public function setTaxId(string $taxId = null) {}
        public static function convertTaxEntries(OnlineShopTaxClass $taxClass) {}
    }

    class TaxCalculationService {
        const CALCULATION_FROM_GROSS = 'gross';
        const CALCULATION_FROM_NET = 'net';

        public function updateTaxes(PriceInterface $price, string $calculationMode = self::CALCULATION_FROM_NET) {}
        protected function calculationFromNet(PriceInterface $price) : PriceInterface {}
/** @var TaxEntry[] $reverseTaxEntries */
        protected function calculationFromGross(/** @var TaxEntry[] $reverseTaxEntries */
PriceInterface $price) : PriceInterface {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\Model {
    /**
     * Class for product entry of a set product - container for product and quantity
     */
    class AbstractSetProductEntry {
        /**
         * @var int
         */
        private $quantity;
        /**
         * @var CheckoutableInterface
         */
        private $product;

        public function __construct(CheckoutableInterface $product, $quantity = 1) {}
        public function setProduct(CheckoutableInterface $product) {}
        /**
         * @return CheckoutableInterface
         */
        public function getProduct() {}
        public function setQuantity($quantity) {}
        /**
         * @return int
         */
        public function getQuantity() {}
        /**
         * returns id of set product
         *
         * @return int
         */
        public function getId() {}
    }

    /**
     * Abstract base class for order pimcore objects
     */
    class AbstractOrder extends \pimcore\model\dataobject\concrete {
        const ORDER_STATE_ABORTED = 'aborted';
        const ORDER_STATE_PAYMENT_AUTHORIZED = 'paymentAuthorized';
        const ORDER_STATE_PAYMENT_INIT = 'paymentInit';
        const ORDER_STATE_PAYMENT_PENDING = 'paymentPending';
        const ORDER_PAYMENT_STATE_ABORTED_BUT_RESPONSE = 'abortedButResponseReceived';
        const ORDER_STATE_CANCELLED = 'cancelled';
        const ORDER_STATE_COMMITTED = 'committed';

        /**
         * @return string
         *
         * @throws UnsupportedException
         */
        public function getOrdernumber() {}
        public function setOrdernumber($ordernumber) {}
        /**
         * @throws UnsupportedException
         *
         * @return float
         */
        public function getSubTotalPrice() {}
        public function setSubTotalPrice($subTotalPrice) {}
        /**
         * @throws UnsupportedException
         *
         * @return float
         */
        public function getSubTotalNetPrice() {}
        public function setSubTotalNetPrice($subTotalPrice) {}
        /**
         * @throws UnsupportedException
         *
         * @return float
         */
        public function getTotalPrice() {}
        public function setTotalPrice($totalPrice) {}
        /**
         * @throws UnsupportedException
         *
         * @return float
         */
        public function getTotalNetPrice() {}
        public function setTotalNetPrice($totalPrice) {}
        /**
         * @throws UnsupportedException
         *
         * @return array
         */
        public function getTaxInfo() {}
        public function setTaxInfo($taxInfo) {}
        /**
         * @throws UnsupportedException
         *
         * @return \DateTime
         */
        public function getOrderdate() {}
        public function setOrderdate($orderdate) {}
        /**
         * @throws UnsupportedException
         *
         * @return AbstractOrderItem[]
         */
        public function getItems() {}
        public function setItems($items) {}
        /**
         * @throws UnsupportedException
         *
         * @return AbstractOrderItem[]
         */
        public function getGiftItems() {}
        public function setGiftItems($giftItems) {}
        /**
         * @throws UnsupportedException
         * committed
         *
         * @return mixed
         */
        public function getCustomer() {}
        public function setCustomer($customer) {}
        /**
         * @throws UnsupportedException
         *
         * @return \Pimcore\Model\DataObject\Fieldcollection
         */
        public function getPriceModifications() {}
        public function setPriceModifications($priceModifications) {}
        /**
         * @return string
         */
        public function getOrderState() {}
        public function setOrderState($orderState) {}
        /**
         * @return int
         */
        public function getCartId() {}
        public function setCartId($cartId) {}
        /**
         * @throws UnsupportedException
         *
         * @return \Pimcore\Model\DataObject\Fieldcollection
         */
        public function getPaymentInfo() {}
        public function setPaymentInfo($paymentInfo) {}
        /**
         * returns latest payment info entry
         *
         * @return \Pimcore\Bundle\EcommerceFrameworkBundle\Model\AbstractPaymentInformation
         */
        public function getLastPaymentInfo() {}
        /**
         * @return mixed
         */
        public function getComment() {}
        public function setComment($comment) {}
        /**
         * @return mixed
         */
        public function getCustomerEMail() {}
        public function setCustomerEMail($customerEMail) {}
        /**
         * @return mixed
         */
        public function getCustomerCountry() {}
        public function setCustomerCountry($customerCountry) {}
        /**
         * @return mixed
         */
        public function getCustomerCity() {}
        public function setCustomerCity($customerCity) {}
        /**
         * @return mixed
         */
        public function getCustomerZip() {}
        public function setCustomerZip($customerZip) {}
        /**
         * @return mixed
         */
        public function getCustomerStreet() {}
        public function setCustomerStreet($customerStreet) {}
        /**
         * @return mixed
         */
        public function getCustomerCompany() {}
        public function setCustomerCompany($customerCompany) {}
        /**
         * @return string
         */
        public function getCustomerFirstname() {}
        public function setCustomerFirstname($customerFirstname) {}
        /**
         * @return string
         */
        public function getCustomerLastname() {}
        public function setCustomerLastname($customerLastname) {}
        /**
         * @return string
         */
        public function getDeliveryEMail() {}
        public function setDeliveryEMail($deliveryEMail) {}
        /**
         * @return string
         */
        public function getDeliveryCountry() {}
        public function setDeliveryCountry($deliveryCountry) {}
        /**
         * @return string
         */
        public function getDeliveryCity() {}
        public function setDeliveryCity($deliveryCity) {}
        /**
         * @return string
         */
        public function getDeliveryZip() {}
        public function setDeliveryZip($deliveryZip) {}
        /**
         * @return string
         */
        public function getDeliveryStreet() {}
        public function setDeliveryStreet($deliveryStreet) {}
        /**
         * @return string
         */
        public function getDeliveryCompany() {}
        public function setDeliveryCompany($deliveryCompany) {}
        /**
         * @return string
         */
        public function getDeliveryFirstname() {}
        public function setDeliveryFirstname($deliveryFirstname) {}
        /**
         * @return string
         */
        public function getDeliveryLastname() {}
        public function setDeliveryLastname($deliveryLastname) {}
        /**
         * @return bool
         *
         * @throws UnsupportedException
         */
        public function hasDeliveryAddress() {}
        public function setCurrency($currency) {}
        /**
         * @return string
         */
        public function getCurrency() {}
        /**
         * Get voucherTokens - Voucher Tokens
         *
         * @return array
         */
        public function getVoucherTokens() {}
        public function setVoucherTokens($voucherTokens) {}
        /**
         * return cart modification time stamp
         *
         * @return int
         */
        public function getCartModificationTimestamp() {}
    }

    abstract class AbstractVoucherSeries extends \pimcore\model\dataobject\concrete {
        /**
         * @return \Pimcore\Model\DataObject\Fieldcollection
         */
        abstract public function getTokenSettings() ;
        /**
         * @return bool|TokenManagerInterface
         *
         * @throws \Pimcore\Bundle\EcommerceFrameworkBundle\Exception\InvalidConfigException
         */
        public function getTokenManager() {}
        /**
         * @return array|bool
         */
        public function getExistingLengths() {}
    }

    /**
     * Abstract base class for order item pimcore objects
     */
    class AbstractOrderItem extends \pimcore\model\dataobject\concrete {
        /**
         * @throws UnsupportedException
         *
         * @return \Pimcore\Bundle\EcommerceFrameworkBundle\Model\CheckoutableInterface
         */
        public function getProduct() {}
        public function setProduct($product) {}
        /**
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getProductNumber() {}
        public function setProductNumber($productNumber) {}
        /**
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getProductName() {}
        public function setProductName($productName) {}
        /**
         * @throws UnsupportedException
         *
         * @return float
         */
        public function getAmount() {}
        public function setAmount($amount) {}
        /**
         * @throws UnsupportedException
         *
         * @return float
         */
        public function getTotalPrice() {}
        public function setTotalPrice($totalPrice) {}
        /**
         * @throws UnsupportedException
         *
         * @return float
         */
        public function getTotalNetPrice() {}
        public function setTotalNetPrice($totalNetPrice) {}
        /**
         * @throws UnsupportedException
         *
         * @return array
         */
        public function getTaxInfo() {}
        public function setTaxInfo($taxInfo) {}
        /**
         * @return AbstractOrderItem[]
         *
         * @throws UnsupportedException
         */
        public function getSubItems() {}
        public function setSubItems($subItems) {}
        /**
         * @throws UnsupportedException
         *
         * @return \Pimcore\Model\DataObject\Fieldcollection
         */
        public function getPricingRules() {}
        public function setPricingRules($pricingRules) {}
        /**
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getOrderState() {}
        public function setOrderState($orderState) {}
        /**
         * is the order item cancel able
         *
         * @return bool
         */
        public function isCancelAble() {}
        /**
         * is the order item edit able
         *
         * @return bool
         */
        public function isEditAble() {}
        /**
         * ist eine rückerstattung erlaubt
         *
         * @return bool
         */
        public function isComplaintAble() {}
        /**
         * @return bool
         */
        public function isCanceled() {}
        /**
         * @return AbstractOrder
         */
        public function getOrder() {}
    }

    /**
     * Abstract base class for pimcore objects who should be used as product categories in the online shop framework
     */
    class AbstractCategory extends \pimcore\model\dataobject\concrete {
        /**
         * defines if product is visible in product index queries for parent categories of product category.
         * e.g.
         *   football
         *     - shoes
         *     - shirts
         *
         * all products if category shoes or shirts are visible in queries for category football
         *
         * @return bool
         */
        public function getOSProductsInParentCategoryVisible() {}
    }

    /**
     * Abstract base class for voucher token type field collections
     */
    abstract class AbstractVoucherTokenType extends \pimcore\model\dataobject\fieldcollection\data\abstractdata {}

    /**
     * Abstract base class for filter definition type field collections for category filter
     */
    abstract class CategoryFilterDefinitionType extends \pimcore\bundle\ecommerceframeworkbundle\model\abstractfilterdefinitiontype {
        /**
         * @return string
         */
        public function getField() {}
        /**
         * @return bool
         */
        public function getIncludeParentCategories() {}
    }

    /**
     * Abstract base class for pimcore objects who should be used as products in the online shop framework
     */
    class AbstractProduct extends \pimcore\model\dataobject\concrete implements \pimcore\bundle\ecommerceframeworkbundle\model\productinterface, \pimcore\bundle\ecommerceframeworkbundle\model\indexableinterface, \pimcore\bundle\ecommerceframeworkbundle\model\checkoutableinterface {
        /**
         * defines if product is included into the product index. If false, product doesn't appear in product index.
         *
         * @return bool
         */
        public function getOSDoIndexProduct() {}
        public function isActive($inProductList = false) {}
        /**
         * defines the name of the price system for this product.
         * there should either be a attribute in pro product object or
         * it should be overwritten in mapped sub classes of product classes
         *
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getPriceSystemName() {}
        /**
         * returns product type for product index (either object or variant).
         * by default it returns type of object, but it may be overwritten if necessary.
         *
         * @return string
         */
        public function getOSIndexType() {}
        /**
         * returns parent id for product index.
         * by default it returns id of parent object, but it may be overwritten if necessary.
         *
         * @return int
         */
        public function getOSParentId() {}
        /**
         * returns array of categories.
         * has to be overwritten either in pimcore object or mapped sub class.
         *
         * @throws UnsupportedException
         *
         * @return array
         */
        public function getCategories() {}
        /**
         * called by default CommitOrderProcessor to get the product name to store it in the order item
         * should be overwritten in mapped sub classes of product classes
         *
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getOSName() {}
        /**
         * called by default CommitOrderProcessor to get the product number to store it in the order item
         * should be overwritten in mapped sub classes of product classes
         *
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getOSProductNumber() {}
        /**
         * defines the name of the availability system for this product.
         * there should either be a attribute in pro product object or
         * it should be overwritten in mapped sub classes of product classes
         *
         * @throws UnsupportedException
         *
         * @return string
         */
        public function getAvailabilitySystemName() {}
        public function getOSIsBookable($quantityScale = 1) {}
        /**
         * returns instance of price system implementation based on result of getPriceSystemName()
         *
         * @return PriceSystemInterface
         */
        public function getPriceSystemImplementation() {}
        /**
         * returns instance of availability system implementation based on result of getAvailabilitySystemName()
         *
         * @return AvailabilitySystemInterface
         */
        public function getAvailabilitySystemImplementation() {}
        public function getOSPrice($quantityScale = 1) {}
        public function getOSPriceInfo($quantityScale = 1) {}
        public function getOSAvailabilityInfo($quantity = null) {}
    }

    class DefaultMockup implements \pimcore\bundle\ecommerceframeworkbundle\model\productinterface {
        protected $id;
        protected $params;
        protected $relations;

        public function __construct($id, $params, $relations) {}
        /**
         * @return mixed
         */
        public function getParams() {}
        public function getParam($key) {}
        public function setParams($params) {}
        /**
         * @return array
         */
        public function getRelations() {}
        public function setRelations($relations) {}
        /**
         * @return mixed
         */
        public function getId() {}
        public function getRelationAttribute($attributeName) {}
        public function __call($method, $args) {}
        public function getOriginalObject() {}
        /**
         * called by default CommitOrderProcessor to get the product name to store it in the order item
         * should be overwritten in mapped sub classes of product classes
         *
         * @return string
         */
        public function getOSName() {}
        /**
         * called by default CommitOrderProcessor to get the product number to store it in the order item
         * should be overwritten in mapped sub classes of product classes
         *
         * @return string
         */
        public function getOSProductNumber() {}
    }

    /**
     * Abstract base class for pimcore objects who should be used as set products in the online shop framework
     */
    class AbstractSetProduct extends \pimcore\bundle\ecommerceframeworkbundle\model\abstractproduct {
        /**
         * returns mandatory products for a set product
         *
         * @throws UnsupportedException
         *
         * @return AbstractSetProductEntry[]
         */
        public function getMandatoryProductEntries() {}
        /**
         * returns optional products for a set product
         *
         * @throws UnsupportedException
         *
         * @return AbstractSetProductEntry[]
         */
        public function getOptionalProductEntries() {}
        public function getOSIsBookable($quantityScale = 1, $products = null) {}
        public function getCalculatedPrice($products, $quantityScale = 1) {}
        public function getCalculatedPriceInfo($products, $quantityScale = 1) {}
        public function getOSPrice($quantityScale = null, $products = null) {}
        public function getOSPriceInfo($quantityScale = null, $products = null) {}
        public function getOSAvailabilityInfo($quantity = 1, $products = null) {}
        protected function checkMandatoryProducts($products) {}
    }

    class Currency {
        const RIGHT = 'right';
        const LEFT = 'left';
        const NO_SYMBOL = 'none';
        const USE_SYMBOL = 'sign';
        const USE_SHORTNAME = 'shortname';
        const USE_NAME = 'longname';

        /**
         * @var string
         */
        protected $currencyShortName;
        /**
         * @var string
         */
        protected $currencySymbol;
        /**
         * @var string
         */
        protected $currencyName;
        /**
         * @var \Pimcore\Localization\IntlFormatter
         */
        protected $formattingService;
        /**
         * @var array
         */
        protected $patternStore;

        public function __construct($currencyShortName) {}
        public function toCurrency($value, $pattern = 'default') {}
        /**
         * @return string
         */
        public function getShortName() {}
        /**
         * @return string
         */
        public function getSymbol() {}
        /**
         * @return string
         */
        public function getName() {}
    }

    /**
     * Abstract base class for filter definition type field collections
     */
    abstract class AbstractFilterDefinitionType extends \pimcore\model\dataobject\fieldcollection\data\abstractdata {
        protected $metaData;

        /**
         * @return array
         */
        public function getMetaData() {}
        public function setMetaData($metaData) {}
        /**
         * @return string
         */
        abstract public function getLabel() ;
        /**
         * @return string
         */
        abstract public function getField() ;
        /**
         * @return string
         */
        abstract public function getScriptPath() ;
        /**
         * @return string
         */
        public function getRequiredFilterField() {}
    }

    /**
     * Abstract base class for filter definition pimcore objects
     */
    abstract class AbstractFilterDefinition extends \pimcore\model\dataobject\concrete implements \pimcore\model\dataobject\pregetvaluehookinterface {
        /**
         * returns page limit for product list
         *
         * @abstract
         *
         * @return float
         */
        abstract public function getPageLimit() ;
        /**
         * returns list of available fields for sorting ascending
         *
         * @abstract
         *
         * @return string
         */
        abstract public function getOrderByAsc() ;
        /**
         * returns list of available fields for sorting descending
         *
         * @abstract
         *
         * @return string
         */
        abstract public function getOrderByDesc() ;
        /**
         * return array of field collections for preconditions
         *
         * @abstract
         *
         * @return \Pimcore\Model\DataObject\Fieldcollection
         */
        abstract public function getConditions() ;
        /**
         * return array of field collections for filters
         *
         * @abstract
         *
         * @return \Pimcore\Model\DataObject\Fieldcollection
         */
        abstract public function getFilters() ;
        public function preGetValue(string $key) {}
    }

    /**
     * Abstract base class for payment information field collection
     */
    abstract class AbstractPaymentInformation extends \pimcore\model\dataobject\fieldcollection\data\abstractdata {
        /**
         * @return \DateTime
         */
        abstract public function getPaymentStart() ;
        abstract public function setPaymentStart($paymentStart) ;
        /**
         * @return \DateTime
         */
        abstract public function getPaymentFinish() ;
        abstract public function setPaymentFinish($paymentFinish) ;
        /**
         * @return string
         */
        abstract public function getPaymentReference() ;
        abstract public function setPaymentReference($paymentReference) ;
        /**
         * @return string
         */
        abstract public function getPaymentState() ;
        abstract public function setPaymentState($paymentState) ;
        /**
         * @return string
         */
        abstract public function getMessage() ;
        /**
         * @return string
         */
        abstract public function getProviderData() ;
        abstract public function setMessage($message) ;
        /**
         * @return string
         */
        abstract public function getInternalPaymentId() ;
        abstract public function setInternalPaymentId($internalPaymentId) ;
    }


    /**
     * Interface CheckoutableInterface
     */
    interface CheckoutableInterface extends \pimcore\bundle\ecommerceframeworkbundle\model\productinterface {
        /**
         * defines the name of the price system for this product.
         * there should either be a attribute in pro product object or
         * it should be overwritten in mapped sub classes of product classes
         *
         * @return string
         */
        function getPriceSystemName() ;
        /**
         * defines the name of the availability system for this product.
         * there should either be a attribute in pro product object or
         * it should be overwritten in mapped sub classes of product classes
         *
         * @return string
         */
        function getAvailabilitySystemName() ;
        function getOSIsBookable($quantityScale = 1) ;
        /**
         * returns instance of price system implementation based on result of getPriceSystemName()
         *
         * @return \Pimcore\Bundle\EcommerceFrameworkBundle\PriceSystem\PriceSystemInterface
         */
        function getPriceSystemImplementation() ;
        /**
         * returns instance of availability system implementation based on result of getAvailabilitySystemName()
         *
         * @return AvailabilitySystemInterface
         */
        function getAvailabilitySystemImplementation() ;
        function getOSPrice($quantityScale = 1) ;
        function getOSPriceInfo($quantityScale = 1) ;
        function getOSAvailabilityInfo($quantity = null) ;
    }

    /**
     * @deprecated use ProductInterface instead.
     */
    interface IProduct {}

    /**
     * Interface IndexableInterface
     */
    interface IndexableInterface {
        /**
         * @return int
         */
        function getId() ;
        /**
         * defines if product is included into the product index. If false, product doesn't appear in product index.
         *
         * @return bool
         */
        function getOSDoIndexProduct() ;
        /**
         * defines the name of the price system for this product.
         * there should either be a attribute in pro product object or
         * it should be overwritten in mapped sub classes of product classes
         *
         * @return string
         */
        function getPriceSystemName() ;
        function isActive($inProductList = false) ;
        /**
         * returns product type for product index (either object or variant).
         * by default it returns type of object, but it may be overwritten if necessary.
         *
         * @return string
         */
        function getOSIndexType() ;
        /**
         * returns parent id for product index.
         * by default it returns id of parent object, but it may be overwritten if necessary.
         *
         * @return int
         */
        function getOSParentId() ;
        /**
         * returns array of categories.
         * has to be overwritten either in pimcore object or mapped sub class.
         *
         * @return \Pimcore\Bundle\EcommerceFrameworkBundle\Model\AbstractCategory[]
         */
        function getCategories() ;
        /**
         * returns the class id of the object
         *
         * @return string
         */
        function getClassId() ;
    }

    /**
     * @deprecated use CheckoutableInterface instead.
     */
    interface ICheckoutable {}

    /**
     * Interface ProductInterface
     */
    interface ProductInterface {
        /**
         * called by default CommitOrderProcessor to get the product name to store it in the order item
         * should be overwritten in mapped sub classes of product classes
         *
         * @return string
         */
        function getOSName() ;
        /**
         * called by default CommitOrderProcessor to get the product number to store it in the order item
         * should be overwritten in mapped sub classes of product classes
         *
         * @return string
         */
        function getOSProductNumber() ;
    }

    /**
     * @deprecated use IndexableInterface instead.
     */
    interface IIndexable {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\OrderManager {
    class OrderManagerLocator extends \pimcore\bundle\ecommerceframeworkbundle\dependencyinjection\servicelocator\checkouttenantawareservicelocator implements \pimcore\bundle\ecommerceframeworkbundle\ordermanager\ordermanagerlocatorinterface {
        public function getOrderManager(string $tenant = null) : OrderManagerInterface {}
        public function hasOrderManager(string $tenant) : bool {}
        protected function buildNotFoundException(string $tenant) : UnsupportedException {}
    }

    /**
     * Class AbstractListItem
     * template method pattern
     */
    abstract class AbstractOrderListItem {
        /**
         * @var array
         */
        protected $resultRow;

        public function __construct(array $resultRow) {}
        /**
         * @return int
         */
        abstract public function getId() ;
    }

    class OrderManager implements \pimcore\bundle\ecommerceframeworkbundle\ordermanager\ordermanagerinterface {
        /**
         * @var EnvironmentInterface
         */
        protected $environment;
        /**
         * @var OrderAgentFactoryInterface
         */
        protected $orderAgentFactory;
        /**
         * @var VoucherServiceInterface
         */
        protected $voucherService;
        /**
         * @var FactoryInterface
         */
        protected $modelFactory;
        /**
         * @var array
         */
        protected $options;
        /**
         * @var Folder
         */
        protected $orderParentFolder;
        /**
         * @var string
         */
        protected $orderClassName;
        /**
         * @var string
         */
        protected $orderItemClassName;

        public function __construct(EnvironmentInterface $environment, OrderAgentFactoryInterface $orderAgentFactory, VoucherServiceInterface $voucherService, array $options = [ ]) {}
        protected function processOptions(array $options) {}
        protected function configureOptions(OptionsResolver $resolver) {}
        public function setModelFactory(FactoryInterface $modelFactory) {}
        protected function buildModelClass($className, array $params = [ ]) {}
        /**
         * @return OrderListInterface
         */
        public function createOrderList() {}
        public function createOrderAgent(AbstractOrder $order) {}
        public function setOrderClass($classname) {}
        /**
         * @return string
         */
        protected function getOrderClassName() {}
        public function setOrderItemClass($classname) {}
        /**
         * @return string
         */
        protected function getOrderItemClassName() {}
        public function setParentOrderFolder($orderParentFolder) {}
        /**
         * @return Folder
         */
        protected function getOrderParentFolder() {}
        protected function createCartId(CartInterface $cart) {}
/** @var AbstractOrder[] $orders */
        public function getOrderFromCart(/** @var AbstractOrder[] $orders */
CartInterface $cart) {}
        public function getOrCreateOrderFromCart(CartInterface $cart) {}
        protected function cleanupZombieOrderItems(AbstractOrder $order) {}
        protected function applyOrderItems(array $items, AbstractOrder $order, $giftItems = false) {}
        protected function applyVoucherTokens(AbstractOrder $order, CartInterface $cart) {}
        protected function applyCustomCheckoutDataToOrder(CartInterface $cart, AbstractOrder $order) {}
        protected function setCurrentCustomerToOrder(AbstractOrder $order) {}
        /**
         * hook for creating order number - can be overwritten
         *
         * @return string
         */
        protected function createOrderNumber() {}
        /**
         * @return AbstractOrder
         *
         * @throws \Exception
         */
        protected function getNewOrderObject() {}
        public function getRecurringPaymentSourceOrderList(string $customerId, PaymentInterface $paymentProvider, $paymentMethod = null, $orderId = '') {}
        public function getRecurringPaymentSourceOrder(string $customerId, PaymentInterface $paymentProvider, $paymentMethod = null) {}
        public function isValidOrderForRecurringPayment(AbstractOrder $order, PaymentInterface $payment, $customerId = '') {}
        /**
         * @return AbstractOrderItem
         *
         * @throws \Exception
         */
        protected function getNewOrderItemObject() {}
/** @var AbstractOrderItem[] $orderItems */
        protected function createOrderItem(/** @var AbstractOrderItem[] $orderItems */
CartItemInterface $item, /** @var AbstractOrderItem[] $orderItems */
$parent, /** @var AbstractOrderItem[] $orderItems */
$isGiftItem = false) {}
        protected function buildTaxArray(array $taxItems) {}
        protected function buildOrderItemKey(CartItemInterface $item, bool $isGiftItem = false) {}
        protected function buildListClassName($className) {}
        /**
         * Build class name for order list
         *
         * @return string
         *
         * @throws \Exception
         */
        protected function buildOrderListClassName() {}
        /**
         * Build class name for order item list
         *
         * @return string
         *
         * @throws \Exception
         */
        protected function buildOrderItemListClassName() {}
        /**
         * Build order listing
         *
         * @return \Pimcore\Model\DataObject\Listing\Concrete
         *
         * @throws \Exception
         */
        public function buildOrderList() {}
        /**
         * Build order item listing
         *
         * @return \Pimcore\Model\DataObject\Listing\Concrete
         *
         * @throws \Exception
         */
        public function buildOrderItemList() {}
        public function getOrderByPaymentStatus(StatusInterface $paymentStatus) {}
    }

    abstract class AbstractOrderList implements \pimcore\bundle\ecommerceframeworkbundle\ordermanager\orderlistinterface {
        /**
         * @var int
         */
        protected $offset;
        /**
         * @var int
         */
        protected $limit;
        /**
         * @var int
         */
        protected $rowCount;
        /**
         * @var string
         */
        protected $listType;
        /**
         * @var string
         */
        protected $orderState;
        /**
         * @var \ArrayIterator
         */
        protected $list;
        /**
         * @var string
         */
        protected $itemClassName;

        /**
         * @return string
         */
        public function getItemClassName() {}
        public function setItemClassName($className) {}
        protected function createResultItem(array $row) {}
        public function setListType($type) {}
        /**
         * @return string
         */
        public function getListType() {}
        /**
         * @return string
         */
        public function getOrderState() {}
        public function setOrderState($orderState) {}
        /**
         * @return OrderListItemInterface[]
         */
        public function load() {}
        /**
         * Return a fully configured Paginator Adapter from this method.
         *
         * @return AdapterInterface
         */
        public function getPaginatorAdapter() {}
        public function getItems($offset, $itemCountPerPage) {}
        /**
         * @return int
         */
        public function getOffset() {}
        public function setLimit($limit, $offset = 0) {}
        /**
         * @return int
         */
        public function getLimit() {}
        /**
         * (PHP 5 &gt;= 5.0.0)<br/>
         * Return the current element
         *
         * @link http://php.net/manual/en/iterator.current.php
         *
         * @return mixed Can return any type.
         */
        public function current() {}
        /**
         * (PHP 5 &gt;= 5.0.0)<br/>
         * Move forward to next element
         *
         * @link http://php.net/manual/en/iterator.next.php
         *
         * @return void Any returned value is ignored.
         */
        public function next() {}
        /**
         * (PHP 5 &gt;= 5.0.0)<br/>
         * Return the key of the current element
         *
         * @link http://php.net/manual/en/iterator.key.php
         *
         * @return mixed scalar on success, or null on failure.
         */
        public function key() {}
        /**
         * (PHP 5 &gt;= 5.0.0)<br/>
         * Checks if current position is valid
         *
         * @link http://php.net/manual/en/iterator.valid.php
         *
         * @return bool The return value will be casted to boolean and then evaluated.
         *       Returns true on success or false on failure.
         */
        public function valid() {}
        /**
         * (PHP 5 &gt;= 5.0.0)<br/>
         * Rewind the Iterator to the first element
         *
         * @link http://php.net/manual/en/iterator.rewind.php
         *
         * @return void Any returned value is ignored.
         */
        public function rewind() {}
        public function seek($position) {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Count elements of an object
         *
         * @link http://php.net/manual/en/countable.count.php
         *
         * @return int The custom count as an integer.
         *       </p>
         *       <p>
         *       The return value is cast to an integer.
         */
        public function count() {}
        public function offsetExists($offset) {}
        public function offsetGet($offset) {}
        public function offsetSet($offset, $value) {}
        public function offsetUnset($offset) {}
    }


    /**
     * @deprecated use OrderAgentInterface instead.
     */
    interface IOrderAgent {}

    /**
     * Interface OrderListInterface
     *
     * @method OrderListItemInterface current()
     */
    interface OrderListInterface extends \countable {
    const LIST_TYPE_ORDER_ITEM = 'item';
    const LIST_TYPE_ORDER = 'order';
        /**
         * @return QueryBuilder
         */
        function getQuery() ;
        /**
         * @return \Pimcore\Bundle\EcommerceFrameworkBundle\OrderManager\OrderListItemInterface[]
         */
        function load() ;
        function setLimit($limit, $offset = 0) ;
        /**
         * @return int
         */
        function getLimit() ;
        /**
         * @return int
         */
        function getOffset() ;
        function setOrder($order) ;
        function setOrderState($state) ;
        /**
         * @return string
         */
        function getOrderState() ;
        function setListType($type) ;
        /**
         * @return string
         */
        function getListType() ;
        /**
         * @return string
         */
        function getItemClassName() ;
        function setItemClassName($className) ;
        /**
         * enable payment info query
         * table alias: paymentInfo
         *
         * @return $this
         */
        function joinPaymentInfo() ;
        /**
         * enable order item objects query
         * table alias: orderItemObjects
         *
         * @return $this
         */
        function joinOrderItemObjects() ;
        function joinProduct($classId) ;
        function joinCustomer($classId) ;
        /**
         * enable pricing rule query
         * table alias: pricingRule
         *
         * @return $this
         */
        function joinPricingRule() ;
        function addCondition($condition, $value = null) ;
        function addSelectField($field) ;
        function addFilter(OrderListFilterInterface $filter) ;
        /**
         * @return bool
         */
        function useSubItems() ;
        function setUseSubItems($useSubItems) ;
    }

    interface OrderListItemInterface {
        /**
         * @return int
         */
        function getId() ;
        /**
         * @return Order|OrderItem
         */
        function reference() ;
    }

    interface OrderManagerInterface {
        /**
         * @return OrderListInterface
         */
        function createOrderList() ;
        function createOrderAgent(AbstractOrder $order) ;
        function setParentOrderFolder($orderParentFolder) ;
        function setOrderClass($classname) ;
        function setOrderItemClass($classname) ;
        function getOrCreateOrderFromCart(CartInterface $cart) ;
        function getOrderFromCart(CartInterface $cart) ;
        function getOrderByPaymentStatus(StatusInterface $paymentStatus) ;
        /**
         * Builds order listing
         *
         * @return \Pimcore\Model\DataObject\Listing\Concrete
         *
         * @throws \Exception
         */
        function buildOrderList() ;
        /**
         * Build order item listing
         *
         * @return \Pimcore\Model\DataObject\Listing\Concrete
         *
         * @throws \Exception
         */
        function buildOrderItemList() ;
    }

    interface OrderListFilterInterface {
        function apply(OrderListInterface $orderList) ;
    }

    /**
     * @deprecated use OrderListFilterInterface instead.
     */
    interface IOrderListFilter {}

    /**
     * @deprecated use OrderListItemInterface instead.
     */
    interface IOrderListItem {}

    interface OrderManagerLocatorInterface {
        function getOrderManager(string $tenant = null) : OrderManagerInterface ;
        function hasOrderManager(string $tenant) : bool ;
    }

    interface OrderAgentFactoryInterface {
        function createAgent(AbstractOrder $order) : OrderAgentInterface ;
    }

    /**
     * @deprecated use OrderAgentFactoryInterface instead.
     */
    interface IOrderAgentFactory {}

    /**
     * @deprecated use OrderListInterface instead.
     */
    interface IOrderList {}

    /**
     * @deprecated use OrderManagerInterface instead.
     */
    interface IOrderManager {}

    /**
     * @deprecated use OrderManagerLocatorInterface instead.
     */
    interface IOrderManagerLocator {}

    interface OrderAgentInterface {
        /**
         * @return Order
         */
        function getOrder() ;
        function itemCancel(OrderItem $item) ;
        function itemComplaint(OrderItem $item, $quantity) ;
        function itemChangeAmount(OrderItem $item, $amount) ;
        function itemSetState(OrderItem $item, $state) ;
        /**
         * @return Currency
         */
        function getCurrency() ;
        /**
         * @return bool
         */
        function hasPayment() ;
        /**
         * @return PaymentInterface
         */
        function getPaymentProvider() ;
        function setPaymentProvider(PaymentInterface $paymentProvider, AbstractOrder $sourceOrder = null) ;
        /**
         * Init payment:
         *
         * creates new payment info with INIT state
         *
         * throws exception when payment info exists
         *
         * @return AbstractPaymentInformation
         *
         * @throws UnsupportedException
         */
        function initPayment() ;
        /**
         * Starts payment:
         *
         * checks if payment info with PENDING payment exists and checks if order fingerprint has not changed
         * if true -> returns existing payment info
         * if false -> creates new payment info (and aborts existing PENDING payment infos)
         *
         * @return AbstractPaymentInformation
         *
         * @throws UnsupportedException
         */
        function startPayment() ;
        /**
         * Returns current payment info of order, or null if none exists
         *
         * @return null|AbstractPaymentInformation
         */
        function getCurrentPendingPaymentInfo() ;
        /**
         * cancels payment for current payment info
         * - payment will be cancelled, order state will be resetted and cart will we writable again.
         *
         * -> this should be used, when user cancels payment
         *
         * only possible when payment state is PENDING, otherwise exception is thrown
         *
         * @return Order
         *
         * @throws UnsupportedException
         */
        function cancelStartedOrderPayment() ;
        function updatePayment(StatusInterface $status) ;
        /**
         * @return Note[]
         */
        function getFullChangeLog() ;
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\OrderManager\Order {
    class Agent implements \pimcore\bundle\ecommerceframeworkbundle\ordermanager\orderagentinterface {
        const PAYMENT_PROVIDER_BRICK_PREFIX = 'PaymentProvider';

        /**
         * @var Order
         */
        protected $order;
        /**
         * @var EnvironmentInterface
         */
        protected $environment;
        /**
         * @var PaymentManagerInterface
         */
        protected $paymentManager;
        /**
         * @var PaymentInterface
         */
        protected $paymentProvider;
        /**
         * @var EventDispatcherInterface
         */
        protected $eventDispatcher;
        /**
         * @var Note[]
         */
        protected $fullChangeLog;

        public function __construct(Order $order, EnvironmentInterface $environment, PaymentManagerInterface $paymentManager, EventDispatcherInterface $eventDispatcher) {}
        /**
         * @return Order
         */
        public function getOrder() {}
        public function itemCancel(OrderItem $item) {}
        public function itemChangeAmount(OrderItem $item, $amount) {}
        public function itemComplaint(OrderItem $item, $quantity) {}
        public function itemSetState(OrderItem $item, $state) {}
        protected function createNote(Concrete $object) {}
        /**
         * @return bool
         */
        public function hasPayment() {}
        /**
         * @return Currency
         */
        public function getCurrency() {}
        /**
         * @return PaymentInterface
         */
        public function getPaymentProvider() {}
        public function setPaymentProvider(PaymentInterface $paymentProvider, Order $sourceOrder = null) {}
        /**
         * @return null|AbstractPaymentInformation
         */
        public function getCurrentPendingPaymentInfo() {}
        protected function createNewOrderInformation(Order $order, string $paymentState) {}
        /**
         * @inheritdoc
         */
        public function initPayment() {}
        /**
         * @return null|AbstractPaymentInformation|PaymentInfo
         *
         * @throws Exception
         * @throws UnsupportedException
         */
        public function startPayment() {}
        protected function generateInternalPaymentId($paymentInfoCount = null) {}
        /**
         * creates fingerprint of order to check, if order has changed
         * consider:
         *  - total price
         *  - creation date
         *  - all product numbers
         *
         * @return int
         *
         * @throws UnsupportedException
         */
        protected function getFingerprintOfOrder() {}
        /**
         * @return Order
         *
         * @throws Exception
         * @throws UnsupportedException
         */
        public function cancelStartedOrderPayment() {}
/** @var PaymentInfo $currentPaymentInformation */
        public function updatePayment(/** @var PaymentInfo $currentPaymentInformation */
StatusInterface $status) {}
        protected function extractAdditionalPaymentInformation(StatusInterface $status, PaymentInfo $currentPaymentInformation) {}
        /**
         * @return Note[]
         */
        public function getFullChangeLog() {}
    }

    class AgentFactory implements \pimcore\bundle\ecommerceframeworkbundle\ordermanager\orderagentfactoryinterface {
        /**
         * @var EnvironmentInterface
         */
        protected $environment;
        /**
         * @var PaymentManagerInterface
         */
        protected $paymentManager;
        /**
         * @var EventDispatcherInterface
         */
        protected $eventDispatcher;
        /**
         * @var string
         */
        protected $agentClass;

        public function __construct(EnvironmentInterface $environment, PaymentManagerInterface $paymentManager, EventDispatcherInterface $eventDispatcher, array $options = [ ]) {}
        protected function processOptions(array $options) {}
        protected function configureOptions(OptionsResolver $resolver) {}
        public function createAgent(AbstractOrder $order) : OrderAgentInterface {}
    }

    class Listing extends \pimcore\bundle\ecommerceframeworkbundle\ordermanager\abstractorderlist implements \pimcore\bundle\ecommerceframeworkbundle\ordermanager\orderlistinterface {
        /**
         * @var Db\ZendCompatibility\QueryBuilder
         */
        protected $query;
        /**
         * @var OrderListFilterInterface[]
         */
        protected $filter;
        /**
         * @var bool
         */
        protected $useSubItems;
        /**
         * @var null|string[]
         */
        protected $availableFilterValues;

        public function setListType($type) {}
        /**
         * get select query
         *
         * @return Db\ZendCompatibility\QueryBuilder
         */
        public function getQuery() {}
        public function setLimit($limit, $offset = 0) {}
        public function setOrder($order) {}
        /**
         * @return $this
         */
        public function joinPricingRule() {}
        /**
         * @return $this
         */
        public function joinPaymentInfo() {}
        /**
         * @return $this
         */
        public function joinOrderItemObjects() {}
        public function joinProduct($classId) {}
        public function joinCustomer($classId) {}
        protected function joinItemsAndSubItems($select) {}
        public function addSelectField($field) {}
        public function addFilter(OrderListFilterInterface $filter) {}
        public function addCondition($condition, $value = null) {}
        protected function getAvailableFilterValues($field) {}
        /**
         * When an object is cloned, PHP 5 will perform a shallow copy of all of the object's properties.
         * Any properties that are references to other variables, will remain references.
         * Once the cloning is complete, if a __clone() method is defined,
         * then the newly created object's __clone() method will be called, to allow any necessary properties that need to be changed.
         * NOT CALLABLE DIRECTLY.
         *
         * @return mixed
         *
         * @link http://php.net/manual/en/language.oop5.cloning.php
         */
        public function __clone() {}
        /**
         * @return bool
         */
        public function useSubItems() {}
        public function setUseSubItems($useSubItems) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\OrderManager\Order\Listing {
    class Item extends \pimcore\bundle\ecommerceframeworkbundle\ordermanager\abstractorderlistitem implements \pimcore\bundle\ecommerceframeworkbundle\ordermanager\orderlistiteminterface {
        /**
         * @return int
         */
        public function getId() {}
        public function __call($method, $args) {}
        /**
         * @return Order|OrderItem
         */
        public function reference() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\OrderManager\Order\Listing\Filter {
    class CustomerObject implements \pimcore\bundle\ecommerceframeworkbundle\ordermanager\orderlistfilterinterface {
        /**
         * @var ElementInterface
         */
        protected $customer;

        public function __construct(ElementInterface $customer) {}
        public function apply(OrderListInterface $orderList) {}
    }

    class OrderDateTime implements \pimcore\bundle\ecommerceframeworkbundle\ordermanager\orderlistfilterinterface {
        /**
         * @var \DateTime
         */
        protected $from;
        /**
         * @var \DateTime
         */
        protected $till;
        /**
         * @var string
         */
        protected $column;

        public function apply(OrderListInterface $orderList) {}
        /**
         * @return \DateTime
         */
        public function getFrom() {}
        public function setFrom(\DateTime $from) {}
        /**
         * @return \DateTime
         */
        public function getTill() {}
        public function setTill(\DateTime $till) {}
        /**
         * @return string
         */
        public function getColumn() {}
        public function setColumn($column) {}
    }

    class Product implements \pimcore\bundle\ecommerceframeworkbundle\ordermanager\orderlistfilterinterface {
        /**
         * @var \Pimcore\Model\DataObject\Concrete
         */
        protected $product;

        public function __construct(\Pimcore\Model\DataObject\Concrete $product) {}
/** @var \Pimcore\Model\DataObject\Concrete $variant */
        public function apply(/** @var \Pimcore\Model\DataObject\Concrete $variant */
OrderListInterface $orderList) {}
    }

    class ProductType implements \pimcore\bundle\ecommerceframeworkbundle\ordermanager\orderlistfilterinterface {
        /**
         * @var array
         */
        protected $types;

        public function apply(OrderListInterface $orderList) {}
        /**
         * @return array
         */
        public function getTypes() {}
        public function setTypes(array $types) {}
    }

    /**
     * Search filter with flexible column definition
     */
    class Search extends \pimcore\bundle\ecommerceframeworkbundle\ordermanager\order\listing\filter\abstractsearch {
        /**
         * Search column
         *
         * @var string
         */
        protected $column;

        public function __construct($value, $column) {}
        protected function getConditionColumn() {}
    }

    class Payment implements \pimcore\bundle\ecommerceframeworkbundle\ordermanager\orderlistfilterinterface {
        const PAYMENT_STATE_FAIL = 'fail';
        const PAYMENT_STATE_OK = 'ok';

        /**
         * @var string
         */
        protected $value;
        /**
         * Allowed origin values
         *
         * @var array
         */
        protected $allowedValues;

        public function __construct($paymentState) {}
        public function apply(OrderListInterface $orderList) {}
    }

    class OrderSearch implements \pimcore\bundle\ecommerceframeworkbundle\ordermanager\orderlistfilterinterface {
        /**
         * @var string
         */
        protected $keyword;

        public function apply(OrderListInterface $orderList) {}
        /**
         * @return string
         */
        public function getKeyword() {}
        public function setKeyword($keyword) {}
    }

    /**
     * Base filter for LIKE queries. For simple queries you'll just
     * need to override the getConditionColumn() method and return
     * the query part coming before LIKE.
     */
    abstract class AbstractSearch implements \pimcore\bundle\ecommerceframeworkbundle\ordermanager\orderlistfilterinterface {
        /**
         * Search value
         *
         * @var string
         */
        protected $value;

        public function __construct($value) {}
        /**
         * Return the string coming before LIKE, e.g. 'order.invoiceEmail'
         *
         * @return string
         */
        abstract protected function getConditionColumn() ;
        /**
         * Pad the value with wildcards
         *
         * @return string
         */
        protected function getConditionValue() {}
        public function apply(OrderListInterface $orderList) {}
        protected function prepareApply(OrderListInterface $orderList) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\OrderManager\Order\Listing\Filter\Search {
    class PaymentReference extends \pimcore\bundle\ecommerceframeworkbundle\ordermanager\order\listing\filter\abstractsearch {
        /**
         * @return string
         */
        protected function getConditionColumn() {}
        /**
         * @return string
         */
        protected function getConditionValue() {}
        protected function prepareApply(OrderListInterface $orderList) {}
    }

    class CustomerEmail extends \pimcore\bundle\ecommerceframeworkbundle\ordermanager\order\listing\filter\abstractsearch {
        /**
         * @return string
         */
        protected function getConditionColumn() {}
    }

    class Customer extends \pimcore\bundle\ecommerceframeworkbundle\ordermanager\order\listing\filter\abstractsearch {
        /**
         * @return string
         */
        protected function getConditionColumn() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\OrderManager\V7 {
    class OrderAgent extends \pimcore\bundle\ecommerceframeworkbundle\ordermanager\order\agent {
        public function __construct(Order $order, EnvironmentInterface $environment, PaymentManagerInterface $paymentManager, EventDispatcherInterface $eventDispatcher) {}
        /**
         * @inheritdoc
         */
        public function initPayment() {}
        /**
         * @return null|AbstractPaymentInformation|PaymentInfo
         *
         * @throws Exception
         * @throws UnsupportedException
         */
        public function startPayment() {}
    }

    class OrderManager extends \pimcore\bundle\ecommerceframeworkbundle\ordermanager\ordermanager implements \pimcore\bundle\ecommerceframeworkbundle\ordermanager\v7\ordermanagerinterface {
        /**
         * @var EventDispatcherInterface
         */
        protected $eventDispatcher;

        public function __construct(EnvironmentInterface $environment, OrderAgentFactoryInterface $orderAgentFactory, VoucherServiceInterface $voucherService, EventDispatcherInterface $eventDispatcher, array $options = [ ]) {}
        public function getOrCreateOrderFromCart(CartInterface $cart) {}
        public function orderNeedsUpdate(CartInterface $cart, AbstractOrder $order) : bool {}
        protected function calculateCartHash(CartInterface $cart) : int {}
/** @var AbstractOrder[] $orders */
        public function getOrderFromCart(/** @var AbstractOrder[] $orders */
CartInterface $cart) {}
        public function recreateOrder(CartInterface $cart) : AbstractOrder {}
        public function recreateOrderBasedOnSourceOrder(AbstractOrder $sourceOrder) : AbstractOrder {}
        protected function cloneItems(array $sourceItems, AbstractOrder $newOrder) : array {}
        public function cartHasPendingPayments(CartInterface $cart) : bool {}
        protected function createOrderItem(CartItemInterface $item, $parent, $isGiftItem = false) {}
        protected function buildOrderItemKey(CartItemInterface $item, bool $isGiftItem = false) {}
    }


    interface OrderManagerInterface extends \pimcore\bundle\ecommerceframeworkbundle\ordermanager\ordermanagerinterface {
        function recreateOrder(CartInterface $cart) : AbstractOrder ;
        function recreateOrderBasedOnSourceOrder(AbstractOrder $sourceOrder) : AbstractOrder ;
        function cartHasPendingPayments(CartInterface $cart) : bool ;
        function orderNeedsUpdate(CartInterface $cart, AbstractOrder $order) : bool ;
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\Tracking {
    class Transaction extends \pimcore\bundle\ecommerceframeworkbundle\tracking\abstractdata {
        /**
         * @var string
         */
        protected $type;
        /**
         * @var string
         */
        protected $affiliation;
        /**
         * @var float
         */
        protected $total;
        /**
         * @var float
         */
        protected $subTotal;
        /**
         * @var float
         */
        protected $tax;
        /**
         * @var float
         */
        protected $shipping;
        /**
         * @var string
         */
        protected $coupon;
        /**
         * @var string
         */
        protected $list;
        /**
         * @var string
         */
        protected $step;
        /**
         * @var string
         */
        protected $option;

        /**
         * @return string
         */
        public function getType() {}
        public function setType($type) {}
        /**
         * @return string
         */
        public function getAffiliation() {}
        public function setAffiliation($affiliation) {}
        /**
         * @return float
         */
        public function getTotal() {}
        public function setTotal($total) {}
        /**
         * @return float
         */
        public function getSubTotal() {}
        public function setSubTotal($subTotal) {}
        /**
         * @return float
         */
        public function getTax() {}
        public function setTax($tax) {}
        /**
         * @return float
         */
        public function getShipping() {}
        public function setShipping($shipping) {}
        /**
         * @return string
         */
        public function getCoupon() {}
        public function setCoupon($coupon) {}
        /**
         * @return string
         */
        public function getList() {}
        public function setList($list) {}
        /**
         * @return string
         */
        public function getStep() {}
        public function setStep($step) {}
        /**
         * @return string
         */
        public function getOption() {}
        public function setOption($option) {}
    }

    /**
     * Takes an object (e.g. a product, an order) and transforms it into a
     * normalized tracking object (e.g. a ProductAction or a Transaction).
     */
    class TrackingItemBuilder implements \pimcore\bundle\ecommerceframeworkbundle\tracking\trackingitembuilderinterface {
        public function buildProductImpressionItem(ProductInterface $product, string $list = 'default') {}
        public function buildProductViewItem(ProductInterface $product) {}
        protected function initProductAttributes(AbstractProductData $item, ProductInterface $product) {}
        public function buildProductActionItem(ProductInterface $product, $quantity = 1) {}
        public function buildCheckoutTransaction(AbstractOrder $order) {}
        public function buildCheckoutItems(AbstractOrder $order) {}
/** @var ProductInterface $product */
        public function buildCheckoutItemsByCart(/** @var ProductInterface $product */
CartInterface $cart) {}
/** @var ProductInterface $product */
        public function buildCheckoutItem(/** @var ProductInterface $product */
AbstractOrder $order, /** @var ProductInterface $product */
AbstractOrderItem $orderItem) {}
/** @var ProductInterface|AbstractObject $product */
        public function buildCheckoutItemByCartItem(/** @var ProductInterface|AbstractObject $product */
CartItemInterface $cartItem) {}
        protected function getProductCategories(ProductInterface $product, $first = false) {}
        protected function getProductBrand(ProductInterface $product) {}
        protected function getOrderShipping(AbstractOrder $order) {}
        protected function getOrderTax(AbstractOrder $order) {}
        protected function normalizeName($name) {}
    }

    abstract class AbstractProductData extends \pimcore\bundle\ecommerceframeworkbundle\tracking\abstractdata {
        /**
         * @var string
         */
        protected $transactionId;
        /**
         * @var string
         */
        protected $name;
        /**
         * @var string
         */
        protected $brand;
        /**
         * @var array
         */
        protected $categories;
        /**
         * @var string
         */
        protected $variant;
        /**
         * @var int
         */
        protected $position;
        /**
         * @var float
         */
        protected $price;

        /**
         * @return string
         */
        public function getTransactionId() {}
        public function setTransactionId($transactionId) {}
        /**
         * @return string
         */
        public function getName() {}
        public function setName($name) {}
        /**
         * @return string
         */
        public function getBrand() {}
        public function setBrand($brand) {}
        /**
         * @return string|null
         */
        public function getCategory() {}
        /**
         * @return array
         */
        public function getCategories() {}
        public function setCategories(array $categories) {}
        /**
         * @return string
         */
        public function getVariant() {}
        public function setVariant($variant) {}
        /**
         * @return int
         */
        public function getPosition() {}
        public function setPosition($position) {}
        /**
         * @return float
         */
        public function getPrice() {}
        public function setPrice($price) {}
    }

    class ProductAction extends \pimcore\bundle\ecommerceframeworkbundle\tracking\abstractproductdata {
        /**
         * @var int
         */
        protected $quantity;
        /**
         * @var string
         */
        protected $coupon;

        /**
         * @return int|float
         */
        public function getQuantity() {}
        public function setQuantity($quantity) {}
        /**
         * @return string
         */
        public function getCoupon() {}
        public function setCoupon($coupon) {}
    }

    abstract class AbstractData implements \jsonserializable {
        /**
         * @var string
         */
        protected $id;
        /**
         * @var array
         */
        protected $additionalAttributes;

        /**
         * @return string
         */
        public function getId() {}
        public function setId($id) {}
        public function mergeValues(array $data, $overwrite = false) {}
        public function addAdditionalAttribute($attribute, $value) {}
        public function getAdditionalAttribute($attribute) {}
        /**
         * Get all additional attributes.
         *
         * @return array
         */
        public function getAdditionalAttributes() {}
        /**
         * Serialize all non-null properties
         *
         * @implements \JsonSerializable
         *
         * @return array
         */
        public function jsonSerialize() {}
    }

    class TrackingManager implements \pimcore\bundle\ecommerceframeworkbundle\tracking\trackingmanagerinterface {
        /**
         * @var TrackerInterface[]
         */
        protected $trackers;
        /**
         * @var TrackerInterface[]
         */
        protected $activeTrackerCache;
        /**
         * @var string
         */
        protected $cachedAssortmentTenant;
        /**
         * @var string
         */
        protected $cachedCheckoutTenant;
        /**
         * @var null|EnvironmentInterface
         */
        protected $enviroment;
        /**
         * @var Session
         */
        protected $session;

        public function __construct(array $trackers = [ ], EnvironmentInterface $environment) {}
        public function setSession(SessionInterface $session) {}
        public function registerTracker(TrackerInterface $tracker) {}
        /**
         * Get all registered trackers
         *
         * @return TrackerInterface[]
         */
        public function getTrackers() : array {}
        /**
         * Get all for current tenants active trackers
         *
         * @return TrackerInterface[]
         */
        public function getActiveTrackers() : array {}
        public function trackCategoryPageView($category, $page = null) {}
        public function trackProductImpression(ProductInterface $product, string $list = 'default') {}
        public function trackProductView(ProductInterface $product) {}
        public function trackCartUpdate(CartInterface $cart) {}
        public function trackCartProductActionAdd(CartInterface $cart, ProductInterface $product, $quantity = 1) {}
        public function trackProductActionAdd(ProductInterface $product, $quantity = 1) {}
        public function trackCartProductActionRemove(CartInterface $cart, ProductInterface $product, $quantity = 1) {}
        public function trackProductActionRemove(ProductInterface $product, $quantity = 1) {}
        public function trackCheckout(CartInterface $cart) {}
        public function trackCheckoutComplete(AbstractOrder $order) {}
        public function trackCheckoutStep(CheckoutManagerCheckoutStepInterface $step, CartInterface $cart, $stepNumber = null, $checkoutOption = null) {}
        public function getTrackedCodes() : string {}
        public function forwardTrackedCodesAsFlashMessage() : TrackingManagerInterface {}
        public function trackEvent(string $eventCategory, string $eventAction, string $eventLabel = null, int $eventValue = null) {}
    }

    class ProductImpression extends \pimcore\bundle\ecommerceframeworkbundle\tracking\abstractproductdata {
        /**
         * @var string
         */
        protected $list;

        /**
         * @return string
         */
        public function getList() {}
        public function setList($list) {}
    }

    abstract class Tracker implements \pimcore\bundle\ecommerceframeworkbundle\tracking\trackerinterface {
        /**
         * @var TrackingItemBuilderInterface
         */
        protected $trackingItemBuilder;
        /**
         * @var EngineInterface
         */
        protected $templatingEngine;
        /**
         * @var string
         */
        protected $templatePrefix;
        /**
         * @var string
         */
        protected $templateExtension;
        /**
         * @var array
         */
        protected $assortmentTenants;
        /**
         * @var array
         */
        protected $checkoutTenants;

        public function __construct(TrackingItemBuilderInterface $trackingItemBuilder, EngineInterface $templatingEngine, array $options = [ ], $assortmentTenants = [ ], $checkoutTenants = [ ]) {}
        protected function processOptions(array $options) {}
        protected function configureOptions(OptionsResolver $resolver) {}
        protected function getTemplatePath(string $name) {}
        protected function renderTemplate(string $name, array $parameters) : string {}
        protected function filterNullValues(array $data, array $protectedKeys = [ ]) {}
        /**
         * @inheritdoc
         */
        public function getAssortmentTenants() : array {}
        /**
         * @inheritdoc
         */
        public function getCheckoutTenants() : array {}
    }


    /**
     * @deprecated use CartProductActionRemoveInterface instead.
     */
    interface ICartProductActionRemove {}

    interface ProductImpressionInterface {
        function trackProductImpression(ProductInterface $product, string $list = 'default') ;
    }

    /**
     * @deprecated use CartUpdateInterface instead.
     */
    interface ICartUpdate {}

    interface CartProductActionAddInterface {
        function trackCartProductActionAdd(CartInterface $cart, ProductInterface $product, $quantity = 1) ;
    }

    /**
     * @deprecated use ProductImpressionInterface instead.
     */
    interface IProductImpression {}

    interface TrackingItemBuilderInterface {
        function buildProductViewItem(ProductInterface $product) ;
        function buildProductActionItem(ProductInterface $product, $quantity = 1) ;
        function buildProductImpressionItem(ProductInterface $product, string $list = 'default') ;
        function buildCheckoutTransaction(AbstractOrder $order) ;
        function buildCheckoutItems(AbstractOrder $order) ;
        function buildCheckoutItemsByCart(CartInterface $cart) ;
        function buildCheckoutItem(AbstractOrder $order, AbstractOrderItem $orderItem) ;
    }

    interface CheckoutCompleteInterface {
        function trackCheckoutComplete(AbstractOrder $order) ;
    }

    interface CheckoutInterface {
        function trackCheckout(CartInterface $cart) ;
    }

    /**
     * @deprecated use CartProductActionAddInterface instead.
     */
    interface ICartProductActionAdd {}

    interface TrackEventInterface {
        function trackEvent(string $eventCategory, string $eventAction, string $eventLabel = null, int $eventValue = null) ;
    }

    /**
     * @deprecated use TrackingManagerInterface instead.
     */
    interface ITrackingManager {}

    interface TrackerInterface {
        /**
         * Returns assortment tenants the tracker should be activated for.
         *
         * @return array
         */
        function getAssortmentTenants() : array ;
        /**
         * Returns checkout tenants the tracker should be activated for.
         *
         * @return array
         */
        function getCheckoutTenants() : array ;
    }

    /**
     * @deprecated use CategoryPageViewInterface instead.
     */
    interface ICategoryPageView {}

    /**
     * @deprecated use TrackerInterface instead.
     */
    interface ITracker {}

    /**
     * @deprecated use CheckoutInterface instead.
     */
    interface ICheckout {}

    /**
     * @deprecated use TrackingItemBuilderInterface instead.
     */
    interface ITrackingItemBuilder {}

    /**
     * @deprecated use CheckoutStepInterface instead.
     */
    interface ICheckoutStep {}

    interface ProductViewInterface {
        function trackProductView(ProductInterface $product) ;
    }

    /**
     * @deprecated use ProductViewInterface instead.
     */
    interface IProductView {}

    interface CartUpdateInterface {
        function trackCartUpdate(CartInterface $cart) ;
    }

    /**
     * @deprecated Use CartProductActionAddInterface instead
     */
    interface IProductActionAdd {
        function trackProductActionAdd(ProductInterface $product, $quantity = 1) ;
    }

    interface CartProductActionRemoveInterface {
        function trackCartProductActionRemove(CartInterface $cart, ProductInterface $product, $quantity = 1) ;
    }

    interface TrackingManagerInterface extends \pimcore\bundle\ecommerceframeworkbundle\tracking\cartproductactionremoveinterface {
        /**
         * Returns the current javascript tracking codes for all trackers
         *
         * @return string
         */
        function getTrackedCodes() : string ;
        /**
         * Forwards all tracked tracking codes to the next request via FlashMesssageBag
         *
         * @return self
         */
        function forwardTrackedCodesAsFlashMessage() : self ;
    }

    interface CategoryPageViewInterface {
        function trackCategoryPageView($category, $page = null) ;
    }

    interface TrackingCodeAwareInterface {
        /**
         * @return string[]
         */
        function getTrackedCodes() : array ;
        function trackCode(string $code) ;
    }

    /**
     * @deprecated use CheckoutCompleteInterface instead.
     */
    interface ICheckoutComplete {}

    /**
     * @deprecated Use CartProductActionRemoveInterface instead
     */
    interface IProductActionRemove {
        function trackProductActionRemove(ProductInterface $product, $quantity = 1) ;
    }

    interface CheckoutStepInterface {
        function trackCheckoutStep(CheckoutManagerCheckoutStepInterface $step, CartInterface $cart, $stepNumber = null, $checkoutOption = null) ;
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\Tracking\Tracker {
    class GoogleTagManager extends \pimcore\bundle\ecommerceframeworkbundle\tracking\tracker implements \pimcore\bundle\ecommerceframeworkbundle\tracking\trackingcodeawareinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\productimpressioninterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\cartproductactionaddinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\productviewinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\checkoutstepinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\checkoutcompleteinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\cartproductactionremoveinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\checkoutinterface {
        const DEFERRED_DIMENSIONS = [self::DEFERRED_DIMENSION_IMPRESSIONS];
        const DEFERRED_DIMENSION_IMPRESSIONS = 'impressions';

        /** @var string[] */
        protected $trackedCodes;
        /** @var array */
        protected $deferred;

        protected function configureOptions(OptionsResolver $resolver) {}
        public function trackProductImpression(ProductInterface $product, string $list = 'default') {}
        public function trackProductView(ProductInterface $product) {}
        public function trackCartProductActionAdd(CartInterface $cart, ProductInterface $product, $quantity = 1) {}
        public function trackCartProductActionRemove(CartInterface $cart, ProductInterface $product, $quantity = 1) {}
        public function trackCheckout(CartInterface $cart) {}
        public function trackCheckoutStep(CheckoutManagerCheckoutStepInterface $step, CartInterface $cart, $stepNumber = null, $checkoutOption = null) {}
        public function trackCheckoutComplete(AbstractOrder $order) {}
        protected function transformProductAction(ProductAction $item) {}
        protected function transformProductImpression(ProductImpression $item) {}
        protected function transformTransaction(Transaction $transaction) {}
        protected function transformCheckoutItems(array $items) {}
        private function formatPrice($price = null) {}
        private function renderCall(?array $call) : string {}
        protected function addDeferredItem(string $dimension, array $item) {}
        protected function getDeferredItems(string $dimension) {}
        protected function consolidateDeferredDimensions() {}
        public function getTrackedCodes() : array {}
        public function trackCode(string $code) {}
    }

    class Piwik extends \pimcore\bundle\ecommerceframeworkbundle\tracking\tracker implements \pimcore\bundle\ecommerceframeworkbundle\tracking\productviewinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\cartproductactionremoveinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\cartproductactionaddinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\cartupdateinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\categorypageviewinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\trackingcodeawareinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\trackeventinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\checkoutcompleteinterface {
        /**
         * @var PiwikTracker
         */
        private $tracker;
        /**
         * @var bool
         */
        private $handleCartAdd;
        /**
         * @var bool
         */
        private $handleCartRemove;
        /**
         * @var string[]
         */
        protected $trackedCodes;

        public function __construct(PiwikTracker $tracker, TrackingItemBuilderInterface $trackingItemBuilder, EngineInterface $templatingEngine, array $options = [ ]) {}
        protected function configureOptions(OptionsResolver $resolver) {}
        protected function processOptions(array $options) {}
        public function trackProductView(ProductInterface $product) {}
        public function trackCategoryPageView($category, $page = null) {}
        public function trackCartProductActionAdd(CartInterface $cart, ProductInterface $product, $quantity = 1) {}
        public function trackCartProductActionRemove(CartInterface $cart, ProductInterface $product, $quantity = 1) {}
        public function trackCartUpdate(CartInterface $cart) {}
        public function trackCheckoutComplete(AbstractOrder $order) {}
        public function trackEvent(string $eventCategory, string $eventAction, string $eventLabel = null, int $eventValue = null) {}
        public function getTrackedCodes() : array {}
        public function trackCode(string $code) {}
        private function renderCalls(array $calls) : string {}
        private function buildItemCalls(array $items) : array {}
        private function filterCategories($categories, int $limit = 5) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\Tracking\Tracker\Analytics {
    class UniversalEcommerce extends \pimcore\bundle\ecommerceframeworkbundle\tracking\tracker\analytics\abstractanalyticstracker implements \pimcore\bundle\ecommerceframeworkbundle\tracking\checkoutcompleteinterface {
        protected function configureOptions(OptionsResolver $resolver) {}
        public function trackCheckoutComplete(AbstractOrder $order) {}
        protected function buildCheckoutCompleteCalls(Transaction $transaction, array $items) {}
        protected function transformTransaction(Transaction $transaction) {}
        protected function transformProductAction(ProductAction $item) {}
    }

    class Ecommerce extends \pimcore\bundle\ecommerceframeworkbundle\tracking\tracker\analytics\abstractanalyticstracker implements \pimcore\bundle\ecommerceframeworkbundle\tracking\checkoutcompleteinterface {
        protected function configureOptions(OptionsResolver $resolver) {}
        public function trackCheckoutComplete(AbstractOrder $order) {}
        protected function buildCheckoutCompleteCalls(Transaction $transaction, array $items) {}
        protected function transformTransaction(Transaction $transaction) {}
        protected function transformProductAction(ProductAction $item) {}
    }

    class EnhancedEcommerce extends \pimcore\bundle\ecommerceframeworkbundle\tracking\tracker\analytics\abstractanalyticstracker implements \pimcore\bundle\ecommerceframeworkbundle\tracking\productviewinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\iproductactionadd, \pimcore\bundle\ecommerceframeworkbundle\tracking\productimpressioninterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\checkoutcompleteinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\checkoutstepinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\trackingcodeawareinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\trackeventinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\cartproductactionaddinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\iproductactionremove, \pimcore\bundle\ecommerceframeworkbundle\tracking\checkoutinterface, \pimcore\bundle\ecommerceframeworkbundle\tracking\cartproductactionremoveinterface {
        /**
         * Dependencies to include before any tracking actions
         *
         * @var array
         */
        protected $dependencies;
        /**
         * @var bool
         */
        protected $dependenciesIncluded;
        /**
         * @var string[]
         */
        protected $trackedCodes;

        protected function configureOptions(OptionsResolver $resolver) {}
        public function trackProductView(ProductInterface $product) {}
        public function trackProductImpression(ProductInterface $product, string $list = 'default') {}
        public function trackCartProductActionAdd(CartInterface $cart, ProductInterface $product, $quantity = 1) {}
        public function trackProductActionAdd(ProductInterface $product, $quantity = 1) {}
        public function trackCartProductActionRemove(CartInterface $cart, ProductInterface $product, $quantity = 1) {}
        public function trackProductActionRemove(ProductInterface $product, $quantity = 1) {}
        protected function trackProductAction($product, $action, $quantity = 1) {}
        public function trackCheckout(CartInterface $cart) {}
        public function trackCheckoutStep(CheckoutManagerCheckoutStepInterface $step, CartInterface $cart, $stepNumber = null, $checkoutOption = null) {}
        public function trackCheckoutComplete(AbstractOrder $order) {}
        public function trackEvent(string $eventCategory, string $eventAction, string $eventLabel = null, int $eventValue = null) {}
        public function getTrackedCodes() : array {}
        public function trackCode(string $code) {}
        protected function buildCheckoutCompleteCalls(Transaction $transaction, array $items) {}
        protected function transformTransaction(Transaction $transaction) {}
        protected function buildCheckoutCalls(array $items) {}
        protected function transformProductAction(ProductAction $item) {}
        protected function transformProductImpression(ProductImpression $item) {}
        /**
         * Makes sure dependencies are included once before any call
         */
        protected function ensureDependencies() {}
    }

    abstract class AbstractAnalyticsTracker extends \pimcore\bundle\ecommerceframeworkbundle\tracking\tracker {
        /**
         * @var Tracker
         */
        protected $tracker;

        public function setTracker(Tracker $tracker) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\Maintenance {
    class CleanupVouchersTask implements \pimcore\maintenance\taskinterface {
        public function execute() {}
    }

    class CleanupPendingOrdersTask implements \pimcore\maintenance\taskinterface {
        public function execute() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\Command {
    class CleanupPendingOrdersCommand extends \pimcore\console\abstractcommand {
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\Command\Voucher {
    class CleanupStatisticsCommand extends \pimcore\console\abstractcommand {
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    class CleanupReservationsCommand extends \pimcore\console\abstractcommand {
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\Command\IndexService {
    class ResetQueueCommand extends \pimcore\bundle\ecommerceframeworkbundle\command\indexservice\abstractindexservicecommand {
        /**
         * @inheritDoc
         */
        protected function configure() {}
/** @var AbstractBatchProcessingWorker $worker */
        protected function execute(/** @var AbstractBatchProcessingWorker $worker */
InputInterface $input, /** @var AbstractBatchProcessingWorker $worker */
OutputInterface $output) {}
    }

    class ProcessQueueCommand extends \pimcore\bundle\ecommerceframeworkbundle\command\indexservice\abstractindexservicecommand {
        /**
         * @inheritDoc
         */
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        protected function getLockname(InputInterface $input) {}
        protected function checkLock(InputInterface $input) {}
    }

    class BootstrapCommand extends \pimcore\bundle\ecommerceframeworkbundle\command\indexservice\abstractindexservicecommand {
        /**
         * @inheritDoc
         */
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    abstract class AbstractIndexServiceCommand extends \pimcore\console\abstractcommand {
        const LOGGER_NAME = 'indexupdater';

    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\IndexService {
    class IndexService {
        /**
         * @var EnvironmentInterface
         */
        protected $environment;
        /**
         * @var WorkerInterface[]
         */
        protected $tenantWorkers;
        /**
         * @var string
         */
        protected $defaultTenant;

        public function __construct(EnvironmentInterface $environment, array $tenantWorkers = [ ], string $defaultTenant = 'default') {}
        protected function registerTenantWorker(WorkerInterface $tenantWorker) {}
        public function getTenants() : array {}
        public function getTenantWorker(string $tenant) : WorkerInterface {}
        /**
         * Returns default worker as set in defaultTenant
         *
         * @return WorkerInterface
         *
         * @throws DefaultWorkerNotFoundException
         */
        public function getDefaultWorker() : WorkerInterface {}
        public function getGeneralSearchColumns(string $tenant = null) {}
        public function getGeneralSearchAttributes(string $tenant = null) : array {}
        /**
         * @deprecated
         */
        public function createOrUpdateTable() {}
        /**
         * Creates or updates necessary index structures (e.g. database tables)
         */
        public function createOrUpdateIndexStructures() {}
        public function deleteFromIndex(IndexableInterface $object) {}
        public function updateIndex(IndexableInterface $object) {}
        public function getIndexAttributes(bool $considerHideInFieldList = false, string $tenant = null) : array {}
        public function getIndexColumns($considerHideInFieldList = false, $tenant = null) {}
        public function getAllFilterGroups(string $tenant = null) : array {}
        public function getIndexAttributesByFilterGroup($filterType, string $tenant = null) : array {}
        public function getIndexColumnsByFilterGroup($filterType, $tenant = null) {}
        /**
         * Returns current tenant configuration
         *
         * @return ConfigInterface
         *
         * @throws InvalidConfigException
         */
        public function getCurrentTenantConfig() {}
        public function getCurrentTenantWorker() : WorkerInterface {}
        public function getProductListForCurrentTenant() : ProductListInterface {}
        public function getProductListForTenant(string $tenant) : ProductListInterface {}
        protected function resolveTenantWorker(string $tenant = null) : WorkerInterface {}
        public function setTenantWorkers(array $tenantWorkers) : self {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\IndexService\Interpreter {
    class DefaultObjects implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\interpreter\relationinterpreterinterface {
        public function interpret($value, $config = null) {}
    }

    class StructuredTable implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\interpreter\interpreterinterface {
    use \pimcore\bundle\ecommerceframeworkbundle\traits\optionsresolvertrait;

        public function interpret($value, $config = null) {}
        protected function configureOptionsResolver(string $resolverName, OptionsResolver $resolver) {}
    }

    class ObjectId implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\interpreter\interpreterinterface {
        public function interpret($value, $config = null) {}
    }

    class AssetId implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\interpreter\interpreterinterface {
        public function interpret($value, $config = null) {}
    }

    class Round implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\interpreter\interpreterinterface {
        public function interpret($value, $config = null) {}
    }

    class IdList implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\interpreter\interpreterinterface {
    use \pimcore\bundle\ecommerceframeworkbundle\traits\optionsresolvertrait;

        public function interpret($value, $config = null) {}
        protected function configureOptionsResolver(string $resolverName, OptionsResolver $resolver) {}
    }

    class QuantityValue implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\interpreter\interpreterinterface {
    use \pimcore\bundle\ecommerceframeworkbundle\traits\optionsresolvertrait;

        public function interpret($value, $config = null) {}
        protected function configureOptionsResolver(string $resolverName, OptionsResolver $resolver) {}
    }

    class DefaultRelations implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\interpreter\relationinterpreterinterface {
        public function interpret($value, $config = null) {}
    }

    class DefaultClassificationStore implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\interpreter\interpreterinterface {
        public function interpret($value, $config = null) {}
        public function getAllKeysFromStore(Classificationstore $store) : array {}
    }

    class ObjectIdSum implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\interpreter\interpreterinterface {
        public function interpret($value, $config = null) {}
    }

    class DefaultStructuredTable implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\interpreter\interpreterinterface {
    use \pimcore\bundle\ecommerceframeworkbundle\traits\optionsresolvertrait;

        public function interpret($value, $config = null) {}
        protected function configureOptionsResolver(string $resolverName, OptionsResolver $resolver) {}
    }

    class Numeric implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\interpreter\interpreterinterface {
        public function interpret($value, $config = null) {}
    }

    class ObjectValue implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\interpreter\interpreterinterface {
    use \pimcore\bundle\ecommerceframeworkbundle\traits\optionsresolvertrait;

        public function interpret($value, $config = null) {}
        protected function configureOptionsResolver(string $resolverName, OptionsResolver $resolver) {}
    }

    class Soundex implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\interpreter\interpreterinterface {
        public function interpret($value, $config = null) {}
    }


    /**
     * @deprecated use RelationInterpreterInterface instead.
     */
    interface IRelationInterpreter {}

    interface InterpreterInterface {
        function interpret($value, $config = null) ;
    }

    /**
     * @deprecated use InterpreterInterface instead.
     */
    interface IInterpreter {}

    interface RelationInterpreterInterface extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\interpreter\interpreterinterface {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\IndexService\Getter {
    class DefaultBrickGetterSequenceToMultiselect implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\getter\getterinterface {
    use \pimcore\bundle\ecommerceframeworkbundle\traits\optionsresolvertrait;

        public function get($object, $config = null) {}
        protected function configureOptionsResolver(string $resolverName, OptionsResolver $resolver) {}
    }

    class DefaultBrickGetterSequence implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\getter\getterinterface {
    use \pimcore\bundle\ecommerceframeworkbundle\traits\optionsresolvertrait;

        public function get($object, $config = null) {}
        protected function configureOptionsResolver(string $resolverName, OptionsResolver $resolver) {}
    }

    class TagsGetter implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\getter\getterinterface {
    use \pimcore\bundle\ecommerceframeworkbundle\traits\optionsresolvertrait;

        public function get($element, $config = null) {}
        protected function configureOptionsResolver(string $resolverName, OptionsResolver $resolver) {}
    }

    class DefaultClassificationAttributeGetter implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\getter\getterinterface {
    use \pimcore\bundle\ecommerceframeworkbundle\traits\optionsresolvertrait;

/** @var Classificationstore $classificationStore */
        public function get(/** @var Classificationstore $classificationStore */
$object, /** @var Classificationstore $classificationStore */
$config = null) {}
        protected function configureOptionsResolver(string $resolverName, OptionsResolver $resolver) {}
    }

    class DefaultBrickGetter implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\getter\getterinterface {
    use \pimcore\bundle\ecommerceframeworkbundle\traits\optionsresolvertrait;

        public function get($object, $config = null) {}
        protected function configureOptionsResolver(string $resolverName, OptionsResolver $resolver) {}
        public static function setupBrickGetterOptionsResolver(OptionsResolver $resolver) {}
    }


    interface GetterInterface {
        function get($object, $config = null) ;
    }

    /**
     * Interface for getter of product index columns which consider sub object ids and tenant configs
     */
    interface ExtendedGetterInterface extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\getter\getterinterface {
        function get($object, $config = null, $subObjectId = null, ConfigInterface $tenantConfig = null) ;
    }

    /**
     * @deprecated use GetterInterface instead.
     */
    interface IGetter {}

    /**
     * @deprecated use ExtendedGetterInterface instead.
     */
    interface IExtendedGetter {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\IndexService\Config {
    /**
     * Tenant configuration for a simple mysql product index implementation. It is used by the default tenant.
     *
     * @method DefaultMysqlWorker getTenantWorker()
     */
    class DefaultMysql extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\abstractconfig implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\mysqlconfiginterface {
        /**
         * @return string
         */
        public function getTablename() {}
        /**
         * @return string
         */
        public function getRelationTablename() {}
        /**
         * @return string
         */
        public function getTenantRelationTablename() {}
        /**
         * @return string
         */
        public function getJoins() {}
        /**
         * @return string
         */
        public function getCondition() {}
        public function inIndex(IndexableInterface $object) {}
        public function prepareSubTenantEntries(IndexableInterface $object, $subObjectId = null) {}
        public function updateSubTenantEntries($objectId, $subTenantData, $subObjectId = null) {}
        public function getIdColumnType($isPrimary) {}
        public function setTenantWorker(WorkerInterface $tenantWorker) {}
    }

    /**
     * Default configuration for elastic search as product index implementation.
     *
     * @method DefaultElasticSearchWorker getTenantWorker()
     */
    class ElasticSearch extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\abstractconfig implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\mockupconfiginterface, \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\elasticsearchconfiginterface {
    use \pimcore\bundle\ecommerceframeworkbundle\traits\optionsresolvertrait;

        /**
         * @var array
         */
        protected $clientConfig;
        /**
         * @var array
         */
        protected $indexSettings;
        /**
         * @var array
         */
        protected $elasticSearchClientParams;
        /**
         * contains the mapping for the fields in Elasticsearch
         *
         * @var array
         */
        protected $fieldMapping;
        /**
         * @var EnvironmentInterface
         */
        protected $environment;

        protected function addAttribute(Attribute $attribute) {}
        protected function addSearchAttribute(string $searchAttribute) {}
        protected function processOptions(array $options) {}
        protected function configureOptionsResolver(string $resolverName, OptionsResolver $resolver) {}
        protected function extractPossibleFirstSubFieldnameParts($fieldName) {}
        public function getFieldNameMapped($fieldName, $considerSubFieldNames = false) {}
        public function getReverseMappedFieldName($fullFieldName) {}
        public function getClientConfig($property = null) {}
        /**
         * @return array
         */
        public function getIndexSettings() {}
        /**
         * @return array
         */
        public function getElasticSearchClientParams() {}
        public function inIndex(IndexableInterface $object) {}
        public function prepareSubTenantEntries(IndexableInterface $object, $subObjectId = null) {}
        public function updateSubTenantEntries($objectId, $subTenantData, $subObjectId = null) {}
        /**
         * returns condition for current subtenant
         *
         * @return array
         */
        public function getSubTenantCondition() {}
        public function setTenantWorker(WorkerInterface $tenantWorker) {}
        public function createMockupObject($objectId, $data, $relations) {}
        public function getObjectMockupById($objectId) {}
        public function setEnvironment(EnvironmentInterface $environment) {}
    }

    /**
     * Default implementation for fact finder as product index backend
     *
     * @method DefaultFactFinderWorker getTenantWorker()
     */
    class DefaultFactFinder extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\abstractconfig implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\factfinderconfiginterface, \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\mockupconfiginterface {
    use \pimcore\bundle\ecommerceframeworkbundle\traits\optionsresolvertrait;

        /**
         * @var array
         */
        protected $clientConfig;

        protected function processOptions(array $options) {}
        protected function configureOptionsResolver(string $resolverName, OptionsResolver $resolver) {}
        public function getClientConfig($property = null) {}
        public function inIndex(IndexableInterface $object) {}
        public function prepareSubTenantEntries(IndexableInterface $object, $subObjectId = null) {}
        public function updateSubTenantEntries($objectId, $subTenantData, $subObjectId = null) {}
        public function setTenantWorker(WorkerInterface $tenantWorker) {}
        /**
         * returns condition for current subtenant
         *
         * @return array
         */
        public function getSubTenantCondition() {}
        public function createMockupObject($objectId, $data, $relations) {}
    }

    /**
     * Default implementation for FINDOLOGIC as product index backend
     *
     * @method DefaultFindologicWorker getTenantWorker()
     */
    class DefaultFindologic extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\abstractconfig implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\findologicconfiginterface, \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\mockupconfiginterface {
    use \pimcore\bundle\ecommerceframeworkbundle\traits\optionsresolvertrait;

        /**
         * @var array
         */
        protected $clientConfig;

        protected function processOptions(array $options) {}
        protected function configureOptionsResolver(string $resolverName, OptionsResolver $resolver) {}
        public function getClientConfig($property = null) {}
        public function inIndex(IndexableInterface $object) {}
        public function prepareSubTenantEntries(IndexableInterface $object, $subObjectId = null) {}
        public function updateSubTenantEntries($objectId, $subTenantData, $subObjectId = null) {}
        public function setTenantWorker(WorkerInterface $tenantWorker) {}
        /**
         * returns condition for current subtenant
         *
         * @return array
         */
        public function getSubTenantCondition() {}
        public function createMockupObject($objectId, $data, $relations) {}
    }

    /**
     * Sample implementation for sub-tenants based on mysql.
     *
     * NOTE: this works only with a single-column primary key
     */
    class DefaultMysqlSubTenantConfig extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\defaultmysql {
        /**
         * @var EnvironmentInterface
         */
        protected $environment;
        /**
         * @var ConnectionInterface
         */
        protected $db;

        public function __construct(string $tenantName, array $attributes, array $searchAttributes, array $filterTypes, array $options = [ ], EnvironmentInterface $environment, ConnectionInterface $db) {}
        /**
         * returns table name of product index
         *
         * @return string
         */
        public function getTablename() {}
        /**
         * returns table name of product index reations
         *
         * @return string
         */
        public function getRelationTablename() {}
        /**
         * return table name of product index tenant relations for subtenants
         *
         * @return string
         */
        public function getTenantRelationTablename() {}
        public function inIndex(IndexableInterface $object) {}
        /**
         * return join statement in case of subtenants
         *
         * In this case adds join statement to tenant relation table. But in theory any needed join statement can be
         * added here.
         *
         * @return string
         */
        public function getJoins() {}
        /**
         * returns additional condition in case of subtenants
         *
         * In this case just adds the condition that subtenant_id equals the current subtenant
         *
         * @return string
         */
        public function getCondition() {}
        public function prepareSubTenantEntries(IndexableInterface $object, $subObjectId = null) {}
        public function updateSubTenantEntries($objectId, $subTenantData, $subObjectId = null) {}
    }

    abstract class AbstractConfig implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\configinterface {
        /**
         * @var string
         */
        protected $tenantName;
        /**
         * @var array
         */
        protected $attributeConfig;
        /**
         * @var array
         */
        protected $searchAttributeConfig;
        /**
         * @var AttributeFactory
         */
        protected $attributeFactory;
        /**
         * @var Attribute[]
         */
        protected $attributes;
        /**
         * @var array
         */
        protected $searchAttributes;
        /**
         * @var array
         */
        protected $filterTypes;
        /**
         * @var WorkerInterface
         */
        protected $tenantWorker;
        /**
         * @var Config
         */
        protected $filterTypeConfig;
        /**
         * @var array
         */
        protected $options;

        public function __construct(string $tenantName, array $attributes, array $searchAttributes, array $filterTypes, array $options = [ ]) {}
        /**
         * Attribute configuration
         *
         * @return array
         */
        public function getAttributeConfig() {}
        public function setAttributeFactory(AttributeFactory $attributeFactory) {}
        protected function buildAttributes(array $attributes) {}
        protected function addAttribute(Attribute $attribute) {}
        protected function addSearchAttribute(string $searchAttribute) {}
        protected function processOptions(array $options) {}
        public function setTenantWorker(WorkerInterface $tenantWorker) {}
        protected function checkTenantWorker(WorkerInterface $tenantWorker) {}
        /**
         * @inheritDoc
         */
        public function getTenantWorker() {}
        /**
         * @return string
         */
        public function getTenantName() {}
        /**
         * Returns configured attributes for product index
         *
         * @return Attribute[]
         */
        public function getAttributes() : array {}
        /**
         * Returns full text search index attribute names for product index
         *
         * @return array
         */
        public function getSearchAttributes() : array {}
        /**
         * return all supported filter types for product index
         *
         * @return array|null
         */
        public function getFilterTypeConfig() {}
        public function isActive(IndexableInterface $object) {}
        public function getCategories(IndexableInterface $object, $subObjectId = null) {}
        public function createSubIdsForObject(IndexableInterface $object) {}
        public function getSubIdsToCleanup(IndexableInterface $object, array $subIds) {}
        public function createVirtualParentIdForSubId(IndexableInterface $object, $subId) {}
        public function getObjectById($objectId, $onlyMainObject = false) {}
        public function getObjectMockupById($objectId) {}
        public function getIdColumnType($isPrimary) {}
    }

    /**
     * Configuration for the optimized mysql product index implementation.
     */
    class OptimizedMysql extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\defaultmysql implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\mockupconfiginterface {
        public function createMockupObject($objectId, $data, $relations) {}
        public function getObjectMockupById($objectId) {}
        public function setTenantWorker(WorkerInterface $tenantWorker) {}
    }

    /**
     * Builds attributes from config. Getters and interpreters are scoped service locators
     * containing only the configured getters/interpreters.
     */
    class AttributeFactory {
        /**
         * @var ContainerInterface
         */
        private $getters;
        /**
         * @var ContainerInterface
         */
        private $interpreters;

        public function __construct(ContainerInterface $getters, ContainerInterface $interpreters) {}
        public function createAttribute(array $config) : Attribute {}
    }

    /**
     * Sample implementation for sub-tenants based on elastic search.
     */
    class DefaultElasticSearchSubTenantConfig extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\elasticsearch {
        public function inIndex(IndexableInterface $object) {}
        public function prepareSubTenantEntries(IndexableInterface $object, $subObjectId = null) {}
    }


    /**
     * Interface for IndexService Tenant Configurations using elastic search as index
     */
    interface ElasticSearchConfigInterface extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\configinterface {
        /**
         * returns elastic search client parameters defined in the tenant config
         *
         * @return array
         */
        function getElasticSearchClientParams() ;
        /**
         * returns condition for current subtenant
         *
         * @return array
         */
        function getSubTenantCondition() ;
        /**
         * creates and returns tenant worker suitable for this tenant configuration
         *
         * @return AbstractElasticSearch
         */
        function getTenantWorker() ;
    }

    /**
     * @deprecated use MockupConfigInterface instead.
     */
    interface IMockupConfig {}

    /**
     * Interface for IndexService Tenant Configurations
     */
    interface ConfigInterface {
        /**
         * returns tenant name
         *
         * @return string
         */
        function getTenantName() ;
        /**
         * Returns configured attributes for product index
         *
         * @return Attribute[]
         */
        function getAttributes() : array ;
        /**
         * Returns full text search index attribute names for product index
         *
         * @return array
         */
        function getSearchAttributes() : array ;
        /**
         * return all supported filter types for product index
         *
         * @return array
         */
        function getFilterTypeConfig() ;
        function isActive(IndexableInterface $object) ;
        function inIndex(IndexableInterface $object) ;
        function getCategories(IndexableInterface $object, $subObjectId = null) ;
        function prepareSubTenantEntries(IndexableInterface $object, $subObjectId = null) ;
        function updateSubTenantEntries($objectId, $subTenantData, $subObjectId = null) ;
        function setTenantWorker(WorkerInterface $tenantWorker) ;
        /**
         * creates and returns tenant worker suitable for this tenant configuration
         *
         * @return WorkerInterface
         */
        function getTenantWorker() ;
        function createSubIdsForObject(IndexableInterface $object) ;
        function getSubIdsToCleanup(IndexableInterface $object, array $subIds) ;
        function createVirtualParentIdForSubId(IndexableInterface $object, $subId) ;
        function getObjectById($objectId, $onlyMainObject = false) ;
        function getObjectMockupById($objectId) ;
    }

    /**
     * @deprecated use ConfigInterface instead.
     */
    interface IConfig {}

    /**
     * @deprecated use FactFinderConfigInterface instead.
     */
    interface IFactFinderConfig {}

    /**
     * @deprecated use FindologicConfigInterface instead.
     */
    interface IFindologicConfig {}

    /**
     * @deprecated use MysqlConfigInterface instead.
     */
    interface IMysqlConfig {}

    /**
     * Interface for IndexService Tenant Configurations with mockup implementations
     */
    interface MockupConfigInterface {
        function createMockupObject($objectId, $data, $relations) ;
    }

    /**
     * Interface for IndexService Tenant Configurations using findologic as index
     */
    interface FindologicConfigInterface extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\configinterface {
        function getClientConfig($setting = null) ;
        /**
         * returns condition for current subtenant
         *
         * @return string
         */
        function getSubTenantCondition() ;
        /**
         * creates and returns tenant worker suitable for this tenant configuration
         *
         * @return DefaultFindologicWorker
         */
        function getTenantWorker() ;
    }

    /**
     * Interface for IndexService Tenant Configurations using factfinder as index
     */
    interface FactFinderConfigInterface extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\configinterface {
        function getClientConfig($setting = null) ;
        /**
         * returns condition for current subtenant
         *
         * @return array
         */
        function getSubTenantCondition() ;
        /**
         * creates and returns tenant worker suitable for this tenant configuration
         *
         * @return DefaultFactFinderWorker
         */
        function getTenantWorker() ;
    }

    /**
     * @deprecated use ElasticSearchConfigInterface instead.
     */
    interface IElasticSearchConfig {}

    /**
     * Interface for IndexService Tenant Configurations using mysql as index
     */
    interface MysqlConfigInterface extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\config\configinterface {
        /**
         * returns table name of product index
         *
         * @return string
         */
        function getTablename() ;
        /**
         * returns table name of product index reations
         *
         * @return string
         */
        function getRelationTablename() ;
        /**
         * return table name of product index tenant relations for subtenants
         *
         * @return string
         */
        function getTenantRelationTablename() ;
        /**
         * return join statement in case of subtenants
         *
         * @return string
         */
        function getJoins() ;
        /**
         * returns additional condition in case of subtenants
         *
         * @return string
         */
        function getCondition() ;
        function getIdColumnType($isPrimary) ;
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\IndexService\Config\Definition {
    class Attribute {
        /**
         * @var string
         */
        private $name;
        /**
         * @var string
         */
        private $fieldName;
        /**
         * @var string
         */
        private $type;
        /**
         * @var string
         */
        private $locale;
        /**
         * @var string
         */
        private $filterGroup;
        /**
         * @var array
         */
        private $options;
        /**
         * @var GetterInterface
         */
        private $getter;
        /**
         * @var array
         */
        private $getterOptions;
        /**
         * @var InterpreterInterface
         */
        private $interpreter;
        /**
         * @var array
         */
        private $interpreterOptions;
        /**
         * @var bool
         */
        private $hideInFieldlistDatatype;

        public function __construct(string $name, string $fieldName = null, string $type = null, string $locale = null, string $filterGroup = null, array $options = [ ], GetterInterface $getter = null, array $getterOptions = [ ], InterpreterInterface $interpreter = null, array $interpreterOptions = [ ], bool $hideInFieldlistDatatype = false) {}
        /**
         * @return string
         */
        public function getName() : string {}
        /**
         * @return string
         */
        public function getFieldName() : string {}
        /**
         * @return string|null
         */
        public function getType() {}
        /**
         * @return string|null
         */
        public function getLocale() {}
        /**
         * @return string|null
         */
        public function getFilterGroup() {}
        public function getOptions() : array {}
        public function getOption(string $name, $defaultValue = null) {}
        /**
         * @return GetterInterface|null
         */
        public function getGetter() {}
        public function getGetterOptions() : array {}
        /**
         * @return InterpreterInterface|null
         */
        public function getInterpreter() {}
        public function getInterpreterOptions() : array {}
        public function getHideInFieldlistDatatype() : bool {}
        public function getValue(IndexableInterface $object, $subObjectId = null, ConfigInterface $tenantConfig = null, $default = null) {}
        public function interpretValue($value) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\IndexService\ProductList {
    /**
     * Implementation of product list which works based on the product index of the online shop framework
     */
    class DefaultMysql implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\productlist\productlistinterface {
        /**
         * @var null|IndexableInterface[]
         */
        protected $products;
        /**
         * @var string
         */
        protected $tenantName;
        /**
         * @var MysqlConfigInterface
         */
        protected $tenantConfig;
        /**
         * @var null|int
         */
        protected $totalCount;
        /**
         * @var string
         */
        protected $variantMode;
        /**
         * @var int
         */
        protected $limit;
        /**
         * @var int
         */
        protected $offset;
        /**
         * @var AbstractCategory
         */
        protected $category;
        /**
         * @var DefaultMysql\Dao
         */
        protected $resource;
        /**
         * @var bool
         */
        protected $inProductList;
        /**
         * @var Logger
         */
        protected $logger;
        /**
         * @var string[]
         */
        protected $conditions;
        /**
         * @var string[]
         */
        protected $relationConditions;
        /**
         * @var string[][]
         */
        protected $queryConditions;
        /**
         * @var float
         */
        protected $conditionPriceFrom;
        /**
         * @var float
         */
        protected $conditionPriceTo;
        protected $order;
        /**
         * @var string | array
         */
        protected $orderKey;
        protected $orderByPrice;

        public function __construct(MysqlConfigInterface $tenantConfig) {}
        /**
         * @return AbstractProduct[]
         */
        public function getProducts() {}
        public function addCondition($condition, $fieldname = '') {}
        public function resetCondition($fieldname) {}
        public function addRelationCondition($fieldname, $condition) {}
        /**
         * resets all conditions of product list
         */
        public function resetConditions() {}
        public function addQueryCondition($condition, $fieldname = '') {}
        public function resetQueryCondition($fieldname) {}
        public function addPriceCondition($from = null, $to = null) {}
        public function setInProductList($inProductList) {}
        /**
         * @return bool
         */
        public function getInProductList() {}
        public function setOrder($order) {}
        public function getOrder() {}
        public function setOrderKey($orderKey) {}
        public function getOrderKey() {}
        public function setLimit($limit) {}
        public function getLimit() {}
        public function setOffset($offset) {}
        public function getOffset() {}
        public function setCategory(AbstractCategory $category) {}
        public function getCategory() {}
        public function setVariantMode($variantMode) {}
        public function getVariantMode() {}
        public function load() {}
        /**
         * First case: no price filtering and no price sorting
         *
         * @return array
         */
        protected function loadWithoutPriceFilterWithoutPriceSorting() {}
        /**
         * Second case: no price filtering but price sorting
         *
         * @return array
         *
         * @throws \Exception
         *
         * @todo Not implemented yet
         */
        protected function loadWithoutPriceFilterWithPriceSorting() {}
        /**
         * Third case: price filtering but no price sorting
         *
         * @return array
         *
         * @throws \Exception
         *
         * @todo Not implemented yet
         */
        protected function loadWithPriceFilterWithoutPriceSorting() {}
        /**
         * Forth case: price filtering and price sorting
         *
         * @return array
         *
         * @throws \Exception
         *
         * @todo Not implemented yet
         */
        protected function loadWithPriceFilterWithPriceSorting() {}
        protected function loadElementById($elementId) {}
        public function prepareGroupByValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        /**
         * resets all set prepared group by values
         *
         * @return void
         */
        public function resetPreparedGroupByValues() {}
        public function prepareGroupByRelationValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        public function prepareGroupBySystemValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        public function getGroupBySystemValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        public function getGroupByValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        public function getGroupByRelationValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        protected function buildQueryFromConditions($excludeConditions = false, $excludedFieldname = null, $variantMode = null) {}
        protected function buildUserspecificConditions($excludedFieldname = null) {}
        protected function buildOrderBy() {}
        public function quote($value) {}
        /**
         * @return MysqlConfigInterface
         */
        public function getCurrentTenantConfig() {}
        public function buildSimularityOrderBy($fields, $objectId) {}
        public function buildFulltextSearchWhere($fields, $searchstring) {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Count elements of an object
         *
         * @link http://php.net/manual/en/countable.count.php
         *
         * @return int The custom count as an integer.
         * </p>
         * <p>
         * The return value is cast to an integer.
         */
        public function count() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Return the current element
         *
         * @link http://php.net/manual/en/iterator.current.php
         *
         * @return mixed Can return any type.
         */
        public function current() {}
        public function getItems($offset, $itemCountPerPage) {}
        /**
         * Return a fully configured Paginator Adapter from this method.
         *
         * @return AdapterInterface
         */
        public function getPaginatorAdapter() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Return the key of the current element
         *
         * @link http://php.net/manual/en/iterator.key.php
         *
         * @return scalar scalar on success, integer
         * 0 on failure.
         */
        public function key() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Move forward to next element
         *
         * @link http://php.net/manual/en/iterator.next.php
         *
         * @return void Any returned value is ignored.
         */
        public function next() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Rewind the Iterator to the first element
         *
         * @link http://php.net/manual/en/iterator.rewind.php
         *
         * @return void Any returned value is ignored.
         */
        public function rewind() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Checks if current position is valid
         *
         * @link http://php.net/manual/en/iterator.valid.php
         *
         * @return bool The return value will be casted to boolean and then evaluated.
         * Returns true on success or false on failure.
         */
        public function valid() {}
        /**
         * @return array
         */
        public function __sleep() {}
        public function __wakeup() {}
        /**
         * this is needed for ZF1 Paginator
         *
         * @return string
         */
        public function getCacheIdentifier() {}
    }

    class DefaultFactFinder implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\productlist\productlistinterface {
        /**
         * @var IndexableInterface[]
         */
        protected $products;
        /**
         * @var string
         */
        protected $tenantName;
        /**
         * @var bool
         */
        protected $transmitSessionId;
        /**
         * contains a mapping from productId => array Index
         * useful when you have to merge child products to there parent and you don't want to iterate each time over the list
         *
         * @var array
         */
        protected $productPositionMap;
        /**
         * @var FactFinderConfigInterface
         */
        protected $tenantConfig;
        /**
         * @var bool
         */
        protected $useAsn;
        /**
         * @var null
         */
        protected $followSearchParam;
        /**
         * @var array
         */
        protected $defaultParams;
        /**
         * @var null|int
         */
        protected $totalCount;
        /**
         * @var string
         */
        protected $variantMode;
        /**
         * @var int
         */
        protected $limit;
        /**
         * @var int
         */
        protected $offset;
        /**
         * @var AbstractCategory
         */
        protected $category;
        /**
         * @var bool
         */
        protected $inProductList;
        /**
         * json result from factfinder
         *
         * @var string[]
         */
        protected $searchResult;
        /**
         * @var string[]
         */
        protected $groupedValues;
        /**
         * @var string[]
         */
        protected $conditions;
        /**
         * @var array
         */
        protected $queryConditions;
        /**
         * @var float
         */
        protected $conditionPriceFrom;
        /**
         * @var float
         */
        protected $conditionPriceTo;
        /**
         * @var string
         */
        protected $order;
        /**
         * @var string | array
         */
        protected $orderKey;
        /**
         * @var Logger
         */
        protected $logger;
        /**
         * @var bool
         */
        protected $useIdsOnly;

        /**
         * @return bool
         */
        public function getTransmitSessionId() {}
        public function setTransmitSessionId($transmitSessionId) {}
        /**
         * @return bool
         */
        public function getUseIdsOnly() {}
        public function setUseIdsOnly($useIdsOnly) {}
        /**
         * @return bool
         */
        public function getUseAsn() {}
        public function setUseAsn($useAsn) {}
        /**
         * @return array
         */
        public function getProductPositionMap() {}
        /**
         * @return array
         */
        public function getDefaultParams() {}
        public function setDefaultParams($defaultParams) {}
        public function setProductPositionMap($productPositionMap) {}
        public function __construct(ConfigInterface $tenantConfig) {}
        /**
         * @return \Pimcore\Bundle\EcommerceFrameworkBundle\Model\AbstractProduct[]
         */
        public function getProducts() {}
        public function addCondition($condition, $fieldname = '') {}
        public function resetCondition($fieldname) {}
        public function addQueryCondition($condition, $fieldname = '') {}
        public function resetQueryCondition($fieldname) {}
        /**
         * resets all conditions of product list
         */
        public function resetConditions() {}
        public function addRelationCondition($fieldname, $condition) {}
        public function addPriceCondition($from = null, $to = null) {}
        public function setInProductList($inProductList) {}
        /**
         * @return bool
         */
        public function getInProductList() {}
        public function setOrder($order) {}
        /**
         * @return string
         */
        public function getOrder() {}
        public function setOrderKey($orderKey) {}
        public function getOrderKey() {}
        public function setLimit($limit) {}
        public function getLimit() {}
        public function setOffset($offset) {}
        public function getOffset() {}
        public function setCategory(AbstractCategory $category) {}
        public function getCategory() {}
        public function setVariantMode($variantMode) {}
        public function getVariantMode() {}
        /**
         * @return IndexableInterface[]
         *
         * @throws \Exception
         */
        public function load() {}
        protected function buildSystemConditions(array $filter) {}
        protected function buildFilterConditions(array $params) {}
        protected function buildQueryConditions(array $params) {}
        protected function buildSorting(array $params) {}
        public function prepareGroupByValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        /**
         * resets all set prepared group by values
         *
         * @return void
         */
        public function resetPreparedGroupByValues() {}
        public function prepareGroupByRelationValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        public function prepareGroupBySystemValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        public function getGroupBySystemValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        public function getGroupByValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        public function getGroupByRelationValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        protected function doRequest($url, $trys = 0) {}
        /**
         * returns the search url
         *
         * @return string
         */
        protected function getSearchUrl() {}
        /**
         * returns the Fact-Finder query
         *
         * @return string
         */
        public function getQuery() {}
        /**
         * @return string|null
         */
        public function getFollowSearchParam() {}
        public function setFollowSearchParam($followSearchParam) {}
        /**
         * @return array
         *
         * @throws \Exception
         */
        protected function sendRequest() {}
        /**
         * @return Logger
         */
        protected function getLogger() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Count elements of an object
         *
         * @link http://php.net/manual/en/countable.count.php
         *
         * @return int The custom count as an integer.
         * </p>
         * <p>
         * The return value is cast to an integer.
         */
        public function count() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Return the current element
         *
         * @link http://php.net/manual/en/iterator.current.php
         *
         * @return mixed Can return any type.
         */
        public function current() {}
        public function getItems($offset, $itemCountPerPage) {}
        /**
         * Return a fully configured Paginator Adapter from this method.
         *
         * @return AdapterInterface
         */
        public function getPaginatorAdapter() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Return the key of the current element
         *
         * @link http://php.net/manual/en/iterator.key.php
         *
         * @return scalar on success, integer
         * 0 on failure.
         */
        public function key() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Move forward to next element
         *
         * @link http://php.net/manual/en/iterator.next.php
         *
         * @return void Any returned value is ignored.
         */
        public function next() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Rewind the Iterator to the first element
         *
         * @link http://php.net/manual/en/iterator.rewind.php
         *
         * @return void Any returned value is ignored.
         */
        public function rewind() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Checks if current position is valid
         *
         * @link http://php.net/manual/en/iterator.valid.php
         *
         * @return bool The return value will be casted to boolean and then evaluated.
         * Returns true on success or false on failure.
         */
        public function valid() {}
        public function getSearchResult() {}
    }

    class DefaultFindologic implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\productlist\productlistinterface {
        /**
         * @var string
         */
        protected $userIp;
        /**
         * @var string
         */
        protected $referer;
        /**
         * @var string
         */
        protected $revision;
        /**
         * @var IndexableInterface[]
         */
        protected $products;
        /**
         * @var string
         */
        protected $tenantName;
        /**
         * @var FindologicConfigInterface
         */
        protected $tenantConfig;
        /**
         * @var null|int
         */
        protected $totalCount;
        /**
         * @var string
         */
        protected $variantMode;
        /**
         * @var int
         */
        protected $limit;
        /**
         * @var int
         */
        protected $offset;
        /**
         * @var AbstractCategory
         */
        protected $category;
        /**
         * @var bool
         */
        protected $inProductList;
        /**
         * json result from findologic
         *
         * @var string[]
         */
        protected $response;
        /**
         * @var string[]
         */
        protected $groupedValues;
        /**
         * @var string[]
         */
        protected $conditions;
        /**
         * @var array
         */
        protected $queryConditions;
        /**
         * @var float
         */
        protected $conditionPriceFrom;
        /**
         * @var float
         */
        protected $conditionPriceTo;
        /**
         * @var string
         */
        protected $order;
        /**
         * @var string | array
         */
        protected $orderKey;
        /**
         * @var Logger
         */
        protected $logger;
        /**
         * @var array
         */
        protected $supportedOrderKeys;
        /**
         * @var int
         */
        protected $timeout;

        public function __construct(ConfigInterface $tenantConfig) {}
        /**
         * @return \Pimcore\Bundle\EcommerceFrameworkBundle\Model\AbstractProduct[]
         */
        public function getProducts() {}
        public function addCondition($condition, $fieldname = '') {}
        public function resetCondition($fieldname) {}
        public function addQueryCondition($condition, $fieldname = '') {}
        public function resetQueryCondition($fieldname) {}
        /**
         * resets all conditions of product list
         */
        public function resetConditions() {}
        public function addRelationCondition($fieldname, $condition) {}
        public function addPriceCondition($from = null, $to = null) {}
        public function setInProductList($inProductList) {}
        /**
         * @return bool
         */
        public function getInProductList() {}
        public function setOrder($order) {}
        /**
         * @return string
         */
        public function getOrder() {}
        public function setOrderKey($orderKey) {}
        public function getOrderKey() {}
        public function setLimit($limit) {}
        public function getLimit() {}
        public function setOffset($offset) {}
        public function getOffset() {}
        public function setCategory(AbstractCategory $category) {}
        public function getCategory() {}
        public function setVariantMode($variantMode) {}
        public function getVariantMode() {}
        /**
         * @return IndexableInterface[]
         */
        public function load() {}
        protected function buildSystemConditions(array $filter) {}
        protected function buildFilterConditions(array $params) {}
        public function buildCategoryTree(AbstractCategory $currentCat) {}
        protected function buildQueryConditions(array $params) {}
        protected function buildSorting(array $params) {}
        public function prepareGroupByValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        /**
         * resets all set prepared group by values
         *
         * @return void
         */
        public function resetPreparedGroupByValues() {}
        public function prepareGroupByRelationValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        public function prepareGroupBySystemValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        public function getGroupBySystemValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        public function getGroupByValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        public function getGroupByRelationValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        /**
         * @return IndexableInterface[]
         */
        protected function doLoadGroupByValues() {}
        protected function sendRequest(array $params) {}
        /**
         * @return Logger
         */
        protected function getLogger() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Count elements of an object
         *
         * @link http://php.net/manual/en/countable.count.php
         *
         * @return int The custom count as an integer.
         * </p>
         * <p>
         * The return value is cast to an integer.
         */
        public function count() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Return the current element
         *
         * @link http://php.net/manual/en/iterator.current.php
         *
         * @return mixed Can return any type.
         */
        public function current() {}
        public function getItems($offset, $itemCountPerPage) {}
        /**
         * Return a fully configured Paginator Adapter from this method.
         *
         * @return AdapterInterface
         */
        public function getPaginatorAdapter() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Return the key of the current element
         *
         * @link http://php.net/manual/en/iterator.key.php
         *
         * @return scalar on success, integer
         * 0 on failure.
         */
        public function key() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Move forward to next element
         *
         * @link http://php.net/manual/en/iterator.next.php
         *
         * @return void Any returned value is ignored.
         */
        public function next() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Rewind the Iterator to the first element
         *
         * @link http://php.net/manual/en/iterator.rewind.php
         *
         * @return void Any returned value is ignored.
         */
        public function rewind() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Checks if current position is valid
         *
         * @link http://php.net/manual/en/iterator.valid.php
         *
         * @return bool The return value will be casted to boolean and then evaluated.
         * Returns true on success or false on failure.
         */
        public function valid() {}
    }


    /**
     * @deprecated use ProductListInterface instead.
     */
    interface IProductList {}

    /**
     * Interface for product list which works based on the product index of the online shop framework
     */
    interface ProductListInterface extends \zend\paginator\adapteraggregateinterface {
    const VARIANT_MODE_INCLUDE = 'include';
    const VARIANT_MODE_VARIANTS_ONLY = 'variants_only';
    const VARIANT_MODE_INCLUDE_PARENT_OBJECT = 'include_parent_object';
    const ORDERKEY_PRICE = 'orderkey_price';
    const PRODUCT_TYPE_OBJECT = 'object';
    const PRODUCT_TYPE_VARIANT = 'variant';
    const VARIANT_MODE_HIDE = 'hide';
        /**
         * Returns all products valid for this search
         *
         * @return IndexableInterface[]
         */
        function getProducts() ;
        function addCondition($condition, $fieldname = '') ;
        function addQueryCondition($condition, $fieldname = '') ;
        function resetCondition($fieldname) ;
        function resetQueryCondition($fieldname) ;
        function addRelationCondition($fieldname, $condition) ;
        /**
         * Resets all conditions of product list
         */
        function resetConditions() ;
        function addPriceCondition($from = null, $to = null) ;
        function setInProductList($inProductList) ;
        /**
         * @return bool
         */
        function getInProductList() ;
        function setOrder($order) ;
        /**
         * gets order direction
         *
         * @return string
         */
        function getOrder() ;
        function setOrderKey($orderKey) ;
        /**
         * @return string | array
         */
        function getOrderKey() ;
        function setLimit($limit) ;
        /**
         * @return int
         */
        function getLimit() ;
        function setOffset($offset) ;
        /**
         * @return int
         */
        function getOffset() ;
        function setCategory(AbstractCategory $category) ;
        /**
         * @return AbstractCategory
         */
        function getCategory() ;
        function setVariantMode($variantMode) ;
        /**
         * @return string
         */
        function getVariantMode() ;
        /**
         * loads search results from index and returns them
         *
         * @return IndexableInterface[]
         */
        function load() ;
        function prepareGroupByValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) ;
        function prepareGroupByRelationValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) ;
        function prepareGroupBySystemValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) ;
        /**
         * resets all set prepared group by values
         *
         * @return void
         */
        function resetPreparedGroupByValues() ;
        function getGroupByValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) ;
        function getGroupByRelationValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) ;
        function getGroupBySystemValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) ;
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\IndexService\ProductList\DefaultMysql {
    class Dao {
        /**
         * @var \Pimcore\Db\ConnectionInterface
         */
        private $db;
        /**
         * @var DefaultMysql
         */
        private $model;
        /**
         * @var int
         */
        private $lastRecordCount;
        /**
         * @var Logger
         */
        protected $logger;

        public function __construct(ProductListInterface $model, Logger $logger) {}
        public function load($condition, $orderBy = null, $limit = null, $offset = null) {}
        public function loadGroupByValues($fieldname, $condition, $countValues = false) {}
        public function loadGroupByRelationValues($fieldname, $condition, $countValues = false) {}
        public function getCount($condition, $orderBy = null, $limit = null, $offset = null) {}
        public function quote($value) {}
        public function buildSimularityOrderBy($fields, $objectId) {}
        public function buildFulltextSearchWhere($fields, $searchstring) {}
        /**
         * get the record count for the last select query
         *
         * @return int
         */
        public function getLastRecordCount() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\IndexService\ProductList\ElasticSearch {
    abstract class AbstractElasticSearch implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\productlist\productlistinterface {
        const LIMIT_UNLIMITED = 'unlimited';
        const INTEGER_MAX_VALUE = 2147483647;

        /**
         * @var null|IndexableInterface[]
         */
        protected $products;
        /**
         * Timeout for a request in seconds
         *
         * @var int
         */
        protected $timeout;
        /**
         * Name of the index
         *
         * @var string
         */
        protected $indexName;
        /**
         * @var string
         */
        protected $tenantName;
        /**
         * @var ElasticSearchConfigInterface
         */
        protected $tenantConfig;
        /**
         * @var null|int
         */
        protected $totalCount;
        /**
         * @var string
         */
        protected $variantMode;
        /**
         * @var int
         */
        protected $limit;
        /**
         * @var string
         */
        protected $order;
        /**
         * @var string
         */
        protected $orderKey;
        /**
         * @var bool
         */
        protected $orderByPrice;
        /**
         * @var int
         */
        protected $offset;
        /**
         * @var AbstractCategory
         */
        protected $category;
        /**
         * @var bool
         */
        protected $inProductList;
        /**
         * @var string[][]
         */
        protected $filterConditions;
        /**
         * @var string[][]
         */
        protected $queryConditions;
        /**
         * @var string[][]
         */
        protected $relationConditions;
        /**
         * @var float
         */
        protected $conditionPriceFrom;
        /**
         * @var float
         */
        protected $conditionPriceTo;
        /**
         * @var array
         */
        protected $preparedGroupByValues;
        /**
         * @var array
         */
        protected $preparedGroupByValuesResults;
        /**
         * @var bool
         */
        protected $preparedGroupByValuesLoaded;
        /**
         * @var array
         */
        protected $searchAggregation;
        /**
         * contains a mapping from productId => array Index
         * useful when you have to merge child products to there parent and you don't want to iterate each time over the list
         *
         * @var array
         */
        protected $productPositionMap;
        protected $doScrollRequest;
        protected $scrollRequestKeepAlive;

        /**
         * @return array
         */
        public function getSearchAggregation() {}
        public function setSearchAggregation(array $searchAggregation) {}
        public function __construct(ElasticSearchConfigInterface $tenantConfig) {}
        /**
         * @return int
         */
        public function getTimeout() {}
        public function setTimeout($timeout) {}
        /**
         * Returns all products valid for this search
         *
         * @return IndexableInterface[]
         */
        public function getProducts() {}
        /**
         * Returns the Mapping of the productId => position
         *
         * @return array
         */
        public function getProductPositionMap() {}
        public function setProductPositionMap($productPositionMap) {}
        public function addCondition($condition, $fieldname = '') {}
        public function resetCondition($fieldname) {}
        public function addRelationCondition($fieldname, $condition) {}
        /**
         * Resets all conditions of product list
         */
        public function resetConditions() {}
        public function addQueryCondition($condition, $fieldname = '') {}
        public function resetQueryCondition($fieldname) {}
        public function addPriceCondition($from = null, $to = null) {}
        public function setInProductList($inProductList) {}
        /**
         * @return bool
         */
        public function getInProductList() {}
        public function setOrder($order) {}
        /**
         * gets order direction
         *
         * @return string
         */
        public function getOrder() {}
        public function setOrderKey($orderKey) {}
        /**
         * @return string
         */
        public function getOrderKey() {}
        public function setLimit($limit) {}
        /**
         * @return int
         */
        public function getLimit() {}
        public function setOffset($offset) {}
        /**
         * @return int
         */
        public function getOffset() {}
        public function setCategory(AbstractCategory $category) {}
        /**
         * @return AbstractCategory
         */
        public function getCategory() {}
        public function setVariantMode($variantMode) {}
        /**
         * @return string
         */
        public function getVariantMode() {}
        /**
         * loads search results from index and returns them
         *
         * @return IndexableInterface[]
         */
        public function load() {}
        /**
         * Returns the Elasticsearch query parameters
         *
         * @return array
         */
        public function getQuery() {}
        /**
         * First case: no price filtering and no price sorting
         *
         * @return array
         */
        protected function loadWithoutPriceFilterWithoutPriceSorting() {}
        /**
         * Second case: no price filtering but price sorting
         *
         * @return array
         *
         * @throws \Exception
         */
        protected function loadWithoutPriceFilterWithPriceSorting() {}
        /**
         * Third case: price filtering but no price sorting
         *
         * @return array
         *
         * @throws \Exception
         */
        protected function loadWithPriceFilterWithoutPriceSorting() {}
        /**
         * Forth case: price filtering and price sorting
         *
         * @return array
         *
         * @throws \Exception
         */
        protected function loadWithPriceFilterWithPriceSorting() {}
        protected function buildQuery(array $params, array $boolFilters, array $queryFilters, string $variantMode = null) {}
        protected function buildSystemConditions(array $boolFilters) {}
        protected function buildRelationConditions($boolFilters, $excludedFieldnames) {}
        protected function buildFilterConditions($boolFilters, $excludedFieldnames) {}
        protected function buildQueryConditions($queryFilters, $excludedFieldnames) {}
        protected function loadElementById($elementId) {}
        public function prepareGroupByValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        public function prepareGroupByValuesWithConfig($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true, array $aggregationConfig = [ ]) {}
        public function prepareGroupByRelationValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        public function prepareGroupBySystemValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        /**
         * resets all set prepared group by values
         *
         * @return void
         */
        public function resetPreparedGroupByValues() {}
        public function getGroupBySystemValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        public function getGroupByValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        public function getGroupByRelationValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        protected function doGetGroupByValues($fieldname, $countValues = false, $fieldnameShouldBeExcluded = true) {}
        /**
         * loads all prepared group by values
         *   1 - get general filter (= filter of fields don't need to be considered in group by values or where fieldnameShouldBeExcluded set to false)
         *   2 - for each group by value create a own aggregation section with all other group by filters added
         *
         * @throws \Exception
         */
        protected function doLoadGroupByValues() {}
        protected function searchForBuckets(array $aggregations) {}
        protected function convertBucketValues(array $bucket) {}
        /**
         * @return ElasticSearchConfigInterface
         */
        public function getTenantConfig() {}
/**
 * @var \Elasticsearch\Client $esClient
 */
        protected function sendRequest(/**
 * @var \Elasticsearch\Client $esClient
 */
array $params) {}
        /**
         * @return string
         */
        protected function getIndexName() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Count elements of an object
         *
         * @link http://php.net/manual/en/countable.count.php
         *
         * @return int The custom count as an integer.
         * </p>
         * <p>
         * The return value is cast to an integer.
         */
        public function count() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Return the current element
         *
         * @link http://php.net/manual/en/iterator.current.php
         *
         * @return mixed Can return any type.
         */
        public function current() {}
        public function getItems($offset, $itemCountPerPage) {}
        /**
         * Return a fully configured Paginator Adapter from this method.
         *
         * @return self
         */
        public function getPaginatorAdapter() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Return the key of the current element
         *
         * @link http://php.net/manual/en/iterator.key.php
         *
         * @return scalar scalar on success, integer
         * 0 on failure.
         */
        public function key() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Move forward to next element
         *
         * @link http://php.net/manual/en/iterator.next.php
         *
         * @return void Any returned value is ignored.
         */
        public function next() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Rewind the Iterator to the first element
         *
         * @link http://php.net/manual/en/iterator.rewind.php
         *
         * @return void Any returned value is ignored.
         */
        public function rewind() {}
        /**
         * (PHP 5 &gt;= 5.1.0)<br/>
         * Checks if current position is valid
         *
         * @link http://php.net/manual/en/iterator.valid.php
         *
         * @return bool The return value will be casted to boolean and then evaluated.
         * Returns true on success or false on failure.
         */
        public function valid() {}
    }

    class DefaultElasticSearch6 extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\productlist\elasticsearch\abstractelasticsearch {}

    /**
     * Implementation of product list which works based on the product index of the online shop framework
     */
    class DefaultElasticSearch5 extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\productlist\elasticsearch\abstractelasticsearch {
        protected function getQueryType() {}
        /**
         * loads all prepared group by values
         *   1 - get general filter (= filter of fields don't need to be considered in group by values or where fieldnameShouldBeExcluded set to false)
         *   2 - for each group by value create a own aggregation section with all other group by filters added
         *
         * @throws \Exception
         */
        protected function doLoadGroupByValues() {}
        protected function buildQuery(array $params, array $boolFilters, array $queryFilters, string $variantMode = null) {}
        /**
         * Returns the Elasticsearch query parameters
         *
         * @return array
         */
        public function getQuery() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\IndexService\Worker {
    /**
     * @property MysqlConfigInterface $tenantConfig
     */
    class DefaultMysql extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\abstractworker implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\workerinterface {
        /**
         * @var array
         */
        protected $_sqlChangeLog;
        /**
         * @var Helper\MySql
         */
        protected $mySqlHelper;

        public function __construct(MysqlConfigInterface $tenantConfig, ConnectionInterface $db, EventDispatcherInterface $eventDispatcher) {}
        public function createOrUpdateIndexStructures() {}
        public function deleteFromIndex(IndexableInterface $object) {}
        protected function doDeleteFromIndex($subObjectId, IndexableInterface $object = null) {}
        public function updateIndex(IndexableInterface $object) {}
        protected function getValidTableColumns($table) {}
        protected function getSystemAttributes() {}
        public function __destruct() {}
        /**
         * returns product list implementation valid and configured for this worker/tenant
         *
         * @return mixed
         */
        public function getProductList() {}
    }

    /**
     * Provides worker functionality for batch preparing data and updating index
     *
     * @property AbstractConfig $tenantConfig
     */
    abstract class AbstractBatchProcessingWorker extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\abstractworker implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\batchprocessingworkerinterface {
        const INDEX_STATUS_PREPARATION_STATUS_DONE = 0;
        const INDEX_STATUS_PREPARATION_STATUS_ERROR = 5;

        /**
         * returns name for store table
         *
         * @return string
         */
        abstract protected function getStoreTableName() ;
        abstract protected function doUpdateIndex($objectId, $data = null, $metadata = null) ;
        /**
         * creates store table
         */
        protected function createOrUpdateStoreTable() {}
        protected function deleteFromStoreTable($objectId) {}
        protected function getDefaultDataForIndex(IndexableInterface $object, $subObjectId) {}
/**
 * @var IndexableInterface $object
 */
        public function prepareDataForIndex(/**
 * @var IndexableInterface $object
 */
IndexableInterface $object) {}
        protected function insertDataToIndex($data, $subObjectId) {}
        protected function getWorkerTimeout() {}
        public function fillupPreparationQueue(IndexableInterface $object) {}
        public function processPreparationQueue($limit = 200) {}
        public function processUpdateIndexQueue($limit = 200) {}
        /**
         * resets the store table by marking all items as "in preparation", so items in store will be regenerated
         */
        public function resetPreparationQueue() {}
        /**
         * resets the store table to initiate a re-indexing
         */
        public function resetIndexingQueue() {}
    }

    /**
     * @property DefaultFactFinderConfig $tenantConfig
     */
    class DefaultFactFinder extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\abstractmockupcacheworker implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\batchprocessingworkerinterface, \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\workerinterface {
        const STORE_TABLE_NAME = 'ecommerceframework_productindex_store_factfinder';
        const MOCKUP_CACHE_PREFIX = 'ecommerce_mockup_factfinder';

        /**
         * @var array
         */
        protected $_sqlChangeLog;

        public function __construct(FactFinderConfigInterface $tenantConfig, ConnectionInterface $db, EventDispatcherInterface $eventDispatcher) {}
        protected function getSystemAttributes() {}
        protected function dbexec($sql) {}
        protected function logSql($sql) {}
        /**
         * creates or updates necessary index structures (like database tables and so on)
         *
         * @return void
         */
        public function createOrUpdateIndexStructures() {}
        public function deleteFromIndex(IndexableInterface $object) {}
/**
 * @var IndexableInterface $object
 */
        public function prepareDataForIndex(/**
 * @var IndexableInterface $object
 */
IndexableInterface $object) : array {}
        public function updateIndex(IndexableInterface $object) {}
        public function processUpdateIndexQueue($limit = 200) {}
        /**
         * returns product list implementation valid and configured for this worker/tenant
         *d
         *
         * @return mixed
         */
        public function getProductList() {}
        protected function doUpdateIndex($objectId, $data = null, $metadata = null) {}
        protected function doDeleteFromIndex($subObjectId, IndexableInterface $object = null) {}
        protected function getStoreTableName() {}
        protected function getMockupCachePrefix() {}
    }

    abstract class AbstractWorker implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\workerinterface {
        /**
         * @var ConnectionInterface
         */
        protected $db;
        /**
         * @var ConfigInterface
         */
        protected $tenantConfig;
        /**
         * @var string
         */
        protected $name;
        /**
         * @var array
         */
        protected $indexColumns;
        /**
         * @var array
         */
        protected $filterGroups;
        /**
         * @var EventDispatcherInterface
         */
        protected $eventDispatcher;

        public function __construct(ConfigInterface $tenantConfig, ConnectionInterface $db, EventDispatcherInterface $eventDispatcher) {}
        public function getTenantConfig() {}
        public function getGeneralSearchAttributes() {}
        public function getIndexAttributes($considerHideInFieldList = false) {}
        public function getIndexAttributesByFilterGroup($filterGroup) {}
        public function getAllFilterGroups() {}
        protected function getSystemAttributes() {}
        protected function doCleanupOldZombieData(IndexableInterface $object, array $subObjectIds) {}
        abstract protected function doDeleteFromIndex($subObjectId, IndexableInterface $object = null) ;
        protected function convertArray($data) {}
    }

    /**
     * @property FindologicConfigInterface $tenantConfig
     *
     * @method FindologicConfigInterface getTenantConfig()
     */
    class DefaultFindologic extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\abstractmockupcacheworker implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\batchprocessingworkerinterface, \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\workerinterface {
        const MOCKUP_CACHE_PREFIX = 'ecommerce_mockup_findologic';
        const EXPORT_TABLE_NAME = 'ecommerceframework_productindex_export_findologic';
        const STORE_TABLE_NAME = 'ecommerceframework_productindex_store_findologic';

        /**
         * findologic supported fields
         *
         * @var array
         */
        protected $supportedFields;
        /**
         * @var \SimpleXMLElement
         */
        protected $batchData;

        public function __construct(FindologicConfigInterface $tenantConfig, ConnectionInterface $db, EventDispatcherInterface $eventDispatcher) {}
        /**
         * creates or updates necessary index structures (like database tables and so on)
         *
         * @return void
         */
        public function createOrUpdateIndexStructures() {}
        public function deleteFromIndex(IndexableInterface $object) {}
        public function updateIndex(IndexableInterface $object) {}
        protected function doUpdateIndex($objectId, $data = null, $metadata = null) {}
        protected function doDeleteFromIndex($objectId, IndexableInterface $object = null) {}
        protected function updateExportItem($objectId, \SimpleXMLElement $item) {}
        /**
         * @return string
         */
        protected function getStoreTableName() {}
        /**
         * @return string
         */
        protected function getMockupCachePrefix() {}
        /**
         * @return string
         */
        protected function getExportTableName() {}
        /**
         * @return \SimpleXMLElement
         */
        protected function createXMLElement() {}
        /**
         * @return \Pimcore\Bundle\EcommerceFrameworkBundle\IndexService\ProductList\DefaultFindologic
         */
        public function getProductList() {}
    }

    /**
     * @method OptimizedMysqlConfig getTenantConfig()
     *
     * @property OptimizedMysqlConfig $tenantConfig
     */
    class OptimizedMysql extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\abstractmockupcacheworker implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\batchprocessingworkerinterface {
        const STORE_TABLE_NAME = 'ecommerceframework_productindex_store';
        const MOCKUP_CACHE_PREFIX = 'ecommerce_mockup';

        /**
         * @var Helper\MySql
         */
        protected $mySqlHelper;

        public function __construct(OptimizedMysqlConfig $tenantConfig, ConnectionInterface $db, EventDispatcherInterface $eventDispatcher) {}
        public function createOrUpdateIndexStructures() {}
        public function deleteFromIndex(IndexableInterface $object) {}
        protected function doDeleteFromIndex($objectId, IndexableInterface $object = null) {}
        public function updateIndex(IndexableInterface $object) {}
        public function doUpdateIndex($objectId, $data = null, $metadata = null) {}
        protected function getValidTableColumns($table) {}
        protected function getSystemAttributes() {}
        protected function getStoreTableName() {}
        protected function getMockupCachePrefix() {}
        public function __destruct() {}
        /**
         * Returns product list implementation valid and configured for this worker/tenant
         *
         * @return mixed
         */
        public function getProductList() {}
    }

    /**
     * provides worker functionality for mockup cache and central store table
     */
    abstract class AbstractMockupCacheWorker extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\abstractbatchprocessingworker {
        /**
         * returns prefix for cache key
         *
         * @return string
         */
        abstract protected function getMockupCachePrefix() ;
        protected function createMockupCacheKey($objectId) {}
        protected function deleteFromMockupCache($objectId) {}
        public function saveToMockupCache($objectId, $data = null) {}
        public function getMockupFromCache($objectId) {}
    }


    /**
     * Interface for IndexService workers
     */
    interface WorkerInterface {
    const MULTISELECT_DELIMITER = '#;#';
        /**
         * returns all attributes marked as general search attributes for full text search
         *
         * @return array
         */
        function getGeneralSearchAttributes() ;
        /**
         * creates or updates necessary index structures (like database tables and so on)
         *
         * @return void
         */
        function createOrUpdateIndexStructures() ;
        function deleteFromIndex(IndexableInterface $object) ;
        function updateIndex(IndexableInterface $object) ;
        function getIndexAttributes($considerHideInFieldList = false) ;
        /**
         * returns all filter groups
         *
         * @return array
         */
        function getAllFilterGroups() ;
        function getIndexAttributesByFilterGroup($filterGroup) ;
        /**
         * returns current tenant configuration
         *
         * @return ConfigInterface
         */
        function getTenantConfig() ;
        /**
         * returns product list implementation valid and configured for this worker/tenant
         *
         * @return ProductListInterface
         */
        function getProductList() ;
    }

    /**
     * @deprecated use BatchProcessingWorkerInterface instead.
     */
    interface IBatchProcessingWorker {}

    /**
     * @deprecated use WorkerInterface instead.
     */
    interface IWorker {}

    /**
     * Interface for IndexService workers which support batch processing of index data preparation and index updating
     */
    interface BatchProcessingWorkerInterface extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\workerinterface {
        function fillupPreparationQueue(IndexableInterface $object) ;
        function processPreparationQueue($limit = 200) ;
        function processUpdateIndexQueue($limit = 200) ;
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\IndexService\Worker\Helper {
    class MySql {
        /**
         * @var array
         */
        protected $_sqlChangeLog;
        /**
         * @var MysqlConfigInterface
         */
        protected $tenantConfig;
        /**
         * @var ConnectionInterface
         */
        protected $db;

        public function __construct(MysqlConfigInterface $tenantConfig, ConnectionInterface $db) {}
        public function getValidTableColumns($table) {}
        public function doInsertData($data) {}
        public function getSystemAttributes() {}
        public function createOrUpdateIndexStructures() {}
        protected function dbexec($sql) {}
        protected function logSql($sql) {}
        public function __destruct() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\IndexService\Worker\ElasticSearch {
    /**
     * @property ElasticSearch $tenantConfig
     */
    abstract class AbstractElasticSearch extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\abstractmockupcacheworker implements \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\batchprocessingworkerinterface {
        const RELATION_FIELD = 'parentchildrelation';
        const STORE_TABLE_NAME = 'ecommerceframework_productindex_store_elastic';
        const MOCKUP_CACHE_PREFIX = 'ecommerce_mockup_elastic';

        /**
         * Default value for the mapping of custom attributes
         *
         * @var bool
         */
        protected $storeCustomAttributes;
        /**
         * @var \Elasticsearch\Client
         */
        protected $elasticSearchClient;
        /**
         * index name of elastic search must be lower case
         * the index name is an alias to indexname-versionnumber
         *
         * @var string
         */
        protected $indexName;
        /**
         * The Version number of the Index (we increase the Version number if the mapping cant be changed (reindexing process))
         *
         * @var int
         */
        protected $indexVersion;
        /**
         * Hash of current index settings - used for checking, if putSettings is necessary
         *
         * @var string
         */
        protected $settingsHash;
        /**
         * @var array
         */
        protected $bulkIndexData;
        /**
         * @var array
         */
        protected $indexStoreMetaData;

        public function __construct(ElasticSearchConfigInterface $tenantConfig, ConnectionInterface $db, EventDispatcherInterface $eventDispatcher) {}
        /**
         * should custom attributes be stored separately
         *
         * @return bool
         */
        public function getStoreCustomAttributes() {}
        public function setStoreCustomAttributes($storeCustomAttributes) {}
        protected function getVersionFile() {}
        /**
         * determines and sets the current index version
         */
        protected function determineAndSetCurrentIndexVersion() {}
        protected function updateVersionFile() {}
        /**
         * the versioned index-name
         *
         * @return string
         */
        public function getIndexNameVersion() {}
        /**
         * @return int
         */
        public function getIndexVersion() {}
        public function setIndexVersion($indexVersion) {}
        /**
         * @return \Elasticsearch\Client|null
         */
        public function getElasticSearchClient() {}
        /**
         * creates or updates necessary index structures (like database tables and so on)
         *
         * @return void
         */
        public function createOrUpdateIndexStructures() {}
        protected function createMappingAttributes() {}
        public function getSystemAttributes($includeTypes = false) {}
        public function deleteFromIndex(IndexableInterface $object) {}
        public function updateIndex(IndexableInterface $object) {}
        protected function doUpdateIndex($objectId, $data = null, $metadata = null) {}
        protected function doPreIndexDataModification($data) {}
        /**
         * actually sending data to elastic search
         */
        protected function commitUpdateIndex() {}
        public function processUpdateIndexQueue($limit = 100) {}
        protected function getStoreTableName() {}
        protected function getMockupCachePrefix() {}
        /**
         * starts reindex mode for index
         * - new index with new version is created
         * - complete store table for current tenant is resetted in order to recreate a new index version
         *
         * while in reindex mode
         * - all index updates are stored into the new index version
         * - no index structure updates are allowed
         *
         */
        public function startReindexMode() {}
        /**
         * checks if system is in reindex mode based on index version and ES alias
         *
         * @return bool
         *
         * @throws \Exception
         */
        protected function isInReindexMode() {}
        /**
         * checks if there are some entries in the store table left for indexing
         * if not -> re-index is finished
         *
         * @throws \Exception
         */
        protected function completeReindexMode() {}
        /**
         * Sets the alias to the current index-version and deletes the old indices
         *
         * @throws \Exception
         */
        public function switchIndexAlias() {}
        protected function convertArray($data) {}
        protected function doDeleteFromIndex($objectId, IndexableInterface $object = null) {}
        protected function doCreateOrUpdateIndexStructures($exceptionOnFailure = false) {}
        protected function getMappingParams($type = null) {}
        /**
         * Retrieve the currently active index name from ES based on the alias.
         *
         * @return string|null null if no index is found.
         */
        public function fetchEsActiveIndex() : ?string {}
        /**
         * Create the index alias on demand.
         *
         * @throws \Exception if alias could not be created.
         */
        protected function createEsAliasIfMissing() {}
        protected function createEsIndex(string $indexName) {}
    }

    /**
     *  Use this for ES Version >= 6
     */
    class DefaultElasticSearch6 extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\elasticsearch\abstractelasticsearch {
        /**
         * returns product list implementation valid and configured for this worker/tenant
         *
         * @return ProductListInterface
         */
        public function getProductList() {}
    }

    /**
     *
     *  Use this for Adapter for ES Version >= 2 AND <= 5
     */
    class DefaultElasticSearch5 extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\worker\elasticsearch\abstractelasticsearch {
        public function getSystemAttributes($includeTypes = false) {}
        protected function getMappingParams($type = null) {}
        protected function doCreateOrUpdateIndexStructures($exceptionOnFailure = false) {}
        protected function createMappingAttributes() {}
        protected function doDeleteFromIndex($objectId, IndexableInterface $object = null) {}
        protected function deleteMovedParentRelations($indexSystemData) {}
        protected function doUpdateIndex($objectId, $data = null, $metadata = null) {}
        /**
         * returns product list implementation valid and configured for this worker/tenant
         *
         * @return ProductListInterface
         */
        public function getProductList() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\IndexService\Exception {
    class WorkerNotFoundException extends \runtimeexception {}

    class DefaultWorkerNotFoundException extends \pimcore\bundle\ecommerceframeworkbundle\indexservice\exception\workernotfoundexception {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\IndexService\Tool {
    class IndexUpdater {
    use \pimcore\console\clitrait;

        /** @var \Symfony\Component\HttpFoundation\Session\SessionInterface $session */
        private static function startSession() {}
/** @var Concrete $products */
        public static function updateIndex(/** @var Concrete $products */
$objectListClass, /** @var Concrete $products */
$condition = '', /** @var Concrete $products */
$updateIndexStructures = false, /** @var Concrete $products */
$loggername = 'indexupdater') {}
        public static function processPreparationQueue($tenants = null, $maxRounds = null, $loggername = 'indexupdater', $preparationItemsPerRound = 200, $timeout = -1) {}
        public static function processUpdateIndexQueue($tenants = null, $maxRounds = null, $loggername = 'indexupdater', $indexItemsPerRound = 200, $timeout = -1) {}
        private static function log($loggername, $message) {}
        private static function checkTimeout($timeout, $startTime) : void {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\CheckoutManager {
    class CheckoutManagerFactory implements \pimcore\bundle\ecommerceframeworkbundle\checkoutmanager\checkoutmanagerfactoryinterface {
        /**
         * @var EnvironmentInterface
         */
        protected $environment;
        /**
         * @var OrderManagerLocatorInterface
         */
        protected $orderManagers;
        /**
         * @var CommitOrderProcessorLocatorInterface
         */
        protected $commitOrderProcessors;
        /**
         * Array of checkout step definitions
         *
         * @var array
         */
        protected $checkoutStepDefinitions;
        /**
         * @var PaymentInterface
         */
        protected $paymentProvider;
        /**
         * @var CheckoutManagerInterface[]
         */
        protected $checkoutManagers;
        /**
         * @var ServiceLocator
         */
        protected $handlePendingPaymentStrategyLocator;
        /**
         * @var string
         */
        protected $className;
        protected $handlePendingPaymentStrategy;
        /**
         * @var EventDispatcherInterface
         */
        protected $eventDispatcher;

        public function __construct(EnvironmentInterface $environment, OrderManagerLocatorInterface $orderManagers, CommitOrderProcessorLocatorInterface $commitOrderProcessors, array $checkoutStepDefinitions, PaymentInterface $paymentProvider = null, array $options = [ ], ServiceLocator $handlePendingPaymentStrategyLocator = null, EventDispatcherInterface $eventDispatcher = null) {}
        protected function processOptions(array $options) {}
        protected function processCheckoutStepDefinitions(array $checkoutStepDefinitions) {}
        protected function configureOptions(OptionsResolver $resolver) {}
        protected function configureStepOptions(OptionsResolver $resolver) {}
        protected function configureClassOptions(OptionsResolver $resolver) {}
        public function createCheckoutManager(CartInterface $cart) : CheckoutManagerInterface {}
        protected function buildCheckoutStep(CartInterface $cart, array $checkoutStepDefinition) : CheckoutStepInterface {}
    }

    abstract class AbstractStep implements \pimcore\bundle\ecommerceframeworkbundle\checkoutmanager\checkoutstepinterface {
        /**
         * @var CartInterface
         */
        protected $cart;
        /**
         * @var array
         */
        protected $options;

        public function __construct(CartInterface $cart, array $options = [ ]) {}
    }

    class CommitOrderProcessorLocator extends \pimcore\bundle\ecommerceframeworkbundle\dependencyinjection\servicelocator\checkouttenantawareservicelocator implements \pimcore\bundle\ecommerceframeworkbundle\checkoutmanager\commitorderprocessorlocatorinterface {
        public function getCommitOrderProcessor(string $tenant = null) : CommitOrderProcessorInterface {}
        public function hasCommitOrderProcessor(string $tenant) : bool {}
        protected function buildNotFoundException(string $tenant) : UnsupportedException {}
    }

    class CheckoutManager implements \pimcore\bundle\ecommerceframeworkbundle\checkoutmanager\checkoutmanagerinterface {
        const CURRENT_STEP = 'checkout_current_step';
        const FINISHED = 'checkout_finished';

        /**
         * @var CartInterface
         */
        protected $cart;
        /**
         * @var EnvironmentInterface
         */
        protected $environment;
        /**
         * @var OrderManagerLocatorInterface
         */
        protected $orderManagers;
        /**
         * @var CommitOrderProcessorLocatorInterface
         */
        protected $commitOrderProcessors;
        /**
         * Payment Provider
         *
         * @var PaymentInterface
         */
        protected $payment;
        /**
         * Needed for effective access to one specific checkout step
         *
         * @var CheckoutStepInterface[]
         */
        protected $checkoutSteps;
        /**
         * Needed for preserving order of checkout steps
         *
         * @var CheckoutStepInterface[]
         */
        protected $checkoutStepOrder;
        /**
         * @var CheckoutStepInterface
         */
        protected $currentStep;
        /**
         * @var bool
         */
        protected $finished;
        /**
         * @var bool
         */
        protected $paid;
        /**
         * @var EventDispatcherInterface
         */
        protected $eventDispatcher;

        public function __construct(CartInterface $cart, EnvironmentInterface $environment, OrderManagerLocatorInterface $orderManagers, CommitOrderProcessorLocatorInterface $commitOrderProcessors, array $checkoutSteps, EventDispatcherInterface $eventDispatcher, PaymentInterface $paymentProvider = null) {}
        protected function setCheckoutSteps(array $checkoutSteps) {}
        protected function addCheckoutStep(CheckoutStepInterface $checkoutStep) {}
        protected function initializeStepState() {}
        /**
         * @inheritdoc
         */
        public function hasActivePayment() {}
        /**
         * @return AbstractOrder
         *
         * @throws UnsupportedException
         */
        protected function checkIfPaymentIsPossible() {}
        /**
         * @inheritdoc
         */
        public function initOrderPayment() {}
        /**
         * @inheritdoc
         */
        public function startOrderPayment() {}
        /**
         * @inheritdoc
         */
        public function cancelStartedOrderPayment() {}
        /**
         * @inheritdoc
         */
        public function getOrder() {}
        protected function updateEnvironmentAfterOrderCommit(?AbstractOrder $order) {}
        public function handlePaymentResponseAndCommitOrderPayment($paymentResponseParams) {}
        protected function verifyRecurringPayment(PaymentInterface $provider, AbstractOrder $sourceOrder, string $customerId) {}
        public function startAndCommitRecurringOrderPayment(AbstractOrder $sourceOrder, string $customerId) {}
        public function commitOrderPayment(StatusInterface $status, AbstractOrder $sourceOrder = null) {}
        /**
         * @inheritdoc
         */
        public function commitOrder() {}
        public function commitStep(CheckoutStepInterface $step, $data) {}
        /**
         * @inheritdoc
         */
        public function getCart() {}
        public function getCheckoutStep($stepName) {}
        /**
         * @inheritdoc
         */
        public function getCheckoutSteps() {}
        /**
         * @inheritdoc
         */
        public function getCurrentStep() {}
        protected function validateCheckoutSteps() {}
        /**
         * @inheritdoc
         */
        public function isFinished() {}
        /**
         * @inheritdoc
         */
        public function isCommitted() {}
        /**
         * @inheritdoc
         */
        public function getPayment() {}
        /**
         * @inheritdoc
         */
        public function cleanUpPendingOrders() {}
    }

    class CheckoutManagerFactoryLocator extends \pimcore\bundle\ecommerceframeworkbundle\dependencyinjection\servicelocator\checkouttenantawareservicelocator implements \pimcore\bundle\ecommerceframeworkbundle\checkoutmanager\checkoutmanagerfactorylocatorinterface {
        public function getCheckoutManagerFactory(string $tenant = null) : CheckoutManagerFactoryInterface {}
        public function hasCheckoutManagerFactory(string $tenant) : bool {}
        protected function buildNotFoundException(string $tenant) : UnsupportedException {}
    }

    /**
     * Sample implementation for delivery address
     */
    class DeliveryAddress extends \pimcore\bundle\ecommerceframeworkbundle\checkoutmanager\abstractstep implements \pimcore\bundle\ecommerceframeworkbundle\checkoutmanager\checkoutstepinterface {
        const PRIVATE_NAMESPACE = 'delivery_address';

        /**
         * @inheritdoc
         */
        public function getName() {}
        public function commit($data) {}
        /**
         * @inheritdoc
         */
        public function getData() {}
    }

    /**
     * Sample implementation for delivery date
     */
    class DeliveryDate extends \pimcore\bundle\ecommerceframeworkbundle\checkoutmanager\abstractstep implements \pimcore\bundle\ecommerceframeworkbundle\checkoutmanager\checkoutstepinterface {
        const INSTANTLY = 'delivery_instantly';
        const DATE = 'delivery_date';

        /**
         * @return string
         */
        public function getName() {}
        public function commit($data) {}
        /**
         * @inheritdoc
         */
        public function getData() {}
    }

    class CommitOrderProcessor implements \pimcore\bundle\ecommerceframeworkbundle\checkoutmanager\commitorderprocessorinterface {
        const LOCK_KEY = 'ecommerce-framework-commitorder-lock';
        const LOGGER_NAME = 'commit-order-processor';

        /**
         * @var OrderManagerLocatorInterface
         */
        protected $orderManagers;
        /**
         * @var string
         */
        protected $confirmationMail;
        /**
         * @var null | string
         */
        protected $lastPaymentStateResponseHash;
        /**
         * @var null | StatusInterface
         */
        protected $lastPaymentStatus;

        public function __construct(OrderManagerLocatorInterface $orderManagers, array $options = [ ]) {}
        protected function processOptions(array $options) {}
        protected function configureOptions(OptionsResolver $resolver) {}
        public function setConfirmationMail($confirmationMail) {}
        protected function getPaymentStatus($paymentResponseParams, PaymentInterface $paymentProvider) {}
        public function handlePaymentResponseAndCommitOrderPayment($paymentResponseParams, PaymentInterface $paymentProvider) {}
        public function committedOrderWithSamePaymentExists($paymentResponseParams, PaymentInterface $paymentProvider) {}
        public function commitOrderPayment(StatusInterface $paymentStatus, PaymentInterface $paymentProvider, AbstractOrder $sourceOrder = null) {}
        protected function applyAdditionalDataToOrder(AbstractOrder $order, StatusInterface $paymentStatus, PaymentInterface $paymentProvider) {}
        public function commitOrder(AbstractOrder $order) {}
        protected function sendConfirmationMail(AbstractOrder $order) {}
        protected function processOrder(AbstractOrder $order) {}
        /** @var AbstractOrder[] $list */
        public function cleanUpPendingOrders() {}
    }


    interface CheckoutManagerInterface {
        /**
         * Returns all checkout steps defined for this checkout
         *
         * @return CheckoutStepInterface[]
         */
        function getCheckoutSteps() ;
        function getCheckoutStep($stepName) ;
        /**
         * Returns current checkout step
         *
         * @return CheckoutStepInterface
         */
        function getCurrentStep() ;
        /**
         * Returns the cart the checkout is started with
         *
         * @return CartInterface
         */
        function getCart() ;
        function commitStep(CheckoutStepInterface $step, $data) ;
        /**
         * Checks if checkout is finished (= all checkout steps are committed)
         * only a finished checkout can be committed
         *
         * @return bool
         */
        function isFinished() ;
        /**
         * Returns if there currently is an active payment (init or pending)
         *
         * @return bool
         */
        function hasActivePayment() ;
        /**
         * Init payment for checkout - only possible if payment provider is configured
         * creates PaymentInformation with init state, does not change order state
         *
         * @return AbstractPaymentInformation
         *
         * @throws UnsupportedException
         */
        function initOrderPayment() ;
        /**
         * Starts payment for checkout - only possible if payment provider is configured
         * sets cart to read only mode since it must not changed during ongoing payment process
         *
         * @return AbstractPaymentInformation
         *
         * @throws UnsupportedException
         *
         * @deprecated use V7/startOrderPaymentWithPaymentProvider instead
         */
        function startOrderPayment() ;
        /**
         * Cancels payment for current payment info
         *
         *  - payment will be cancelled, order state will be resetted and cart will we writable again.
         *
         * -> this should be used, when user cancels payment
         *
         * Only possible when payment state is PENDING, otherwise exception is thrown
         *
         * @return null|AbstractOrder
         *
         * @throws UnsupportedException
         */
        function cancelStartedOrderPayment() ;
        /**
         * Returns order (creates it if not available yet)
         *
         * @return AbstractOrder
         */
        function getOrder() ;
        function handlePaymentResponseAndCommitOrderPayment($paymentResponseParams) ;
        function startAndCommitRecurringOrderPayment(AbstractOrder $sourceOrder, string $customerId) ;
        function commitOrderPayment(StatusInterface $status, AbstractOrder $sourceOrder) ;
        /**
         * Commits order - does not consider any payment
         *
         * Use this for committing order when no payment is activated
         *
         * Delegates to commit order processor
         *
         * @return AbstractOrder
         */
        function commitOrder() ;
        /**
         * Returns if checkout process and subsequently order is committed
         * basically checks, if order is available and if this order is committed
         *
         * @return bool
         */
        function isCommitted() ;
        /**
         * Returns payment adapter
         *
         * @return PaymentInterface|null
         */
        function getPayment() ;
        /**
         * Cleans up orders with state pending payment after 1h -> delegates this to commit order processor
         *
         * @return void
         */
        function cleanUpPendingOrders() ;
    }

    interface CheckoutManagerFactoryInterface {
        function createCheckoutManager(CartInterface $cart) : CheckoutManagerInterface ;
    }

    interface CommitOrderProcessorInterface {
        function committedOrderWithSamePaymentExists($paymentResponseParams, PaymentInterface $paymentProvider) ;
        function handlePaymentResponseAndCommitOrderPayment($paymentResponseParams, PaymentInterface $paymentProvider) ;
        function commitOrderPayment(StatusInterface $paymentStatus, PaymentInterface $paymentProvider, AbstractOrder $sourceOrder = null) ;
        function commitOrder(AbstractOrder $order) ;
        /**
         * Cleans up orders with state pending payment after 1h
         *
         * @return void
         */
        function cleanUpPendingOrders() ;
    }

    /**
     * @deprecated use CommitOrderProcessorLocatorInterface instead.
     */
    interface ICommitOrderProcessorLocator {}

    interface CommitOrderProcessorLocatorInterface {
        function getCommitOrderProcessor(string $tenant = null) : CommitOrderProcessorInterface ;
        function hasCommitOrderProcessor(string $tenant) : bool ;
    }

    /**
     * @deprecated use CheckoutManagerFactoryInterface instead.
     */
    interface ICheckoutManagerFactory {}

    interface CheckoutManagerFactoryLocatorInterface {
        function getCheckoutManagerFactory(string $tenant = null) : CheckoutManagerFactoryInterface ;
        function hasCheckoutManagerFactory(string $tenant) : bool ;
    }

    /**
     * @deprecated use CheckoutStepInterface instead.
     */
    interface ICheckoutStep {}

    /**
     * @deprecated use CommitOrderProcessorInterface instead.
     */
    interface ICommitOrderProcessor {}

    /**
     * @deprecated use CheckoutManagerInterface instead.
     */
    interface ICheckoutManager {}

    /**
     * @deprecated use CheckoutManagerFactoryLocatorInterface instead.
     */
    interface ICheckoutManagerFactoryLocator {}

    /**
     * Interface for checkout step implementations of online shop framework
     */
    interface CheckoutStepInterface {
        function __construct(CartInterface $cart, array $options = [ ]) ;
        /**
         * Returns checkout step name
         *
         * @return string
         */
        function getName() ;
        /**
         * Returns saved data of step
         *
         * @return mixed
         */
        function getData() ;
        function commit($data) ;
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\CheckoutManager\V7 {
    class CheckoutManager extends \pimcore\bundle\ecommerceframeworkbundle\checkoutmanager\checkoutmanager implements \pimcore\bundle\ecommerceframeworkbundle\checkoutmanager\v7\checkoutmanagerinterface {
        /**
         * @var HandlePendingPaymentsStrategyInterface
         */
        protected $handlePendingPaymentsStrategy;

        public function __construct(CartInterface $cart, EnvironmentInterface $environment, OrderManagerLocatorInterface $orderManagers, CommitOrderProcessorLocatorInterface $commitOrderProcessors, array $checkoutSteps, EventDispatcherInterface $eventDispatcher, \Pimcore\Bundle\EcommerceFrameworkBundle\PaymentManager\Payment\PaymentInterface $paymentProvider = null) {}
        /**
         * @return HandlePendingPaymentsStrategyInterface
         */
        public function getHandlePendingPaymentsStrategy() : HandlePendingPaymentsStrategyInterface {}
        public function setHandlePendingPaymentsStrategy(HandlePendingPaymentsStrategyInterface $handlePendingPaymentsStrategy) : void {}
        /**
         * @return AbstractOrder
         *
         * @throws UnsupportedException
         */
        protected function checkIfPaymentIsPossible() {}
/** @var PaymentInterface $paymentProvider */
        public function startOrderPaymentWithPaymentProvider(/** @var PaymentInterface $paymentProvider */
AbstractRequest $paymentConfig) : StartPaymentResponseInterface {}
    }

    class CommitOrderProcessor extends \pimcore\bundle\ecommerceframeworkbundle\checkoutmanager\commitorderprocessor implements \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait;

        /**
         * @var EventDispatcherInterface
         */
        protected $eventDispatcher;
        /**
         * @var ApplicationLogger
         */
        protected $applicationLogger;

        public function __construct(OrderManagerLocatorInterface $orderManagers, EventDispatcherInterface $eventDispatcher, ApplicationLogger $applicationLogger, array $options = [ ]) {}
        public function handlePaymentResponseAndCommitOrderPayment($paymentResponseParams, PaymentInterface $paymentProvider) {}
        public function commitOrderPayment(StatusInterface $paymentStatus, PaymentInterface $paymentProvider, AbstractOrder $sourceOrder = null) {}
        public function commitOrder(AbstractOrder $order) {}
        protected function sendConfirmationMail(AbstractOrder $order) {}
    }


    interface CheckoutManagerInterface extends \pimcore\bundle\ecommerceframeworkbundle\checkoutmanager\checkoutmanagerinterface {
        function startOrderPaymentWithPaymentProvider(AbstractRequest $paymentConfig) : StartPaymentResponseInterface ;
        function setHandlePendingPaymentsStrategy(HandlePendingPaymentsStrategyInterface $handlePendingPaymentsStrategy) : void ;
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\CheckoutManager\V7\HandlePendingPayments {
    class CancelPaymentOrRecreateOrderStrategy implements \pimcore\bundle\ecommerceframeworkbundle\checkoutmanager\v7\handlependingpayments\handlependingpaymentsstrategyinterface {
        public function handlePaymentNotAllowed(AbstractOrder $order, CartInterface $cart, OrderManagerInterface $orderManager) : AbstractOrder {}
    }

    class ThrowExceptionStrategy implements \pimcore\bundle\ecommerceframeworkbundle\checkoutmanager\v7\handlependingpayments\handlependingpaymentsstrategyinterface {
        public function handlePaymentNotAllowed(AbstractOrder $order, CartInterface $cart, OrderManagerInterface $orderManager) : AbstractOrder {}
    }

    class AlwaysRecreateOrderStrategy implements \pimcore\bundle\ecommerceframeworkbundle\checkoutmanager\v7\handlependingpayments\handlependingpaymentsstrategyinterface {
        public function handlePaymentNotAllowed(AbstractOrder $order, CartInterface $cart, OrderManagerInterface $orderManager) : AbstractOrder {}
    }


    interface HandlePendingPaymentsStrategyInterface {
        function handlePaymentNotAllowed(AbstractOrder $order, CartInterface $cart, OrderManagerInterface $orderManager) : AbstractOrder ;
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\PaymentManager {
    class Status implements \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\statusinterface {
        /**
         * internal pimcore order status - see also constants \Pimcore\Bundle\EcommerceFrameworkBundle\Model\AbstractOrder::ORDER_STATE_*
         *
         * @var string
         */
        protected $status;
        /**
         * pimcore internal payment id, necessary to identify payment information in order object
         *
         * @var string
         */
        protected $internalPaymentId;
        /**
         * payment reference from payment provider
         *
         * @var string
         */
        protected $paymentReference;
        /**
         * payment message provided from payment provider - e.g. error message on error
         *
         * @var string
         */
        protected $message;
        /**
         * additional payment data
         *
         * @var array
         */
        protected $data;

        public function __construct($internalPaymentId, $paymentReference, $message, $status, array $data = [ ]) {}
        /**
         * @return string
         */
        public function getInternalPaymentId() {}
        /**
         * @return string
         */
        public function getMessage() {}
        /**
         * @return string
         */
        public function getPaymentReference() {}
        /**
         * @return string
         */
        public function getStatus() {}
        /**
         * @return array
         */
        public function getData() {}
    }

    class PaymentManager implements \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\paymentmanagerinterface {
        /**
         * @var PsrContainerInterface
         */
        private $providers;

        public function __construct(PsrContainerInterface $providers) {}
        public function getProvider(string $name) : PaymentInterface {}
    }


    /**
     * Interface StatusInterface
     */
    interface StatusInterface {
    const STATUS_PENDING = 'paymentPending';
    const STATUS_AUTHORIZED = 'paymentAuthorized';
    const STATUS_CANCELLED = 'cancelled';
    const STATUS_CLEARED = 'committed';
        /**
         * payment reference from payment provider
         *
         * @return string
         */
        function getPaymentReference() ;
        /**
         * pimcore internal payment id, necessary to identify payment information in order object
         *
         * @return string
         */
        function getInternalPaymentId() ;
        /**
         * payment message provided from payment provider - e.g. error message on error
         *
         * @return string
         */
        function getMessage() ;
        /**
         * internal pimcore order status - see also constants \Pimcore\Bundle\EcommerceFrameworkBundle\Model\AbstractOrder::ORDER_STATE_*
         *
         * @return string
         */
        function getStatus() ;
        /**
         * additional payment data
         *
         * @return array
         */
        function getData() ;
    }

    /**
     * @deprecated use StatusInterface instead.
     */
    interface IStatus {}

    interface PaymentManagerInterface {
        function getProvider(string $name) : PaymentInterface ;
    }

    /**
     * @deprecated use PaymentManagerInterface instead.
     */
    interface IPaymentManager {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\PaymentManager\V7\Payment {
    interface PaymentInterface extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\payment\paymentinterface {
        function initPayment(PriceInterface $price, array $config) ;
        function startPayment(OrderAgentInterface $orderAgent, PriceInterface $price, AbstractRequest $config) : StartPaymentResponseInterface ;
    }

    interface RecurringPaymentInterface {
        /**
         * Payment supports recurring payment
         *
         * @return bool
         */
        function isRecurringPaymentEnabled() ;
        function setRecurringPaymentSourceOrderData(AbstractOrder $sourceOrder, $paymentBrick) ;
        function applyRecurringPaymentCondition(Concrete $orderListing, $additionalParameters = [ ]) ;
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\PaymentManager\V7\Payment\StartPaymentResponse {
    class JsonResponse extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\startpaymentresponse\abstractresponse {
        /**
         * @var string
         */
        protected $jsonString;

        public function __construct(AbstractOrder $order, string $jsonString) {}
        /**
         * @return string
         */
        public function getJsonString() : string {}
    }

    abstract class AbstractResponse implements \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\startpaymentresponse\startpaymentresponseinterface {
        /**
         * @var AbstractOrder
         */
        protected $order;

        public function __construct(AbstractOrder $order) {}
        /**
         * @return AbstractOrder
         */
        public function getOrder() : AbstractOrder {}
    }

    class SnippetResponse extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\startpaymentresponse\abstractresponse {
        /**
         * @var string
         */
        protected $snippet;

        public function __construct(AbstractOrder $order, string $snippet) {}
        /**
         * @return string
         */
        public function getSnippet() : string {}
    }

    class UrlResponse extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\startpaymentresponse\abstractresponse {
        /**
         * @var string
         */
        protected $url;

        public function __construct(AbstractOrder $order, string $url) {}
        /**
         * @return string
         */
        public function getUrl() : string {}
    }

    class FormResponse extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\startpaymentresponse\abstractresponse {
        /**
         * @var FormBuilderInterface
         */
        protected $form;

        public function __construct(AbstractOrder $order, FormBuilderInterface $form) {}
        /**
         * @return FormBuilderInterface
         */
        public function getForm() : FormBuilderInterface {}
    }


    interface StartPaymentResponseInterface {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\PaymentManager\V7\Payment\StartPaymentRequest {
    class DatatransRequest extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\startpaymentrequest\abstractrequest {
        protected $reqtype;
        protected $refno;
        protected $language;
        protected $successUrl;
        protected $errorUrl;
        protected $cancelUrl;
        protected $uppStartTarget;
        protected $useAlias;

        /**
         * @return mixed
         */
        public function getReqtype() {}
        public function setReqtype($reqtype) : void {}
        /**
         * @return mixed
         */
        public function getRefno() {}
        public function setRefno($refno) : void {}
        /**
         * @return mixed
         */
        public function getLanguage() {}
        public function setLanguage($language) : void {}
        /**
         * @return mixed
         */
        public function getSuccessUrl() {}
        public function setSuccessUrl($successUrl) : void {}
        /**
         * @return mixed
         */
        public function getErrorUrl() {}
        public function setErrorUrl($errorUrl) : void {}
        /**
         * @return mixed
         */
        public function getCancelUrl() {}
        public function setCancelUrl($cancelUrl) : void {}
        /**
         * @return mixed
         */
        public function getUppStartTarget() {}
        public function setUppStartTarget($uppStartTarget) : void {}
        /**
         * @return mixed
         */
        public function getUseAlias() {}
        public function setUseAlias($useAlias) : void {}
    }

    class QPayRequest extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\startpaymentrequest\abstractrequest {
        protected $language;
        protected $successURL;
        protected $cancelURL;
        protected $failureURL;
        protected $serviceURL;
        protected $confirmMail;
        protected $orderDescription;
        protected $imageURL;
        protected $orderIntent;

        /**
         * @return mixed
         */
        public function getLanguage() {}
        public function setLanguage($language) : void {}
        /**
         * @return mixed
         */
        public function getSuccessURL() {}
        public function setSuccessURL($successURL) : void {}
        /**
         * @return mixed
         */
        public function getCancelURL() {}
        public function setCancelURL($cancelURL) : void {}
        /**
         * @return mixed
         */
        public function getFailureURL() {}
        public function setFailureURL($failureURL) : void {}
        /**
         * @return mixed
         */
        public function getServiceURL() {}
        public function setServiceURL($serviceURL) : void {}
        /**
         * @return mixed
         */
        public function getConfirmMail() {}
        public function setConfirmMail($confirmMail) : void {}
        /**
         * @return mixed
         */
        public function getOrderDescription() {}
        public function setOrderDescription($orderDescription) : void {}
        /**
         * @return mixed
         */
        public function getImageURL() {}
        public function setImageURL($imageURL) : void {}
        /**
         * @return mixed
         */
        public function getOrderIntent() {}
        public function setOrderIntent($orderIntent) : void {}
    }

    class HeidelpayRequest extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\startpaymentrequest\abstractrequest {
        protected $paymentReference;
        protected $internalPaymentId;
        protected $returnUrl;
        protected $errorUrl;

        /**
         * @return mixed
         */
        public function getPaymentReference() {}
        public function setPaymentReference($paymentReference) : void {}
        /**
         * @return mixed
         */
        public function getInternalPaymentId() {}
        public function setInternalPaymentId($internalPaymentId) : void {}
        /**
         * @return mixed
         */
        public function getReturnUrl() {}
        public function setReturnUrl($returnUrl) : void {}
        /**
         * @return mixed
         */
        public function getErrorUrl() {}
        public function setErrorUrl($errorUrl) : void {}
    }

    class AbstractRequest implements \arrayaccess {
        public function __construct($data = [ ]) {}
        public function set($name, $value) {}
        public function &get($name) {}
        public function offsetGet($offset) {}
        public function offsetSet($offset, $value) {}
        public function offsetExists($offset) {}
        public function offsetUnset($offset) {}
        /**
         * @return array
         */
        public function asArray() : array {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\PaymentManager\Payment {
    abstract class AbstractPayment implements \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\payment\paymentinterface {
        /**
         * @var bool
         */
        protected $recurringPaymentEnabled;
        /**
         * @var string
         */
        protected $configurationKey;

        protected function processOptions(array $options) {}
        protected function configureOptions(OptionsResolver $resolver) : OptionsResolver {}
        /**
         * @return bool
         */
        public function isRecurringPaymentEnabled() {}
        public function setRecurringPaymentSourceOrderData(AbstractOrder $sourceOrder, $paymentBrick) {}
        public function applyRecurringPaymentCondition(Concrete $orderListing, $additionalParameters = [ ]) {}
        /**
         * @inheritdoc
         */
        public function getConfigurationKey() {}
        public function setConfigurationKey(string $configurationKey) {}
    }

    class QPay extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\payment\abstractpayment implements \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\recurringpaymentinterface, \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\paymentinterface {
        const HASH_ALGO_MD5 = 'md5';
        const HASH_ALGO_HMAC_SHA512 = 'hmac_sha512';

        /**
         * @var FormFactoryInterface
         */
        protected $formFactory;
        /**
         * @var string
         */
        protected $secret;
        /**
         * @var string
         */
        protected $customer;
        /**
         * @var string
         */
        protected $toolkitPassword;
        /**
         * @var string
         */
        protected $paymenttype;
        /**
         * Keep old implementation for backwards compatibility
         *
         * @var string
         */
        protected $hashAlgorithm;
        /**
         * @var string[]
         */
        protected $authorizedData;
        /**
         * Whitelist of optional properties allowed for payment init
         *
         * @var array
         */
        protected $optionalPaymentProperties;
        /**
         * Data properties to set from response to payment provider brick.
         *
         * @var array
         */
        protected $authorizedDataProperties;

        public function __construct(array $options, FormFactoryInterface $formFactory) {}
        protected function processOptions(array $options) {}
        protected function configureOptions(OptionsResolver $resolver) : OptionsResolver {}
        /**
         * @return string
         */
        public function getName() {}
        protected function extendFormAttributes(array $formAttributes, PriceInterface $price, array $config) : array {}
        public function initPayment(PriceInterface $price, array $config) {}
        public function startPayment(OrderAgentInterface $orderAgent, PriceInterface $price, AbstractRequest $config) : StartPaymentResponseInterface {}
        public function handleResponse($response) {}
        /**
         * @return array
         */
        protected function getRequiredRequestFields() : array {}
        public function getAuthorizedDataProperties() {}
        /**
         * @inheritdoc
         */
        public function getAuthorizedData() {}
        public function setAuthorizedData(array $authorizedData) {}
        public function executeDebit(PriceInterface $price = null, $reference = null) {}
        public function executeCredit(PriceInterface $price, $reference, $transactionId) {}
        protected function computeFingerprint(array $params) {}
        protected function computeMd5Fingerprint($data) {}
        protected function computeHmacSha512Fingerprint($data) {}
        protected function serverToServerRequest($url, $params) {}
        public function setPaymentType($paymentType) {}
        public function getPaymentType() {}
        public function applyRecurringPaymentCondition(Concrete $orders, $additionalParameters = [ ]) {}
        public function setRecurringPaymentSourceOrderData(AbstractOrder $sourceOrder, $paymentBrick) {}
    }

    class Heidelpay extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\payment\abstractpayment implements \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\paymentinterface {
        /**
         * @var string
         */
        protected $privateAccessKey;
        /**
         * @var string
         */
        protected $publicAccessKey;
        /**
         * @var array
         */
        protected $authorizedData;

        public function __construct(array $options) {}
        public function getName() {}
        /**
         * @return string
         */
        public function getPublicAccessKey() : string {}
        public function initPayment(PriceInterface $price, array $config) {}
/**
 * @var Carbon $birthdate
 */
        public function startPayment(/**
 * @var Carbon $birthdate
 */
OrderAgentInterface $orderAgent, /**
 * @var Carbon $birthdate
 */
PriceInterface $price, /**
 * @var Carbon $birthdate
 */
AbstractRequest $config) : \Pimcore\Bundle\EcommerceFrameworkBundle\PaymentManager\V7\Payment\StartPaymentResponse\StartPaymentResponseInterface {}
        protected function transformInternalPaymentId($internalPaymentId) {}
        protected function generateErrorUrl($errorUrl, $merchantMessage, $clientMessage = '') {}
/** @var OnlineShopOrder $order */
        public function handleResponse(/** @var OnlineShopOrder $order */
$response) {}
        /**
         * @inheritdoc
         */
        public function getAuthorizedData() {}
        public function setAuthorizedData(array $authorizedData) {}
        public function executeDebit(PriceInterface $price = null, $reference = null) {}
        public function executeCredit(PriceInterface $price, $reference, $transactionId) {}
/**
 * @var PaymentProviderHeidelPay $heidelpayBrick
 */
        public function cancelCharge(/**
 * @var PaymentProviderHeidelPay $heidelpayBrick
 */
OnlineShopOrder $order, /**
 * @var PaymentProviderHeidelPay $heidelpayBrick
 */
PriceInterface $price) {}
/**
 * @var Cancellation $cancellation
 */
        public function getMaxCancelAmount(/**
 * @var Cancellation $cancellation
 */
OnlineShopOrder $order) {}
        public function fetchPayment(OnlineShopOrder $order) : ?Payment {}
    }

    /**
     * Class OGone
     * Payment integration for Ingenico OGone
     *
     * @see https://payment-services.ingenico.com/int/en/ogone/support/guides/integration%20guides/e-commerce/introduction
     *
     * @package Pimcore\Bundle\EcommerceFrameworkBundle\PaymentManager\Payment
     */
    class OGone extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\payment\abstractpayment implements \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\paymentinterface {
        static private $OGONE_SERVER_URL_TEST;
        static private $OGONE_SERVER_URL_LIVE;
        /**
         * @var string
         */
        private $serverURL;
        /**
         * @var string[]
         */
        protected $authorizedData;
        /**
         * @var FormFactoryInterface
         */
        protected $formFactory;
        /**
         * @var string[]
         */
        private $providerOptions;
        /**
         * @var string[] parameter list with allowed parameters for SHA - in generation
         */
        static protected $_SHA_IN_PARAMETERS;
        /** @var string[] parameters that can be used for the creation of the SHA fingerprint */
        static private $_SHA_OUT_PARAMETERS;

        public function __construct(array $options, FormFactoryInterface $formFactory) {}
/** @var \OnlineShop\Framework\Model\AbstractPaymentInformation $paymentInfo * */
        public function initPayment(/** @var \OnlineShop\Framework\Model\AbstractPaymentInformation $paymentInfo * */
PriceInterface $price, /** @var \OnlineShop\Framework\Model\AbstractPaymentInformation $paymentInfo * */
array $config) {}
        public function startPayment(OrderAgentInterface $orderAgent, PriceInterface $price, AbstractRequest $config) : StartPaymentResponseInterface {}
        public function handleResponse($response) {}
        protected function configureOptions(OptionsResolver $resolver) : OptionsResolver {}
        /**
         * @inheritdoc
         *
         * @return string
         */
        public function getName() {}
        private function addHiddenField(FormBuilderInterface $form, $name, $value) {}
        private function getProviderOption(string $key, $default = '') {}
        protected function mapAdditionalPaymentData(array $params, array $config) {}
        private function processAdditionalPaymentData(array $params, array $config, array $additionalParams) {}
        /**
         * @inheritdoc
         */
        public function getAuthorizedData() {}
        public function setAuthorizedData(array $authorizedData) {}
        public function executeDebit(PriceInterface $price = null, $reference = null) {}
        public function executeCredit(PriceInterface $price, $reference, $transactionId) {}
        protected function getRawSHA($parameters, $include, $passphrase) {}
        private function getSHA(string $encryptionType, string $rawString) {}
    }

    class WirecardSeamless extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\payment\abstractpayment implements \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\paymentinterface {
        const PAYMENT_RETURN_STATE_CANCEL = 'cancel';
        const PAYMENT_RETURN_STATE_FAILURE = 'failure';
        const PAYMENT_RETURN_STATE_SUCCESS = 'success';
        const HASH_ALGO_HMAC_SHA512 = 'hmac_sha512';
        const SESSION_KEY_STORAGE_ID = 'Wirecard_dataStorageId';
        const ENCODED_ORDERIDENT_DELIMITER = '---';
        const PAYMENT_RETURN_STATE_PENDING = 'pending';

        /**
         * @var EngineInterface
         */
        protected $templatingEngine;
        /**
         * @var SessionInterface
         */
        protected $session;
        /**
         * @var array
         */
        protected $authorizedData;
        /**
         * @var string
         */
        protected $customerId;
        /**
         * @var string
         */
        protected $shopId;
        /**
         * @var string
         */
        protected $password;
        /**
         * @var string
         */
        protected $secret;
        /**
         * @var string
         */
        protected $hashAlgorithm;
        /**
         * @var array
         */
        protected $paymentMethods;
        /**
         * @var string
         */
        protected $customerStatement;
        /**
         * @var bool
         */
        protected $paypalActivateItemLevel;
        /**
         * @var string
         */
        protected $iframeCssUrl;
        /**
         * @var string
         */
        protected $partial;
        /**
         * @var string
         */
        protected $js;
        private $URL_WIRECARD_CHECKOUT;
        private $URL_DATASTORAGE_INIT;
        private $URL_DATASTORAGE_READ;
        private $URL_FRONTEND_INIT;
        private $URL_APPROVE_REVERSAL;
        private $URL_DEPOSIT;
        private $WEBSITE_URL;
        private $CHECKOUT_WINDOW_NAME;

        public function __construct(array $options, EngineInterface $templatingEngine, SessionInterface $session) {}
        protected function processOptions(array $options) {}
        protected function configureOptions(OptionsResolver $resolver) : OptionsResolver {}
        /**
         * @return string
         */
        public function getName() {}
        /** @var AttributeBagInterface $bag */
        protected function getSessionBag() : AttributeBagInterface {}
        public function initPayment(PriceInterface $price, array $config) {}
        public function startPayment(OrderAgentInterface $orderAgent, PriceInterface $price, AbstractRequest $config) : StartPaymentResponseInterface {}
/** @var PriceInterface $price */
        public function getInitPaymentRedirectUrl(/** @var PriceInterface $price */
$config) {}
        protected function addPayolutionRequestFields($fields, \Pimcore\Model\DataObject\OnlineShopOrder $order, $config) {}
/** @var OrderPriceModifications $modification */
        protected function addPaypalFields(/** @var OrderPriceModifications $modification */
$fields, /** @var OrderPriceModifications $modification */
\Pimcore\Model\DataObject\OnlineShopOrder $order, /** @var OrderPriceModifications $modification */
$config) {}
        public function handleResponse($response) {}
        /**
         * @inheritdoc
         */
        public function getAuthorizedData() {}
        public function setAuthorizedData(array $authorizedData) {}
        public function executeDebit(PriceInterface $price = null, $reference = null) {}
        public function deposit(PriceInterface $price = null, $reference = null, $transactionId = null) {}
        public function executeCredit(PriceInterface $price, $reference, $transactionId) {}
        public function approveReversal($reference, $transactionId, $paymentType) {}
        /**
         * @return string
         */
        protected function computeFingerprint() {}
        protected function serverToServerRequest($url, $params) {}
/** @var CartInterface $cart */
        public static function createCartByOrderIdent(/** @var CartInterface $cart */
$response, /** @var CartInterface $cart */
EnvironmentInterface $environment = null) {}
        protected function encodeOrderIdent($orderIdent) {}
        protected function decodeOrderIdent($orderIdent) {}
        protected function calculateFingerprint($requestFingerprintSeed) {}
        protected function generateFingerprint($fields, $withOrder = false, $ignoreSecret = false) {}
        public static function extractSeamlessResponse(AbstractPaymentInformation $paymentInfo) {}
    }

    class PayU extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\payment\abstractpayment implements \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\paymentinterface {
        const AUTHORIZE_URL = 'https://secure%s.payu.com/pl/standard/user/oauth/authorize';
        const ORDER_URL = 'https://secure%s.payu.com/api/v2_1/orders';

        /** @var string $pos_id */
        protected $posId;
        /** @var string $md5_key */
        protected $md5Key;
        /** @var string $oauth_client_id */
        protected $oauthClientId;
        /** @var string $oauth_client_secret */
        protected $oauthClientSecret;
        /** @var string $accessToken */
        protected $accessToken;
        /** @var string $orderUrl */
        protected $orderUrl;
        /** @var string $authorizeUrl */
        protected $authorizeUrl;
        /** @var array $authorizedData */
        protected $authorizedData;
        /** @var Client */
        protected $client;

        public function __construct(Client $client, array $options) {}
        protected function processOptions(array $options) {}
        protected function configureOptions(OptionsResolver $resolver) : OptionsResolver {}
        /**
         * @return string
         */
        public function getName() {}
/** @var OnlineShopOrder $order */
        public function initPayment(/** @var OnlineShopOrder $order */
PriceInterface $price, /** @var OnlineShopOrder $order */
array $config) {}
/** @var ProductECommerce $product */
        protected function setProducts(/** @var ProductECommerce $product */
array $items) : array {}
        /**
         * @return string
         *
         * @throws \Exception
         */
        private function getAccessToken() : string {}
        private function create(array $order) : string {}
        public function startPayment(OrderAgentInterface $orderAgent, PriceInterface $price, AbstractRequest $config) : StartPaymentResponseInterface {}
        public function handleResponse($response) {}
        /**
         * @inheritdoc
         */
        public function getAuthorizedData() {}
        public function setAuthorizedData(array $authorizedData) {}
/** @var OnlineShopOrder $order */
        public function executeDebit(/** @var OnlineShopOrder $order */
PriceInterface $price = null, /** @var OnlineShopOrder $order */
$response = null) {}
        public function executeCredit(PriceInterface $price, $reference, $transactionId) {}
        protected function setAdditionalData(array $orderData) : array {}
    }

    class PayPalSmartPaymentButton extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\payment\abstractpayment implements \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\paymentinterface {
        const CAPTURE_STRATEGY_AUTOMATIC = 'automatic';
        const CAPTURE_STRATEGY_MANUAL = 'manual';

        /**
         * @var PayPalHttpClient
         */
        protected $payPalHttpClient;
        /**
         * @var string
         */
        protected $clientId;
        /**
         * @var array
         */
        protected $applicationContext;
        /**
         * @var string
         */
        protected $captureStrategy;
        /**
         * @var EnvironmentInterface
         */
        protected $environment;
        protected $authorizedData;

        public function __construct(array $options, EnvironmentInterface $environment) {}
        /**
         * @return EnvironmentInterface
         */
        public function getEnvironment() : EnvironmentInterface {}
        public function setEnvironment(EnvironmentInterface $environment) : void {}
        /**
         * @return string
         */
        public function getName() {}
        public function initPayment(PriceInterface $price, array $config) {}
        protected function buildRequestBody(PriceInterface $price, array $config) {}
        public function startPayment(OrderAgentInterface $orderAgent, PriceInterface $price, AbstractRequest $config) : StartPaymentResponseInterface {}
        public function handleResponse($response) {}
        /**
         * Returns the authorized data from payment provider
         *
         * @return array
         */
        public function getAuthorizedData() {}
        public function setAuthorizedData(array $authorizedData) {}
        public function executeDebit(PriceInterface $price = null, $reference = null) {}
        public function executeCredit(PriceInterface $price, $reference, $transactionId) {}
        protected function configureOptions(OptionsResolver $resolver) : OptionsResolver {}
        protected function processOptions(array $options) {}
        protected function buildPayPalClient(string $clientId, string $clientSecret, string $mode = 'sandbox') {}
        public function buildPaymentSDKLink(Currency $currency = null) {}
    }

    /**
     * Class Mpay24
     * Payment integration for Mpay24
     *
     * @see https://payment-services.ingenico.com/int/en/ogone/support/guides/integration%20guides/e-commerce/introduction
     *
     */
    class Mpay24Seamless extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\payment\abstractpayment implements \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\paymentinterface {
        /**
         * @var string[]
         */
        private $ecommerceConfig;
        /** @var EngineInterface */
        private $templatingEngine;
        private $successURL;
        private $errorURL;
        private $confirmationURL;
        private $authorizedData;

        public function __construct(array $options, EngineInterface $templatingEngine) {}
        protected function configureOptions(OptionsResolver $resolver) : OptionsResolver {}
        private function getMpay24Config() : Mpay24Config {}
        private function getProviderCompatibleLocale(Request $request) : string {}
/** @var Request $request */
        public function initPayment(/** @var Request $request */
PriceInterface $price, /** @var Request $request */
array $config) {}
        public function startPayment(OrderAgentInterface $orderAgent, PriceInterface $price, AbstractRequest $config) : StartPaymentResponseInterface {}
        public function getInitPaymentRedirectUrl($config) : array {}
/** @var OrderPriceModifications $modification */
        private function addOrderItemPositions(/** @var OrderPriceModifications $modification */
OnlineShopOrder $order, /** @var OrderPriceModifications $modification */
string $paymentType, /** @var OrderPriceModifications $modification */
array $additional) : array {}
        public function handleResponse($response) {}
        /**
         * @inheritdoc
         *
         * @return string
         */
        public function getName() {}
        /**
         * @inheritdoc
         */
        public function getAuthorizedData() {}
        public function setAuthorizedData(array $authorizedData) {}
        public function executeDebit(PriceInterface $price = null, $reference = null) {}
        public function executeCredit(PriceInterface $price, $reference, $transactionId) {}
    }

    class Datatrans extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\payment\abstractpayment implements \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\paymentinterface, \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\recurringpaymentinterface {
        const TRANS_TYPE_CREDIT = '06';
        const AUTH_TYPE_AUTHORIZATION = 'NOA';
        const AUTH_TYPE_FINAL_AUTHORIZATION = 'FOA';
        const TRANS_TYPE_DEBIT = '05';

        /**
         * @var FormFactoryInterface
         */
        protected $formFactory;
        /**
         * @var array
         */
        protected $endpoint;
        /**
         * @var string
         */
        protected $merchantId;
        /**
         * @var string
         */
        protected $sign;
        /**
         * @var bool
         */
        protected $useDigitalSignature;
        /**
         * @var string[]
         */
        protected $authorizedData;
        /**
         * @var StatusInterface
         */
        protected $paymentStatus;

        public function __construct(array $options, FormFactoryInterface $formFactory) {}
        protected function processOptions(array $options) {}
        protected function configureOptions(OptionsResolver $resolver) : OptionsResolver {}
        /**
         * @return string
         */
        public function getName() {}
        protected function extendFormAttributes(array $formAttributes, PriceInterface $price, array $config) : array {}
        public function initPayment(PriceInterface $price, array $config) {}
        public function startPayment(OrderAgentInterface $orderAgent, PriceInterface $price, AbstractRequest $config) : StartPaymentResponseInterface {}
        public function handleResponse($response) {}
        /**
         * @return array
         */
        protected function getRequiredRequestFields() : array {}
        protected function getRequiredResponseFields($response) {}
        /**
         * Get valid authorization types
         *
         * @return array
         */
        public function getValidAuthorizationTypes() {}
        public function executeDebit(PriceInterface $price = null, $reference = null) {}
        public function executeCredit(PriceInterface $price, $reference, $transactionId) {}
        public function executeAuthorizationCancel(PriceInterface $price, $reference, $transactionId) {}
        public function setAuthorizedData(array $authorizedData) {}
        /**
         * @return array
         */
        public function getAuthorizedData() {}
        protected function xmlAuthorisation($reqType, $transType, $amount, $currency, $refno, $aliasCC, $expireMonth, $expireYear) {}
        protected function xmlSettlement($transType, $amount, $currency, $reference, $transactionId) {}
        protected function xmlCancelAuthorization($amount, $currency, $reference, $transactionId) {}
        protected function xmlRequest($endpoint, $xml) {}
        public function isRecurringPaymentEnabled() {}
        public function setRecurringPaymentSourceOrderData(AbstractOrder $sourceOrder, $paymentBrick) {}
        public function applyRecurringPaymentCondition(Concrete $orderListing, $additionalParameters = [ ]) {}
    }

    class Klarna extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\payment\abstractpayment implements \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\v7\payment\paymentinterface {
        /**
         * @var string
         */
        protected $eid;
        /**
         * @var string
         */
        protected $sharedSecretKey;
        /**
         * @var string[]
         */
        protected $authorizedData;
        /**
         * @var string
         */
        protected $endpoint;

        public function __construct(array $options) {}
        protected function processOptions(array $options) {}
        protected function configureOptions(OptionsResolver $resolver) : OptionsResolver {}
        /**
         * @return string
         */
        public function getName() {}
        public function initPayment(PriceInterface $price, array $config, CartInterface $cart = null) {}
        public function startPayment(OrderAgentInterface $orderAgent, PriceInterface $price, AbstractRequest $config) : StartPaymentResponseInterface {}
        public function handleResponse($response) {}
        /**
         * @inheritdoc
         */
        public function getAuthorizedData() {}
        public function setAuthorizedData(array $authorizedData) {}
        public function executeDebit(PriceInterface $price = null, $reference = null) {}
        public function executeCredit(PriceInterface $price, $reference, $transactionId) {}
        public function createOrder($uri = null) {}
    }

    /**
     * @deprecated
     */
    class PayPal extends \pimcore\bundle\ecommerceframeworkbundle\paymentmanager\payment\abstractpayment {
        /**
         * @var string
         */
        protected $endpointUrlPart;
        /**
         * @var \SoapClient
         */
        protected $client;
        /**
         * @var int
         */
        protected $protocol;
        /**
         * @var string
         */
        protected $TransactionID;
        /**
         * @var string[]
         */
        protected $authorizedData;

        public function __construct(array $options) {}
        protected function processOptions(array $options) {}
        protected function createClientCredentials(string $username, string $password, string $signature) : \stdClass {}
        protected function createClient(string $endpointUrlPart, \stdClass $credentials) : \SoapClient {}
        protected function configureOptions(OptionsResolver $resolver) : OptionsResolver {}
        /**
         * @return string
         */
        public function getName() {}
        public function initPayment(PriceInterface $price, array $config) {}
        public function handleResponse($response) {}
        /**
         * @inheritdoc
         */
        public function getAuthorizedData() {}
        public function setAuthorizedData(array $authorizedData) {}
        public function executeDebit(PriceInterface $price = null, $reference = null) {}
        public function executeCredit(PriceInterface $price, $reference, $transactionId) {}
/** @var OrderPriceModifications $modification */
        protected function createPaymentDetails(/** @var OrderPriceModifications $modification */
PriceInterface $price, /** @var OrderPriceModifications $modification */
?AbstractOrder $order = null) {}
    }


    /**
     * Interface for checkout payment provider
     */
    interface PaymentInterface {
        /**
         * @return string
         */
        function getName() ;
        function initPayment(PriceInterface $price, array $config) ;
        function handleResponse($response) ;
        /**
         * Returns the authorized data from payment provider
         *
         * @return array
         */
        function getAuthorizedData() ;
        function setAuthorizedData(array $authorizedData) ;
        function executeDebit(PriceInterface $price = null, $reference = null) ;
        function executeCredit(PriceInterface $price, $reference, $transactionId) ;
        /**
         * Payment supports recurring payment
         *
         * @todo Pimcore 7 remove this method as it moved to RecurringPaymentInterface
         *
         * @return bool
         */
        function isRecurringPaymentEnabled() ;
        function setRecurringPaymentSourceOrderData(AbstractOrder $sourceOrder, $paymentBrick) ;
        function applyRecurringPaymentCondition(Concrete $orderListing, $additionalParameters = [ ]) ;
        /**
         * returns configuration key in yml configuration file
         *
         * @return string
         */
        function getConfigurationKey() ;
    }

    /**
     * @deprecated use PaymentInterface instead.
     */
    interface IPayment {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\PaymentManager\Exception {
    class ProviderNotFoundException extends \invalidargumentexception {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\DependencyInjection {
    class PimcoreEcommerceFrameworkExtension extends \symfony\component\httpkernel\dependencyinjection\configurableextension {
        const SERVICE_ID_TRACKING_MANAGER = 'pimcore_ecommerce.tracking.tracking_manager';
        const SERVICE_ID_FACTORY = 'pimcore_ecommerce.factory';
        const SERVICE_ID_ENVIRONMENT = 'pimcore_ecommerce.environment';
        const SERVICE_ID_PAYMENT_MANAGER = 'pimcore_ecommerce.payment_manager';
        const SERVICE_ID_INDEX_SERVICE = 'pimcore_ecommerce.index_service';
        const SERVICE_ID_VOUCHER_SERVICE = 'pimcore_ecommerce.voucher_service';
        const SERVICE_ID_TOKEN_MANAGER_FACTORY = 'pimcore_ecommerce.voucher_service.token_manager_factory';
        const SERVICE_ID_OFFER_TOOL = 'pimcore_ecommerce.offer_tool';

        protected function loadInternal(array $config, ContainerBuilder $container) {}
        private function registerFactoryConfiguration(ContainerBuilder $container, array $config) {}
        private function registerEnvironmentConfiguration(ContainerBuilder $container, array $config) {}
        private function registerCartManagerConfiguration(ContainerBuilder $container, array $config) {}
        private function registerOrderManagerConfiguration(ContainerBuilder $container, array $config) {}
        private function registerPricingManagerConfiguration(ContainerBuilder $container, array $config) {}
        private function registerPriceSystemsConfiguration(ContainerBuilder $container, array $config) {}
        private function registerAvailabilitySystemsConfiguration(ContainerBuilder $container, array $config) {}
        private function registerCheckoutManagerConfiguration(ContainerBuilder $container, array $config) {}
        private function registerPaymentManagerConfiguration(ContainerBuilder $container, array $config) {}
        private function registerIndexServiceConfig(ContainerBuilder $container, array $config) {}
        private function registerFilterServiceConfig(ContainerBuilder $container, array $config) {}
        private function registerVoucherServiceConfig(ContainerBuilder $container, array $config) {}
        private function registerOfferToolConfig(ContainerBuilder $container, array $config) {}
        private function registerTrackingManagerConfiguration(ContainerBuilder $container, array $config) {}
        private function setupTenantAwareComponentLocator(ContainerBuilder $container, string $id, array $mapping, string $class, array $aliases) {}
        private function setupNameServiceComponentLocator(ContainerBuilder $container, string $id, array $mapping, string $class) {}
        private function setupServiceLocator(ContainerBuilder $container, string $id, array $mapping, bool $register = true) {}
    }

    class Configuration implements \symfony\component\config\definition\configurationinterface {
        /**
         * @var TenantProcessor
         */
        private $tenantProcessor;
        /**
         * @var PlaceholderProcessor
         */
        private $placeholderProcessor;
        /**
         * @var DefaultWorkerConfigMapper
         */
        private $indexWorkerConfigMapper;

        public function __construct() {}
        /**
         * @inheritDoc
         */
        public function getConfigTreeBuilder() {}
        private function addRootNodeChildren(ArrayNodeDefinition $rootNode) {}
        private function buildPimcoreNode() : NodeDefinition {}
        private function buildFactoryNode() : NodeDefinition {}
        private function buildEnvironmentNode() : NodeDefinition {}
        private function buildCartManagerNode() : NodeDefinition {}
        private function buildOrderManagerNode() : NodeDefinition {}
        private function buildPricingManagerNode() : NodeDefinition {}
        private function buildPriceSystemsNode() : NodeDefinition {}
        private function buildAvailabilitySystemsNode() : NodeDefinition {}
        private function buildCheckoutManagerNode() : NodeDefinition {}
        private function buildPaymentManagerNode() : NodeDefinition {}
        private function buildIndexServiceNode() : NodeDefinition {}
        private function buildFilterServiceNode() : NodeDefinition {}
        private function buildVoucherServiceNode() : NodeDefinition {}
        private function buildOfferToolNode() : NodeDefinition {}
        private function buildTrackingManagerNode() : NodeDefinition {}
        private function buildOptionsNode(string $name = 'options', array $defaultValue = [ ], string $documentation = null) : NodeDefinition {}
        private function remapProperties(array $data, array $map) : array {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\DependencyInjection\Config\Processor {
    class TenantProcessor {
        public function mergeTenantConfig(array $config) : array {}
        private function mergeDefaults(array $defaults, array $values) : array {}
        private function isArrayAssociative(array $array) : bool {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\DependencyInjection\ServiceLocator {
    abstract class NameServiceLocator {
        /**
         * @var PsrContainerInterface
         */
        protected $locator;
        /**
         * @var string
         */
        protected $defaultName;

        public function __construct(PsrContainerInterface $locator) {}
        protected function locate(string $name = null) {}
        protected function resolveName(string $name = null) {}
        abstract protected function buildNotFoundException(string $name) : UnsupportedException ;
    }

    abstract class AssortmentTenantAwareServiceLocator extends \pimcore\bundle\ecommerceframeworkbundle\dependencyinjection\servicelocator\tenantawareservicelocator {
        protected function getEnvironmentTenant() {}
    }

    abstract class TenantAwareServiceLocator {
        /**
         * @var PsrContainerInterface
         */
        protected $locator;
        /**
         * @var EnvironmentInterface
         */
        protected $environment;
        /**
         * If true the locator will not fall back to the default tenant if a tenant is requested but not existing
         *
         * @var bool
         */
        protected $strictTenants;
        /**
         * @var string
         */
        protected $defaultTenant;

        public function __construct(PsrContainerInterface $locator, EnvironmentInterface $environment, bool $strictTenants = false) {}
        protected function locate(string $tenant = null) {}
        abstract protected function buildNotFoundException(string $tenant) : UnsupportedException ;
        protected function resolveTenant(string $tenant = null) {}
        abstract protected function getEnvironmentTenant() ;
    }

    abstract class CheckoutTenantAwareServiceLocator extends \pimcore\bundle\ecommerceframeworkbundle\dependencyinjection\servicelocator\tenantawareservicelocator {
        protected function getEnvironmentTenant() {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\DependencyInjection\IndexService {
    /**
     * Resolves default config or worker in case only config or worker is set
     */
    class DefaultWorkerConfigMapper {
        private $mapping;

        public function getWorkerForConfig(string $config) {}
        public function getConfigForWorker(string $worker) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\DependencyInjection\Compiler {
    class RegisterConfiguredServicesPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
        public function registerIndexServiceWorkers(ContainerBuilder $container) {}
        public function registerTrackingManagerTrackers(ContainerBuilder $container) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\Exception {
    /**
     * Class VoucherServiceException
     */
    class VoucherServiceException extends \pimcore\bundle\ecommerceframeworkbundle\exception\abstractecommerceexception {
        const ERROR_CODE_ONLY_TOKEN_PER_CART_CANNOT_BE_ADDED = 6;
        const ERROR_CODE_ONLY_TOKEN_PER_CART_ALREADY_ADDED = 7;
        const ERROR_CODE_NO_MORE_USAGES = 8;
        const ERROR_CODE_NOT_FOUND_IN_CART = 9;
        const ERROR_CODE_TOKEN_ALREADY_RESERVED = 2;
        const ERROR_CODE_TOKEN_RESERVATION_NOT_POSSIBLE = 3;
        const ERROR_CODE_NO_TOKEN_FOR_THIS_CODE_EXISTS = 4;
        const ERROR_CODE_ONCE_PER_CART_VIOLATED = 5;
        const ERROR_CODE_TOKEN_ALREADY_IN_USE = 1;

    }

    class AbstractEcommerceException extends \exception {}

    class PaymentNotAllowedException extends \pimcore\bundle\ecommerceframeworkbundle\exception\abstractecommerceexception {
        /**
         * @var AbstractOrder
         */
        protected $order;
        /**
         * @var CartInterface
         */
        protected $cart;
        /**
         * @var bool
         */
        protected $orderNeedsUpdate;

        public function __construct(string $message, AbstractOrder $order, CartInterface $cart = null, bool $orderNeedsUpdate = null) {}
    }

    /**
     * Class UnsupportedException
     */
    class UnsupportedException extends \pimcore\bundle\ecommerceframeworkbundle\exception\abstractecommerceexception {}

    class PaymentNotSuccessfulException extends \pimcore\bundle\ecommerceframeworkbundle\exception\abstractecommerceexception {
        /**
         * @var AbstractOrder
         */
        protected $order;
        /**
         * @var StatusInterface
         */
        protected $status;

        public function __construct(AbstractOrder $order, StatusInterface $status, string $message) {}
    }

    class OrderUpdateNotPossibleException extends \pimcore\bundle\ecommerceframeworkbundle\exception\abstractecommerceexception {}

    /**
     * Class InvalidConfigException
     */
    class InvalidConfigException extends \pimcore\bundle\ecommerceframeworkbundle\exception\abstractecommerceexception {}

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\Reports\Piwik {
    class PiwikReportsProvider {
        /**
         * @var SiteIdProvider
         */
        private $siteIdProvider;
        /**
         * @var Config
         */
        private $config;
        /**
         * @var WidgetBroker
         */
        private $widgetBroker;
        /**
         * @var TranslatorInterface
         */
        private $translator;
        /**
         * Widgets taken into consideration for reporting menu
         *
         * @var array
         */
        private $reportingWidgets;
        /**
         * Widgets which will be linked as standalone widgets instead of full iframe if iframe integration is not configured
         *
         * @var array
         */
        private $widgetFallbackWidgets;

        public function __construct(SiteIdProvider $siteIdProvider, Config $config, WidgetBroker $widgetBroker, TranslatorInterface $translator) {}
        public function getReportingWidgets() : array {}
        public function setReportingWidgets(array $reportingWidgets) {}
        public function getWidgetFallbackWidgets() : array {}
        public function setWidgetFallbackWidgets(array $widgetFallbackWidgets) {}
        public function getPiwikEcommerceReports() : array {}
        private function loadAvailableReports(SiteId $siteConfig) : array {}
        private function getFullTitle(array $widgetData) : string {}
        private function generateIframeUrl(SiteId $siteConfig, array $widgetData) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\EventListener {
    class IndexUpdateListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        public static function getSubscribedEvents() {}
        public function onObjectUpdate(DataObjectEvent $event) {}
        public function onObjectDelete(DataObjectEvent $event) {}
    }

}

namespace Pimcore\Bundle\EcommerceFrameworkBundle\EventListener\Frontend {
    class TrackingCodeFlashMessageListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        const FLASH_MESSAGE_BAG_KEY = 'ecommerceframework_trackingcode_flashmessagelistener';

        /**
         * @var Session
         */
        protected $session;
        /**
         * @var TrackingManager
         */
        protected $trackingManger;

        public function __construct(SessionInterface $session, TrackingManager $trackingManager) {}
        public static function getSubscribedEvents() {}
        public function onKernelRequest(GetResponseEvent $event) {}
    }

}

namespace Pimcore\Bundle\CoreBundle {
    class PimcoreCoreBundle extends \symfony\component\httpkernel\bundle\bundle {
        public function getContainerExtension() {}
        public function build(ContainerBuilder $container) {}
    }

}

namespace Pimcore\Bundle\CoreBundle\DataCollector {
    class PimcoreTargetingDataCollector extends \symfony\component\httpkernel\datacollector\datacollector {
        /**
         * @var VisitorInfoStorageInterface
         */
        private $visitorInfoStorage;
        /**
         * @var DocumentResolver
         */
        private $documentResolver;
        /**
         * @var TargetingDataCollector
         */
        private $targetingDataCollector;

        public function __construct(VisitorInfoStorageInterface $visitorInfoStorage, DocumentResolver $documentResolver, TargetingDataCollector $targetingDataCollector) {}
        public function getName() {}
        public function collect(Request $request, Response $response, \Exception $exception = null) {}
        public function reset() {}
        public function getVisitorInfo() {}
        public function getStorage() {}
        public function getRules() {}
        public function getTargetGroups() {}
        public function getDocumentTargetGroup() {}
        public function getDocumentTargetGroups() {}
        public function hasData() : bool {}
    }

    class PimcoreDataCollector extends \symfony\component\httpkernel\datacollector\datacollector {
        /**
         * @var PimcoreContextResolver
         */
        protected $contextResolver;

        public function __construct(PimcoreContextResolver $contextResolver) {}
        public function collect(Request $request, Response $response, \Exception $exception = null) {}
        public function reset() {}
        public function getName() {}
        /**
         * @return string|null
         */
        public function getContext() {}
        /**
         * @return string
         */
        public function getVersion() {}
        /**
         * @return string
         */
        public function getRevision() {}
    }

}

namespace Pimcore\Bundle\CoreBundle\Migrations {
    class Version20190320133439 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20191121150326 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20191015131700 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20191218073528 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20181009135158 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20191213115045 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20200113120101 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20191125135853 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20191114132014 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20190902085052 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20190807121356 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20181128074035 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
        private function migrateEmailField($fieldName, $emailLogEntry) {}
        private function downgradeEmailField($fieldName, $emailLogEntry) {}
        protected function buildArrayFromOldFormat($data) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20180913132106 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20190618154000 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20190402073052 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20190102153226 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20200116181758 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20191126130004 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Class Version20180912140913
     *
     * @package Pimcore\Bundle\CoreBundle\Migrations
     */
    class Version20180912140913 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20190708175236 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20180830122128 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20190701141857 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20190515130651 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20191125200416 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20190806160450 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20190108131401 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20190131095936 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20190102143436 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Class Version20180907115436
     *
     * @package Pimcore\Bundle\CoreBundle\Migrations
     */
    class Version20180907115436 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20181214145532 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20191114123638 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20181128112320 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20190508074339 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20190403120728 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20180904201947 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20190904154339 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20180830113528 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20190729085052 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20180724144005 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20190522130545 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20190124105627 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20181126144341 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20191208175348 extends \pimcore\migrations\migration\abstractpimcoremigration {
        private $tablesToProcess;

        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20190408084129 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20181008132414 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20190520151448 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20191107141816 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20181115114003 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function updateCustomLayoutDefinitionToPhp($customLayout) {}
        public function getDefinitionFile($layoutId) {}
        /**
         * @return string
         */
        public function getInfoDocBlock() {}
        public static function cleanupForExport($data) {}
        public function down(Schema $schema) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20180906142115 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20181126094412 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20190131074054 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20191230104529 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
/** @var ClassDefinition\Data\Input $cartIdField */
        public function up(/** @var ClassDefinition\Data\Input $cartIdField */
Schema $schema) {}
/** @var ClassDefinition\Data\Input $cartIdField */
        public function down(/** @var ClassDefinition\Data\Input $cartIdField */
Schema $schema) {}
    }

    class Version20180924111736 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20190828142756 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20190527121800 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function doesSqlMigrations() : bool {}
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
        public function migrateSystemConfiguration() {}
        public static function standardizeSystemConfigKeys($config) {}
        public function migrateBranding($systemConfigFile) {}
        public function migrateEmail($systemConfigFile) {}
        public function migrateDevmode($systemConfigFile) {}
    }

    /**
     * Auto-generated Migration: Please modify to your needs!
     */
    class Version20190405112707 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20191230103524 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

    class Version20190802090149 extends \pimcore\migrations\migration\abstractpimcoremigration {
        public function up(Schema $schema) {}
        public function down(Schema $schema) {}
    }

}

namespace Pimcore\Bundle\CoreBundle\Templating {
    /**
     * @deprecated
     * Provides backward compatibility for camelCase template names and PHP engine support
     */
    class LegacyTemplateGuesser extends \sensio\bundle\frameworkextrabundle\templating\templateguesser {
        /**
         * @var KernelInterface
         */
        protected $kernel;
        /**
         * @var DelegatingEngine
         */
        protected $templateEngine;
        /**
         * @var string[]
         */
        private $controllerPatterns;

        public function __construct(KernelInterface $kernel, DelegatingEngine $templateEngine, $controllerPatterns = [ ]) {}
        public function guessTemplateName($controller, Request $request, $engine = 'twig') {}
        protected function getBundleForClass($class) {}
        private static function getRealClass(string $class) : string {}
    }

}

namespace Pimcore\Bundle\CoreBundle\Controller {
    class PublicServicesController extends \pimcore\controller\controller {
        public function thumbnailAction(Request $request, SessionListener $sessionListener) {}
        public function robotsTxtAction(Request $request) {}
        public function commonFilesAction(Request $request) {}
        public function hybridauthAction(Request $request) {}
        public function qrcodeAction(Request $request) {}
        public function customAdminEntryPointAction(Request $request) {}
    }

}

namespace Pimcore\Bundle\CoreBundle\Request\ParamConverter {
    class DataObjectParamConverter implements \sensio\bundle\frameworkextrabundle\request\paramconverter\paramconverterinterface {
/** @var AbstractObject|Concrete $object */
        public function apply(/** @var AbstractObject|Concrete $object */
Request $request, /** @var AbstractObject|Concrete $object */
ParamConverter $configuration) {}
        public function supports(ParamConverter $configuration) {}
    }

}

namespace Pimcore\Bundle\CoreBundle\Command {
    class OptimizeImageThumbnailsCommand extends \pimcore\console\abstractcommand {
        /**
         * @var ImageOptimizerInterface
         */
        private $optimizer;

        public function __construct(ImageOptimizerInterface $optimizer) {}
        protected function configure() {}
/** @var \SplFileInfo $file */
        protected function execute(/** @var \SplFileInfo $file */
InputInterface $input, /** @var \SplFileInfo $file */
OutputInterface $output) {}
    }

    class CacheClearCommand extends \pimcore\console\abstractcommand {
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        private function prepareTags(array $tags) : array {}
    }

    class SearchBackendReindexCommand extends \pimcore\console\abstractcommand {
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    class InternalNewsletterDocumentSendCommand extends \pimcore\console\abstractcommand {
        /**
         * @var ContainerInterface
         */
        private $container;

        public function __construct(ContainerInterface $container) {}
        protected function configure() : void {}
/** @var AddressSourceAdapterFactoryInterface $addressAdapterFactory */
        protected function execute(/** @var AddressSourceAdapterFactoryInterface $addressAdapterFactory */
InputInterface $input, /** @var AddressSourceAdapterFactoryInterface $addressAdapterFactory */
OutputInterface $output) {}
        protected function doSendMailInBatchMode(Model\Document\Newsletter $document, AddressSourceAdapterInterface $addressAdapter, $sendingId, $hostUrl) : void {}
        protected function doSendMailInSingleMode(Model\Document\Newsletter $document, AddressSourceAdapterInterface $addressAdapter, $sendingId, $hostUrl) : void {}
    }

    class EmailLogsCleanupCommand extends \pimcore\console\abstractcommand {
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    class CacheWarmingCommand extends \pimcore\console\abstractcommand {
        /**
         * @var array
         */
        protected $validTypes;
        /**
         * @var array
         */
        protected $validDocumentTypes;
        /**
         * @var array
         */
        protected $validAssetTypes;
        /**
         * @var array
         */
        protected $validObjectTypes;

        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        protected function writeWarmingMessage($type, $types) {}
        protected function humanList($list, $glue = 'or', $template = null) {}
        protected function getArrayOption($option, $property, $singular, $fallback = false) {}
    }

    class ThumbnailsClearCommand extends \pimcore\console\abstractcommand {
        protected function configure() {}
/** @var Asset\Image\Thumbnail\Config|Asset\Video\Thumbnail\Config $thumbConfig */
        protected function execute(/** @var Asset\Image\Thumbnail\Config|Asset\Video\Thumbnail\Config $thumbConfig */
InputInterface $input, /** @var Asset\Image\Thumbnail\Config|Asset\Video\Thumbnail\Config $thumbConfig */
OutputInterface $output) {}
    }

    class MysqlToolsCommand extends \pimcore\console\abstractcommand {
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    class ThumbnailsVideoCommand extends \pimcore\console\abstractcommand {
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        protected function waitTillFinished($videoId, $thumbnail) {}
    }

    class CustomLayoutRebuildCommand extends \pimcore\console\abstractcommand {
        /**
         * @var ClassLayoutDefinitionManager
         */
        protected $classLayoutDefinitionManager;

        protected function configure() {}
        public function setClassLayoutDefinitionManager(ClassLayoutDefinitionManager $classLayoutDefinitionManager) {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    class DeleteClassificationStoreCommand extends \pimcore\console\abstractcommand {
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    class ClassesRebuildCommand extends \pimcore\console\abstractcommand {
        /**
         * @var ClassDefinitionManager
         */
        protected $classDefinitionManager;

        protected function configure() {}
        public function setClassDefinitionManager(ClassDefinitionManager $classDefinitionManager) {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    class RunScriptCommand extends \pimcore\console\abstractcommand {
    use \pimcore\console\traits\dryrun;

        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    class LowQualityImagePreviewCommand extends \pimcore\console\abstractcommand {
        protected function configure() {}
/** @var Asset\Image[] $images */
        protected function execute(/** @var Asset\Image[] $images */
InputInterface $input, /** @var Asset\Image[] $images */
OutputInterface $output) {}
    }

    class InternalModelDaoMappingGeneratorCommand extends \pimcore\console\abstractcommand {
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    class ResetPasswordCommand extends \pimcore\console\abstractcommand {
        protected function configure() {}
/** @var User $user */
        protected function execute(/** @var User $user */
InputInterface $input, /** @var User $user */
OutputInterface $output) {}
        protected function askForPassword(InputInterface $input, OutputInterface $output) {}
    }

    class WorkflowDumpCommand extends \pimcore\console\abstractcommand {
        static protected $defaultName;

        /**
         * {@inheritdoc}
         */
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    class MaintenanceCommand extends \pimcore\console\abstractcommand {
        /**
         * @var ExecutorInterface
         */
        private $maintenanceExecutor;
        /**
         * @var LoggerInterface
         */
        private $logger;

        public function __construct(ExecutorInterface $maintenanceExecutor, LoggerInterface $logger) {}
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        private function getArrayOptionValue(InputInterface $input, string $name) : array {}
    }

    class ThumbnailsImageCommand extends \pimcore\console\abstractcommand {
        protected function configure() {}
/**
 * @var Asset\Image\Thumbnail\Config[] $thumbnailsToGenerate
 */
        protected function execute(/**
 * @var Asset\Image\Thumbnail\Config[] $thumbnailsToGenerate
 */
InputInterface $input, /**
 * @var Asset\Image\Thumbnail\Config[] $thumbnailsToGenerate
 */
OutputInterface $output) {}
    }

    class Web2PrintPdfCreationCommand extends \pimcore\console\abstractcommand {
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    class DeleteUnusedLocaleDataCommand extends \pimcore\console\abstractcommand {
    use \pimcore\console\traits\dryrun;

        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    class InternalVideoConverterCommand extends \pimcore\console\abstractcommand {
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    class InternalUnicodeCldrLanguageTerritoryGeneratorCommand extends \pimcore\console\abstractcommand {
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

}

namespace Pimcore\Bundle\CoreBundle\Command\Targeting {
    class MigrateElementNamesCommand extends \pimcore\console\abstractcommand {
        /**
         * @var Db\Connection
         */
        private $db;
        /**
         * @var NamingStrategyInterface
         */
        private $namingStrategy;
        /**
         * @var array
         */
        private $updates;
        /**
         * @var bool
         */
        private $runCommand;

        public function __construct(NamingStrategyInterface $namingStrategy) {}
        protected function configure() {}
        protected function interact(InputInterface $input, OutputInterface $output) {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        private function buildQuery() : QueryBuilder {}
        private function processRow(array $row) {}
        private function processUpdates() {}
    }

}

namespace Pimcore\Bundle\CoreBundle\Command\Bundle {
    abstract class AbstractBundleCommand extends \pimcore\console\abstractcommand {
        /**
         * @var PimcoreBundleManager
         */
        protected $bundleManager;

        public function __construct(PimcoreBundleManager $bundleManager, ?string $name = null) {}
        protected function configureDescriptionAndHelp(string $description, string $help = null) : self {}
        protected function configureFailWithoutErrorOption() : self {}
        protected function buildName(string $name) {}
        protected function handlePrerequisiteError(string $message) : int {}
        protected function getBundle() : PimcoreBundleInterface {}
        protected function setupInstaller(PimcoreBundleInterface $bundle) {}
        protected function normalizeBundleIdentifier(string $bundleIdentifier) : string {}
        protected function getShortClassName(string $className) {}
    }

    class EnableCommand extends \pimcore\bundle\corebundle\command\bundle\abstractbundlecommand {
        /**
         * @var PostStateChange
         */
        private $postStateChangeHelper;

        public function __construct(PimcoreBundleManager $bundleManager, PostStateChange $postStateChangeHelper) {}
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        private function getAvailableBundleShortNameMapping(PimcoreBundleManager $bundleManager) : array {}
        private function resolveState(InputInterface $input) : array {}
    }

    class InstallCommand extends \pimcore\bundle\corebundle\command\bundle\abstractbundlecommand {
        /**
         * @var PostStateChange
         */
        private $postStateChangeHelper;

        public function __construct(PimcoreBundleManager $bundleManager, PostStateChange $postStateChangeHelper) {}
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    class UninstallCommand extends \pimcore\bundle\corebundle\command\bundle\abstractbundlecommand {
        /**
         * @var PostStateChange
         */
        private $postStateChangeHelper;

        public function __construct(PimcoreBundleManager $bundleManager, PostStateChange $postStateChangeHelper) {}
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    class DisableCommand extends \pimcore\bundle\corebundle\command\bundle\abstractbundlecommand {
        /**
         * @var PostStateChange
         */
        private $postStateChangeHelper;

        public function __construct(PimcoreBundleManager $bundleManager, PostStateChange $postStateChangeHelper) {}
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    class UpdateCommand extends \pimcore\bundle\corebundle\command\bundle\abstractbundlecommand {
        /**
         * @var PostStateChange
         */
        private $postStateChangeHelper;

        public function __construct(PimcoreBundleManager $bundleManager, PostStateChange $postStateChangeHelper) {}
        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
    }

    class ListCommand extends \pimcore\bundle\corebundle\command\bundle\abstractbundlecommand {
        protected function configure() {}
/** @var PimcoreBundleInterface $bundle */
        protected function execute(/** @var PimcoreBundleInterface $bundle */
InputInterface $input, /** @var PimcoreBundleInterface $bundle */
OutputInterface $output) {}
        private function formatBool($state) : string {}
    }

}

namespace Pimcore\Bundle\CoreBundle\Command\Bundle\Helper {
    class PostStateChange {
        /**
         * @var CacheClearer
         */
        private $cacheClearer;
        /**
         * @var AssetsInstaller
         */
        private $assetsInstaller;
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;

        public function __construct(CacheClearer $cacheClearer, AssetsInstaller $assetsInstaller, EventDispatcherInterface $eventDispatcher) {}
        public static function configureStateChangeCommandOptions(Command $command) {}
        public function runPostStateChangeCommands(PimcoreStyle $io, string $environment) {}
    }

}

namespace Pimcore\Bundle\CoreBundle\Command\Document {
    class MigrateTagNamingStrategyCommand extends \pimcore\console\abstractcommand {
    use \pimcore\console\traits\dryrun;

        /**
         * @var array
         */
        private $validDocumentTypes;
        /**
         * @var array
         */
        private $validMigrationStrategies;
        /**
         * @var CacheInterface
         */
        private $cache;
        /**
         * @var array
         */
        private $updateQueries;

        /**
         * @inheritDoc
         */
        protected function configure() {}
/** @var FormatterHelper $formatter */
        protected function initialize(/** @var FormatterHelper $formatter */
InputInterface $input, /** @var FormatterHelper $formatter */
OutputInterface $output) {}
        protected function interact(InputInterface $input, OutputInterface $output) {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        private function dumpQueries() {}
        private function prepareRenames(array $nameMapping) : array {}
/** @var Statement $stmt */
        private function processRenames(/** @var Statement $stmt */
array $nameMapping) {}
/** @var Application $application */
        private function getCache(/** @var Application $application */
AbstractMigrationStrategy $migrationStrategy) : CacheInterface {}
        /** @var AbstractMigrationStrategy $strategy */
        private function getMigrationStrategy() : AbstractMigrationStrategy {}
        /** @var NamingStrategyInterface $strategy */
        private function getNamingStrategy() : NamingStrategyInterface {}
        /**
         * Gets document IDs and filters ignored ones
         *
         * @return array
         */
        private function getDocumentIds() : array {}
        /**
         * Returns all document IDs for documents matching valid types
         *
         * @return array
         */
        private function getAllDocumentIds() : array {}
        private function getDocuments(array $documentIds) : \Generator {}
        /**
         * @return \Symfony\Component\DependencyInjection\ContainerInterface
         */
        private function getContainer() {}
    }

    class GeneratePagePreviews extends \pimcore\console\abstractcommand {
        /**
         * @inheritDoc
         */
        protected function configure() {}
/**
 * @var Document\Page $doc
 */
        protected function execute(/**
 * @var Document\Page $doc
 */
InputInterface $input, /**
 * @var Document\Page $doc
 */
OutputInterface $output) {}
    }

}

namespace Pimcore\Bundle\CoreBundle\Command\Definition\Import {
    class ClassCommand extends \pimcore\bundle\corebundle\command\definition\import\abstractstructureimportcommand {
        /**
         * Get type
         *
         * @return string
         */
        protected function getType() {}
        protected function getDefinitionName($filename) {}
        protected function loadDefinition($name) {}
        protected function createDefinition($name) {}
        protected function import(AbstractModel $definition, $json) {}
    }

    abstract class AbstractStructureImportCommand extends \pimcore\console\abstractcommand {
    use \pimcore\console\traits\dryrun;

        protected function configure() {}
        protected function execute(InputInterface $input, OutputInterface $output) {}
        /**
         * Validate and return path to JSON file
         *
         * @return string
         */
        protected function getPath() {}
        protected function getJson($path) {}
/** @var QuestionHelper $helper */
        protected function askConfirmation(/** @var QuestionHelper $helper */
$name) {}
        /**
         * Get type
         *
         * @return string
         */
        abstract protected function getType() ;
        abstract protected function getDefinitionName($filename) ;
        abstract protected function loadDefinition($name) ;
        abstract protected function createDefinition($name) ;
        abstract protected function import(AbstractModel $definition, $json) ;
    }

    class ObjectBrickCommand extends \pimcore\bundle\corebundle\command\definition\import\abstractstructureimportcommand {
        /**
         * Get type
         *
         * @return string
         */
        protected function getType() {}
        protected function getDefinitionName($filename) {}
        protected function loadDefinition($name) {}
        protected function createDefinition($name) {}
        protected function import(AbstractModel $definition, $json) {}
    }

    class FieldCollectionCommand extends \pimcore\bundle\corebundle\command\definition\import\abstractstructureimportcommand {
        /**
         * Get type
         *
         * @return string
         */
        protected function getType() {}
        protected function getDefinitionName($filename) {}
        protected function loadDefinition($name) {}
        protected function createDefinition($name) {}
        protected function import(AbstractModel $definition, $json) {}
    }

    class CustomLayoutCommand extends \pimcore\bundle\corebundle\command\definition\import\abstractstructureimportcommand {
        protected function configure() {}
        /**
         * Get type.
         *
         * @return string
         */
        protected function getType() {}
        protected function getDefinitionName($filename) {}
        protected function loadDefinition($name) {}
        protected function createDefinition($name) {}
        protected function import(AbstractModel $customLayout = null, $json = null) {}
    }

}

namespace Pimcore\Bundle\CoreBundle\DependencyInjection {
    class Configuration implements \symfony\component\config\definition\configurationinterface {
        /**
         * @var PlaceholderProcessor
         */
        private $placeholderProcessor;
        private $placeholders;

        public function __construct() {}
        /**
         * Generates the configuration tree builder.
         *
         * @return \Symfony\Component\Config\Definition\Builder\TreeBuilder The tree builder
         */
        public function getConfigTreeBuilder() {}
        private function addMaintenanceNode(ArrayNodeDefinition $rootNode) {}
        private function addGeneralNode(ArrayNodeDefinition $rootNode) {}
        private function addServicesNode(ArrayNodeDefinition $rootNode) {}
        private function addModelsNode(ArrayNodeDefinition $rootNode) {}
        private function addHttpClientNode(ArrayNodeDefinition $rootNode) {}
        private function addApplicationLogNode(ArrayNodeDefinition $rootNode) {}
        private function addAssetNode(ArrayNodeDefinition $rootNode) {}
        private function addObjectsNode(ArrayNodeDefinition $rootNode) {}
        private function addEncryptionNode(ArrayNodeDefinition $rootNode) {}
        private function addDocumentsNode(ArrayNodeDefinition $rootNode) {}
        private function addImplementationLoaderNode(ArrayNodeDefinition $node, $name) {}
        private function addRoutingNode(ArrayNodeDefinition $rootNode) {}
/** @var ArrayNodeDefinition|NodeDefinition $prototype */
        private function addContextNode(/** @var ArrayNodeDefinition|NodeDefinition $prototype */
ArrayNodeDefinition $rootNode) {}
        private function addAdminNode(ArrayNodeDefinition $rootNode) {}
        private function addAdminSessionAttributeBags(ArrayNodeDefinition $adminNode) {}
        private function addSecurityNode(ArrayNodeDefinition $rootNode) {}
        private function addWebProfilerNode(ArrayNodeDefinition $rootNode) {}
        private function addRoutesChild(ArrayNodeDefinition $parent, $name) {}
        private function addCacheNode(ArrayNodeDefinition $rootNode) {}
        private function addEmailNode(ArrayNodeDefinition $rootNode) {}
        private function addNewsletterNode(ArrayNodeDefinition $rootNode) {}
        private function addCustomReportsNode(ArrayNodeDefinition $rootNode) {}
        private function addMigrationsNode(ArrayNodeDefinition $rootNode) {}
        private function addTargetingNode(ArrayNodeDefinition $rootNode) {}
        private function addSitemapsNode(ArrayNodeDefinition $rootNode) {}
        private function addMimeNode(ArrayNodeDefinition $rootNode) {}
        private function addWorkflowNode(ArrayNodeDefinition $rootNode) {}
    }

    class PimcoreCoreExtension extends \symfony\component\httpkernel\dependencyinjection\configurableextension implements \symfony\component\dependencyinjection\extension\prependextensioninterface {
        /**
         * @return string
         */
        public function getAlias() {}
        public function loadInternal(array $config, ContainerBuilder $container) {}
        private function configureModelFactory(ContainerBuilder $container, array $config) {}
        private function configureDocumentEditableNamingStrategy(ContainerBuilder $container, array $config) {}
        private function configureImplementationLoaders(ContainerBuilder $container, array $config) {}
        private function configureRouting(ContainerBuilder $container, array $config) {}
        private function configureCache(ContainerBuilder $container, LoaderInterface $loader, array $config) {}
        private function configureTranslations(ContainerBuilder $container, array $config) {}
        private function configureTargeting(ContainerBuilder $container, LoaderInterface $loader, array $config) {}
        private function configureTypedLocator(ContainerBuilder $container, string $locatorClass, array $services) {}
        private function configurePasswordEncoders(ContainerBuilder $container, array $config) {}
        private function configureMigrations(ContainerBuilder $container, array $config) {}
        private function configureGoogleAnalyticsFallbackServiceLocator(ContainerBuilder $container) {}
        private function configureSitemaps(ContainerBuilder $container, array $config) {}
        private function addContextRoutes(ContainerBuilder $container, array $config) {}
        public function prepend(ContainerBuilder $container) {}
        private function setExtensionConfig(ContainerBuilder $container, $name, array $config = [ ]) {}
        private function configureAdapterFactories(ContainerBuilder $container, $factories, $serviceLocatorId) {}
    }

}

namespace Pimcore\Bundle\CoreBundle\DependencyInjection\Config\Processor {
    class PlaceholderProcessor {
        public function mergePlaceholders(array $config, array $placeholders) : array {}
        private function processValue($value, array $placeholders) {}
        private function processArrayValue(array $value, array $placeholders) : array {}
    }

}

namespace Pimcore\Bundle\CoreBundle\DependencyInjection\Compiler {
    /**
     * The application logger has a dependency on the monolog.processor.psr_log_message
     * service which is only registered conditionally by the monolog bundle (depending on
     * if a handler using the PSR log message processor is registered). As the application
     * logger fails if the processor service is missing, we register it conditionally here.
     */
    class MonologPsrLogMessageProcessorPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    class TemplateVarsProviderPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    class AreabrickPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
/** @var \ReflectionClass $reflector */
        protected function autoloadAreabricks(/** @var \ReflectionClass $reflector */
ContainerBuilder $container, /** @var \ReflectionClass $reflector */
Definition $areaManagerDefinition, /** @var \ReflectionClass $reflector */
array $locatorMapping, /** @var \ReflectionClass $reflector */
array $excludedClasses) {}
        protected function handleContainerAwareDefinition(ContainerBuilder $container, Definition $definition, \ReflectionClass $reflector = null) {}
        protected function findBundleBricks(ContainerBuilder $container, string $name, array $metadata, array $excludedClasses = [ ]) : array {}
        protected function generateBrickId(\ReflectionClass $reflector) {}
        protected function generateServiceId($bundleName, $subNamespace, $className) {}
    }

    class RegisterMaintenanceTaskPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    class MonologPublicLoggerPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    /**
     * Adds tagged navigation renderers to navigation helper
     */
    class LongRunningHelperPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    class SessionConfiguratorPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
        protected function addTaggedConfigurators(ContainerBuilder $container) {}
    }

    /**
     * @deprecated
     */
    class LegacyTemplatePass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    /**
     * Set annotation loader to our own implementation normalizing admin routes: converts the prefix
     * pimcore_pimcoreadmin_ to just pimcore_admin_
     *
     */
    class RoutingLoaderPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    class TargetingOverrideHandlersPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
    use \symfony\component\dependencyinjection\compiler\prioritytaggedservicetrait;

        public function process(ContainerBuilder $container) {}
    }

    class WorkflowPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    /**
     * See original CacheCollectorPass in FrameworkBundle. This injects our core Pimcore cache into the cache collector.
     */
    class CacheCollectorPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    /**
     * Adds a call to set the PHP templating engine to all helpers implementing TemplatingEngineAwareHelperInterface
     */
    class TemplatingEngineAwareHelperPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    class RegisterImageOptimizersPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    /**
     * Adds tagged navigation renderers to navigation helper
     */
    class NavigationRendererPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    /**
     * Overrides the core web debug toolbar listener
     */
    class WebDebugToolbarListenerPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    /**
     * Our migration commands and installers rely on Doctrine Migrations, but don't demand to activate the migrations bundle.
     * However, as we extend the bundle commands to set up our migration commands, the bootstrapping relies on parameters
     * which are not set if the bundle is not loaded.
     *
     * This pass adds missing parameters which are needed by the bootstrap and initializes them with default values.
     */
    class DoctrineMigrationsParametersPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    class PimcoreGlobalTemplatingVariablesPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    /**
     * The debug.stopwatch service is always defined, so we can't just add it to services if defined. This
     * only adds the stopwatch to services if the debug flag is set.
     */
    class DebugStopwatchPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    /**
     * Sets a pimcore.service_controllers parameter which contains all controllers registered as service
     * as an id => class mapping. Controllers are recognized if they match one of the following:
     *
     *  - are tagged with the "controller.service_arguments" DI tag
     *  - extend Symfony\Bundle\FrameworkBundle\Controller\Controller
     *  - extend Symfony\Bundle\FrameworkBundle\Controller\AbstractController
     */
    class ServiceControllersPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

    class PhpTemplatingPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
        protected function findHelperBrokers(ContainerBuilder $container) {}
    }

    class ProfilerAliasPass implements \symfony\component\dependencyinjection\compiler\compilerpassinterface {
        public function process(ContainerBuilder $container) {}
    }

}

namespace Pimcore\Bundle\CoreBundle\EventListener {
    /**
     * Handles the attributes set by TemplateControllerInterface and injects them into the Template annotation which is
     * then processed by SensioFrameworkExtraBundle. This allows us to add view auto-rendering without depending on annotations.
     */
    class TemplateControllerListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @var ContainerInterface
         */
        protected $container;
        /**
         * @var string
         */
        protected $defaultEngine;

        public function __construct(ContainerInterface $container, $defaultEngine = 'twig') {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelView(GetResponseForControllerResultEvent $event) {}
    }

    class ResponseStackListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @var ResponseStack
         */
        private $responseStack;

        public function __construct(ResponseStack $responseStack) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    /**
     * @deprecated
     * Provides backward compatibility for PHP templates
     */
    class LegacyTemplateListener extends \sensio\bundle\frameworkextrabundle\eventlistener\templatelistener {
        /**
         * @var EngineInterface
         */
        private $templateEngine;

        /**
         * @return EngineInterface
         */
        public function getTemplateEngine() : EngineInterface {}
        public function setTemplateEngine(EngineInterface $templateEngine) : void {}
        public function onKernelView(KernelEvent $event) {}
        /**
         * {@inheritdoc}
         */
        public static function getSubscribedEvents() {}
        private function resolveDefaultParameters(Request $request, Template $template, $controller, $action) {}
    }

    class PimcoreHeaderListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        public static function getSubscribedEvents() {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    class SearchBackendListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onPostAddElement(ElementEventInterface $e) {}
        public function onPreDeleteElement(ElementEventInterface $e) {}
        public function onPostUpdateElement(ElementEventInterface $e) {}
    }

    class UUIDListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onPostAdd(Event $e) {}
        public function onPostDelete(Event $e) {}
        /**
         * @return bool
         */
        protected function isEnabled() {}
        protected function extractElement(Event $event) {}
    }

    class WorkflowManagementListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @var bool
         */
        protected $enabled;
        /**
         * @var Manager
         */
        private $workflowManager;
        /**
         * @var Registry
         */
        private $workflowRegistry;
        /**
         * @var Place\StatusInfo
         */
        private $placeStatusInfo;
        /**
         * @var RequestStack
         */
        private $requestStack;
        /**
         * @var ActionsButtonService
         */
        private $actionsButtonService;

        public function __construct(Manager $workflowManager, Registry $workflowRegistry, Place\StatusInfo $placeStatusInfo, RequestStack $requestStack, ActionsButtonService $actionsButtonService) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
/**
 * @var Asset|Document|ConcreteObject $element
 */
        public function onElementPostDelete(/**
 * @var Asset|Document|ConcreteObject $element
 */
ElementEventInterface $e) {}
        public function onAdminElementGetPreSendData(GenericEvent $e) {}
        private function enrichNotes(DataObject\AbstractObject $object, array $notes) {}
        private static function extractElementFromEvent(GenericEvent $e) {}
        public function enable() {}
        public function disable() {}
        /**
         * @return bool
         */
        public function isEnabled() {}
    }

    class MaintenancePageListener {
    use \pimcore\bundle\corebundle\eventlistener\traits\responseinjectiontrait;

        /**
         * @var KernelInterface
         */
        protected $kernel;
        /**
         * @var string
         */
        protected $templateCode;

        public function __construct(KernelInterface $kernel) {}
        public function setTemplateCode($code) {}
        /**
         * @return string
         */
        public function getTemplateCode() {}
        public function loadTemplateFromResource($path) {}
        public function onKernelRequest(GetResponseEvent $event) {}
    }

    class ElementTagsListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
/** @var \Pimcore\Model\Element\AbstractElement $baseElement */
        public function onPostCopy(/** @var \Pimcore\Model\Element\AbstractElement $baseElement */
ElementEventInterface $e) {}
        public function onPostAssetDelete(AssetEvent $e) {}
    }

    /**
     * Disables the web debug toolbar for frontend requests by admins (iframes inside admin interface)
     */
    class WebDebugToolbarListener extends \symfony\bundle\webprofilerbundle\eventlistener\webdebugtoolbarlistener {
        /**
         * @var RequestHelper
         */
        protected $requestHelper;
        /**
         * @var RequestMatcherFactory
         */
        protected $requestMatcherFactory;
        /**
         * @var array
         */
        protected $excludeRoutes;
        /**
         * @var RequestMatcherInterface[]
         */
        protected $excludeMatchers;

        public function setRequestHelper(RequestHelper $requestHelper) {}
        public function setRequestMatcherFactory(RequestMatcherFactory $requestMatcherFactory) {}
        public function setExcludeRoutes(array $excludeRoutes) {}
        protected function injectToolbar(Response $response, Request $request, array $nonces) {}
        /**
         * @return RequestMatcherInterface[]
         */
        protected function getExcludeMatchers() {}
    }

    class ResponseExceptionListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \psr\log\loggerawaretrait, \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        /**
         * @var ActionRenderer
         */
        protected $documentRenderer;
        /**
         * @var bool
         */
        protected $renderErrorPage;
        /**
         * @var ConnectionInterface
         */
        protected $db;

        public function __construct(DocumentRenderer $documentRenderer, ConnectionInterface $db, $renderErrorPage = true) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelException(GetResponseForExceptionEvent $event) {}
        protected function handleErrorPage(GetResponseForExceptionEvent $event) {}
        protected function logToHttpErrorLog(Request $request, $statusCode) {}
    }

    class ResponseHeaderListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @var ResponseHeaderResolver
         */
        private $responseHeaderResolver;

        public function __construct(ResponseHeaderResolver $responseHeaderResolver) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    class TranslationDebugListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @var Translator
         */
        private $translator;
        /**
         * @var string
         */
        private $parameterName;

        public function __construct(Translator $translator, string $parameterName) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelRequest(GetResponseEvent $event) {}
    }

    class EventedControllerListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @inheritdoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelController(FilterControllerEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    class PimcoreContextListener implements \psr\log\loggerawareinterface, \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \psr\log\loggerawaretrait;

        /**
         * @var PimcoreContextResolver
         */
        protected $resolver;
        /**
         * @var RequestStack
         */
        protected $requestStack;

        public function __construct(PimcoreContextResolver $resolver, RequestStack $requestStack) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelRequest(GetResponseEvent $event) {}
        protected function initializeContext($context, $request) {}
    }

    class ControllerViewModelListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @var ViewModelResolver
         */
        protected $viewModelResolver;

        public function __construct(ViewModelResolver $viewModelResolver) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelView(GetResponseForControllerResultEvent $event) {}
    }

}

namespace Pimcore\Bundle\CoreBundle\EventListener\Frontend {
    /**
     * Handles block state for sub requests (saves parent state and restores it after request completes)
     */
    class DocumentRendererListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        /**
         * @var ContainerService
         */
        protected $containerService;

        public function __construct(ContainerService $containerService) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onPreRender() {}
        public function onPostRender() {}
    }

    /**
     * If no document was found on the active request (not set by router or by initiator of a sub-request), try to find and
     * set a fallback document:
     *
     *  - if request is a sub-request, try to read document from master request
     *  - if all fails, try to find the nearest document by path
     */
    class DocumentFallbackListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        /**
         * @var RequestStack
         */
        protected $requestStack;
        /**
         * @var DocumentResolver
         */
        protected $documentResolver;
        /**
         * @var SiteResolver
         */
        protected $siteResolver;
        /**
         * @var Document\Service
         */
        protected $documentService;
        /**
         * @var array
         */
        protected $options;

        public function __construct(RequestStack $requestStack, DocumentResolver $documentResolver, SiteResolver $siteResolver, Document\Service $documentService, array $options = [ ]) {}
        protected function configureOptions(OptionsResolver $optionsResolver) {}
        /**
         * {@inheritdoc}
         */
        public static function getSubscribedEvents() {}
        public function onKernelRequest(GetResponseEvent $event) {}
    }

    class InternalWysiwygHtmlAttributeFilterListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait, \pimcore\bundle\corebundle\eventlistener\traits\responseinjectiontrait;

        public static function getSubscribedEvents() {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    class CookiePolicyNoticeListener {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait, \pimcore\bundle\corebundle\eventlistener\traits\responseinjectiontrait;

        /**
         * @var bool
         */
        protected $enabled;
        /**
         * @var string
         */
        protected $templateCode;
        /**
         * @var KernelInterface
         */
        protected $kernel;
        /**
         * @var Translator
         */
        protected $translator;

        public function __construct(KernelInterface $kernel) {}
        /**
         * @return bool
         */
        public function disable() {}
        /**
         * @return bool
         */
        public function enable() {}
        /**
         * @return bool
         */
        public function isEnabled() {}
        public function setTemplateCode($code) {}
        /**
         * @return string
         */
        public function getTemplateCode() {}
        public function loadTemplateFromResource($path) {}
        /**
         * @return Translator
         */
        public function getTranslator() {}
        public function setTranslator($translator) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
        protected function getTranslations($locale) {}
    }

    class LocaleListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        protected $lastLocale;

        /**
         * {@inheritdoc}
         */
        public static function getSubscribedEvents() {}
        public function onKernelRequest(GetResponseEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    /**
     * Handles element setup logic from request. Basically this does what the init() method
     * on the ZF frontend controller did.
     */
    class ElementListener implements \symfony\component\eventdispatcher\eventsubscriberinterface, \psr\log\loggerawareinterface {
    use \psr\log\loggerawaretrait, \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        const FORCE_ALLOW_PROCESSING_UNPUBLISHED_ELEMENTS = '_force_allow_processing_unpublished_elements';

        /**
         * @var DocumentResolver
         */
        protected $documentResolver;
        /**
         * @var EditmodeResolver
         */
        protected $editmodeResolver;
        /**
         * @var RequestHelper
         */
        protected $requestHelper;
        /**
         * @var UserLoader
         */
        protected $userLoader;
        /**
         * @var DocumentTargetingConfigurator
         */
        private $targetingConfigurator;

        public function __construct(DocumentResolver $documentResolver, EditmodeResolver $editmodeResolver, RequestHelper $requestHelper, UserLoader $userLoader, DocumentTargetingConfigurator $targetingConfigurator) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelRequest(GetResponseEvent $event) {}
        protected function handleVersion(Request $request, Document $document) {}
        protected function applyTargetGroups(Request $request, Document $document) {}
        protected function handleAdminUserDocumentParams(Request $request, Document $document) {}
        protected function handleEditmode(Document $document) {}
        protected function handleObjectParams(Request $request) {}
    }

    class GoogleTagManagerListener {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait, \pimcore\bundle\corebundle\eventlistener\traits\previewrequesttrait, \pimcore\bundle\corebundle\eventlistener\traits\responseinjectiontrait, \pimcore\bundle\corebundle\eventlistener\traits\enabledtrait;

        const BLOCK_HEAD_BEFORE_SCRIPT_TAG = 'beforeScriptTag';
        const BLOCK_BODY_AFTER_NOSCRIPT_TAG = 'afterNoscriptTag';
        const BLOCK_BODY_BEFORE_NOSCRIPT_TAG = 'beforeNoscriptTag';
        const BLOCK_HEAD_AFTER_SCRIPT_TAG = 'afterScriptTag';

        /**
         * @var SiteIdProvider
         */
        private $siteIdProvider;
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;
        /**
         * @var EngineInterface
         */
        private $templatingEngine;
        /**
         * @var array
         */
        private $headBlocks;
        /**
         * @var array
         */
        private $bodyBlocks;

        public function __construct(SiteIdProvider $siteIdProvider, EventDispatcherInterface $eventDispatcher, EngineInterface $templatingEngine) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
        private function generateCode(string $eventName, string $template, array $blockNames, array $data) : string {}
        private function renderTemplate(CodeEvent $event) : string {}
    }

    class FullPageCacheListener {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        /**
         * @var VisitorInfoStorageInterface
         */
        private $visitorInfoStorage;
        /**
         * @var SessionStatus
         */
        private $sessionStatus;
        /**
         * @var EventDispatcherInterface
         */
        private $eventDispatcher;
        /**
         * @var bool
         */
        protected $enabled;
        /**
         * @var bool
         */
        protected $stopResponsePropagation;
        /**
         * @var null|int
         */
        protected $lifetime;
        /**
         * @var bool
         */
        protected $addExpireHeader;
        /**
         * @var string|null
         */
        protected $disableReason;
        /**
         * @var string
         */
        protected $defaultCacheKey;

        public function __construct(VisitorInfoStorageInterface $visitorInfoStorage, SessionStatus $sessionStatus, EventDispatcherInterface $eventDispatcher) {}
        public function disable($reason = null) {}
        /**
         * @return bool
         */
        public function enable() {}
        /**
         * @return bool
         */
        public function isEnabled() {}
        public function setLifetime($lifetime) {}
        /**
         * @return int|null
         */
        public function getLifetime() {}
        public function disableExpireHeader() {}
        public function enableExpireHeader() {}
/** @var Response $response */
        public function onKernelRequest(/** @var Response $response */
GetResponseEvent $event) {}
        public function stopPropagationCheck(KernelEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
        private function responseCanBeCached(Response $response) : bool {}
        private function disabledByTargeting() : bool {}
    }

    /**
     * Handles block state for sub requests (saves parent state and restores it after request completes)
     */
    class BlockStateListener implements \psr\log\loggerawareinterface, \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \psr\log\loggerawaretrait, \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        /**
         * @var BlockStateStack
         */
        protected $blockStateStack;

        public function __construct(BlockStateStack $blockStateStack) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelRequest(GetResponseEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    class GoogleSearchConsoleVerificationListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        public static function getSubscribedEvents() {}
        public function onKernelRequest(GetResponseEvent $event) {}
    }

    /**
     * Adds Meta Data entries of document to HeadMeta view helper
     */
    class DocumentMetaDataListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        const FORCE_INJECTION = '_pimcore_force_document_meta_data_injection';

        /**
         * @var DocumentResolverService
         */
        protected $documentResolverService;
        /**
         * @var HeadMeta
         */
        protected $headMeta;

        public function __construct(DocumentResolverService $documentResolverService, HeadMeta $headMeta) {}
        /**
         * {@inheritdoc}
         */
        public static function getSubscribedEvents() {}
        public function onKernelRequest(GetResponseEvent $event) {}
    }

    class OutputTimestampListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
        const TIMESTAMP_OVERRIDE_PARAM_NAME = 'pimcore_override_output_timestamp';

        /**
         * @var OutputTimestampResolver
         */
        protected $outputTimestampResolver;

        public function __construct(OutputTimestampResolver $outputTimestampResolver) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelRequest(GetResponseEvent $event) {}
    }

    class DocumentStackListener implements \psr\log\loggerawareinterface, \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \psr\log\loggerawaretrait;

        protected $documents;
        protected $documentStack;

        public function __construct(DocumentStack $documentStack) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelRequest(GetResponseEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    /**
     * Sets canonical headers for hardlink documents
     */
    class HardlinkCanonicalListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        /**
         * @var DocumentResolver
         */
        protected $documentResolver;

        public function __construct(DocumentResolver $documentResolver) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelResponse(FilterResponseEvent $event) {}
        protected function handleHardlink(Request $request, Response $response, Document $document) {}
    }

    class GoogleAnalyticsCodeListener {
    use \pimcore\bundle\corebundle\eventlistener\traits\responseinjectiontrait, \pimcore\bundle\corebundle\eventlistener\traits\enabledtrait, \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait, \pimcore\bundle\corebundle\eventlistener\traits\previewrequesttrait;

        /**
         * @var Tracker
         */
        private $tracker;

        public function __construct(Tracker $tracker) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
    }

    /**
     * Runs before dynamic routing kicks in and resolves site + handles redirects
     *
     * TODO as this also handles the admin domain, a name without "Frontend" would be more suitable
     */
    class FrontendRoutingListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        /**
         * @var RequestHelper
         */
        protected $requestHelper;
        /**
         * @var RedirectHandler
         */
        protected $redirectHandler;
        /**
         * @var SiteResolver
         */
        protected $siteResolver;

        public function __construct(RequestHelper $requestHelper, RedirectHandler $redirectHandler, SiteResolver $siteResolver) {}
        /**
         * {@inheritdoc}
         */
        public static function getSubscribedEvents() {}
        public function onKernelRequest(GetResponseEvent $event) {}
        public function onKernelException(GetResponseForExceptionEvent $event) {}
        protected function resolveSite(Request $request, $path) {}
        protected function handleFrontControllerRedirect(GetResponseEvent $event, $path) {}
        protected function handleMainDomainRedirect(GetResponseEvent $event, bool $adminContext = false) {}
        private function resolveConfigDomainRedirectHost(Config\Config $config, Request $request) {}
    }

    /**
     * Modifies responses for editmode
     */
    class EditmodeListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait, \psr\log\loggerawaretrait;

        /**
         * @var EditmodeResolver
         */
        protected $editmodeResolver;
        /**
         * @var DocumentResolver
         */
        protected $documentResolver;
        /**
         * @var UserLoader
         */
        protected $userLoader;
        /**
         * @var PimcoreBundleManager
         */
        protected $bundleManager;
        /**
         * @var array
         */
        protected $contentTypes;

        public function __construct(EditmodeResolver $editmodeResolver, DocumentResolver $documentResolver, UserLoader $userLoader, PimcoreBundleManager $bundleManager) {}
        /**
         * @inheritdoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelRequest(GetResponseEvent $event) {}
        public function onKernelResponse(FilterResponseEvent $event) {}
        protected function contentTypeMatches(Response $response) {}
        protected function addEditmodeAssets(Document $document, Response $response) {}
        protected function buildHeadHtml(Document $document, $language) {}
        /**
         * @return array
         */
        protected function getEditmodeLibraries() {}
        /**
         * @return array
         */
        protected function getEditmodeScripts() {}
        /**
         * @return array
         */
        protected function getEditmodeStylesheets() {}
    }

    /**
     * If a contentTemplate attribute was set on the request (done by router when building a document route), extract the
     * value and set it on the Template annotation. This handles custom template files being configured on documents.
     */
    class ContentTemplateListener implements \symfony\component\eventdispatcher\eventsubscriberinterface {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait;

        /**
         * @var TemplateResolver
         */
        protected $templateResolver;

        public function __construct(TemplateResolver $templateResolver) {}
        /**
         * @inheritDoc
         */
        public static function getSubscribedEvents() {}
        public function onKernelView(GetResponseForControllerResultEvent $event) {}
    }

    class TagManagerListener {
    use \pimcore\bundle\corebundle\eventlistener\traits\pimcorecontextawaretrait, \pimcore\bundle\corebundle\eventlistener\traits\responseinjectiontrait, \pimcore\bundle\corebundle\eventlistener\traits\previewrequesttrait;

        /**
         * @var EditmodeResolver
         */
        private $editmodeResolver;
        /**
         * @var bool
         */
        protected $enabled;

        public function __construct(EditmodeResolver $editmodeResolver) {}
        /**
         * @return bool
         */
        public function disable() {}
        /**
         * @return bool
         */
        public function enable() {}
        /**
         * @return bool
         */
        public function isEnabled() {}
/** @var Tag\Config $tag */
        public function onKernelResponse(/** @var Tag\Config $tag */
FilterResponseEvent $event) {}
    }

}

namespace Pimcore\Bundle\CoreBundle\EventListener\Traits {
    trait PimcoreContextAwareTrait {
        /**
         * @var PimcoreContextResolver
         */
        private $pimcoreContextResolver;
        public function setPimcoreContextResolver(PimcoreContextResolver $contextResolver) {}
        protected function matchesPimcoreContext(Request $request, $context) {}
    }

    trait ResponseInjectionTrait {
        /**
         * @var ResponseHelper
         */
        private $responseHelper;
        public function setResponseHelper(ResponseHelper $responseHelper) {}
        protected function isHtmlResponse(Response $response) : bool {}
        protected function injectBeforeHeadEnd(Response $response, $code) {}
    }

    trait EnabledTrait {
        /**
         * @var bool
         */
        private $enabled;
        public function disable() {}
        public function enable() {}
        public function isEnabled() : bool {}
    }

    trait PreviewRequestTrait {
        protected function isPreviewRequest(Request $request) {}
    }

}

?>
